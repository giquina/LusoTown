68150b7109a7d1a5c63a84ab78b269ac
/**
 * LusoBot Advanced Lusophone Cultural AI Assistant Engine
 * 
 * Enhanced AI system providing comprehensive Lusophone cultural expertise, 
 * advanced language learning support, emotional intelligence with saudade understanding,
 * voice interaction capabilities, and therapeutic Portuguese cultural guidance.
 * 
 * Enhanced Features:
 * - Deep Portuguese cultural knowledge across all Lusophone nations
 * - Advanced emotional intelligence and therapeutic support
 * - Portuguese language learning assistance with pronunciation guides
 * - Voice interaction with authentic Portuguese cultural personalities
 * - Cultural etiquette and business guidance
 * - Homesickness and cultural adaptation support
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LusoBotEngine: function() {
        return LusoBotEngine;
    },
    LusoBotSession: function() {
        return LusoBotSession;
    },
    PORTUGUESE_CULTURAL_KNOWLEDGE: function() {
        return PORTUGUESE_CULTURAL_KNOWLEDGE;
    },
    SaudadeEngine: function() {
        return SaudadeEngine;
    }
});
const _portugueseculturalknowledge = require("../config/portuguese-cultural-knowledge");
const _portugueselanguagelearning = require("../config/portuguese-language-learning");
const _voiceinteractionsystem = require("../config/voice-interaction-system");
const PORTUGUESE_CULTURAL_KNOWLEDGE = {
    // Historical Periods
    history: {
        discoveries: {
            period: "15th-16th centuries",
            keywords: [
                "navega\xe7\xf5es",
                "descobrimentos",
                "vasco da gama",
                "pedro \xe1lvares cabral"
            ],
            significance: "Lusophone maritime expansion and global influence",
            cultural_impact: "Foundation of Lusophone global identity and pride"
        },
        revolution_1974: {
            period: "25 de Abril 1974",
            keywords: [
                "revolu\xe7\xe3o dos cravos",
                "liberdade",
                "democracia",
                "estado novo"
            ],
            significance: "End of dictatorship and beginning of modern Portugal",
            cultural_impact: "Symbol of peaceful change and democratic values"
        },
        eu_membership: {
            period: "1986-present",
            keywords: [
                "uni\xe3o europeia",
                "moderniza\xe7\xe3o",
                "desenvolvimento"
            ],
            significance: "Portugal's integration into European community",
            cultural_impact: "Balance between European identity and Portuguese heritage"
        }
    },
    // Regional Cultures
    regions: {
        north: {
            characteristics: [
                "Traditional",
                "Religious",
                "Rural heritage"
            ],
            cuisine: [
                "Francesinha",
                "Caldo verde",
                "Vinho verde"
            ],
            traditions: [
                "Festa de S\xe3o Jo\xe3o",
                "Romarias",
                "Trabalho comunit\xe1rio"
            ],
            dialects: [
                "Mirand\xeas influence",
                "Rural expressions"
            ],
            music: [
                "Folk dances",
                "Traditional songs"
            ]
        },
        center: {
            characteristics: [
                "Academic",
                "Historical",
                "Balanced"
            ],
            cuisine: [
                "Leit\xe3o da Bairrada",
                "Queijo da Serra",
                "Ovos moles"
            ],
            traditions: [
                "Queima das Fitas",
                "Festa dos Tabuleiros"
            ],
            dialects: [
                "Standard Lusophone",
                "Academic language"
            ],
            music: [
                "University traditions",
                "Classical influence"
            ]
        },
        south: {
            characteristics: [
                "Warm",
                "Agricultural",
                "Moorish influence"
            ],
            cuisine: [
                "Cataplana",
                "Migas",
                "Medronho"
            ],
            traditions: [
                "Alentejo singing",
                "Cork harvesting"
            ],
            dialects: [
                "Alentejo accent",
                "Slower pace"
            ],
            music: [
                "Cante alentejano",
                "Traditional ballads"
            ]
        },
        lisbon: {
            characteristics: [
                "Cosmopolitan",
                "Historic",
                "Diverse"
            ],
            cuisine: [
                "Past\xe9is de nata",
                "Bacalhau",
                "International fusion"
            ],
            traditions: [
                "Santos Populares",
                "Fado houses"
            ],
            dialects: [
                "Standard Lusophone",
                "Urban slang"
            ],
            music: [
                "Fado",
                "Modern Portuguese music"
            ]
        },
        azores: {
            characteristics: [
                "Island life",
                "Nature-focused",
                "Community-oriented"
            ],
            cuisine: [
                "Cozido das Furnas",
                "Queijo S\xe3o Jorge",
                "Lingui\xe7a"
            ],
            traditions: [
                "Festa do Divino Esp\xedrito Santo",
                "Whaling heritage"
            ],
            dialects: [
                "Island expressions",
                "Archaic terms"
            ],
            music: [
                "Chamarrita",
                "Folk songs"
            ]
        },
        madeira: {
            characteristics: [
                "Subtropical",
                "Tourism-oriented",
                "Agricultural"
            ],
            cuisine: [
                "Espetada",
                "Bolo de mel",
                "Poncha"
            ],
            traditions: [
                "Festa da Flor",
                "New Year fireworks"
            ],
            dialects: [
                "Madeirense accent",
                "Unique expressions"
            ],
            music: [
                "Bailinho madeirense",
                "Folk traditions"
            ]
        }
    },
    // Cuisine Knowledge
    cuisine: {
        staples: {
            "bacalhau": {
                significance: 'National fish, "fiel amigo" (faithful friend)',
                preparations: [
                    "365 ways to prepare",
                    "Christmas tradition",
                    "Identity symbol"
                ],
                cultural_meaning: "Represents Lusophone ingenuity and tradition"
            },
            "p\xe3o": {
                significance: "Daily bread, center of meals",
                varieties: [
                    "Broa de milho",
                    "P\xe3o de centeio",
                    "P\xe3o alentejano"
                ],
                cultural_meaning: "Hospitality and sharing"
            },
            "vinho": {
                significance: "Wine culture deeply embedded",
                regions: [
                    "Douro",
                    "Alentejo",
                    "Vinho Verde",
                    "Porto"
                ],
                cultural_meaning: "Celebration, tradition, quality of life"
            }
        },
        traditional_dishes: {
            "cozido_portuguesa": "National stew representing unity in diversity",
            "francesinha": "Porto's hearty sandwich, local pride",
            "pasteis_nata": "Sweet symbol of Lusophone culinary expertise",
            "cataplana": "Algarve seafood celebration",
            "bifana": "Everyday comfort food, working-class identity"
        },
        food_customs: {
            "sobremesa": "Always room for dessert, family time extension",
            "petiscos": "Small plates culture, social bonding",
            "caf\xe9": "Coffee culture, daily social ritual",
            "jantar_familia": "Family dinner sacred time"
        }
    },
    // Fado and Music
    music: {
        fado: {
            essence: "Soul of Portuguese music, expression of saudade",
            types: [
                "Fado de Lisboa",
                "Fado de Coimbra",
                "Fado vadio"
            ],
            themes: [
                "Love",
                "Loss",
                "Destiny",
                "Homeland",
                "Nostalgia"
            ],
            cultural_role: "Emotional outlet, cultural identity, UNESCO heritage",
            legendary_figures: [
                "Am\xe1lia Rodrigues",
                "Alfredo Marceneiro",
                "Carlos do Carmo"
            ]
        },
        folk_music: {
            "cante_alentejano": "UNESCO heritage, group singing tradition",
            "vira": "Folk dance music, celebration and community",
            "corridinho": "Algarve folk dance, joy and festivity",
            "chamarrita": "Azorean folk music, island identity"
        },
        modern_music: {
            evolution: "From folk to contemporary, maintaining Lusophone soul",
            artists: [
                "Mariza",
                "Dulce Pontes",
                "Madredeus",
                "Deolinda"
            ],
            themes: "Modern life with traditional emotions"
        }
    },
    // Language and Expressions
    language: {
        saudade: {
            definition: "Untranslatable feeling of longing, missing, nostalgic love",
            usage: "Central to Lusophone emotional expression",
            cultural_importance: "Defines Lusophone character and worldview",
            expressions: [
                "Tenho saudades",
                "Mata saudades",
                "Morrer de saudades"
            ]
        },
        common_expressions: {
            "desenrascan\xe7o": "Lusophone ability to solve problems creatively",
            "fado": "Fate, destiny - acceptance of life's ups and downs",
            "cora\xe7\xe3o": "Heart - central to emotional expression",
            "fam\xedlia": "Family - core value and social unit",
            "amizade": "Friendship - deep, lasting relationships"
        },
        regional_dialects: {
            pronunciation: "Varies significantly by region",
            vocabulary: "Local words and expressions",
            formal_vs_informal: "Lusophone hierarchy in language use"
        }
    }
};
class SaudadeEngine {
    static detectSaudade(message, language) {
        const saudadeKeywords = [
            // Lusophone
            "saudades",
            "saudade",
            "falta",
            "nostalgia",
            "longe",
            "casa",
            "fam\xedlia",
            "terra",
            "portugal",
            "p\xe1tria",
            "ra\xedzes",
            "origem",
            "cora\xe7\xe3o",
            // English equivalents
            "miss",
            "missing",
            "homesick",
            "nostalgia",
            "homeland",
            "roots",
            "family",
            "heritage",
            "belong",
            "longing"
        ];
        const communityKeywords = [
            "comunidade",
            "amigos",
            "vizinhos",
            "conv\xedvio",
            "uni\xe3o",
            "community",
            "friends",
            "neighbors",
            "gathering",
            "belonging"
        ];
        const heritageKeywords = [
            "tradi\xe7\xe3o",
            "cultura",
            "costumes",
            "heran\xe7a",
            "hist\xf3ria",
            "tradition",
            "culture",
            "customs",
            "heritage",
            "history"
        ];
        const text = message.toLowerCase();
        let saudade = 0;
        let community = 0;
        let heritage = 0;
        let nostalgia = 0;
        let hope = 0;
        // Detect saudade intensity
        saudadeKeywords.forEach((keyword)=>{
            if (text.includes(keyword)) {
                saudade += 0.2;
                nostalgia += 0.15;
            }
        });
        // Detect community longing
        communityKeywords.forEach((keyword)=>{
            if (text.includes(keyword)) {
                community += 0.25;
                hope += 0.1;
            }
        });
        // Detect heritage connection
        heritageKeywords.forEach((keyword)=>{
            if (text.includes(keyword)) {
                heritage += 0.3;
                hope += 0.15;
            }
        });
        // Context-based adjustments
        if (text.includes("sozinho") || text.includes("alone")) {
            saudade += 0.3;
            community += 0.2;
        }
        if (text.includes("festa") || text.includes("celebration")) {
            hope += 0.4;
            community += 0.3;
        }
        return {
            saudade: Math.min(saudade, 1),
            nostalgia: Math.min(nostalgia, 1),
            hope: Math.min(hope, 1),
            community: Math.min(community, 1),
            heritage: Math.min(heritage, 1)
        };
    }
    static generateSaudadeResponse(tone, language) {
        if (tone.saudade > 0.6) {
            return language === "pt" ? "Compreendo essa saudade profunda que sentes. \xc9 algo muito portugu\xeas, essa capacidade de amar intensamente mesmo \xe0 dist\xe2ncia. A nossa comunidade est\xe1 aqui para te acolher." : "I understand that deep saudade you're feeling. It's something very Lusophone, this ability to love intensely even from a distance. Our community is here to embrace you.";
        }
        if (tone.nostalgia > 0.5) {
            return language === "pt" ? "A nostalgia \xe9 doce e amarga ao mesmo tempo, n\xe3o \xe9? Faz parte de quem somos. Que tal partilharmos algumas mem\xf3rias ou tradi\xe7\xf5es que te fazem sentir mais pr\xf3ximo de casa?" : "Nostalgia is sweet and bitter at the same time, isn't it? It's part of who we are. How about sharing some memories or traditions that make you feel closer to home?";
        }
        if (tone.community > 0.5) {
            return language === "pt" ? "O sentido de comunidade \xe9 fundamental para n\xf3s, portugueses. H\xe1 sempre espa\xe7o para mais uma pessoa na nossa mesa e no nosso cora\xe7\xe3o." : "The sense of community is fundamental for us Lusophone. There's always room for one more person at our table and in our hearts.";
        }
        return language === "pt" ? "Estou aqui para te ajudar a navegar tanto as emo\xe7\xf5es como a vida pr\xe1tica na comunidade de falantes de portugu\xeas." : "I'm here to help you navigate both emotions and practical life in the Portuguese-speaking community.";
    }
}
class LusoBotEngine {
    static{
        this.knowledge = PORTUGUESE_CULTURAL_KNOWLEDGE;
    }
    static{
        this.saudadeEngine = SaudadeEngine;
    }
    static{
        this.voiceSystem = _voiceinteractionsystem.voiceInteractionSystem;
    }
    static{
        this.culturalTraditions = _portugueseculturalknowledge.PORTUGUESE_CULTURAL_TRADITIONS;
    }
    static{
        this.emotionalSupport = _portugueseculturalknowledge.EMOTIONAL_SUPPORT_RESPONSES;
    }
    static{
        this.languageModules = _portugueselanguagelearning.LANGUAGE_LEARNING_MODULES;
    }
    static async generateResponse(message, context, language) {
        // Enhanced emotional tone detection with cultural analysis
        const emotionalTone = this.saudadeEngine.detectSaudade(message, language);
        const culturalAnalysis = (0, _portugueseculturalknowledge.analyzeCulturalContext)(message, language);
        // Identify cultural context with advanced pattern matching
        const culturalContext = this.identifyCulturalContext(message, language);
        // Check for specific therapeutic needs
        const therapeuticContext = this.identifyTherapeuticNeeds(message, emotionalTone, context);
        // Check for language learning opportunities
        const languageLearningContext = this.identifyLanguageLearningNeeds(message, context);
        // Generate appropriate response with enhanced intelligence
        const response = await this.generateAdvancedContextualResponse(message, culturalContext, emotionalTone, context, language, culturalAnalysis, therapeuticContext, languageLearningContext);
        // Generate comprehensive suggestions including voice, therapy, and learning
        const suggestions = this.generateAdvancedSuggestions(culturalContext, emotionalTone, context, language, culturalAnalysis, therapeuticContext, languageLearningContext);
        return {
            id: `lusobot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            role: "assistant",
            content: response,
            timestamp: new Date(),
            language,
            culturalContext: {
                ...culturalContext,
                traditions: culturalAnalysis.traditions.map((t)=>t.id),
                culturalDepth: culturalAnalysis.culturalDepth,
                suggestedPersonality: culturalAnalysis.suggestedPersonality.id
            },
            emotionalTone,
            suggestions,
            metadata: {
                ...context,
                therapeuticValue: therapeuticContext ? 0.8 : 0.3,
                languageLearningOpportunity: languageLearningContext ? true : false,
                recommendedVoicePersonality: culturalAnalysis.suggestedPersonality.id
            }
        };
    }
    static identifyTherapeuticNeeds(message, emotionalTone, context) {
        // Identify if user needs emotional/therapeutic support
        const therapeuticTriggers = [
            "lonely",
            "sad",
            "homesick",
            "lost",
            "anxious",
            "stressed"
        ];
        const messageText = message.toLowerCase();
        const needsTherapy = therapeuticTriggers.some((trigger)=>messageText.includes(trigger)) || emotionalTone.saudade > 0.6 || emotionalTone.nostalgia > 0.7 || context.therapeuticNeeds?.length > 0;
        if (needsTherapy) {
            const supportType = emotionalTone.saudade > 0.6 ? "homesickness" : emotionalTone.nostalgia > 0.7 ? "cultural_isolation" : messageText.includes("anxious") || messageText.includes("stress") ? "language_anxiety" : "general_support";
            return (0, _portugueseculturalknowledge.findEmotionalSupport)(supportType);
        }
        return null;
    }
    static identifyLanguageLearningNeeds(message, context) {
        const learningKeywords = [
            "learn",
            "practice",
            "pronounce",
            "grammar",
            "vocabulary",
            "accent",
            "dialect"
        ];
        const messageText = message.toLowerCase();
        const needsLearning = learningKeywords.some((keyword)=>messageText.includes(keyword)) || context.languageLearningGoals?.length > 0 || context.languageProficiency !== "native";
        if (needsLearning) {
            // Determine appropriate level and topic
            const level = context.languageProficiency === "beginner" ? "A1" : context.languageProficiency === "intermediate" ? "B1" : context.languageProficiency === "fluent" ? "C1" : "B1";
            const topic = messageText.includes("business") ? "business" : messageText.includes("culture") ? "culture" : messageText.includes("pronounce") ? "pronunciation" : "conversation";
            return (0, _portugueselanguagelearning.generatePersonalizedLesson)(level, [
                topic
            ], context.culturalBackground?.[0] || "portuguese");
        }
        return null;
    }
    static async generateAdvancedContextualResponse(message, culturalContext, emotionalTone, userContext, language, culturalAnalysis, therapeuticContext, languageLearningContext) {
        // Priority 1: Therapeutic response if needed
        if (therapeuticContext && (emotionalTone.saudade > 0.5 || emotionalTone.nostalgia > 0.5)) {
            const responses = therapeuticContext.responses;
            const selectedResponse = responses[Math.floor(Math.random() * responses.length)];
            return selectedResponse[language];
        }
        // Priority 2: Language learning if requested
        if (languageLearningContext && message.toLowerCase().includes("learn")) {
            return language === "pt" ? `Vou ajudar-te com o português! Identifiquei que podes beneficiar de ${languageLearningContext.title[language]}. Vamos começar com exercícios adequados ao teu nível.` : `I'll help you with Portuguese! I identified that you could benefit from ${languageLearningContext.title[language]}. Let's start with exercises appropriate to your level.`;
        }
        // Priority 3: Cultural tradition responses
        if (culturalAnalysis.traditions.length > 0) {
            const tradition = culturalAnalysis.traditions[0];
            return language === "pt" ? `${tradition.name.pt} é uma tradição muito especial! ${tradition.significance.pt} ${tradition.modernPractice.pt}` : `${tradition.name.en} is a very special tradition! ${tradition.significance.en} ${tradition.modernPractice.en}`;
        }
        // Priority 4: Voice personality suggestion
        if (userContext.preferredVoicePersonality || culturalAnalysis.suggestedPersonality) {
            const personality = culturalAnalysis.suggestedPersonality;
            return language === "pt" ? `Olá! Sou o LusoBot com personalidade cultural ${personality.name.pt}. Estou aqui para te ajudar com tudo relacionado à cultura portuguesa. ${personality.speechPatterns.greetings[0]?.text || "Como posso ajudar-te hoje?"}` : `Hello! I'm LusoBot with ${personality.name.en} cultural personality. I'm here to help you with everything Portuguese culture related. ${personality.speechPatterns.greetings[0]?.text || "How can I help you today?"}`;
        }
        // Fallback to original contextual response generation
        return this.generateContextualResponse(message, culturalContext, emotionalTone, userContext, language);
    }
    static generateAdvancedSuggestions(culturalContext, emotionalTone, userContext, language, culturalAnalysis, therapeuticContext, languageLearningContext) {
        const suggestions = [];
        // Voice interaction suggestions
        if (culturalAnalysis.suggestedPersonality) {
            suggestions.push({
                type: "voice",
                title: language === "pt" ? `Conversar com ${culturalAnalysis.suggestedPersonality.name.pt}` : `Chat with ${culturalAnalysis.suggestedPersonality.name.en}`,
                description: language === "pt" ? `Personalidade vocal ${culturalAnalysis.suggestedPersonality.region} especializada em ${culturalAnalysis.suggestedPersonality.culturalSpecialties[0]}` : `${culturalAnalysis.suggestedPersonality.region} voice personality specialized in ${culturalAnalysis.suggestedPersonality.culturalSpecialties[0]}`,
                action: "speak",
                priority: "high",
                culturalRelevance: 0.9,
                voicePersonality: culturalAnalysis.suggestedPersonality.id,
                therapeuticValue: culturalAnalysis.suggestedPersonality.characteristics.empathy
            });
        }
        // Language learning suggestions
        if (languageLearningContext) {
            suggestions.push({
                type: "language",
                title: languageLearningContext.title[language],
                description: language === "pt" ? `Módulo de ${languageLearningContext.duration} minutos com exercícios culturais` : `${languageLearningContext.duration}-minute module with cultural exercises`,
                action: "learn",
                priority: "high",
                culturalRelevance: 0.85,
                languageLevel: languageLearningContext.level,
                therapeuticValue: 0.6
            });
        }
        // Therapeutic support suggestions
        if (therapeuticContext) {
            therapeuticContext.followUpActions.forEach((action)=>{
                suggestions.push({
                    type: "therapeutic",
                    title: language === "pt" ? action.replace(/^[a-z]/, (m)=>m.toUpperCase()) : action,
                    description: language === "pt" ? "Apoio emocional com contexto cultural portugu\xeas" : "Emotional support with Portuguese cultural context",
                    action: "support",
                    priority: "high",
                    culturalRelevance: 0.9,
                    therapeuticValue: 0.95
                });
            });
        }
        // Cultural tradition exploration
        culturalAnalysis.traditions.forEach((tradition)=>{
            suggestions.push({
                type: "cultural",
                title: tradition.name[language],
                description: language === "pt" ? `Explorar tradição ${tradition.countries.join(", ")}` : `Explore ${tradition.countries.join(", ")} tradition`,
                action: "learn",
                priority: "medium",
                culturalRelevance: 1.0,
                therapeuticValue: 0.7
            });
        });
        // Pronunciation practice if language learning detected
        if (userContext.languageProficiency !== "native") {
            const pronunciationGuide = _portugueselanguagelearning.PRONUNCIATION_GUIDES[0] // Get first available guide
            ;
            if (pronunciationGuide) {
                suggestions.push({
                    type: "language",
                    title: language === "pt" ? `Praticar "${pronunciationGuide.phoneme}"` : `Practice "${pronunciationGuide.phoneme}"`,
                    description: pronunciationGuide.description[language],
                    action: "practice",
                    priority: "medium",
                    culturalRelevance: 0.8,
                    therapeuticValue: 0.5
                });
            }
        }
        // Add original navigation suggestions for new users
        if (userContext.communityLevel === "newcomer") {
            suggestions.push(...this.generateSuggestions(culturalContext, emotionalTone, userContext, language));
        }
        // Sort by priority and cultural relevance, limit to top 6
        return suggestions.sort((a, b)=>{
            const priorityWeight = {
                high: 3,
                medium: 2,
                low: 1
            };
            const aScore = priorityWeight[a.priority] + a.culturalRelevance * 2 + (a.therapeuticValue || 0);
            const bScore = priorityWeight[b.priority] + b.culturalRelevance * 2 + (b.therapeuticValue || 0);
            return bScore - aScore;
        }).slice(0, 6);
    }
    static identifyCulturalContext(message, language) {
        const text = message.toLowerCase();
        let region = "diaspora_uk";
        let topic = "community";
        let expertise = [];
        let confidence = 0.5;
        // Detect regional references
        if (text.includes("norte") || text.includes("porto") || text.includes("minho")) {
            region = "north";
            confidence += 0.3;
        } else if (text.includes("centro") || text.includes("coimbra") || text.includes("beira")) {
            region = "center";
            confidence += 0.3;
        } else if (text.includes("sul") || text.includes("alentejo") || text.includes("algarve")) {
            region = "south";
            confidence += 0.3;
        } else if (text.includes("lisboa") || text.includes("lisbon")) {
            region = "lisbon";
            confidence += 0.3;
        } else if (text.includes("a\xe7ores") || text.includes("azores")) {
            region = "azores";
            confidence += 0.3;
        } else if (text.includes("madeira")) {
            region = "madeira";
            confidence += 0.3;
        }
        // Detect topic areas
        if (text.includes("comida") || text.includes("food") || text.includes("receita") || text.includes("recipe")) {
            topic = "cuisine";
            expertise.push("portuguese_cuisine");
            confidence += 0.4;
        } else if (text.includes("fado") || text.includes("m\xfasica") || text.includes("music")) {
            topic = "fado";
            expertise.push("fado_music");
            confidence += 0.4;
        } else if (text.includes("hist\xf3ria") || text.includes("history")) {
            topic = "history";
            expertise.push("portuguese_history");
            confidence += 0.4;
        } else if (text.includes("l\xedngua") || text.includes("language") || text.includes("portuguese")) {
            topic = "language";
            expertise.push("language_learning");
            confidence += 0.4;
        } else if (text.includes("evento") || text.includes("event") || text.includes("festa")) {
            topic = "festivals";
            expertise.push("cultural_events");
            confidence += 0.3;
        } else if (text.includes("neg\xf3cio") || text.includes("business") || text.includes("trabalho")) {
            topic = "business";
            expertise.push("business_culture");
            confidence += 0.3;
        }
        return {
            region,
            topic,
            expertise,
            confidence: Math.min(confidence, 1)
        };
    }
    static async generateContextualResponse(message, culturalContext, emotionalTone, userContext, language) {
        // Handle high saudade/emotional content first
        if (emotionalTone.saudade > 0.5 || emotionalTone.nostalgia > 0.5) {
            const emotionalResponse = this.saudadeEngine.generateSaudadeResponse(emotionalTone, language);
            return emotionalResponse;
        }
        // Generate topic-specific responses
        switch(culturalContext.topic){
            case "cuisine":
                return this.generateCuisineResponse(message, culturalContext, language);
            case "fado":
                return this.generateFadoResponse(message, culturalContext, language);
            case "history":
                return this.generateHistoryResponse(message, culturalContext, language);
            case "language":
                return this.generateLanguageResponse(message, culturalContext, language);
            case "festivals":
                return this.generateFestivalResponse(message, culturalContext, language);
            case "business":
                return this.generateBusinessResponse(message, culturalContext, language);
            case "community":
            default:
                return this.generateCommunityResponse(message, culturalContext, language);
        }
    }
    static generateCuisineResponse(message, context, language) {
        const text = message.toLowerCase();
        if (text.includes("bacalhau") || text.includes("cod")) {
            return language === "pt" ? "Ah, o nosso fiel amigo! O bacalhau \xe9 muito mais que comida - \xe9 tradi\xe7\xe3o, \xe9 identidade. Dizem que h\xe1 365 maneiras de o preparar, uma para cada dia do ano. Que tipo de bacalhau gostas mais? Bacalhau \xe0 Br\xe1s, \xe0 Gomes de S\xe1, ou talvez com natas?" : "Ah, our faithful friend! Codfish is much more than food - it's tradition, it's identity. They say there are 365 ways to prepare it, one for each day of the year. What type of bacalhau do you prefer? Bacalhau \xe0 Br\xe1s, \xe0 Gomes de S\xe1, or perhaps with cream?";
        }
        if (text.includes("past\xe9is de nata") || text.includes("pastel de nata")) {
            return language === "pt" ? "Os past\xe9is de nata s\xe3o a nossa doce embaixada pelo mundo! Nasceram em Bel\xe9m, mas conquistaram cora\xe7\xf5es globalmente. Em Londres, j\xe1 experimentaste os do Nata & Co ou os da Caf\xe9 de Nata? Nunca s\xe3o iguais aos originais de Bel\xe9m, mas matam as saudades." : "Past\xe9is de nata are our sweet embassy to the world! Born in Bel\xe9m, they've conquered hearts globally. In London, have you tried those from Nata & Co or Caf\xe9 de Nata? They're never quite like the originals from Bel\xe9m, but they help with the saudades.";
        }
        // Regional cuisine responses
        if (context.region === "north") {
            return language === "pt" ? "A cozinha do Norte \xe9 robusta e calorosa, como a nossa gente! Francesinha, caldo verde, broa de milho... comida que aquece o cora\xe7\xe3o e a alma. Tens algum prato nortenho de que tenhas especial saudade?" : "Northern cuisine is robust and warming, like our people! Francesinha, caldo verde, corn bread... food that warms the heart and soul. Is there any northern dish you particularly miss?";
        }
        return language === "pt" ? "A nossa gastronomia \xe9 uma viagem pelas regi\xf5es e pela hist\xf3ria. Cada prato conta uma hist\xf3ria, cada sabor traz mem\xf3rias. Em que posso ajudar-te a matar as saudades culin\xe1rias?" : "Our gastronomy is a journey through regions and history. Each dish tells a story, each flavor brings memories. How can I help you satisfy your culinary saudades?";
    }
    static generateFadoResponse(message, context, language) {
        return language === "pt" ? "O fado \xe9 a nossa alma cantada, o espelho da saudade portuguesa. Desde Am\xe1lia Rodrigues at\xe9 Mariza, o fado evolui mas mant\xe9m sempre essa capacidade \xfanica de tocar o cora\xe7\xe3o. Em Londres, h\xe1 casas de fado onde podes ouvir essa m\xfasica que nos define. Conheces alguma fadista favorita?" : "Fado is our sung soul, the mirror of Lusophone saudade. From Am\xe1lia Rodrigues to Mariza, fado evolves but always maintains that unique ability to touch the heart. In London, there are fado houses where you can hear this music that defines us. Do you have a favorite fadista?";
    }
    static generateHistoryResponse(message, context, language) {
        return language === "pt" ? "A nossa hist\xf3ria \xe9 \xe9pica - das navega\xe7\xf5es que abriram o mundo ao 25 de Abril que nos trouxe a liberdade. Somos um povo pequeno que fez coisas grandes. Que per\xedodo da hist\xf3ria portuguesa te interessa mais? Os Descobrimentos? A Revolu\xe7\xe3o dos Cravos? A entrada na Uni\xe3o Europeia?" : "Our history is epic - from the navigations that opened the world to April 25th that brought us freedom. We are a small people who did great things. Which period of Portuguese history interests you most? The Discoveries? The Carnation Revolution? Joining the European Union?";
    }
    static generateLanguageResponse(message, context, language) {
        return language === "pt" ? "A l\xedngua portuguesa \xe9 m\xfasica, \xe9 poesia, \xe9 a nossa forma \xfanica de ver o mundo. Tens dificuldades com algum aspeto espec\xedfico? Gostarias de aprender express\xf5es t\xedpicas? Ou talvez queiras praticar a conversa\xe7\xe3o? Estou aqui para te ajudar a sentires-te mais \xe0 vontade com a nossa bela l\xedngua." : "The Portuguese language is music, poetry, our unique way of seeing the world. Are you having difficulties with any specific aspect? Would you like to learn typical expressions? Or perhaps practice conversation? I'm here to help you feel more comfortable with our beautiful language.";
    }
    static generateFestivalResponse(message, context, language) {
        return language === "pt" ? "As nossas festas s\xe3o momentos de uni\xe3o, tradi\xe7\xe3o e alegria! Desde os Santos Populares em junho at\xe9 ao Natal em fam\xedlia, cada celebra\xe7\xe3o tem a sua magia. Em Londres, a comunidade de falantes de portugu\xeas organiza eventos lindos. Queres saber sobre festivais tradicionais ou eventos atuais da comunidade?" : "Our festivals are moments of unity, tradition and joy! From Santos Populares in June to Christmas with family, each celebration has its magic. In London, the Portuguese-speaking community organizes beautiful events. Want to know about traditional festivals or current community events?";
    }
    static generateBusinessResponse(message, context, language) {
        return language === "pt" ? "A cultura empresarial portuguesa valoriza as rela\xe7\xf5es pessoais, a confian\xe7a e o respeito m\xfatuo. No Reino Unido, muitos empres\xe1rios portugueses destacam-se pela criatividade e pelo 'desenrascan\xe7o'. Como posso ajudar-te no teu percurso profissional ou empresarial?" : "Portuguese business culture values personal relationships, trust and mutual respect. In the United Kingdom, many Lusophone entrepreneurs stand out for their creativity and 'desenrascan\xe7o'. How can I help you in your professional or business journey?";
    }
    static generateCommunityResponse(message, context, language) {
        const text = message.toLowerCase();
        // Navigation-focused responses based on what they're looking for
        if (text.includes("where") || text.includes("onde") || text.includes("como") || text.includes("how")) {
            if (text.includes("event") || text.includes("evento")) {
                return language === "pt" ? "Para eventos portugueses, vai \xe0 sec\xe7\xe3o 'What's Happening' no menu principal! L\xe1 encontras eventos culturais, festas, workshops e encontros da comunidade. Podes filtrar por data, localiza\xe7\xe3o e tipo de evento. De que regi\xe3o \xe9s? Posso recomendar eventos espec\xedficos!" : "For Lusophone events, go to 'What's Happening' in the main menu! There you'll find cultural events, parties, workshops and community meetups. You can filter by date, location and event type. Where are you from? I can recommend specific events!";
            }
            if (text.includes("business") || text.includes("neg\xf3cio") || text.includes("restaurant") || text.includes("service")) {
                return language === "pt" ? "Para neg\xf3cios portugueses, clica em 'For Business' → 'Discover Businesses' no menu! Encontrar\xe1s restaurantes, servi\xe7os, lojas e profissionais portugueses. Podes pesquisar por localiza\xe7\xe3o, tipo de neg\xf3cio ou classifica\xe7\xe3o. Que tipo de servi\xe7o procuras?" : "For Portuguese businesses, click 'For Business' → 'Discover Businesses' in the menu! You'll find Portuguese restaurants, services, shops and professionals. You can search by location, business type or rating. What kind of service are you looking for?";
            }
            if (text.includes("people") || text.includes("meet") || text.includes("conhecer") || text.includes("pessoas")) {
                return language === "pt" ? "Para conhecer pessoas, experimenta 'Find Your Match' (o cora\xe7\xe3o \uD83D\uDC97 no menu) para conex\xf5es rom\xe2nticas ou de amizade! Tamb\xe9m podes ir ao 'Community' → 'Meet Lusophone Speakers' para o diret\xf3rio da comunidade. De onde \xe9s e que idade tens? Isso ajuda-me a sugerir os melhores grupos!" : "To meet people, try 'Find Your Match' (the heart \uD83D\uDC97 in the menu) for romantic or friendship connections! You can also go to 'Community' → 'Meet Lusophone Speakers' for the community directory. Where are you from and what age are you? This helps me suggest the best groups!";
            }
        }
        // New user welcome response
        if (text.includes("novo") || text.includes("new") || text.includes("come\xe7ar") || text.includes("start")) {
            return language === "pt" ? "Bem-vindo ao LusoTown! \uD83C\uDDF5\uD83C\uDDF9 Aqui tens tudo para a comunidade lus\xf3fona no Reino Unido:\n\n\uD83D\uDCC5 **Events**: Clica 'What's Happening' para eventos\n\uD83D\uDC97 **Dating/Amizades**: 'Find Your Match'\n\uD83C\uDFE2 **Neg\xf3cios**: 'For Business' → 'Discover Businesses'\n\uD83D\uDC65 **Comunidade**: 'Community' para conhecer pessoas\n\nDe onde \xe9s? Portugal, Brasil, ou outro pa\xeds lus\xf3fono? Isso ajuda-me a personalizar as sugest\xf5es!" : "Welcome to LusoTown! \uD83C\uDDF5\uD83C\uDDF9 Here you have everything for the Portuguese-speaking community in the UK:\n\n\uD83D\uDCC5 **Events**: Click 'What's Happening' for events\n\uD83D\uDC97 **Dating/Friendships**: 'Find Your Match'\n\uD83C\uDFE2 **Business**: 'For Business' → 'Discover Businesses'\n\uD83D\uDC65 **Community**: 'Community' to meet people\n\nWhere are you from? Portugal, Brazil, or another Portuguese-speaking country? This helps me personalize suggestions!";
        }
        // Default navigation-focused response
        return language === "pt" ? "Ol\xe1! Sou o LusoBot e estou aqui para te ajudar a navegar no LusoTown. \uD83C\uDDF5\uD83C\uDDF9\n\nDiz-me:\n• De onde \xe9s? (Portugal, Brasil, Cabo Verde...)\n• O que procuras? (eventos, neg\xf3cios, pessoas, grupos...)\n• \xc9s novo no Reino Unido?\n\nCom essas informa\xe7\xf5es, posso guiar-te para as sec\xe7\xf5es mais \xfateis da plataforma!" : "Hello! I'm LusoBot and I'm here to help you navigate LusoTown. \uD83C\uDDF5\uD83C\uDDF9\n\nTell me:\n• Where are you from? (Portugal, Brazil, Cape Verde...)\n• What are you looking for? (events, businesses, people, groups...)\n• Are you new to the UK?\n\nWith this information, I can guide you to the most useful sections of the platform!";
    }
    static generateSuggestions(culturalContext, emotionalTone, userContext, language) {
        const suggestions = [];
        // Always suggest main navigation areas for new users
        if (userContext.communityLevel === "newcomer") {
            suggestions.push({
                type: "event",
                title: language === "pt" ? "Ver Eventos Portugueses" : "Browse Lusophone Events",
                description: language === "pt" ? 'Clica "What\'s Happening" no menu principal' : 'Click "What\'s Happening" in the main menu',
                link: "/events/",
                priority: "high",
                culturalRelevance: 0.95
            });
            suggestions.push({
                type: "community",
                title: language === "pt" ? "Encontrar Pessoas" : "Find People",
                description: language === "pt" ? 'Usa "Find Your Match" (\uD83D\uDC97) para conhecer portugueses' : 'Use "Find Your Match" (\uD83D\uDC97) to meet Portuguese speakers',
                link: "/matches/",
                priority: "high",
                culturalRelevance: 0.9
            });
            suggestions.push({
                type: "business",
                title: language === "pt" ? "Neg\xf3cios Portugueses" : "Lusophone Businesses",
                description: language === "pt" ? 'Vai a "For Business" → "Discover Businesses"' : 'Go to "For Business" → "Discover Businesses"',
                link: "/business-directory/",
                priority: "high",
                culturalRelevance: 0.85
            });
        }
        // High saudade - suggest community connections
        if (emotionalTone.saudade > 0.5) {
            suggestions.push({
                type: "community",
                title: language === "pt" ? "Encontros Portugueses em Londres" : "Lusophone Meetups in London",
                description: language === "pt" ? "Conecta-te com outros portugueses na tua \xe1rea" : "Connect with other Lusophone people in your area",
                link: "/events/?category=cultural",
                priority: "high",
                culturalRelevance: 0.9
            });
        }
        // Cuisine interest - suggest restaurants and events
        if (culturalContext.topic === "cuisine") {
            suggestions.push({
                type: "business",
                title: language === "pt" ? "Restaurantes Portugueses" : "Lusophone Restaurants",
                description: language === "pt" ? "Descobre sabores de casa em Londres" : "Discover flavors from home in London",
                link: "/directory?category=restaurants",
                priority: "high",
                culturalRelevance: 0.8
            });
            suggestions.push({
                type: "event",
                title: language === "pt" ? "Aulas de Culin\xe1ria Portuguesa" : "Lusophone Cooking Classes",
                description: language === "pt" ? "Aprende a fazer pratos tradicionais" : "Learn to make traditional dishes",
                link: "/events?type=cooking",
                priority: "medium",
                culturalRelevance: 0.7
            });
        }
        // Language learning support
        if (culturalContext.topic === "language" || userContext.languageProficiency === "learning") {
            suggestions.push({
                type: "language",
                title: language === "pt" ? "Interc\xe2mbio de Idiomas" : "Language Exchange",
                description: language === "pt" ? "Pratica portugu\xeas com nativos" : "Practice Lusophone with natives",
                link: "/language-exchange",
                priority: "high",
                culturalRelevance: 0.8
            });
        }
        // Business networking
        if (culturalContext.topic === "business") {
            suggestions.push({
                type: "community",
                title: language === "pt" ? "Networking Empresarial LusoTown" : "LusoTown Business Networking",
                description: language === "pt" ? "Conecta-te com empres\xe1rios portugueses" : "Connect with Lusophone entrepreneurs",
                link: "/business-networking",
                priority: "high",
                culturalRelevance: 0.8
            });
        }
        // Cultural events for heritage connection
        if (emotionalTone.heritage > 0.4) {
            suggestions.push({
                type: "event",
                title: language === "pt" ? "Eventos Culturais Portugueses" : "Lusophone Cultural Events",
                description: language === "pt" ? "Celebra a nossa cultura e tradi\xe7\xf5es" : "Celebrate our culture and traditions",
                link: "/cultural-calendar",
                priority: "medium",
                culturalRelevance: 0.9
            });
        }
        return suggestions.sort((a, b)=>{
            // Sort by priority and cultural relevance
            const priorityWeight = {
                high: 3,
                medium: 2,
                low: 1
            };
            const aScore = priorityWeight[a.priority] + a.culturalRelevance;
            const bScore = priorityWeight[b.priority] + b.culturalRelevance;
            return bScore - aScore;
        }).slice(0, 4) // Return top 4 suggestions
        ;
    }
}
class LusoBotSession {
    constructor(userContext, language = "en"){
        this.messages = [];
        this.voiceSession = null;
        this.culturalProfile = {};
        this.learningProgress = {};
        this.therapeuticHistory = [];
        this.userContext = {
            ...userContext,
            culturalBackground: userContext.culturalBackground || [
                "portuguese"
            ],
            therapeuticNeeds: userContext.therapeuticNeeds || [],
            languageLearningGoals: userContext.languageLearningGoals || [],
            emotionalState: userContext.emotionalState || "neutral",
            sessionContext: userContext.sessionContext || "general"
        };
        this.language = language;
        // Initialize cultural profile based on user context
        this.initializeCulturalProfile();
        // Add enhanced welcome message
        this.addEnhancedWelcomeMessage();
    }
    initializeCulturalProfile() {
        // Analyze user background and preferences
        const backgroundAnalysis = this.userContext.culturalBackground || [
            "portuguese"
        ];
        const region = this.userContext.userRegion || "diaspora_uk";
        const languageLevel = this.userContext.languageProficiency || "intermediate";
        this.culturalProfile = {
            primaryCulture: backgroundAnalysis[0],
            region,
            languageLevel,
            interests: this.userContext.interests || [
                "community",
                "culture"
            ],
            preferredPersonality: null,
            therapeuticPreferences: [],
            learningStyle: "interactive"
        };
    }
    addEnhancedWelcomeMessage() {
        // Select appropriate personality based on user profile
        const suggestedPersonality = (0, _portugueseculturalknowledge.getVoicePersonality)(this.culturalProfile.region);
        this.culturalProfile.preferredPersonality = suggestedPersonality.id;
        // Create personalized welcome message
        const culturalGreeting = suggestedPersonality.speechPatterns.greetings[0]?.text || (this.language === "pt" ? "Ol\xe1!" : "Hello!");
        const personalizedContent = this.language === "pt" ? `${culturalGreeting} Sou o LusoBot com personalidade ${suggestedPersonality.name.pt}. Estou aqui para te ajudar com:

🇵🇹 **Cultura Portuguesa**: Tradições, história, e património lusófono
💬 **Apoio Emocional**: Compreendo saudade e adaptação cultural  
🗣️ **Aprendizagem**: Português, pronúncia, e contexto cultural
🎵 **Voz Cultural**: Posso falar contigo com sotaque ${suggestedPersonality.region}

Diz-me: de onde és e como posso apoiar-te hoje?` : `${culturalGreeting} I'm LusoBot with ${suggestedPersonality.name.en} personality. I'm here to help you with:

🇵🇹 **Portuguese Culture**: Traditions, history, and Lusophone heritage
💬 **Emotional Support**: I understand saudade and cultural adaptation
🗣️ **Learning**: Portuguese language, pronunciation, and cultural context  
🎵 **Cultural Voice**: I can speak with you using ${suggestedPersonality.region} accent

Tell me: where are you from and how can I support you today?`;
        const welcomeMessage = {
            id: `welcome_${Date.now()}`,
            role: "assistant",
            content: personalizedContent,
            timestamp: new Date(),
            language: this.language,
            culturalContext: {
                region: this.culturalProfile.region,
                topic: "community",
                expertise: [
                    "uk_portuguese_community",
                    "cultural_events",
                    "diaspora_support",
                    "language_learning",
                    "emotional_support"
                ],
                confidence: 1.0,
                traditions: [],
                culturalDepth: 0.8,
                suggestedPersonality: suggestedPersonality.id
            },
            emotionalTone: {
                saudade: 0,
                nostalgia: 0,
                hope: 0.9,
                community: 0.95,
                heritage: 0.85
            },
            suggestions: [
                {
                    type: "voice",
                    title: this.language === "pt" ? "Ativar Voz Cultural" : "Activate Cultural Voice",
                    description: this.language === "pt" ? `Conversar com personalidade ${suggestedPersonality.region}` : `Chat with ${suggestedPersonality.region} personality`,
                    action: "speak",
                    priority: "high",
                    culturalRelevance: 0.9,
                    voicePersonality: suggestedPersonality.id,
                    therapeuticValue: suggestedPersonality.characteristics.empathy
                },
                {
                    type: "cultural",
                    title: this.language === "pt" ? "Explorar Tradi\xe7\xf5es" : "Explore Traditions",
                    description: this.language === "pt" ? "Descobrir tradi\xe7\xf5es portuguesas e lus\xf3fonas" : "Discover Portuguese and Lusophone traditions",
                    action: "learn",
                    priority: "medium",
                    culturalRelevance: 1.0,
                    therapeuticValue: 0.7
                },
                {
                    type: "language",
                    title: this.language === "pt" ? "Aprender Portugu\xeas" : "Learn Portuguese",
                    description: this.language === "pt" ? "Exerc\xedcios personalizados com contexto cultural" : "Personalized exercises with cultural context",
                    action: "learn",
                    priority: "medium",
                    culturalRelevance: 0.85,
                    languageLevel: this.culturalProfile.languageLevel,
                    therapeuticValue: 0.6
                }
            ],
            metadata: {
                ...this.userContext,
                recommendedVoicePersonality: suggestedPersonality.id,
                therapeuticValue: 0.8,
                languageLearningOpportunity: this.userContext.languageProficiency !== "native"
            }
        };
        this.messages.push(welcomeMessage);
    }
    async sendMessage(content) {
        // Add user message
        const userMessage = {
            id: `user_${Date.now()}`,
            role: "user",
            content,
            timestamp: new Date(),
            language: this.language,
            metadata: this.userContext
        };
        this.messages.push(userMessage);
        // Generate bot response
        const botResponse = await LusoBotEngine.generateResponse(content, this.userContext, this.language);
        this.messages.push(botResponse);
        return botResponse;
    }
    getMessages() {
        return [
            ...this.messages
        ];
    }
    updateUserContext(context) {
        this.userContext = {
            ...this.userContext,
            ...context
        };
    }
    setLanguage(language) {
        this.language = language;
    }
    exportConversation() {
        return JSON.stringify({
            timestamp: new Date().toISOString(),
            language: this.language,
            userContext: this.userContext,
            culturalProfile: this.culturalProfile,
            learningProgress: this.learningProgress,
            therapeuticHistory: this.therapeuticHistory,
            messages: this.messages
        }, null, 2);
    }
    // Voice Interaction Methods
    async enableVoiceInteraction(personalityId) {
        try {
            const selectedPersonality = personalityId || this.culturalProfile.preferredPersonality;
            this.voiceSession = _voiceinteractionsystem.voiceInteractionSystem.startSession("user", selectedPersonality, this.userContext.sessionContext || "general", {
                accent: this.culturalProfile.region,
                speed: 1.0,
                language: this.language
            });
            return true;
        } catch (error) {
            console.error("Failed to enable voice interaction:", error);
            return false;
        }
    }
    async speakMessage(text, emotion = "neutral") {
        if (!this.voiceSession) {
            await this.enableVoiceInteraction();
        }
        if (this.voiceSession) {
            return _voiceinteractionsystem.voiceInteractionSystem.speak(text, emotion, [
                "cultural",
                "portuguese"
            ]);
        }
        throw new Error("Voice session not available");
    }
    // Language Learning Methods
    async getPersonalizedLesson(topic) {
        const userLevel = this.userContext.languageProficiency === "beginner" ? "A1" : this.userContext.languageProficiency === "intermediate" ? "B1" : this.userContext.languageProficiency === "fluent" ? "C1" : "B1";
        const interests = topic ? [
            topic
        ] : this.userContext.interests || [
            "culture"
        ];
        const culturalBackground = this.culturalProfile.primaryCulture;
        return (0, _portugueselanguagelearning.generatePersonalizedLesson)(userLevel, interests, culturalBackground);
    }
    async assessPronunciation(word, userAudio) {
        const dialect = this.culturalProfile.region.includes("brasil") ? "brazilian" : "european";
        return (0, _portugueselanguagelearning.assessPronunciation)(userAudio || word, word, dialect);
    }
    // Therapeutic Support Methods
    recordTherapeuticInteraction(emotionalTone, response, effectiveness) {
        this.therapeuticHistory.push({
            timestamp: new Date(),
            emotionalState: this.userContext.emotionalState,
            primaryEmotion: Object.keys(emotionalTone).reduce((a, b)=>emotionalTone[a] > emotionalTone[b] ? a : b),
            response,
            effectiveness,
            culturalContext: this.culturalProfile.primaryCulture
        });
    }
    getTherapeuticInsights() {
        const history = this.therapeuticHistory;
        if (history.length === 0) return null;
        const commonEmotions = history.map((h)=>h.primaryEmotion);
        const emotionFrequency = commonEmotions.reduce((acc, emotion)=>{
            acc[emotion] = (acc[emotion] || 0) + 1;
            return acc;
        }, {});
        const mostCommonEmotion = Object.keys(emotionFrequency).reduce((a, b)=>emotionFrequency[a] > emotionFrequency[b] ? a : b);
        const averageEffectiveness = history.reduce((sum, h)=>sum + h.effectiveness, 0) / history.length;
        return {
            mostCommonEmotion,
            sessionCount: history.length,
            averageEffectiveness,
            recommendedSupport: this.getRecommendedSupport(mostCommonEmotion, averageEffectiveness)
        };
    }
    getRecommendedSupport(emotion, effectiveness) {
        const recommendations = [];
        if (emotion === "saudade" && effectiveness < 0.7) {
            recommendations.push("Cultural connection activities", "Video calls with family", "Portuguese music therapy");
        }
        if (emotion === "nostalgia") {
            recommendations.push("Cultural storytelling sessions", "Traditional recipe sharing", "Heritage documentation");
        }
        if (effectiveness < 0.5) {
            recommendations.push("Professional therapeutic support", "Community group participation", "Cultural mentor assignment");
        }
        return recommendations;
    }
    // Learning Progress Tracking
    updateLearningProgress(skill, improvement, culturalContext) {
        if (!this.learningProgress[skill]) {
            this.learningProgress[skill] = {
                level: 0,
                sessions: 0,
                culturalContexts: [],
                lastImprovement: null
            };
        }
        this.learningProgress[skill].level += improvement;
        this.learningProgress[skill].sessions += 1;
        this.learningProgress[skill].lastImprovement = new Date();
        if (!this.learningProgress[skill].culturalContexts.includes(culturalContext)) {
            this.learningProgress[skill].culturalContexts.push(culturalContext);
        }
    }
    getLearningInsights() {
        const skills = Object.keys(this.learningProgress);
        if (skills.length === 0) return null;
        const strengths = skills.filter((skill)=>this.learningProgress[skill].level > 0.7);
        const weaknesses = skills.filter((skill)=>this.learningProgress[skill].level < 0.4);
        const mostPracticedSkill = skills.reduce((a, b)=>this.learningProgress[a].sessions > this.learningProgress[b].sessions ? a : b);
        return {
            strengths,
            weaknesses,
            mostPracticedSkill,
            totalSessions: skills.reduce((sum, skill)=>sum + this.learningProgress[skill].sessions, 0),
            culturalDiversity: new Set(skills.flatMap((skill)=>this.learningProgress[skill].culturalContexts)).size
        };
    }
    // Cultural Profile Management
    updateCulturalProfile(updates) {
        this.culturalProfile = {
            ...this.culturalProfile,
            ...updates
        };
    }
    getCulturalProfile() {
        return {
            ...this.culturalProfile
        };
    }
    // Enhanced Context Management
    adaptToUserNeeds(emotionalState, culturalNeeds, learningGoals) {
        this.userContext.emotionalState = emotionalState;
        this.userContext.therapeuticNeeds = culturalNeeds;
        this.userContext.languageLearningGoals = learningGoals;
        // Update cultural profile based on expressed needs
        if (culturalNeeds.includes("homesickness")) {
            this.culturalProfile.therapeuticPreferences.push("saudade_support");
        }
        if (learningGoals.includes("pronunciation")) {
            this.culturalProfile.learningStyle = "audio_focused";
        }
    }
}

//# sourceMappingURL=data:application/json;base64,