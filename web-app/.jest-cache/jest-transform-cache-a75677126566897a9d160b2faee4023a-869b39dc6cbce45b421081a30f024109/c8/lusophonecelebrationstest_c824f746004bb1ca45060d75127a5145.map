{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/config/lusophone-celebrations.test.ts"],"sourcesContent":["import { \n  LUSOPHONE_CELEBRATIONS, \n  CULTURAL_WISDOM,\n  getFeaturedCelebrations,\n  getRandomCulturalWisdom,\n  getCelebrationsByCategory,\n  getCelebrationsByCountry,\n  getTotalCelebrationBusinesses\n} from '@/config/lusophone-celebrations'\n\ndescribe('Lusophone Celebrations Configuration', () => {\n  test('should include celebrations from all major Portuguese-speaking countries', () => {\n    const countries = new Set()\n    LUSOPHONE_CELEBRATIONS.forEach(celebration => {\n      celebration.countries.forEach(country => countries.add(country))\n    })\n    \n    // Should include major Portuguese-speaking countries\n    expect(countries).toContain('Portugal')\n    expect(countries).toContain('Brazil')\n    expect(countries).toContain('Angola')\n    expect(countries).toContain('Cape Verde')\n    expect(countries).toContain('Mozambique')\n    expect(countries.size).toBeGreaterThanOrEqual(5) // At least 5 countries represented\n  })\n\n  test('should have bilingual content for all celebrations', () => {\n    LUSOPHONE_CELEBRATIONS.forEach(celebration => {\n      expect(celebration.name.en).toBeTruthy()\n      expect(celebration.name.pt).toBeTruthy()\n      expect(celebration.description.en).toBeTruthy()\n      expect(celebration.description.pt).toBeTruthy()\n      expect(celebration.period.en).toBeTruthy()\n      expect(celebration.period.pt).toBeTruthy()\n    })\n  })\n\n  test('should include diverse celebration categories', () => {\n    const categories = new Set(LUSOPHONE_CELEBRATIONS.map(c => c.category))\n    \n    expect(categories).toContain('music')\n    expect(categories).toContain('festival')\n    expect(categories).toContain('independence')\n    expect(categories).toContain('cultural')\n    expect(categories).toContain('heritage')\n    expect(categories.size).toBeGreaterThanOrEqual(4)\n  })\n\n  test('should have cultural wisdom from diverse countries', () => {\n    const wisdomCountries = new Set(CULTURAL_WISDOM.map(w => w.country))\n    \n    expect(wisdomCountries).toContain('Portugal')\n    expect(wisdomCountries).toContain('Brazil')\n    expect(wisdomCountries).toContain('Angola')\n    expect(wisdomCountries).toContain('Cape Verde')\n  })\n\n  test('should provide bilingual cultural wisdom', () => {\n    CULTURAL_WISDOM.forEach(wisdom => {\n      expect(wisdom.quote.en).toBeTruthy()\n      expect(wisdom.quote.pt).toBeTruthy()\n      expect(wisdom.origin.en).toBeTruthy()\n      expect(wisdom.origin.pt).toBeTruthy()\n      expect(wisdom.philosophy.en).toBeTruthy()\n      expect(wisdom.philosophy.pt).toBeTruthy()\n      expect(wisdom.flagEmoji).toBeTruthy()\n    })\n  })\n\n  test('getFeaturedCelebrations should return specified number of celebrations', () => {\n    const featured3 = getFeaturedCelebrations(3)\n    const featured6 = getFeaturedCelebrations(6)\n    \n    expect(featured3).toHaveLength(3)\n    expect(featured6).toHaveLength(6)\n    \n    // Should return different celebrations\n    expect(featured3.every(c => c.id)).toBeTruthy()\n  })\n\n  test('getRandomCulturalWisdom should return valid wisdom', () => {\n    const wisdom = getRandomCulturalWisdom()\n    \n    expect(wisdom).toBeDefined()\n    expect(wisdom.quote.en).toBeTruthy()\n    expect(wisdom.quote.pt).toBeTruthy()\n    expect(wisdom.flagEmoji).toBeTruthy()\n  })\n\n  test('getCelebrationsByCategory should filter correctly', () => {\n    const musicCelebrations = getCelebrationsByCategory('music')\n    const independenceCelebrations = getCelebrationsByCategory('independence')\n    \n    expect(musicCelebrations.every(c => c.category === 'music')).toBeTruthy()\n    expect(independenceCelebrations.every(c => c.category === 'independence')).toBeTruthy()\n  })\n\n  test('getCelebrationsByCountry should filter correctly', () => {\n    const brazilianCelebrations = getCelebrationsByCountry('Brazil')\n    const angolaCelebrations = getCelebrationsByCountry('Angola')\n    \n    expect(brazilianCelebrations.every(c => \n      c.countries.some(country => country.includes('Brazil'))\n    )).toBeTruthy()\n    \n    expect(angolaCelebrations.every(c => \n      c.countries.some(country => country.includes('Angola'))\n    )).toBeTruthy()\n  })\n\n  test('getTotalCelebrationBusinesses should calculate total correctly', () => {\n    const total = getTotalCelebrationBusinesses()\n    const manualTotal = LUSOPHONE_CELEBRATIONS.reduce(\n      (sum, celebration) => sum + celebration.businessCount, \n      0\n    )\n    \n    expect(total).toBe(manualTotal)\n    expect(total).toBeGreaterThan(0)\n  })\n\n  test('should include specific inclusive celebrations', () => {\n    const celebrationNames = LUSOPHONE_CELEBRATIONS.map(c => c.name.en.toLowerCase())\n    \n    // Should include celebrations from multiple countries\n    expect(celebrationNames.some(name => name.includes('brazilian'))).toBeTruthy()\n    expect(celebrationNames.some(name => name.includes('angola'))).toBeTruthy()\n    expect(celebrationNames.some(name => name.includes('cape verde') || name.includes('verdean'))).toBeTruthy()\n    expect(celebrationNames.some(name => name.includes('mozambic'))).toBeTruthy()\n  })\n\n  test('should have enhanced June festivals celebrating both Portuguese and Brazilian traditions', () => {\n    const juneFestival = LUSOPHONE_CELEBRATIONS.find(c => \n      c.id === 'santos-populares-festa-junina'\n    )\n    \n    expect(juneFestival).toBeDefined()\n    expect(juneFestival?.countries).toContain('Portugal')\n    expect(juneFestival?.countries).toContain('Brazil')\n    expect(juneFestival?.name.en).toContain('Santos Populares')\n    expect(juneFestival?.name.en).toContain('June Festivals')\n  })\n\n  test('should showcase music heritage from multiple Lusophone countries', () => {\n    const musicHeritage = LUSOPHONE_CELEBRATIONS.find(c => \n      c.id === 'music-heritage-lusophone'\n    )\n    \n    expect(musicHeritage).toBeDefined()\n    expect(musicHeritage?.countries.length).toBeGreaterThanOrEqual(4)\n    expect(musicHeritage?.countries).toContain('Portugal')\n    expect(musicHeritage?.countries).toContain('Brazil')\n    expect(musicHeritage?.countries).toContain('Angola')\n    expect(musicHeritage?.countries).toContain('Cape Verde')\n  })\n})\n\ndescribe('Cultural Inclusivity Standards', () => {\n  test('should avoid Portugal-centric language', () => {\n    const allText = LUSOPHONE_CELEBRATIONS.flatMap(c => [\n      c.name.en, c.name.pt, \n      c.description.en, c.description.pt,\n      c.significance.en, c.significance.pt\n    ]).join(' ')\n    \n    // Should use inclusive language\n    expect(allText.toLowerCase()).toContain('lusophone')\n    expect(allText.toLowerCase()).toContain('portuguese-speaking')\n    \n    // Should not be overly Portugal-focused\n    const portugalMentions = (allText.match(/portugal/gi) || []).length\n    const brazilMentions = (allText.match(/brazil/gi) || []).length\n    const angolaMentions = (allText.match(/angola/gi) || []).length\n    \n    // Should have balanced representation\n    expect(brazilMentions).toBeGreaterThan(0)\n    expect(angolaMentions).toBeGreaterThan(0)\n  })\n\n  test('should celebrate diversity in cultural wisdom', () => {\n    const wisdomOrigins = CULTURAL_WISDOM.map(w => w.country)\n    const uniqueOrigins = new Set(wisdomOrigins)\n    \n    expect(uniqueOrigins.size).toBeGreaterThanOrEqual(4)\n    expect(wisdomOrigins).toContain('Brazil')\n    expect(wisdomOrigins).toContain('Angola')\n    expect(wisdomOrigins).toContain('Cape Verde')\n  })\n})"],"names":["describe","test","countries","Set","LUSOPHONE_CELEBRATIONS","forEach","celebration","country","add","expect","toContain","size","toBeGreaterThanOrEqual","name","en","toBeTruthy","pt","description","period","categories","map","c","category","wisdomCountries","CULTURAL_WISDOM","w","wisdom","quote","origin","philosophy","flagEmoji","featured3","getFeaturedCelebrations","featured6","toHaveLength","every","id","getRandomCulturalWisdom","toBeDefined","musicCelebrations","getCelebrationsByCategory","independenceCelebrations","brazilianCelebrations","getCelebrationsByCountry","angolaCelebrations","some","includes","total","getTotalCelebrationBusinesses","manualTotal","reduce","sum","businessCount","toBe","toBeGreaterThan","celebrationNames","toLowerCase","juneFestival","find","musicHeritage","length","allText","flatMap","significance","join","portugalMentions","match","brazilMentions","angolaMentions","wisdomOrigins","uniqueOrigins"],"mappings":"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"}