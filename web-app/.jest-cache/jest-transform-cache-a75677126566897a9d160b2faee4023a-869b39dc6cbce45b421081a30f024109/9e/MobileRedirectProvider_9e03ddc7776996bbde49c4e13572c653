0325bc8ca0e69ee40036fd073381e6fe
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MobileDownloadPrompt: function() {
        return MobileDownloadPrompt;
    },
    MobileRedirectProvider: function() {
        return MobileRedirectProvider;
    },
    default: function() {
        return _default;
    },
    useMobileRedirect: function() {
        return useMobileRedirect;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _LanguageContext = require("../context/LanguageContext");
const _mobiledetection = require("../lib/mobile-detection");
const _mobileapp = require("../config/mobile-app");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const MobileRedirectContext = /*#__PURE__*/ (0, _react.createContext)(null);
function MobileRedirectProvider({ children, forceShow = false, disabled = false }) {
    const { language } = (0, _LanguageContext.useLanguage)();
    // State management
    const [deviceInfo, setDeviceInfo] = (0, _react.useState)(null);
    const [installationStatus, setInstallationStatus] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [showDownloadPrompt, setShowDownloadPrompt] = (0, _react.useState)(false);
    const [showLandingPage, setShowLandingPage] = (0, _react.useState)(false);
    const [deferredPrompt1, setDeferredPrompt] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        if (disabled) {
            setIsLoading(false);
            return;
        }
        initializeMobileDetection();
        setupPWAInstallPrompt();
    }, [
        disabled
    ]);
    /**
   * Initialize mobile device detection and app installation checking
   */ const initializeMobileDetection = async ()=>{
        try {
            setIsLoading(true);
            // Get device information
            const device = (0, _mobiledetection.getDeviceInfo)();
            setDeviceInfo(device);
            // Check if we should show any prompts
            const shouldShow = forceShow || (0, _mobiledetection.shouldShowDownloadPrompt)();
            if (shouldShow && (device.isMobile || device.isTablet)) {
                // Check app installation status
                const installation = await (0, _mobiledetection.checkAppInstallation)();
                setInstallationStatus(installation);
                // Determine what to show based on installation status and device
                if (!installation.isInstalled) {
                    // Decide between download prompt and landing page based on A/B testing
                    const variant = selectABTestVariant();
                    if (variant === "landing_page" || device.isTablet) {
                        setShowLandingPage(true);
                    } else {
                        setShowDownloadPrompt(true);
                    }
                }
            }
        } catch (error) {
            console.warn("Mobile detection initialization failed:", error);
        } finally{
            setIsLoading(false);
        }
    };
    /**
   * Setup PWA installation prompt handling
   */ const setupPWAInstallPrompt = ()=>{
        if (typeof window === "undefined") return;
        const handleBeforeInstallPrompt = (e)=>{
            // Prevent Chrome 67 and earlier from automatically showing the prompt
            e.preventDefault();
            // Stash the event so it can be triggered later
            setDeferredPrompt(e);
        };
        window.addEventListener("beforeinstallprompt", handleBeforeInstallPrompt);
        return ()=>{
            window.removeEventListener("beforeinstallprompt", handleBeforeInstallPrompt);
        };
    };
    /**
   * Select A/B testing variant for mobile experience
   */ const selectABTestVariant = ()=>{
        if (!_mobileapp.MOBILE_APP_CONFIG.testing.enabled) return "prompt";
        // Use user ID or session ID for consistent experience
        // For now, use random selection
        const random = Math.random() * 100;
        let cumulativeWeight = 0;
        for (const variant of _mobileapp.MOBILE_APP_CONFIG.testing.variants){
            cumulativeWeight += variant.weight;
            if (random <= cumulativeWeight) {
                return variant.id.includes("landing") ? "landing_page" : "prompt";
            }
        }
        return "prompt";
    };
    /**
   * Dismiss the download prompt
   */ const dismissPrompt = ()=>{
        setShowDownloadPrompt(false);
        setShowLandingPage(false);
        (0, _mobiledetection.trackDownloadChoice)("continue_web");
    };
    /**
   * Trigger native app download
   */ const triggerAppDownload = (platform)=>{
        if (!deviceInfo) return;
        const targetPlatform = platform || (deviceInfo.isIOS ? "ios" : "android");
        const appStoreUrl = targetPlatform === "ios" ? _mobileapp.MOBILE_APP_CONFIG.stores.ios.url : _mobileapp.MOBILE_APP_CONFIG.stores.android.url;
        // Track the download attempt
        (0, _mobiledetection.trackDownloadChoice)("download_app", targetPlatform);
        // Open app store
        window.open(appStoreUrl, "_blank");
        // Dismiss prompts after download attempt
        setShowDownloadPrompt(false);
        setShowLandingPage(false);
    };
    /**
   * Trigger PWA installation
   */ const triggerPWAInstall = async ()=>{
        if (!deferredPrompt1) return;
        try {
            // Show the install prompt
            deferredPrompt1.prompt();
            // Wait for the user to respond to the prompt
            const { outcome } = await deferredPrompt1.userChoice;
            // Track the choice
            (0, _mobiledetection.trackDownloadChoice)("install_pwa");
            if (outcome === "accepted") {
                console.log("PWA installation accepted");
            } else {
                console.log("PWA installation dismissed");
            }
            // Clear the deferredPrompt
            setDeferredPrompt(null);
            setShowDownloadPrompt(false);
            setShowLandingPage(false);
        } catch (error) {
            console.warn("PWA installation failed:", error);
        }
    };
    /**
   * Continue with website experience
   */ const continuewithWebsite = ()=>{
        dismissPrompt();
    };
    const contextValue = {
        deviceInfo,
        installationStatus,
        showDownloadPrompt,
        showLandingPage,
        isLoading,
        dismissPrompt,
        triggerAppDownload,
        triggerPWAInstall,
        continuewithWebsite
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(MobileRedirectContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useMobileRedirect() {
    const context = (0, _react.useContext)(MobileRedirectContext);
    if (!context) {
        throw new Error("useMobileRedirect must be used within a MobileRedirectProvider");
    }
    return context;
}
function MobileDownloadPrompt() {
    const { t } = (0, _LanguageContext.useLanguage)();
    const { deviceInfo, installationStatus, showDownloadPrompt, dismissPrompt, triggerAppDownload, triggerPWAInstall } = useMobileRedirect();
    if (!showDownloadPrompt || !deviceInfo) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-primary-200 shadow-xl p-4 safe-area-pb",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "flex items-center gap-3",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "flex-shrink-0 w-12 h-12 bg-gradient-to-r from-primary-600 to-secondary-600 rounded-xl flex items-center justify-center",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        className: "text-white text-lg font-bold",
                        children: "LT"
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex-1 min-w-0",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                            className: "text-sm font-semibold text-gray-900",
                            children: t("mobile.app.prompt.title", "Get the LusoTown App")
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-xs text-gray-600 line-clamp-1",
                            children: t("mobile.app.prompt.subtitle", "Better experience for Portuguese community")
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "flex items-center gap-2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: dismissPrompt,
                            className: "px-3 py-2 text-sm text-gray-600 hover:text-gray-800 min-h-[36px]",
                            children: t("mobile.app.continue_web", "Not now")
                        }),
                        installationStatus?.canInstallPWA && deferredPrompt ? /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: triggerPWAInstall,
                            className: "bg-primary-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary-700 transition-colors min-h-[36px]",
                            children: t("mobile.app.install", "Install")
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: ()=>triggerAppDownload(),
                            className: "bg-primary-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary-700 transition-colors min-h-[36px]",
                            children: t("mobile.app.download", "Get App")
                        })
                    ]
                })
            ]
        })
    });
}
const _default = MobileRedirectProvider;

//# sourceMappingURL=data:application/json;base64,