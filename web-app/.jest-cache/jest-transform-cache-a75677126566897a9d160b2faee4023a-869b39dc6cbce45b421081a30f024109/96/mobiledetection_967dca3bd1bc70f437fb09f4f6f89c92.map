{"version":3,"sources":["/workspaces/LusoTown/web-app/src/lib/mobile-detection.ts"],"sourcesContent":["/**\n * Mobile Device Detection and App Installation Detection\n * \n * Comprehensive mobile device detection system for LusoTown's Portuguese-speaking community,\n * including app installation detection, deep link testing, and analytics tracking.\n */\n\nimport { DEVICE_DETECTION_CONFIG, MOBILE_APP_CONFIG } from '@/config/mobile-app';\n\nexport interface DeviceInfo {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  isIOS: boolean;\n  isAndroid: boolean;\n  userAgent: string;\n  viewport: {\n    width: number;\n    height: number;\n  };\n  touchSupport: boolean;\n  appInstalled?: boolean;\n  deepLinkSupport?: boolean;\n}\n\nexport interface AppInstallationStatus {\n  isInstalled: boolean;\n  platform: 'ios' | 'android' | 'unknown';\n  canInstallPWA: boolean;\n  installPromptAvailable: boolean;\n  lastChecked: number;\n}\n\n/**\n * Mobile Device Detection Class\n * Provides comprehensive device detection for Portuguese-speaking community members\n */\nexport class MobileDeviceDetector {\n  private static instance: MobileDeviceDetector;\n  private deviceInfo: DeviceInfo | null = null;\n  private installationStatus: AppInstallationStatus | null = null;\n\n  private constructor() {}\n\n  public static getInstance(): MobileDeviceDetector {\n    if (!MobileDeviceDetector.instance) {\n      MobileDeviceDetector.instance = new MobileDeviceDetector();\n    }\n    return MobileDeviceDetector.instance;\n  }\n\n  /**\n   * Get comprehensive device information\n   */\n  public getDeviceInfo(): DeviceInfo {\n    if (typeof window === 'undefined') {\n      // Server-side rendering fallback\n      return {\n        isMobile: false,\n        isTablet: false,\n        isDesktop: true,\n        isIOS: false,\n        isAndroid: false,\n        userAgent: '',\n        viewport: { width: 1024, height: 768 },\n        touchSupport: false\n      };\n    }\n\n    if (this.deviceInfo) {\n      return this.deviceInfo;\n    }\n\n    const userAgent = navigator.userAgent;\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n\n    // Detect device types using user agent patterns\n    const isIOS = this.matchesAnyPattern(userAgent, DEVICE_DETECTION_CONFIG.userAgentPatterns.ios);\n    const isAndroid = this.matchesAnyPattern(userAgent, DEVICE_DETECTION_CONFIG.userAgentPatterns.android);\n    const isMobileUA = this.matchesAnyPattern(userAgent, DEVICE_DETECTION_CONFIG.userAgentPatterns.mobile);\n    const isTabletUA = this.matchesAnyPattern(userAgent, DEVICE_DETECTION_CONFIG.userAgentPatterns.tablet);\n\n    // Viewport-based detection for more accuracy\n    const isMobileViewport = viewport.width < DEVICE_DETECTION_CONFIG.viewportBreakpoints.mobile;\n    const isTabletViewport = viewport.width >= DEVICE_DETECTION_CONFIG.viewportBreakpoints.mobile && \n                           viewport.width < DEVICE_DETECTION_CONFIG.viewportBreakpoints.desktop;\n\n    // Combine user agent and viewport detection\n    const isMobile = (isMobileUA || isMobileViewport) && !isTabletUA;\n    const isTablet = isTabletUA || (isTabletViewport && !isMobileUA);\n    const isDesktop = !isMobile && !isTablet;\n\n    // Touch support detection\n    const touchSupport = 'ontouchstart' in window || \n                        navigator.maxTouchPoints > 0 || \n                        (navigator as any).msMaxTouchPoints > 0;\n\n    this.deviceInfo = {\n      isMobile,\n      isTablet,\n      isDesktop,\n      isIOS,\n      isAndroid,\n      userAgent,\n      viewport,\n      touchSupport\n    };\n\n    return this.deviceInfo;\n  }\n\n  /**\n   * Check if native app is installed using deep link testing\n   */\n  public async checkAppInstallation(): Promise<AppInstallationStatus> {\n    if (typeof window === 'undefined') {\n      return {\n        isInstalled: false,\n        platform: 'unknown',\n        canInstallPWA: false,\n        installPromptAvailable: false,\n        lastChecked: Date.now()\n      };\n    }\n\n    const deviceInfo = this.getDeviceInfo();\n    const platform = deviceInfo.isIOS ? 'ios' : deviceInfo.isAndroid ? 'android' : 'unknown';\n\n    // Check if we've recently tested (cache for 5 minutes)\n    if (this.installationStatus && \n        Date.now() - this.installationStatus.lastChecked < 300000) {\n      return this.installationStatus;\n    }\n\n    let isInstalled = false;\n\n    try {\n      // Test deep link support\n      if (platform === 'ios') {\n        isInstalled = await this.testIOSDeepLink();\n      } else if (platform === 'android') {\n        isInstalled = await this.testAndroidDeepLink();\n      }\n    } catch (error) {\n      console.log('Deep link test failed:', error);\n      isInstalled = false;\n    }\n\n    // Check PWA installation capability\n    const canInstallPWA = this.canInstallPWA();\n    const installPromptAvailable = (window as any).deferredPrompt !== undefined;\n\n    this.installationStatus = {\n      isInstalled,\n      platform,\n      canInstallPWA,\n      installPromptAvailable,\n      lastChecked: Date.now()\n    };\n\n    return this.installationStatus;\n  }\n\n  /**\n   * Test iOS deep link support\n   */\n  private async testIOSDeepLink(): Promise<boolean> {\n    return new Promise((resolve) => {\n      const timeout = setTimeout(() => resolve(false), 2000);\n      \n      const deepLinkUrl = `${MOBILE_APP_CONFIG.deepLink.scheme}://open?utm_source=web_app_detection`;\n      \n      // Try to open the deep link\n      window.location.href = deepLinkUrl;\n      \n      // If we can navigate back quickly, the app likely isn't installed\n      const startTime = Date.now();\n      const checkFocus = () => {\n        if (Date.now() - startTime > 1500) {\n          clearTimeout(timeout);\n          resolve(true); // App likely opened\n        } else {\n          setTimeout(checkFocus, 500);\n        }\n      };\n      \n      document.addEventListener('visibilitychange', () => {\n        if (document.hidden) {\n          clearTimeout(timeout);\n          resolve(true); // App opened, page became hidden\n        }\n      });\n      \n      checkFocus();\n    });\n  }\n\n  /**\n   * Test Android deep link support\n   */\n  private async testAndroidDeepLink(): Promise<boolean> {\n    return new Promise((resolve) => {\n      const timeout = setTimeout(() => resolve(false), 2000);\n      \n      const intentUrl = `intent://${MOBILE_APP_CONFIG.deepLink.scheme}://open#Intent;scheme=${MOBILE_APP_CONFIG.deepLink.scheme};package=${MOBILE_APP_CONFIG.stores.android.id};end`;\n      \n      try {\n        window.location.href = intentUrl;\n        \n        // Android intent URLs will fail if app isn't installed\n        setTimeout(() => {\n          clearTimeout(timeout);\n          resolve(true);\n        }, 1000);\n        \n      } catch (error) {\n        clearTimeout(timeout);\n        resolve(false);\n      }\n    });\n  }\n\n  /**\n   * Check if PWA can be installed\n   */\n  private canInstallPWA(): boolean {\n    if (typeof window === 'undefined') return false;\n    \n    // Check for beforeinstallprompt event support\n    if ('serviceWorker' in navigator && (window as any).beforeinstallprompt !== undefined) {\n      return true;\n    }\n    \n    // Check for iOS Safari PWA support\n    const deviceInfo = this.getDeviceInfo();\n    if (deviceInfo.isIOS && 'standalone' in (navigator as any)) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Track user's choice for app download\n   */\n  public trackDownloadChoice(choice: 'download_app' | 'continue_web' | 'install_pwa', platform?: string): void {\n    const deviceInfo = this.getDeviceInfo();\n    \n    // Store choice in localStorage for returning user logic\n    const choiceData = {\n      choice,\n      platform: platform || (deviceInfo.isIOS ? 'ios' : deviceInfo.isAndroid ? 'android' : 'web'),\n      timestamp: Date.now(),\n      userAgent: deviceInfo.userAgent,\n      viewport: deviceInfo.viewport\n    };\n    \n    try {\n      localStorage.setItem('lusotown_app_choice', JSON.stringify(choiceData));\n      \n      // Send analytics event (if analytics is configured)\n      this.sendAnalyticsEvent('app_download_choice', choiceData);\n    } catch (error) {\n      console.warn('Could not store app choice:', error);\n    }\n  }\n\n  /**\n   * Check if user has previously made a download choice\n   */\n  public getPreviousDownloadChoice(): any | null {\n    try {\n      const stored = localStorage.getItem('lusotown_app_choice');\n      if (stored) {\n        const choice = JSON.parse(stored);\n        // Check if choice is less than 7 days old\n        if (Date.now() - choice.timestamp < 7 * 24 * 60 * 60 * 1000) {\n          return choice;\n        }\n      }\n    } catch (error) {\n      console.warn('Could not retrieve app choice:', error);\n    }\n    return null;\n  }\n\n  /**\n   * Should show app download prompt\n   */\n  public shouldShowDownloadPrompt(): boolean {\n    const deviceInfo = this.getDeviceInfo();\n    const previousChoice = this.getPreviousDownloadChoice();\n    \n    // Don't show on desktop\n    if (deviceInfo.isDesktop) return false;\n    \n    // Don't show if user recently declined\n    if (previousChoice && previousChoice.choice === 'continue_web') {\n      return false;\n    }\n    \n    // Don't show if user recently downloaded\n    if (previousChoice && previousChoice.choice === 'download_app') {\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Get appropriate app store URL for the device\n   */\n  public getAppStoreUrl(): string {\n    const deviceInfo = this.getDeviceInfo();\n    \n    if (deviceInfo.isIOS) {\n      return MOBILE_APP_CONFIG.stores.ios.url;\n    } else if (deviceInfo.isAndroid) {\n      return MOBILE_APP_CONFIG.stores.android.url;\n    }\n    \n    // Default to Play Store for unknown mobile devices\n    return MOBILE_APP_CONFIG.stores.android.url;\n  }\n\n  /**\n   * Get appropriate app store scheme URL for native opening\n   */\n  public getAppStoreSchemeUrl(): string {\n    const deviceInfo = this.getDeviceInfo();\n    \n    if (deviceInfo.isIOS) {\n      return MOBILE_APP_CONFIG.stores.ios.scheme;\n    } else if (deviceInfo.isAndroid) {\n      return MOBILE_APP_CONFIG.stores.android.scheme;\n    }\n    \n    return MOBILE_APP_CONFIG.stores.android.scheme;\n  }\n\n  /**\n   * Send analytics event for mobile app interactions\n   */\n  private sendAnalyticsEvent(eventName: string, data: any): void {\n    // Placeholder for analytics implementation\n    // This would integrate with your analytics service (Google Analytics, Mixpanel, etc.)\n    if (typeof window !== 'undefined' && (window as any).gtag) {\n      (window as any).gtag('event', eventName, {\n        event_category: 'mobile_app',\n        event_label: 'portuguese_community',\n        custom_parameters: data\n      });\n    }\n    \n    console.log(`Analytics: ${eventName}`, data);\n  }\n\n  /**\n   * Helper method to test user agent patterns\n   */\n  private matchesAnyPattern(userAgent: string, patterns: RegExp[]): boolean {\n    return patterns.some(pattern => pattern.test(userAgent));\n  }\n\n  /**\n   * Reset cached data (useful for testing)\n   */\n  public resetCache(): void {\n    this.deviceInfo = null;\n    this.installationStatus = null;\n  }\n}\n\n// Utility functions for easy access\nexport const mobileDetector = MobileDeviceDetector.getInstance();\n\nexport const getDeviceInfo = (): DeviceInfo => {\n  return mobileDetector.getDeviceInfo();\n};\n\nexport const checkAppInstallation = async (): Promise<AppInstallationStatus> => {\n  return await mobileDetector.checkAppInstallation();\n};\n\nexport const shouldShowDownloadPrompt = (): boolean => {\n  return mobileDetector.shouldShowDownloadPrompt();\n};\n\nexport const getAppStoreUrl = (): string => {\n  return mobileDetector.getAppStoreUrl();\n};\n\nexport const trackDownloadChoice = (choice: 'download_app' | 'continue_web' | 'install_pwa', platform?: string): void => {\n  return mobileDetector.trackDownloadChoice(choice, platform);\n};\n\nexport default MobileDeviceDetector;"],"names":["MobileDeviceDetector","checkAppInstallation","getAppStoreUrl","getDeviceInfo","mobileDetector","shouldShowDownloadPrompt","trackDownloadChoice","deviceInfo","installationStatus","getInstance","instance","window","isMobile","isTablet","isDesktop","isIOS","isAndroid","userAgent","viewport","width","height","touchSupport","navigator","innerWidth","innerHeight","matchesAnyPattern","DEVICE_DETECTION_CONFIG","userAgentPatterns","ios","android","isMobileUA","mobile","isTabletUA","tablet","isMobileViewport","viewportBreakpoints","isTabletViewport","desktop","maxTouchPoints","msMaxTouchPoints","isInstalled","platform","canInstallPWA","installPromptAvailable","lastChecked","Date","now","testIOSDeepLink","testAndroidDeepLink","error","console","log","deferredPrompt","undefined","Promise","resolve","timeout","setTimeout","deepLinkUrl","MOBILE_APP_CONFIG","deepLink","scheme","location","href","startTime","checkFocus","clearTimeout","document","addEventListener","hidden","intentUrl","stores","id","beforeinstallprompt","choice","choiceData","timestamp","localStorage","setItem","JSON","stringify","sendAnalyticsEvent","warn","getPreviousDownloadChoice","stored","getItem","parse","previousChoice","url","getAppStoreSchemeUrl","eventName","data","gtag","event_category","event_label","custom_parameters","patterns","some","pattern","test","resetCache"],"mappings":"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"}