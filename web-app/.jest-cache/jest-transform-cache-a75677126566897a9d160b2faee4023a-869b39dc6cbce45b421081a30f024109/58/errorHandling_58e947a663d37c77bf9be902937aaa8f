4009afc6aa6f5f5f0ca02d8bc5fad0d1
/**
 * Comprehensive error handling utilities for LusoTown platform
 * Provides secure error handling, logging, and user-friendly error messages
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ErrorType: function() {
        return ErrorType;
    },
    LusoTownError: function() {
        return LusoTownError;
    },
    default: function() {
        return _default;
    },
    inputValidation: function() {
        return inputValidation;
    },
    safeAsync: function() {
        return safeAsync;
    },
    safeDOMOperations: function() {
        return safeDOMOperations;
    },
    safeFetch: function() {
        return safeFetch;
    },
    safeLocalStorage: function() {
        return safeLocalStorage;
    },
    withErrorHandling: function() {
        return withErrorHandling;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _reacthottoast = require("react-hot-toast");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var ErrorType;
(function(ErrorType) {
    ErrorType["AUTHENTICATION"] = "authentication";
    ErrorType["AUTHORIZATION"] = "authorization";
    ErrorType["NETWORK"] = "network";
    ErrorType["VALIDATION"] = "validation";
    ErrorType["NOT_FOUND"] = "not_found";
    ErrorType["SERVER_ERROR"] = "server_error";
    ErrorType["CLIENT_ERROR"] = "client_error";
    ErrorType["UNKNOWN"] = "unknown";
})(ErrorType || (ErrorType = {}));
class LusoTownError extends Error {
    constructor(message, type = "unknown", code, context, userMessage){
        super(message);
        this.name = "LusoTownError";
        this.type = type;
        this.code = code;
        this.context = context;
        this.userMessage = userMessage;
        this.timestamp = new Date();
    }
}
async function safeAsync(operation, errorContext) {
    try {
        const data = await operation();
        return {
            data,
            success: true
        };
    } catch (error) {
        console.error(`Error in ${errorContext?.operationName || "async operation"}:`, error);
        const lusoError = error instanceof LusoTownError ? error : new LusoTownError(error instanceof Error ? error.message : "Unknown error occurred", categorizeError(error), undefined, {
            originalError: error,
            operation: errorContext?.operationName
        });
        // Show user-friendly toast if requested
        if (errorContext?.showToast) {
            const userMessage = lusoError.userMessage || getErrorMessage(lusoError.type);
            _reacthottoast.toast.error(userMessage);
        }
        // Call custom error handler if provided
        if (errorContext?.onError) {
            errorContext.onError(lusoError);
        }
        // Log to error tracking service in production
        if (process.env.NODE_ENV === "production") {
            logError(lusoError, errorContext);
        }
        return {
            error: lusoError,
            success: false,
            data: errorContext?.fallbackValue
        };
    }
}
// Categorize errors based on type and message
function categorizeError(error) {
    if (!error) return "unknown";
    const message = error.message?.toLowerCase() || "";
    const status = error.status || error.statusCode;
    // HTTP status codes
    if (status === 401) return "authentication";
    if (status === 403) return "authorization";
    if (status === 404) return "not_found";
    if (status >= 400 && status < 500) return "client_error";
    if (status >= 500) return "server_error";
    // Network errors
    if (message.includes("network") || message.includes("fetch") || message.includes("connection")) {
        return "network";
    }
    // Authentication errors
    if (message.includes("unauthorized") || message.includes("login") || message.includes("token")) {
        return "authentication";
    }
    // Validation errors
    if (message.includes("validation") || message.includes("invalid") || message.includes("required")) {
        return "validation";
    }
    return "unknown";
}
// Get user-friendly error messages
function getErrorMessage(type) {
    const messages = {
        ["authentication"]: "Sess\xe3o expirada. Por favor, fa\xe7a login novamente.",
        ["authorization"]: "N\xe3o tem permiss\xe3o para realizar esta a\xe7\xe3o.",
        ["network"]: "Problema de conex\xe3o. Verifique sua internet e tente novamente.",
        ["validation"]: "Dados inv\xe1lidos. Verifique as informa\xe7\xf5es e tente novamente.",
        ["not_found"]: "Recurso n\xe3o encontrado.",
        ["server_error"]: "Erro do servidor. Tente novamente em alguns minutos.",
        ["client_error"]: "Erro na solicita\xe7\xe3o. Verifique os dados e tente novamente.",
        ["unknown"]: "Ocorreu um erro inesperado. Tente novamente."
    };
    return messages[type] || messages["unknown"];
}
// Log error to external service in production
function logError(error, context) {
    // In production, this would send to your error tracking service
    // For now, we'll just structure the error for logging
    const errorReport = {
        message: error.message,
        type: error.type,
        code: error.code,
        stack: error.stack,
        timestamp: error.timestamp,
        context: error.context,
        operationContext: context,
        userAgent: typeof window !== "undefined" ? window.navigator.userAgent : undefined,
        url: typeof window !== "undefined" ? window.location.href : undefined
    };
    console.error("Production Error Report:", errorReport);
}
const safeLocalStorage = {
    getItem: (key)=>{
        try {
            return localStorage.getItem(key);
        } catch (error) {
            console.error("Error reading from localStorage:", error);
            return null;
        }
    },
    setItem: (key, value)=>{
        try {
            localStorage.setItem(key, value);
            return true;
        } catch (error) {
            console.error("Error writing to localStorage:", error);
            return false;
        }
    },
    removeItem: (key)=>{
        try {
            localStorage.removeItem(key);
            return true;
        } catch (error) {
            console.error("Error removing from localStorage:", error);
            return false;
        }
    },
    getJSON: (key)=>{
        try {
            const item = localStorage.getItem(key);
            return item ? JSON.parse(item) : null;
        } catch (error) {
            console.error("Error parsing JSON from localStorage:", error);
            return null;
        }
    },
    setJSON: (key, value)=>{
        try {
            localStorage.setItem(key, JSON.stringify(value));
            return true;
        } catch (error) {
            console.error("Error storing JSON to localStorage:", error);
            return false;
        }
    }
};
const safeDOMOperations = {
    querySelector: (selector)=>{
        try {
            return document.querySelector(selector);
        } catch (error) {
            console.error("Error with querySelector:", error);
            return null;
        }
    },
    getElementById: (id)=>{
        try {
            return document.getElementById(id);
        } catch (error) {
            console.error("Error with getElementById:", error);
            return null;
        }
    },
    addEventListener: (element, event, handler, options)=>{
        try {
            element.addEventListener(event, handler, options);
            return true;
        } catch (error) {
            console.error("Error adding event listener:", error);
            return false;
        }
    },
    removeEventListener: (element, event, handler, options)=>{
        try {
            element.removeEventListener(event, handler, options);
            return true;
        } catch (error) {
            console.error("Error removing event listener:", error);
            return false;
        }
    }
};
const inputValidation = {
    email: (email)=>{
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    },
    sanitizeString: (input)=>{
        // Basic XSS prevention - remove potentially dangerous characters
        return input.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "").replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, "").replace(/javascript:/gi, "").replace(/on\w+\s*=\s*"[^"]*"/gi, "").replace(/on\w+\s*=\s*'[^']*'/gi, "");
    },
    isValidLength: (input, min = 0, max = Infinity)=>{
        return input.length >= min && input.length <= max;
    },
    containsOnlyAllowedChars: (input, allowedChars)=>{
        return allowedChars.test(input);
    }
};
async function safeFetch(url, options, errorContext) {
    const maxRetries = errorContext?.retries ?? 0;
    let attempt = 0;
    while(attempt <= maxRetries){
        const result = await safeAsync(()=>fetch(url, options), {
            operationName: errorContext?.operationName || `fetch ${url}`,
            showToast: errorContext?.showToast && attempt === maxRetries // Only show toast on last attempt
        });
        if (result.success) {
            return result;
        }
        attempt++;
        if (attempt <= maxRetries) {
            // Wait before retrying (exponential backoff)
            await new Promise((resolve)=>setTimeout(resolve, Math.pow(2, attempt) * 1000));
        }
    }
    return {
        error: new LusoTownError("Network request failed after retries", "network"),
        success: false
    };
}
function withErrorHandling(Component, errorContext) {
    return function WrappedComponent(props) {
        try {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                ...props
            });
        } catch (error) {
            console.error(`Error in component ${errorContext?.componentName || "Unknown"}:`, error);
            if (errorContext?.fallbackRender) {
                return errorContext.fallbackRender(error);
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "p-4 bg-red-50 border border-red-200 rounded-lg",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                    className: "text-red-800 text-sm",
                    children: [
                        "Erro ao carregar componente",
                        errorContext?.componentName ? ` ${errorContext.componentName}` : "",
                        ".",
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            onClick: ()=>window.location.reload(),
                            className: "ml-2 text-red-600 hover:text-red-700 underline",
                            children: "Recarregar p\xe1gina"
                        })
                    ]
                })
            });
        }
    };
}
const _default = {
    safeAsync,
    safeLocalStorage,
    safeDOMOperations,
    inputValidation,
    safeFetch,
    withErrorHandling,
    LusoTownError,
    ErrorType
};

//# sourceMappingURL=data:application/json;base64,