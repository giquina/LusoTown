9f6912c2470f7b302c4501b3d62b4b53
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calculateProfileCompletion: function() {
        return calculateProfileCompletion;
    },
    compressImage: function() {
        return compressImage;
    },
    createClient: function() {
        return createClient;
    },
    deletePhoto: function() {
        return deletePhoto;
    },
    getCulturalCompatibility: function() {
        return getCulturalCompatibility;
    },
    getCulturalInsights: function() {
        return getCulturalInsights;
    },
    getCulturalPreferences: function() {
        return getCulturalPreferences;
    },
    getCurrentUser: function() {
        return getCurrentUser;
    },
    getCurrentUserProfile: function() {
        return getCurrentUserProfile;
    },
    getMembershipTierConfig: function() {
        return getMembershipTierConfig;
    },
    getPortugueseCulturalElements: function() {
        return getPortugueseCulturalElements;
    },
    getProfile: function() {
        return getProfile;
    },
    getPublicUrl: function() {
        return getPublicUrl;
    },
    getTopCulturalMatches: function() {
        return getTopCulturalMatches;
    },
    saveCulturalPreferences: function() {
        return saveCulturalPreferences;
    },
    searchProfiles: function() {
        return searchProfiles;
    },
    signOut: function() {
        return signOut;
    },
    supabase: function() {
        return supabase;
    },
    supabaseAnonKey: function() {
        return supabaseAnonKey;
    },
    supabaseUrl: function() {
        return supabaseUrl;
    },
    updateProfile: function() {
        return updateProfile;
    },
    uploadFile: function() {
        return uploadFile;
    },
    uploadPhoto: function() {
        return uploadPhoto;
    },
    validateImage: function() {
        return validateImage;
    }
});
const _supabasejs = require("@supabase/supabase-js");
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || "https://placeholder.supabase.co";
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || "placeholder-key";
const supabase = (0, _supabasejs.createClient)(supabaseUrl, supabaseAnonKey, {
    auth: {
        autoRefreshToken: true,
        persistSession: true,
        detectSessionInUrl: true
    }
});
function createClient(cookieStore) {
    const options = {
        auth: {
            autoRefreshToken: true,
            persistSession: true,
            detectSessionInUrl: true
        }
    };
    if (cookieStore) {
        options.cookies = {
            get (name) {
                const v = typeof cookieStore?.get === "function" ? cookieStore.get(name) : undefined;
                return typeof v === "string" ? v : v?.value;
            }
        };
    }
    return (0, _supabasejs.createClient)(supabaseUrl, supabaseAnonKey, options);
}
const getCurrentUser = async ()=>{
    const { data: { user }, error } = await supabase.auth.getUser();
    if (error) throw error;
    return user;
};
const signOut = async ()=>{
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
};
const getProfile = async (userId)=>{
    try {
        const { data, error } = await supabase.from("profiles").select("*").eq("id", userId).single();
        if (error) throw error;
        return data;
    } catch (error) {
        console.error("Error fetching profile:", error);
        return null;
    }
};
const getCurrentUserProfile = async ()=>{
    try {
        const user = await getCurrentUser();
        if (!user) return null;
        return await getProfile(user.id);
    } catch (error) {
        console.error("Error fetching current user profile:", error);
        return null;
    }
};
const updateProfile = async (userId, updates)=>{
    try {
        const { data, error } = await supabase.from("profiles").update(updates).eq("id", userId).select().single();
        if (error) throw error;
        return {
            success: true,
            data
        };
    } catch (error) {
        console.error("Error updating profile:", error);
        return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
        };
    }
};
const uploadPhoto = async (userId, file, isProfilePicture = false)=>{
    try {
        // Validate image
        const validation = validateImage(file);
        if (!validation.valid) {
            throw new Error(validation.error);
        }
        // Compress image
        const compressedFile = await compressImage(file);
        // Generate unique filename
        const fileExt = file.name.split(".").pop();
        const fileName = `${userId}/${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${fileExt}`;
        // Upload to storage
        const { data: uploadData, error: uploadError } = await supabase.storage.from("profile-pictures").upload(fileName, compressedFile);
        if (uploadError) throw uploadError;
        // Get public URL
        const { data: urlData } = supabase.storage.from("profile-pictures").getPublicUrl(fileName);
        // Update profile if this is the profile picture
        if (isProfilePicture) {
            await updateProfile(userId, {
                profile_picture_url: urlData.publicUrl
            });
        }
        return {
            success: true,
            url: urlData.publicUrl,
            path: fileName
        };
    } catch (error) {
        console.error("Error uploading photo:", error);
        return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
        };
    }
};
const deletePhoto = async (path)=>{
    try {
        const { error } = await supabase.storage.from("profile-pictures").remove([
            path
        ]);
        if (error) throw error;
        return {
            success: true
        };
    } catch (error) {
        console.error("Error deleting photo:", error);
        return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
        };
    }
};
const calculateProfileCompletion = async (userId)=>{
    try {
        const profile = await getProfile(userId);
        if (!profile) {
            return {
                percentage: 0,
                completed_steps: [],
                missing_steps: [
                    "basic_info"
                ],
                total_points: 0,
                max_points: 100
            };
        }
        const steps = [
            {
                id: "basic_info",
                completed: !!(profile.first_name && profile.email),
                points: 15
            },
            {
                id: "profile_picture",
                completed: !!profile.profile_picture_url,
                points: 20
            },
            {
                id: "bio",
                completed: !!(profile.bio && profile.bio.length > 20),
                points: 15
            },
            {
                id: "location",
                completed: !!profile.location,
                points: 10
            },
            {
                id: "date_of_birth",
                completed: !!profile.date_of_birth,
                points: 10
            },
            {
                id: "interests",
                completed: !!(profile.interests && profile.interests.length >= 3),
                points: 15
            },
            {
                id: "verification",
                completed: profile.verification_status === "verified",
                points: 10
            },
            {
                id: "preferences",
                completed: !!profile.preferences?.looking_for,
                points: 5
            }
        ];
        const completedSteps = steps.filter((step)=>step.completed);
        const missingSteps = steps.filter((step)=>!step.completed);
        const totalPoints = completedSteps.reduce((sum, step)=>sum + step.points, 0);
        const maxPoints = steps.reduce((sum, step)=>sum + step.points, 0);
        return {
            percentage: Math.round(totalPoints / maxPoints * 100),
            completed_steps: completedSteps.map((s)=>s.id),
            missing_steps: missingSteps.map((s)=>s.id),
            total_points: totalPoints,
            max_points: maxPoints
        };
    } catch (error) {
        console.error("Error calculating profile completion:", error);
        return {
            percentage: 0,
            completed_steps: [],
            missing_steps: [
                "error"
            ],
            total_points: 0,
            max_points: 100
        };
    }
};
const searchProfiles = async (filters)=>{
    try {
        let query = supabase.from("profiles").select("*").eq("is_active", true).eq("verification_status", "verified");
        // Apply filters
        if (filters?.age_range) {
            const today = new Date();
            const minDate = new Date(today.getFullYear() - filters.age_range.max, today.getMonth(), today.getDate());
            const maxDate = new Date(today.getFullYear() - filters.age_range.min, today.getMonth(), today.getDate());
            query = query.gte("date_of_birth", minDate.toISOString().split("T")[0]);
            query = query.lte("date_of_birth", maxDate.toISOString().split("T")[0]);
        }
        if (filters?.membership_tier) {
            query = query.eq("membership_tier", filters.membership_tier);
        }
        if (filters?.location?.length) {
            // Use ilike for partial location matching
            const locationFilter = filters.location.map((loc)=>`location.ilike.%${loc}%`).join(",");
            query = query.or(locationFilter);
        }
        if (filters?.limit) {
            query = query.limit(filters.limit);
        }
        const { data, error } = await query;
        if (error) throw error;
        // Filter by text search if provided
        let results = data || [];
        if (filters?.query) {
            const searchTerm = filters.query.toLowerCase();
            results = results.filter((profile)=>profile.first_name?.toLowerCase().includes(searchTerm) || profile.last_name?.toLowerCase().includes(searchTerm) || profile.bio?.toLowerCase().includes(searchTerm) || profile.location?.toLowerCase().includes(searchTerm));
        }
        return results;
    } catch (error) {
        console.error("Error searching profiles:", error);
        return [];
    }
};
const uploadFile = async (bucket, path, file)=>{
    const { data, error } = await supabase.storage.from(bucket).upload(path, file);
    if (error) throw error;
    return data;
};
const getPublicUrl = (bucket, path)=>{
    const { data } = supabase.storage.from(bucket).getPublicUrl(path);
    return data.publicUrl;
};
const validateImage = (file)=>{
    const maxSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = [
        "image/jpeg",
        "image/jpg",
        "image/png",
        "image/webp"
    ];
    if (!allowedTypes.includes(file.type)) {
        return {
            valid: false,
            error: "Please upload a JPG, PNG, or WebP image"
        };
    }
    if (file.size > maxSize) {
        return {
            valid: false,
            error: "Image must be smaller than 5MB"
        };
    }
    return {
        valid: true
    };
};
const compressImage = async (file, maxWidth = 1000, quality = 0.8)=>{
    return new Promise((resolve)=>{
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        const img = new Image();
        img.onload = ()=>{
            // Calculate new dimensions
            let { width, height } = img;
            if (width > maxWidth) {
                height = height * maxWidth / width;
                width = maxWidth;
            }
            canvas.width = width;
            canvas.height = height;
            // Draw and compress
            ctx?.drawImage(img, 0, 0, width, height);
            canvas.toBlob((blob)=>{
                if (blob) {
                    const compressedFile = new File([
                        blob
                    ], file.name, {
                        type: file.type,
                        lastModified: Date.now()
                    });
                    resolve(compressedFile);
                } else {
                    resolve(file);
                }
            }, file.type, quality);
        };
        img.src = URL.createObjectURL(file);
    });
};
const getMembershipTierConfig = (tier)=>{
    const configs = {
        basic: {
            tier: "basic",
            name: "Basic",
            namePortuguese: "B\xe1sico",
            monthlyPrice: 0,
            yearlyPrice: 0,
            description: "Basic community access with limited features",
            descriptionPortuguese: "Acesso b\xe1sico \xe0 comunidade com funcionalidades limitadas",
            color: "gray",
            icon: "UserIcon",
            features: [
                "5 matches per day",
                "20 messages per month",
                "Basic community events",
                "Profile browsing"
            ],
            featuresPortuguese: [
                "5 matches por dia",
                "20 mensagens por m\xeas",
                "Eventos b\xe1sicos da comunidade",
                "Navega\xe7\xe3o de perfis"
            ],
            limits: {
                dailyMatches: 5,
                monthlyMessages: 20,
                premiumEvents: 0,
                livestreamHours: 0
            }
        },
        student: {
            tier: "student",
            name: "Student",
            namePortuguese: "Estudante",
            monthlyPrice: 1250,
            yearlyPrice: 12500,
            description: "Special pricing for university students with verification",
            descriptionPortuguese: "Pre\xe7os especiais para estudantes universit\xe1rios com verifica\xe7\xe3o",
            color: "blue",
            icon: "AcademicCapIcon",
            features: [
                "50 matches per day",
                "100 messages per month",
                "2 premium events per month",
                "5 hours livestream access",
                "University partnerships",
                "Student network access"
            ],
            featuresPortuguese: [
                "50 matches por dia",
                "100 mensagens por m\xeas",
                "2 eventos premium por m\xeas",
                "5 horas de acesso a livestream",
                "Parcerias universit\xe1rias",
                "Acesso \xe0 rede de estudantes"
            ],
            limits: {
                dailyMatches: 50,
                monthlyMessages: 100,
                premiumEvents: 2,
                livestreamHours: 5
            },
            studentDiscount: 50
        },
        professional: {
            tier: "professional",
            name: "Professional",
            namePortuguese: "Profissional",
            monthlyPrice: 2500,
            yearlyPrice: 25000,
            description: "Full access for Lusophone professionals in London",
            descriptionPortuguese: "Acesso completo para profissionais portugueses em Londres",
            color: "primary",
            icon: "BriefcaseIcon",
            features: [
                "Unlimited matches",
                "Unlimited messages",
                "5 premium events per month",
                "10 hours livestream access",
                "Professional networking",
                "Business directory listing"
            ],
            featuresPortuguese: [
                "Matches ilimitados",
                "Mensagens ilimitadas",
                "5 eventos premium por m\xeas",
                "10 horas de acesso a livestream",
                "Networking profissional",
                "Listagem no diret\xf3rio de neg\xf3cios"
            ],
            limits: {
                dailyMatches: -1,
                monthlyMessages: -1,
                premiumEvents: 5,
                livestreamHours: 10
            },
            popular: true
        },
        business: {
            tier: "business",
            name: "Business",
            namePortuguese: "Neg\xf3cios",
            monthlyPrice: 9900,
            yearlyPrice: 99000,
            description: "Corporate networking and partnership tools",
            descriptionPortuguese: "Ferramentas de networking empresarial e parcerias",
            color: "amber",
            icon: "BuildingOfficeIcon",
            features: [
                "Unlimited everything",
                "25 hours livestream access",
                "Corporate event hosting",
                "Partnership opportunities",
                "Bulk employee accounts",
                "Business analytics"
            ],
            featuresPortuguese: [
                "Tudo ilimitado",
                "25 horas de acesso a livestream",
                "Hospedagem de eventos corporativos",
                "Oportunidades de parceria",
                "Contas em massa para funcion\xe1rios",
                "An\xe1lises de neg\xf3cios"
            ],
            limits: {
                dailyMatches: -1,
                monthlyMessages: -1,
                premiumEvents: -1,
                livestreamHours: 25
            }
        },
        vip: {
            tier: "vip",
            name: "VIP",
            namePortuguese: "VIP",
            monthlyPrice: 24900,
            yearlyPrice: 249000,
            description: "Exclusive VIP experiences and priority access",
            descriptionPortuguese: "Experi\xeancias VIP exclusivas e acesso priorit\xe1rio",
            color: "purple",
            icon: "CrownIcon",
            features: [
                "Everything unlimited",
                "VIP events and experiences",
                "Personal concierge service",
                "Priority matching algorithm",
                "Exclusive networking events",
                "Direct access to founders"
            ],
            featuresPortuguese: [
                "Tudo ilimitado",
                "Eventos e experi\xeancias VIP",
                "Servi\xe7o de concierge pessoal",
                "Algoritmo de matching priorit\xe1rio",
                "Eventos de networking exclusivos",
                "Acesso direto aos fundadores"
            ],
            limits: {
                dailyMatches: -1,
                monthlyMessages: -1,
                premiumEvents: -1,
                livestreamHours: -1
            }
        }
    };
    return configs[tier];
};
const getCulturalPreferences = async (userId)=>{
    try {
        const { data, error } = await supabase.from("cultural_preferences").select("*").eq("user_id", userId).single();
        if (error && error.code !== "PGRST116") {
            // PGRST116 means no rows found
            throw error;
        }
        return data;
    } catch (error) {
        console.error("Error fetching cultural preferences:", error);
        return null;
    }
};
const saveCulturalPreferences = async (userId, preferences)=>{
    try {
        const { data, error } = await supabase.from("cultural_preferences").upsert({
            user_id: userId,
            ...preferences,
            last_updated: new Date().toISOString(),
            quiz_version: "1.0"
        }).select().single();
        if (error) throw error;
        // Trigger compatibility calculation for this user
        try {
            await supabase.rpc("update_user_compatibility_scores", {
                target_user_id: userId
            });
        } catch (compatError) {
            console.warn("Failed to update compatibility scores:", compatError);
        // Don't fail the main operation if compatibility calculation fails
        }
        return {
            success: true,
            data
        };
    } catch (error) {
        console.error("Error saving cultural preferences:", error);
        return {
            success: false,
            error: error instanceof Error ? error.message : "Unknown error"
        };
    }
};
const getCulturalCompatibility = async (userAId, userBId)=>{
    try {
        const { data, error } = await supabase.from("cultural_compatibility").select("*").eq("user_a_id", userAId).eq("user_b_id", userBId).single();
        if (error && error.code !== "PGRST116") {
            throw error;
        }
        return data;
    } catch (error) {
        console.error("Error fetching cultural compatibility:", error);
        return null;
    }
};
const getTopCulturalMatches = async (userId, limit = 10)=>{
    try {
        const { data, error } = await supabase.from("cultural_compatibility").select(`
        *,
        profile:profiles!cultural_compatibility_user_b_id_fkey(*)
      `).eq("user_a_id", userId).order("overall_compatibility", {
            ascending: false
        }).limit(limit);
        if (error) throw error;
        return data || [];
    } catch (error) {
        console.error("Error fetching top cultural matches:", error);
        return [];
    }
};
const getPortugueseCulturalElements = async ()=>{
    try {
        const { data, error } = await supabase.from("portuguese_cultural_elements").select("*").eq("is_active", true).order("popularity_score", {
            ascending: false
        });
        if (error) throw error;
        return data || [];
    } catch (error) {
        console.error("Error fetching Lusophone cultural elements:", error);
        return [];
    }
};
const getCulturalInsights = async ()=>{
    try {
        const { data, error } = await supabase.from("cultural_insights").select("*").eq("is_active", true).order("category");
        if (error) throw error;
        return data || [];
    } catch (error) {
        console.error("Error fetching cultural insights:", error);
        return [];
    }
};

//# sourceMappingURL=data:application/json;base64,