b9e7e2a3fe8fa395802bc4890ca23a83
// Translation loader and management utility
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    clearTranslationCache: function() {
        return clearTranslationCache;
    },
    getAvailableLanguages: function() {
        return getAvailableLanguages;
    },
    isValidLanguage: function() {
        return isValidLanguage;
    },
    loadTranslations: function() {
        return loadTranslations;
    },
    preloadTranslations: function() {
        return preloadTranslations;
    },
    translateKey: function() {
        return translateKey;
    }
});
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Translation cache to avoid repeated JSON parsing
let translationCache = {};
async function loadTranslations(language) {
    // Return cached translations if already loaded
    if (translationCache[language]) {
        return translationCache[language];
    }
    try {
        // Dynamic import to enable code splitting
        const translations = await Promise.resolve(`./${language}.json`).then((p)=>/*#__PURE__*/ _interop_require_wildcard(require(p)));
        translationCache[language] = translations.default;
        return translations.default;
    } catch (error) {
        console.error(`Failed to load translations for language: ${language}`, error);
        // Fallback to English if Lusophone fails to load
        if (language === "pt") {
            return loadTranslations("en");
        }
        // Return empty object as final fallback
        return {};
    }
}
function translateKey(translations, key, fallback) {
    const value = translations[key];
    if (value !== undefined) {
        return value;
    }
    // Return fallback or the key itself for debugging
    return fallback || key;
}
async function preloadTranslations() {
    try {
        await Promise.all([
            loadTranslations("en"),
            loadTranslations("pt")
        ]);
    } catch (error) {
        console.error("Failed to preload translations:", error);
    }
}
function clearTranslationCache() {
    translationCache = {};
}
function getAvailableLanguages() {
    return [
        "en",
        "pt"
    ];
}
function isValidLanguage(lang) {
    return getAvailableLanguages().includes(lang);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0x1c29Ub3duL3dlYi1hcHAvc3JjL2kxOG4vaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVHJhbnNsYXRpb24gbG9hZGVyIGFuZCBtYW5hZ2VtZW50IHV0aWxpdHlcbmV4cG9ydCB0eXBlIExhbmd1YWdlID0gJ2VuJyB8ICdwdCdcblxuLy8gVHJhbnNsYXRpb24gY2FjaGUgdG8gYXZvaWQgcmVwZWF0ZWQgSlNPTiBwYXJzaW5nXG5sZXQgdHJhbnNsYXRpb25DYWNoZTogUmVjb3JkPExhbmd1YWdlLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IHt9IGFzIFJlY29yZDxMYW5ndWFnZSwgUmVjb3JkPHN0cmluZywgc3RyaW5nPj5cblxuLyoqXG4gKiBEeW5hbWljYWxseSBsb2FkcyB0cmFuc2xhdGlvbiBmaWxlcyBvbmx5IHdoZW4gbmVlZGVkXG4gKiBUaGlzIHJlZHVjZXMgaW5pdGlhbCBidW5kbGUgc2l6ZSBieSBsYXp5LWxvYWRpbmcgdHJhbnNsYXRpb25zXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkVHJhbnNsYXRpb25zKGxhbmd1YWdlOiBMYW5ndWFnZSk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4ge1xuICAvLyBSZXR1cm4gY2FjaGVkIHRyYW5zbGF0aW9ucyBpZiBhbHJlYWR5IGxvYWRlZFxuICBpZiAodHJhbnNsYXRpb25DYWNoZVtsYW5ndWFnZV0pIHtcbiAgICByZXR1cm4gdHJhbnNsYXRpb25DYWNoZVtsYW5ndWFnZV1cbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gRHluYW1pYyBpbXBvcnQgdG8gZW5hYmxlIGNvZGUgc3BsaXR0aW5nXG4gICAgY29uc3QgdHJhbnNsYXRpb25zID0gYXdhaXQgaW1wb3J0KGAuLyR7bGFuZ3VhZ2V9Lmpzb25gKVxuICAgIHRyYW5zbGF0aW9uQ2FjaGVbbGFuZ3VhZ2VdID0gdHJhbnNsYXRpb25zLmRlZmF1bHRcbiAgICByZXR1cm4gdHJhbnNsYXRpb25zLmRlZmF1bHRcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gbG9hZCB0cmFuc2xhdGlvbnMgZm9yIGxhbmd1YWdlOiAke2xhbmd1YWdlfWAsIGVycm9yKVxuICAgIFxuICAgIC8vIEZhbGxiYWNrIHRvIEVuZ2xpc2ggaWYgTHVzb3Bob25lIGZhaWxzIHRvIGxvYWRcbiAgICBpZiAobGFuZ3VhZ2UgPT09ICdwdCcpIHtcbiAgICAgIHJldHVybiBsb2FkVHJhbnNsYXRpb25zKCdlbicpXG4gICAgfVxuICAgIFxuICAgIC8vIFJldHVybiBlbXB0eSBvYmplY3QgYXMgZmluYWwgZmFsbGJhY2tcbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG4vKipcbiAqIFRyYW5zbGF0aW9uIGZ1bmN0aW9uIHdpdGggZmFsbGJhY2sgc3VwcG9ydFxuICogQHBhcmFtIHRyYW5zbGF0aW9ucyAtIFRoZSBsb2FkZWQgdHJhbnNsYXRpb25zIG9iamVjdFxuICogQHBhcmFtIGtleSAtIFRyYW5zbGF0aW9uIGtleSAoZS5nLiwgJ2hlcm8udGl0bGUnKVxuICogQHBhcmFtIGZhbGxiYWNrIC0gT3B0aW9uYWwgZmFsbGJhY2sgdGV4dCBpZiBrZXkgaXMgbm90IGZvdW5kXG4gKiBAcmV0dXJucyBUcmFuc2xhdGVkIHN0cmluZyBvciBmYWxsYmFja1xuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlS2V5KFxuICB0cmFuc2xhdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sIFxuICBrZXk6IHN0cmluZywgXG4gIGZhbGxiYWNrPzogc3RyaW5nXG4pOiBzdHJpbmcge1xuICBjb25zdCB2YWx1ZSA9IHRyYW5zbGF0aW9uc1trZXldXG4gIFxuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG4gIFxuICAvLyBSZXR1cm4gZmFsbGJhY2sgb3IgdGhlIGtleSBpdHNlbGYgZm9yIGRlYnVnZ2luZ1xuICByZXR1cm4gZmFsbGJhY2sgfHwga2V5XG59XG5cbi8qKlxuICogUHJlbG9hZCB0cmFuc2xhdGlvbnMgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICogQ2FsbCB0aGlzIGR1cmluZyBhcHAgaW5pdGlhbGl6YXRpb24gdG8gY2FjaGUgdHJhbnNsYXRpb25zXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkVHJhbnNsYXRpb25zKCk6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIGxvYWRUcmFuc2xhdGlvbnMoJ2VuJyksXG4gICAgICBsb2FkVHJhbnNsYXRpb25zKCdwdCcpXG4gICAgXSlcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcHJlbG9hZCB0cmFuc2xhdGlvbnM6JywgZXJyb3IpXG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhciB0cmFuc2xhdGlvbiBjYWNoZSAodXNlZnVsIGZvciB0ZXN0aW5nIG9yIG1lbW9yeSBtYW5hZ2VtZW50KVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJUcmFuc2xhdGlvbkNhY2hlKCk6IHZvaWQge1xuICB0cmFuc2xhdGlvbkNhY2hlID0ge30gYXMgUmVjb3JkPExhbmd1YWdlLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PlxufVxuXG4vKipcbiAqIEdldCBhdmFpbGFibGUgbGFuZ3VhZ2VzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdmFpbGFibGVMYW5ndWFnZXMoKTogTGFuZ3VhZ2VbXSB7XG4gIHJldHVybiBbJ2VuJywgJ3B0J11cbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBpZiBhIGxhbmd1YWdlIGlzIHN1cHBvcnRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZExhbmd1YWdlKGxhbmc6IHN0cmluZyk6IGxhbmcgaXMgTGFuZ3VhZ2Uge1xuICByZXR1cm4gZ2V0QXZhaWxhYmxlTGFuZ3VhZ2VzKCkuaW5jbHVkZXMobGFuZyBhcyBMYW5ndWFnZSlcbn0iXSwibmFtZXMiOlsiY2xlYXJUcmFuc2xhdGlvbkNhY2hlIiwiZ2V0QXZhaWxhYmxlTGFuZ3VhZ2VzIiwiaXNWYWxpZExhbmd1YWdlIiwibG9hZFRyYW5zbGF0aW9ucyIsInByZWxvYWRUcmFuc2xhdGlvbnMiLCJ0cmFuc2xhdGVLZXkiLCJ0cmFuc2xhdGlvbkNhY2hlIiwibGFuZ3VhZ2UiLCJ0cmFuc2xhdGlvbnMiLCJkZWZhdWx0IiwiZXJyb3IiLCJjb25zb2xlIiwia2V5IiwiZmFsbGJhY2siLCJ2YWx1ZSIsInVuZGVmaW5lZCIsIlByb21pc2UiLCJhbGwiLCJsYW5nIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiJBQUFBLDRDQUE0Qzs7Ozs7Ozs7Ozs7O0lBMEU1QkEscUJBQXFCO2VBQXJCQTs7SUFPQUMscUJBQXFCO2VBQXJCQTs7SUFPQUMsZUFBZTtlQUFmQTs7SUE5RU1DLGdCQUFnQjtlQUFoQkE7O0lBa0RBQyxtQkFBbUI7ZUFBbkJBOztJQW5CTkMsWUFBWTtlQUFaQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF0Q2hCLG1EQUFtRDtBQUNuRCxJQUFJQyxtQkFBNkQsQ0FBQztBQU0zRCxlQUFlSCxpQkFBaUJJLFFBQWtCO0lBQ3ZELCtDQUErQztJQUMvQyxJQUFJRCxnQkFBZ0IsQ0FBQ0MsU0FBUyxFQUFFO1FBQzlCLE9BQU9ELGdCQUFnQixDQUFDQyxTQUFTO0lBQ25DO0lBRUEsSUFBSTtRQUNGLDBDQUEwQztRQUMxQyxNQUFNQyxlQUFlLE1BQU0sZ0JBQU8sQ0FBQyxFQUFFLEVBQUVELFNBQVMsS0FBSyxDQUFDLG9EQUEzQjtRQUMzQkQsZ0JBQWdCLENBQUNDLFNBQVMsR0FBR0MsYUFBYUMsT0FBTztRQUNqRCxPQUFPRCxhQUFhQyxPQUFPO0lBQzdCLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsQ0FBQywwQ0FBMEMsRUFBRUgsU0FBUyxDQUFDLEVBQUVHO1FBRXZFLGlEQUFpRDtRQUNqRCxJQUFJSCxhQUFhLE1BQU07WUFDckIsT0FBT0osaUJBQWlCO1FBQzFCO1FBRUEsd0NBQXdDO1FBQ3hDLE9BQU8sQ0FBQztJQUNWO0FBQ0Y7QUFTTyxTQUFTRSxhQUNkRyxZQUFvQyxFQUNwQ0ksR0FBVyxFQUNYQyxRQUFpQjtJQUVqQixNQUFNQyxRQUFRTixZQUFZLENBQUNJLElBQUk7SUFFL0IsSUFBSUUsVUFBVUMsV0FBVztRQUN2QixPQUFPRDtJQUNUO0lBRUEsa0RBQWtEO0lBQ2xELE9BQU9ELFlBQVlEO0FBQ3JCO0FBTU8sZUFBZVI7SUFDcEIsSUFBSTtRQUNGLE1BQU1ZLFFBQVFDLEdBQUcsQ0FBQztZQUNoQmQsaUJBQWlCO1lBQ2pCQSxpQkFBaUI7U0FDbEI7SUFDSCxFQUFFLE9BQU9PLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLG1DQUFtQ0E7SUFDbkQ7QUFDRjtBQUtPLFNBQVNWO0lBQ2RNLG1CQUFtQixDQUFDO0FBQ3RCO0FBS08sU0FBU0w7SUFDZCxPQUFPO1FBQUM7UUFBTTtLQUFLO0FBQ3JCO0FBS08sU0FBU0MsZ0JBQWdCZ0IsSUFBWTtJQUMxQyxPQUFPakIsd0JBQXdCa0IsUUFBUSxDQUFDRDtBQUMxQyJ9