85c3c193fae517ca5ec305e734c8fe1b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../utils/test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock pages - these would normally be imported
const MockHomePage = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "home-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Bem-vindo ao LusoTown"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                children: "Explorar Eventos"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Comunidade de Falantes de Portugu\xeas em Londres"
            })
        ]
    });
const MockEventsPage = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "events-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Eventos Culturais Portugueses"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "event-card",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        children: "Noite de Fado"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        children: "Centro Cultural Portugu\xeas, Londres"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        children: "Reservar Bilhete"
                    })
                ]
            })
        ]
    });
const MockTransportPage = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "transport-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Servi\xe7os de Transporte Premium"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "subscription-gate",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        children: "Requer subscri\xe7\xe3o ativa"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        children: "Subscrever Agora"
                    })
                ]
            })
        ]
    });
describe("Portuguese User Journey Integration Tests", ()=>{
    describe("New Portuguese User Onboarding", ()=>{
        it("should complete full onboarding flow in Portuguese", async ()=>{
            // Step 1: Visit homepage
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}), {
                initialLanguage: "pt"
            });
            // Should show Portuguese welcome message
            expect(_testutils.screen.getByText("Bem-vindo ao LusoTown")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Comunidade de Falantes de Portugu\xeas em Londres")).toBeInTheDocument();
            // Step 2: Language preference should be maintained
            expect(localStorage.getItem("lusotown-language")).toBe("pt");
            // Step 3: Click explore events
            _testutils.fireEvent.click(_testutils.screen.getByText("Explorar Eventos"));
            // Should navigate to events page
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            expect(_testutils.screen.getByText("Eventos Culturais Portugueses")).toBeInTheDocument();
        });
        it("should handle Portuguese user registration with cultural preferences", async ()=>{
            const mockUser = {
                ..._testutils.portugueseTestUtils.mockPortugueseUser,
                culturalInterests: [
                    "Fado",
                    "Literatura",
                    "Gastronomia"
                ],
                location: "Londres, Reino Unido",
                languagePreference: "pt"
            };
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}), {
                initialLanguage: "pt",
                mockUser
            });
            // User preferences should be stored
            expect(localStorage.getItem("lusotown-user")).toContain("Jo\xe3o Silva");
            expect(localStorage.getItem("lusotown-language")).toBe("pt");
        });
        it("should provide Portuguese cultural event recommendations", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // Should show Portuguese cultural events
            expect(_testutils.screen.getByText("Noite de Fado")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Centro Cultural Portugu\xeas, Londres")).toBeInTheDocument();
            // Should maintain Portuguese cultural context
            expect(_testutils.screen.getByTestId("event-card")).toBeInTheDocument();
        });
    });
    describe("Premium Subscription User Journey", ()=>{
        it("should guide user through subscription upgrade for transport services", async ()=>{
            // Step 1: User tries to access transport services
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTransportPage, {}), {
                initialLanguage: "pt"
            });
            // Should show subscription requirement
            expect(_testutils.screen.getByText("Requer subscri\xe7\xe3o ativa")).toBeInTheDocument();
            // Step 2: Click subscribe
            _testutils.fireEvent.click(_testutils.screen.getByText("Subscrever Agora"));
            // Should initiate subscription flow
            expect(_testutils.screen.getByTestId("subscription-gate")).toBeInTheDocument();
        });
        it("should apply premium discounts correctly for Portuguese services", ()=>{
            const mockPremiumUser = {
                ..._testutils.portugueseTestUtils.mockPortugueseUser,
                membershipTier: "platinum",
                subscription: _testutils.portugueseTestUtils.mockPremiumSubscription
            };
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTransportPage, {}), {
                initialLanguage: "pt",
                mockUser: mockPremiumUser
            });
            // Premium users should see discounted prices
            expect(_testutils.screen.getByText("Servi\xe7os de Transporte Premium")).toBeInTheDocument();
        });
        it("should handle student verification for Portuguese students", async ()=>{
            const mockStudentUser = {
                ..._testutils.portugueseTestUtils.mockPortugueseUser,
                membershipTier: "student",
                university: "King's College London",
                studentId: "KCL123456"
            };
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt",
                mockUser: mockStudentUser
            });
            // Student discounts should be applied
            expect(_testutils.screen.getByTestId("events-page")).toBeInTheDocument();
        });
    });
    describe("Event Booking and Networking Journey", ()=>{
        it("should complete event booking with networking features", async ()=>{
            const mockUser = _testutils.portugueseTestUtils.mockPortugueseUser;
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt",
                mockUser
            });
            // Step 1: Select event
            expect(_testutils.screen.getByText("Noite de Fado")).toBeInTheDocument();
            // Step 2: Book ticket
            _testutils.fireEvent.click(_testutils.screen.getByText("Reservar Bilhete"));
            // Should show booking confirmation
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("event-card")).toBeInTheDocument();
            });
        });
        it("should create networking connections after event attendance", async ()=>{
            // Mock event attendance
            const mockConnections = _testutils.portugueseTestUtils.mockPortugueseConnections;
            // User attends event and makes connections
            localStorage.setItem("lusotown-connections", JSON.stringify(mockConnections));
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt",
                mockUser: _testutils.portugueseTestUtils.mockPortugueseUser
            });
            // Connections should be available
            expect(localStorage.getItem("lusotown-connections")).toContain("Maria");
        });
        it("should provide Portuguese conversation starters for networking", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // Should show cultural conversation prompts
            const culturalContext = _testutils.screen.getByTestId("events-page");
            expect(culturalContext).toBeInTheDocument();
        });
    });
    describe("Business Professional Journey", ()=>{
        it("should support business networking events in Portuguese", async ()=>{
            const mockBusinessUser = {
                ..._testutils.portugueseTestUtils.mockPortugueseUser,
                userType: "business_professional",
                industry: "Technology",
                businessInterests: [
                    "AI",
                    "Digital Marketing",
                    "Startups"
                ]
            };
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt",
                mockUser: mockBusinessUser
            });
            // Should show business-focused content
            expect(_testutils.screen.getByText("Eventos Culturais Portugueses")).toBeInTheDocument();
        });
        it("should facilitate Portuguese business directory access", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // Should access Portuguese business listings
            expect(_testutils.screen.getByTestId("events-page")).toBeInTheDocument();
        });
    });
    describe("Cultural Content and Language Features", ()=>{
        it("should preserve Portuguese cultural terms throughout journey", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            const eventCard = _testutils.screen.getByTestId("event-card");
            // Verify Portuguese cultural terms are preserved
            _testutils.securityTestUtils.expectSanitizedContent(eventCard, "Fado");
            expect(eventCard).toHaveTextContent("Noite de Fado");
        });
        it("should handle Portuguese character input correctly", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}), {
                initialLanguage: "pt"
            });
            // Test Portuguese character handling
            const textContent = _testutils.screen.getByText("Bem-vindo ao LusoTown");
            expect(textContent.textContent).toContain("Bem-vindo");
        });
        it("should maintain cultural context in UI elements", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // Should show Portuguese location context
            expect(_testutils.screen.getByText("Centro Cultural Portugu\xeas, Londres")).toBeInTheDocument();
        });
    });
    describe("Mobile Experience Journey", ()=>{
        it("should provide optimal mobile experience for Portuguese users", ()=>{
            // Set mobile viewport
            Object.defineProperty(window, "innerWidth", {
                writable: true,
                configurable: true,
                value: 375
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // Should render properly on mobile
            expect(_testutils.screen.getByTestId("events-page")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Eventos Culturais Portugueses")).toBeInTheDocument();
        });
        it("should handle touch interactions correctly", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            const bookButton = _testutils.screen.getByText("Reservar Bilhete");
            // Simulate touch event
            const touchEvent = new TouchEvent("touchstart", {
                touches: [
                    {
                        clientX: 100,
                        clientY: 100,
                        identifier: 0
                    }
                ]
            });
            bookButton.dispatchEvent(touchEvent);
            expect(bookButton).toBeInTheDocument();
        });
    });
    describe("Data Privacy and Security", ()=>{
        it("should protect Portuguese user data properly", ()=>{
            const mockUser = _testutils.portugueseTestUtils.mockPortugueseUser;
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockHomePage, {}), {
                initialLanguage: "pt",
                mockUser
            });
            // Sensitive data should not be exposed
            const userDataString = localStorage.getItem("lusotown-user");
            if (userDataString) {
                const userData = JSON.parse(userDataString);
                // Should not contain sensitive information in plain text
                expect(userData.password).toBeUndefined();
                expect(userData.paymentInfo).toBeUndefined();
            }
        });
        it("should sanitize Portuguese content against XSS", ()=>{
            const maliciousContent = _testutils.securityTestUtils.createXSSPayload();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            const eventCard = _testutils.screen.getByTestId("event-card");
            _testutils.securityTestUtils.expectSanitizedContent(eventCard, maliciousContent);
        });
        it("should prevent SQL injection in Portuguese search queries", ()=>{
            const sqlInjectionPayload = _testutils.securityTestUtils.createSQLInjectionPayload();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // SQL injection should be prevented
            const eventCard = _testutils.screen.getByTestId("event-card");
            expect(eventCard.textContent).not.toContain("DROP TABLE");
        });
    });
    describe("Performance and Accessibility", ()=>{
        it("should load Portuguese content quickly", async ()=>{
            const startTime = performance.now();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            const endTime = performance.now();
            const loadTime = endTime - startTime;
            // Should load within acceptable time
            expect(loadTime).toBeLessThan(100) // 100ms threshold
            ;
        });
        it("should be accessible to Portuguese users with disabilities", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // Should have proper ARIA labels in Portuguese
            const heading = _testutils.screen.getByText("Eventos Culturais Portugueses");
            expect(heading.tagName).toBe("H1");
            // Should have proper semantic structure
            expect(_testutils.screen.getByTestId("events-page")).toBeInTheDocument();
        });
        it("should support screen readers in Portuguese", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            const eventCard = _testutils.screen.getByTestId("event-card");
            // Should have proper semantic markup for screen readers
            expect(eventCard).toBeInTheDocument();
            expect(_testutils.screen.getByText("Noite de Fado")).toBeInTheDocument();
        });
    });
    describe("Cross-Platform Integration", ()=>{
        it("should maintain Portuguese preferences across platform features", ()=>{
            // Start on events page
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt"
            });
            // Navigate to transport
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTransportPage, {}), {
                initialLanguage: "pt"
            });
            // Language preference should be maintained
            expect(localStorage.getItem("lusotown-language")).toBe("pt");
            expect(_testutils.screen.getByText("Servi\xe7os de Transporte Premium")).toBeInTheDocument();
        });
        it("should sync Portuguese user data across features", ()=>{
            const mockUser = _testutils.portugueseTestUtils.mockPortugueseUser;
            // User data should be consistent across pages
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventsPage, {}), {
                initialLanguage: "pt",
                mockUser
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockTransportPage, {}), {
                initialLanguage: "pt",
                mockUser
            });
            // User preferences should persist
            expect(localStorage.getItem("lusotown-user")).toContain("Jo\xe3o Silva");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,