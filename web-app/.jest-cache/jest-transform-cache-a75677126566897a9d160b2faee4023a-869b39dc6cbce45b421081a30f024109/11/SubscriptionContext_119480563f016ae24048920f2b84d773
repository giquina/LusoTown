ff32f2355a10a969d7003bc3c637e4dc
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SubscriptionProvider: function() {
        return SubscriptionProvider;
    },
    useSubscription: function() {
        return useSubscription;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _stripejs = require("@stripe/stripe-js");
const _LanguageContext = require("./LanguageContext");
const _auth = require("../lib/auth");
const _supabase = require("../lib/supabase");
const _reacthottoast = /*#__PURE__*/ _interop_require_default(require("react-hot-toast"));
const _routes = require("../config/routes");
const _logger = /*#__PURE__*/ _interop_require_default(require("../utils/logger"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Initialize Stripe - with fallback for development
const stripePromise = (0, _stripejs.loadStripe)(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || "pk_test_placeholder");
const SubscriptionContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function SubscriptionProvider({ children }) {
    const { language, t } = (0, _LanguageContext.useLanguage)();
    const [subscription, setSubscription] = (0, _react.useState)(null);
    const [trial, setTrial] = (0, _react.useState)(null);
    const [usage, setUsage] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [stripe, setStripe] = (0, _react.useState)(null);
    // Initialize Stripe
    (0, _react.useEffect)(()=>{
        const initializeStripe = async ()=>{
            const stripeInstance = await stripePromise;
            setStripe(stripeInstance);
        };
        initializeStripe();
    }, []);
    // Load subscription status when user changes
    (0, _react.useEffect)(()=>{
        const checkUserSubscription = async ()=>{
            const user = _auth.authService.getCurrentUser();
            if (user && !_auth.authService.isDemoUser()) {
                await checkSubscriptionStatus();
            } else {
                setSubscription(null);
                setTrial(null);
                setIsLoading(false);
            }
        };
        checkUserSubscription();
        // Listen for auth state changes
        const unsubscribe = _auth.authService.onAuthStateChange(checkUserSubscription);
        return unsubscribe;
    }, []);
    const checkSubscriptionStatus = async ()=>{
        setIsLoading(true);
        try {
            const user = _auth.authService.getCurrentUser();
            if (!user || _auth.authService.isDemoUser()) {
                setSubscription(null);
                setTrial(null);
                return;
            }
            // Check for active subscription
            const { data: subscriptionData, error: subError } = await _supabase.supabase.from("subscriptions").select("*").eq("user_id", user.id).eq("status", "active").single();
            if (subError && subError.code !== "PGRST116") {
                _logger.default.error("Error fetching subscription:", subError);
            } else if (subscriptionData) {
                setSubscription(subscriptionData);
            }
            // Check for trial status
            const { data: trialData, error: trialError } = await _supabase.supabase.from("subscription_trials").select("*").eq("user_id", user.id).single();
            if (trialError && trialError.code !== "PGRST116") {
                _logger.default.error("Error fetching trial:", trialError);
            } else if (trialData) {
                setTrial(trialData);
            }
        } catch (error) {
            _logger.default.error("Error checking subscription status:", error);
        } finally{
            setIsLoading(false);
        }
    };
    const createSubscription = async (tier = "community", planType = "monthly")=>{
        try {
            const user = _auth.authService.getCurrentUser();
            if (!user || _auth.authService.isDemoUser()) {
                throw new Error("User must be logged in to create subscription");
            }
            // Call your backend API to create Stripe checkout session
            const response = await fetch("/api/create-subscription", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    userId: user.id,
                    userEmail: user.email,
                    userName: user.name,
                    tier: tier,
                    planType: planType
                })
            });
            if (!response.ok) {
                throw new Error("Failed to create subscription");
            }
            const { sessionId } = await response.json();
            if (!stripe) {
                throw new Error("Stripe not initialized");
            }
            // Redirect to Stripe Checkout
            const { error } = await stripe.redirectToCheckout({
                sessionId
            });
            if (error) {
                _logger.default.error("Stripe checkout error:", error);
                _reacthottoast.default.error(language === "pt" ? "Erro ao processar pagamento. Tente novamente." : "Payment processing error. Please try again.");
                return null;
            }
            return sessionId;
        } catch (error) {
            _logger.default.error("Error creating subscription:", error);
            _reacthottoast.default.error(language === "pt" ? "Erro ao criar subscri\xe7\xe3o. Tente novamente." : "Error creating subscription. Please try again.");
            return null;
        }
    };
    const cancelSubscription = async ()=>{
        try {
            const user = _auth.authService.getCurrentUser();
            if (!user || !subscription) {
                return false;
            }
            const response = await fetch("/api/cancel-subscription", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    subscriptionId: subscription.stripe_subscription_id
                })
            });
            if (!response.ok) {
                throw new Error("Failed to cancel subscription");
            }
            // Refresh subscription status
            await checkSubscriptionStatus();
            _reacthottoast.default.success(language === "pt" ? "Subscri\xe7\xe3o cancelada com sucesso" : "Subscription cancelled successfully");
            return true;
        } catch (error) {
            _logger.default.error("Error cancelling subscription:", error);
            _reacthottoast.default.error(language === "pt" ? "Erro ao cancelar subscri\xe7\xe3o" : "Error cancelling subscription");
            return false;
        }
    };
    const redirectToSubscription = ()=>{
        window.location.href = _routes.ROUTES.subscription;
    };
    const upgradeSubscription = async (newTier)=>{
        try {
            const user = _auth.authService.getCurrentUser();
            if (!user || !subscription) {
                return false;
            }
            const response = await fetch("/api/upgrade-subscription", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    subscriptionId: subscription.stripe_subscription_id,
                    newTier: newTier
                })
            });
            if (!response.ok) {
                throw new Error("Failed to upgrade subscription");
            }
            // Refresh subscription status
            await checkSubscriptionStatus();
            _reacthottoast.default.success(language === "pt" ? "Subscri\xe7\xe3o atualizada com sucesso" : "Subscription upgraded successfully");
            return true;
        } catch (error) {
            _logger.default.error("Error upgrading subscription:", error);
            _reacthottoast.default.error(language === "pt" ? "Erro ao atualizar subscri\xe7\xe3o" : "Error upgrading subscription");
            return false;
        }
    };
    const markTrialAsUsed = async ()=>{
        try {
            const user = _auth.authService.getCurrentUser();
            if (!user || !trial) return;
            const { error } = await _supabase.supabase.from("subscription_trials").update({
                is_used: true
            }).eq("user_id", user.id);
            if (error) {
                _logger.default.error("Error marking trial as used:", error);
            } else {
                setTrial((prev)=>prev ? {
                        ...prev,
                        is_used: true
                    } : null);
            }
        } catch (error) {
            _logger.default.error("Error marking trial as used:", error);
        }
    };
    const trackMembershipUsage = async (benefitType, serviceType, discountApplied = 0, amountSaved = 0)=>{
        try {
            const user = _auth.authService.getCurrentUser();
            if (!user || !subscription) return;
            const { error } = await _supabase.supabase.from("membership_usage").insert({
                user_id: user.id,
                subscription_id: subscription.id,
                benefit_type: benefitType,
                service_type: serviceType,
                discount_applied: discountApplied,
                amount_saved: amountSaved
            });
            if (error) {
                _logger.default.error("Error tracking membership usage:", error);
            }
        } catch (error) {
            _logger.default.error("Error tracking membership usage:", error);
        }
    };
    const trackFeatureUsage = async (feature)=>{
        try {
            const user = _auth.authService.getCurrentUser();
            if (!user) return false;
            // Check current usage limits
            if (!canUseFeature(feature)) {
                return false;
            }
            // Update usage counts
            const today = new Date().toISOString().split("T")[0];
            const currentMonth = new Date().toISOString().substring(0, 7);
            // Start from a strongly-typed baseline and then copy forward allowed counters
            let updatedUsage = {
                dailyMatchesUsed: 0,
                monthlyMessagesUsed: usage?.lastResetDate?.substring(0, 7) === currentMonth ? usage.monthlyMessagesUsed : 0,
                premiumEventsUsed: 0,
                livestreamHoursUsed: 0,
                lastResetDate: today
            };
            // If same day, carry forward today's counters
            if (usage && usage.lastResetDate === today) {
                updatedUsage.dailyMatchesUsed = usage.dailyMatchesUsed;
                updatedUsage.premiumEventsUsed = usage.premiumEventsUsed;
                updatedUsage.livestreamHoursUsed = usage.livestreamHoursUsed;
            }
            // Increment the specific counter
            switch(feature){
                case "match":
                    updatedUsage.dailyMatchesUsed++;
                    break;
                case "message":
                    updatedUsage.monthlyMessagesUsed++;
                    break;
                case "premium_event":
                    updatedUsage.premiumEventsUsed++;
                    break;
                case "livestream":
                    updatedUsage.livestreamHoursUsed++;
                    break;
            }
            // Save to database
            const { error } = await _supabase.supabase.from("subscription_usage").upsert({
                user_id: user.id,
                ...updatedUsage
            });
            if (error) {
                _logger.default.error("Error tracking feature usage:", error);
                return false;
            }
            setUsage(updatedUsage);
            return true;
        } catch (error) {
            _logger.default.error("Error tracking feature usage:", error);
            return false;
        }
    };
    const validateStudentStatus = async (studentEmail, universityId)=>{
        try {
            const response = await fetch("/api/validate-student", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    email: studentEmail,
                    universityId: universityId
                })
            });
            if (!response.ok) {
                return false;
            }
            const { isValid } = await response.json();
            return isValid;
        } catch (error) {
            _logger.default.error("Error validating student status:", error);
            return false;
        }
    };
    // Helper function to check feature usage
    const canUseFeature = (feature)=>{
        if (usageLimits.hasUnlimitedAccess) return true;
        if (!usage) return true // First time usage
        ;
        const today = new Date().toISOString().split("T")[0];
        const currentMonth = new Date().toISOString().substring(0, 7);
        // Reset counters if needed
        const dailyReset = usage.lastResetDate !== today;
        const monthlyReset = usage.lastResetDate.substring(0, 7) !== currentMonth;
        switch(feature){
            case "match":
                const dailyMatches = dailyReset ? 0 : usage.dailyMatchesUsed;
                return dailyMatches < usageLimits.dailyMatches;
            case "message":
                const monthlyMessages = monthlyReset ? 0 : usage.monthlyMessagesUsed;
                return monthlyMessages < usageLimits.monthlyMessages;
            case "premium_event":
                return usage.premiumEventsUsed < usageLimits.premiumEvents;
            case "livestream":
                return usage.livestreamHoursUsed < usageLimits.livestreamHours;
            default:
                return false;
        }
    };
    // Computed values
    const hasActiveSubscription = Boolean(subscription && subscription.status === "active" && subscription.current_period_end && new Date(subscription.current_period_end) > new Date());
    const isInTrial = Boolean(trial && !trial.is_used && new Date(trial.trial_end) > new Date());
    const trialDaysRemaining = trial && !trial.is_used ? Math.max(0, Math.ceil((new Date(trial.trial_end).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))) : 0;
    // Subscription is required for all users except demo users
    const subscriptionRequired = !_auth.authService.isDemoUser() && !hasActiveSubscription && !isInTrial;
    // Get current membership tier
    const membershipTier = hasActiveSubscription && subscription?.tier ? subscription.tier : "none";
    // Normalize to an effective tier for limits/discounts
    const effectiveTier = membershipTier === "none" ? "free" : membershipTier;
    // Calculate service discount based on tier - Portuguese-speaking community optimized
    const serviceDiscount = (()=>{
        switch(effectiveTier){
            case "community":
                return 10 // 10% member discount
                ;
            case "ambassador":
                return 20 // 20% ambassador discount  
                ;
            case "familia":
                return 15 // 15% family discount
                ;
            default:
                return 0;
        }
    })();
    // Usage limits based on tier - Optimized for Portuguese-speaking community conversion
    const usageLimits = (()=>{
        switch(effectiveTier){
            case "free":
                return {
                    dailyMatches: 2,
                    monthlyMessages: 3,
                    premiumEvents: 0,
                    livestreamHours: 0,
                    hasUnlimitedAccess: false
                };
            case "community":
                return {
                    dailyMatches: -1,
                    monthlyMessages: -1,
                    premiumEvents: -1,
                    livestreamHours: 0,
                    hasUnlimitedAccess: false
                };
            case "ambassador":
                return {
                    dailyMatches: -1,
                    monthlyMessages: -1,
                    premiumEvents: -1,
                    livestreamHours: 5,
                    hasUnlimitedAccess: false // Limited streaming hours, not unlimited
                };
            case "familia":
                return {
                    dailyMatches: -1,
                    monthlyMessages: -1,
                    premiumEvents: -1,
                    livestreamHours: 3,
                    hasUnlimitedAccess: false // Family-appropriate limitations
                };
            default:
                return {
                    dailyMatches: 2,
                    monthlyMessages: 3,
                    premiumEvents: 0,
                    livestreamHours: 0,
                    hasUnlimitedAccess: false
                };
        }
    })();
    // Feature access functions
    const canSendMessage = ()=>{
        return canUseFeature("message");
    };
    const canCreateMatch = ()=>{
        return canUseFeature("match");
    };
    const canAccessPremiumEvent = ()=>{
        return canUseFeature("premium_event");
    };
    const canAccessLivestream = ()=>{
        return canUseFeature("livestream");
    };
    const getRemainingMatches = ()=>{
        if (usageLimits.hasUnlimitedAccess || usageLimits.dailyMatches === -1) return -1;
        const today = new Date().toISOString().split("T")[0];
        const dailyUsed = usage?.lastResetDate === today ? usage.dailyMatchesUsed : 0;
        return Math.max(0, usageLimits.dailyMatches - dailyUsed);
    };
    const getRemainingMessages = ()=>{
        if (usageLimits.hasUnlimitedAccess || usageLimits.monthlyMessages === -1) return -1;
        const currentMonth = new Date().toISOString().substring(0, 7);
        const monthlyUsed = usage?.lastResetDate?.substring(0, 7) === currentMonth ? usage.monthlyMessagesUsed : 0;
        return Math.max(0, usageLimits.monthlyMessages - monthlyUsed);
    };
    const value = {
        subscription,
        trial,
        usage,
        isLoading,
        hasActiveSubscription,
        isInTrial,
        trialDaysRemaining,
        subscriptionRequired,
        stripe,
        membershipTier,
        serviceDiscount,
        usageLimits,
        canSendMessage,
        canCreateMatch,
        canAccessPremiumEvent,
        canAccessLivestream,
        getRemainingMatches,
        getRemainingMessages,
        checkSubscriptionStatus,
        createSubscription,
        upgradeSubscription,
        cancelSubscription,
        redirectToSubscription,
        markTrialAsUsed,
        trackMembershipUsage,
        trackFeatureUsage,
        validateStudentStatus
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(SubscriptionContext.Provider, {
        value: value,
        children: children
    });
}
function useSubscription() {
    const context = (0, _react.useContext)(SubscriptionContext);
    if (context === undefined) {
        throw new Error("useSubscription must be used within a SubscriptionProvider");
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,