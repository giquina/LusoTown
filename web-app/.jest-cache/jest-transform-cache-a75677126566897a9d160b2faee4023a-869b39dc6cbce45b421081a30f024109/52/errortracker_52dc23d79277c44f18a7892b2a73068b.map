{"version":3,"sources":["/workspaces/LusoTown/web-app/src/lib/monitoring/error-tracker.ts"],"sourcesContent":["/**\n * Comprehensive Error Tracking System for LusoTown Platform\n * Handles Portuguese community-specific error tracking and monitoring with Sentry integration\n */\n\nimport * as Sentry from '@sentry/nextjs'\nimport { \n  ERROR_MONITORING, \n  MONITORING_ALERTS, \n  ERROR_CATEGORIES,\n  PORTUGUESE_ERROR_CONTEXTS,\n  ERROR_SEVERITY,\n  PORTUGUESE_ERROR_THRESHOLDS\n} from '@/config/error-monitoring'\nimport { LusoTownError, ErrorType } from '@/lib/errorHandling'\nimport { getErrorMessage, getContextualErrorMessage } from './portuguese-error-messages'\n\nexport interface ErrorEvent {\n  id: string\n  timestamp: Date\n  message: string\n  type: ErrorType\n  severity: keyof typeof ERROR_SEVERITY\n  context: string\n  stack?: string\n  userAgent?: string\n  url?: string\n  userId?: string\n  sessionId?: string\n  portugueseContext?: {\n    language: 'pt' | 'en'\n    culturalFeature?: string\n    businessDirectoryAction?: string\n    characterEncodingIssue?: boolean\n    mobileDevice?: boolean\n  }\n  metadata?: Record<string, any>\n}\n\nexport interface PerformanceMetric {\n  name: string\n  value: number\n  timestamp: Date\n  context: string\n  threshold?: number\n  exceedsThreshold: boolean\n}\n\nclass ErrorTracker {\n  private errorQueue: ErrorEvent[] = []\n  private performanceQueue: PerformanceMetric[] = []\n  private errorCounts: Map<string, number> = new Map()\n  private lastFlush: Date = new Date()\n  private sessionId: string = this.generateSessionId()\n\n  constructor() {\n    this.setupErrorCapture()\n    this.setupPerformanceCapture()\n    this.setupPeriodicFlush()\n  }\n\n  private generateSessionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private setupErrorCapture() {\n    if (typeof window === 'undefined') return\n\n    // Capture unhandled errors\n    window.addEventListener('error', (event) => {\n      this.trackError({\n        message: event.message,\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.HIGH,\n        context: 'unhandled-error',\n        stack: event.error?.stack,\n        url: event.filename,\n        metadata: {\n          lineno: event.lineno,\n          colno: event.colno\n        }\n      })\n    })\n\n    // Capture unhandled promise rejections\n    window.addEventListener('unhandledrejection', (event) => {\n      this.trackError({\n        message: event.reason?.message || 'Unhandled promise rejection',\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.HIGH,\n        context: 'unhandled-rejection',\n        stack: event.reason?.stack,\n        metadata: {\n          reason: event.reason\n        }\n      })\n    })\n  }\n\n  trackError(errorData: Partial<ErrorEvent>) {\n    const error: ErrorEvent = {\n      id: this.generateErrorId(),\n      timestamp: new Date(),\n      message: errorData.message || 'Unknown error',\n      type: errorData.type || ErrorType.UNKNOWN,\n      severity: errorData.severity || ERROR_SEVERITY.MEDIUM,\n      context: errorData.context || 'unknown',\n      stack: errorData.stack,\n      userAgent: typeof window !== 'undefined' ? navigator.userAgent : undefined,\n      url: typeof window !== 'undefined' ? window.location.href : undefined,\n      sessionId: this.sessionId,\n      userId: errorData.userId,\n      portugueseContext: errorData.portugueseContext,\n      metadata: errorData.metadata\n    }\n\n    // Send to Sentry with Portuguese community context\n    this.sendToSentry(error)\n\n    this.errorQueue.push(error)\n    this.updateErrorCounts(error)\n    this.checkAlertThresholds(error)\n\n    // Immediate flush for critical errors\n    if (error.severity === ERROR_SEVERITY.CRITICAL) {\n      this.flushErrors()\n    }\n  }\n\n  trackPerformanceMetric(metricData: Omit<PerformanceMetric, 'timestamp' | 'exceedsThreshold'>) {\n    const metric: PerformanceMetric = {\n      ...metricData,\n      timestamp: new Date(),\n      exceedsThreshold: metricData.threshold ? metricData.value > metricData.threshold : false\n    }\n\n    this.performanceQueue.push(metric)\n\n    // Track performance issues as errors if they exceed thresholds\n    if (metric.exceedsThreshold) {\n      this.trackError({\n        message: `Performance threshold exceeded: ${metric.name} (${metric.value}ms > ${metric.threshold}ms)`,\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.MEDIUM,\n        context: 'performance-degradation',\n        metadata: { metric }\n      })\n    }\n  }\n\n  private generateErrorId(): string {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  private updateErrorCounts(error: ErrorEvent) {\n    const key = `${error.context}-${error.severity}`\n    const current = this.errorCounts.get(key) || 0\n    this.errorCounts.set(key, current + 1)\n  }\n\n  private checkAlertThresholds(error: ErrorEvent) {\n    const category = Object.values(ERROR_CATEGORIES).find(cat => \n      cat.context === error.context\n    )\n\n    if (category) {\n      const key = `${error.context}-${error.severity}`\n      const count = this.errorCounts.get(key) || 0\n\n      if (count >= category.alertThreshold) {\n        this.triggerAlert(error, category, count)\n      }\n    }\n  }\n\n  private triggerAlert(error: ErrorEvent, category: any, count: number) {\n    if (!MONITORING_ALERTS.criticalErrors.enabled) return\n\n    console.error('ALERT TRIGGERED:', {\n      category: category.name,\n      error: error.message,\n      count,\n      severity: error.severity,\n      context: error.context,\n      timestamp: error.timestamp\n    })\n\n    // Dispatch custom event for UI notifications\n    if (typeof window !== 'undefined') {\n      window.dispatchEvent(new CustomEvent('lusotown:error-alert', {\n        detail: { error, category, count }\n      }))\n    }\n  }\n\n  private setupPeriodicFlush() {\n    // Flush errors and metrics every 5 minutes\n    setInterval(() => {\n      this.flushErrors()\n      this.flushMetrics()\n    }, 5 * 60 * 1000)\n\n    // Flush on page unload\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', () => {\n        this.flushErrors()\n        this.flushMetrics()\n      })\n    }\n  }\n\n  private async flushErrors() {\n    if (this.errorQueue.length === 0) return\n\n    const errorsToFlush = [...this.errorQueue]\n    this.errorQueue = []\n\n    try {\n      if (ERROR_MONITORING.enabled && ERROR_MONITORING.endpoint) {\n        await this.sendToMonitoringService(errorsToFlush, 'errors')\n      } else {\n        console.group('üö® Error Batch:', errorsToFlush.length, 'errors')\n        errorsToFlush.forEach(error => {\n          console.error('Error:', error.message, error)\n        })\n        console.groupEnd()\n      }\n    } catch (flushError) {\n      console.error('Failed to flush errors:', flushError)\n      this.errorQueue.unshift(...errorsToFlush)\n    }\n  }\n\n  private async flushMetrics() {\n    if (this.performanceQueue.length === 0) return\n\n    const metricsToFlush = [...this.performanceQueue]\n    this.performanceQueue = []\n\n    try {\n      if (ERROR_MONITORING.enabled && ERROR_MONITORING.endpoint) {\n        await this.sendToMonitoringService(metricsToFlush, 'metrics')\n      } else {\n        console.group('üìä Performance Metrics:', metricsToFlush.length, 'metrics')\n        metricsToFlush.forEach(metric => {\n          const status = metric.exceedsThreshold ? '‚ùå' : '‚úÖ'\n          console.log(`${status} ${metric.name}: ${metric.value}ms`, metric)\n        })\n        console.groupEnd()\n      }\n    } catch (flushError) {\n      console.error('Failed to flush metrics:', flushError)\n      this.performanceQueue.unshift(...metricsToFlush)\n    }\n  }\n\n  private async sendToMonitoringService(data: any[], type: 'errors' | 'metrics') {\n    if (!ERROR_MONITORING.endpoint || !ERROR_MONITORING.apiKey) return\n\n    const response = await fetch(ERROR_MONITORING.endpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ERROR_MONITORING.apiKey}`\n      },\n      body: JSON.stringify({\n        type,\n        data,\n        environment: ERROR_MONITORING.environment,\n        timestamp: new Date().toISOString(),\n        sessionId: this.sessionId\n      })\n    })\n\n    if (!response.ok) {\n      throw new Error(`Failed to send ${type} to monitoring service: ${response.statusText}`)\n    }\n  }\n\n  private sendToSentry(error: ErrorEvent) {\n    try {\n      // Set user context if available\n      if (error.userId) {\n        Sentry.setUser({\n          id: error.userId,\n          segment: 'portuguese-community'\n        })\n      }\n\n      // Set Portuguese community context\n      Sentry.setContext('portuguese_community', {\n        feature_context: error.context,\n        language: error.portugueseContext?.language || 'unknown',\n        cultural_feature: error.portugueseContext?.culturalFeature,\n        business_directory_action: error.portugueseContext?.businessDirectoryAction,\n        mobile_device: error.portugueseContext?.mobileDevice || false,\n        character_encoding_issue: error.portugueseContext?.characterEncodingIssue || false\n      })\n\n      // Set additional metadata\n      Sentry.setTags({\n        error_severity: error.severity,\n        error_type: error.type,\n        error_context: error.context,\n        session_id: error.sessionId\n      })\n\n      // Add breadcrumb for error sequence\n      Sentry.addBreadcrumb({\n        message: `Error in ${error.context}`,\n        category: 'error',\n        level: error.severity as any,\n        data: {\n          error_id: error.id,\n          portuguese_context: error.portugueseContext,\n          metadata: error.metadata\n        }\n      })\n\n      // Capture the error\n      if (error.stack) {\n        const sentryError = new Error(error.message)\n        sentryError.stack = error.stack\n        Sentry.captureException(sentryError)\n      } else {\n        Sentry.captureMessage(error.message, error.severity as any)\n      }\n\n    } catch (sentryError) {\n      console.error('Failed to send error to Sentry:', sentryError)\n    }\n  }\n\n  // Public methods for manual tracking\n  trackPortugueseFeatureError(featureContext: keyof typeof PORTUGUESE_ERROR_CONTEXTS, error: Error | string, metadata?: any) {\n    const language = typeof window !== 'undefined' ? \n      (localStorage.getItem('preferred-language') as 'en' | 'pt') || 'en' : 'en'\n\n    this.trackError({\n      message: typeof error === 'string' ? error : error.message,\n      type: ErrorType.CLIENT_ERROR,\n      severity: ERROR_SEVERITY.HIGH,\n      context: PORTUGUESE_ERROR_CONTEXTS[featureContext],\n      stack: typeof error === 'string' ? undefined : error.stack,\n      portugueseContext: {\n        language,\n        culturalFeature: featureContext,\n        mobileDevice: typeof window !== 'undefined' ? /Mobile|Android|iPhone|iPad/.test(navigator.userAgent) : false\n      },\n      metadata\n    })\n  }\n\n  getErrorSummary() {\n    return {\n      totalErrors: this.errorQueue.length,\n      errorsByContext: Array.from(this.errorCounts.entries()).reduce((acc, [key, count]) => {\n        acc[key] = count\n        return acc\n      }, {} as Record<string, number>),\n      criticalErrors: this.errorQueue.filter(e => e.severity === ERROR_SEVERITY.CRITICAL).length,\n      portugueseRelatedErrors: this.errorQueue.filter(e => e.portugueseContext).length\n    }\n  }\n}\n\n// Global error tracker instance\nexport const errorTracker = new ErrorTracker()\n\n// Export the class for testing\nexport { ErrorTracker }\n"],"names":["ErrorTracker","errorTracker","constructor","errorQueue","performanceQueue","errorCounts","Map","lastFlush","Date","sessionId","generateSessionId","setupErrorCapture","setupPerformanceCapture","setupPeriodicFlush","now","Math","random","toString","substr","window","addEventListener","event","trackError","message","type","ErrorType","CLIENT_ERROR","severity","ERROR_SEVERITY","HIGH","context","stack","error","url","filename","metadata","lineno","colno","reason","errorData","id","generateErrorId","timestamp","UNKNOWN","MEDIUM","userAgent","navigator","undefined","location","href","userId","portugueseContext","sendToSentry","push","updateErrorCounts","checkAlertThresholds","CRITICAL","flushErrors","trackPerformanceMetric","metricData","metric","exceedsThreshold","threshold","value","name","key","current","get","set","category","Object","values","ERROR_CATEGORIES","find","cat","count","alertThreshold","triggerAlert","MONITORING_ALERTS","criticalErrors","enabled","console","dispatchEvent","CustomEvent","detail","setInterval","flushMetrics","length","errorsToFlush","ERROR_MONITORING","endpoint","sendToMonitoringService","group","forEach","groupEnd","flushError","unshift","metricsToFlush","status","log","data","apiKey","response","fetch","method","headers","body","JSON","stringify","environment","toISOString","ok","Error","statusText","Sentry","setUser","segment","setContext","feature_context","language","cultural_feature","culturalFeature","business_directory_action","businessDirectoryAction","mobile_device","mobileDevice","character_encoding_issue","characterEncodingIssue","setTags","error_severity","error_type","error_context","session_id","addBreadcrumb","level","error_id","portuguese_context","sentryError","captureException","captureMessage","trackPortugueseFeatureError","featureContext","localStorage","getItem","PORTUGUESE_ERROR_CONTEXTS","test","getErrorSummary","totalErrors","errorsByContext","Array","from","entries","reduce","acc","filter","e","portugueseRelatedErrors"],"mappings":"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"}