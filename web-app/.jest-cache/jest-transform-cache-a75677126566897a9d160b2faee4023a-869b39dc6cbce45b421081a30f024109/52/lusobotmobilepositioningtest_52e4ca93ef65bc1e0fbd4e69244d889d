82eeab67df28acbda4f067fdb095675f
"use strict";
// Mock framer-motion for testing
jest.mock("framer-motion", ()=>({
        motion: {
            div: ({ children, className, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: className,
                    ...props,
                    children: children
                }),
            button: ({ children, className, onClick, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    className: className,
                    onClick: onClick,
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _LanguageContext = require("../../src/context/LanguageContext");
const _LusoBotWidget = /*#__PURE__*/ _interop_require_default(require("../../src/components/LusoBotWidget"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock window.visualViewport for keyboard detection testing
const mockVisualViewport = {
    height: 800,
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
};
Object.defineProperty(window, "visualViewport", {
    value: mockVisualViewport,
    writable: true
});
// Helper function to render LusoBotWidget with providers
const renderWithProviders = (props = {})=>{
    return (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LusoBotWidget.default, {
            ...props
        })
    }));
};
// Mock window dimensions for mobile testing
const mockWindowDimensions = (width, height)=>{
    Object.defineProperty(window, "innerWidth", {
        writable: true,
        configurable: true,
        value: width
    });
    Object.defineProperty(window, "innerHeight", {
        writable: true,
        configurable: true,
        value: height
    });
    // Trigger resize event
    (0, _react1.fireEvent)(window, new Event("resize"));
};
describe("LusoBotWidget Mobile Positioning", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Reset to desktop dimensions
        mockWindowDimensions(1024, 768);
    });
    describe("Mobile Positioning", ()=>{
        it("should use mobile-safe positioning on mobile devices", async ()=>{
            // Set mobile dimensions (iPhone SE width)
            mockWindowDimensions(375, 667);
            renderWithProviders({
                position: "bottom-right"
            });
            // Wait for mobile detection to trigger
            await (0, _react1.waitFor)(()=>{
                const widget = document.querySelector('[class*="fixed"]');
                expect(widget).toHaveClass("bottom-24"); // Above mobile nav
                expect(widget).toHaveClass("right-16"); // Avoid FloatingNavigation FAB
                expect(widget).toHaveClass("safe-area-bottom"); // iOS safe area
            });
        });
        it("should use desktop positioning on larger screens", ()=>{
            mockWindowDimensions(1024, 768);
            renderWithProviders({
                position: "bottom-right"
            });
            const widget = document.querySelector('[class*="fixed"]');
            expect(widget).toHaveClass("bottom-6");
            expect(widget).toHaveClass("right-6");
        });
        it("should have proper z-index to avoid navigation conflicts", ()=>{
            renderWithProviders();
            const widget = document.querySelector('[class*="fixed"]');
            expect(widget).toHaveClass("z-40"); // Below mobile nav z-50
        });
    });
    describe("Mobile Chat Window", ()=>{
        it("should use mobile-optimized dimensions on small screens", async ()=>{
            mockWindowDimensions(375, 667);
            renderWithProviders();
            const chatButton = _react1.screen.getByRole("button");
            _react1.fireEvent.click(chatButton);
            await (0, _react1.waitFor)(()=>{
                const chatWindow = document.querySelector('[class*="w-\\[90vw\\]"]');
                expect(chatWindow).toBeInTheDocument();
                expect(chatWindow).toHaveClass("max-w-sm"); // Mobile max width
                expect(chatWindow).toHaveClass("h-[70vh]"); // Mobile height
                expect(chatWindow).toHaveClass("max-h-[500px]"); // Mobile max height
            });
        });
        it("should use desktop dimensions on larger screens", ()=>{
            mockWindowDimensions(1024, 768);
            renderWithProviders();
            const chatButton = _react1.screen.getByRole("button");
            _react1.fireEvent.click(chatButton);
            const chatWindow = document.querySelector('[class*="w-96"]');
            expect(chatWindow).toBeInTheDocument();
            expect(chatWindow).toHaveClass("h-[600px]"); // Desktop height
        });
    });
    describe("Mobile Keyboard Detection", ()=>{
        it("should hide widget when mobile keyboard is open", async ()=>{
            mockWindowDimensions(375, 667);
            renderWithProviders();
            const chatButton = _react1.screen.getByRole("button");
            expect(chatButton).toBeInTheDocument();
            // Simulate keyboard opening (viewport height reduces significantly)
            mockVisualViewport.height = 400; // Keyboard reduces viewport by 400px
            const resizeCallback = mockVisualViewport.addEventListener.mock.calls.find(([event])=>event === "resize")?.[1];
            if (resizeCallback) {
                resizeCallback();
            }
            await (0, _react1.waitFor)(()=>{
                expect(chatButton).not.toBeInTheDocument();
            });
        });
    });
    describe("Touch Target Accessibility", ()=>{
        it("should have minimum touch target size on mobile", async ()=>{
            mockWindowDimensions(375, 667);
            renderWithProviders();
            await (0, _react1.waitFor)(()=>{
                const chatButton = _react1.screen.getByRole("button");
                expect(chatButton).toHaveClass("min-h-[44px]"); // WCAG minimum
                expect(chatButton).toHaveClass("min-w-[44px]");
            });
        });
        it("should use smaller button on mobile while maintaining touch targets", async ()=>{
            mockWindowDimensions(375, 667);
            renderWithProviders();
            await (0, _react1.waitFor)(()=>{
                const chatButton = _react1.screen.getByRole("button");
                expect(chatButton).toHaveClass("w-14"); // Mobile size
                expect(chatButton).toHaveClass("h-14");
                expect(chatButton).toHaveClass("min-h-[44px]"); // Still meets WCAG
            });
        });
    });
    describe("Portuguese Community Branding", ()=>{
        it("should include Portuguese flag indicator", ()=>{
            renderWithProviders();
            const flagIndicator = _react1.screen.getByText("\uD83C\uDDF5\uD83C\uDDF9");
            expect(flagIndicator).toBeInTheDocument();
        });
        it("should have proper Portuguese accessibility labels", ()=>{
            renderWithProviders();
            const chatButton = _react1.screen.getByLabelText(/LusoBot.*PortuguÃªs/i);
            expect(chatButton).toBeInTheDocument();
        });
        it("should support keyboard navigation with Portuguese context", ()=>{
            renderWithProviders();
            const chatButton = _react1.screen.getByRole("button");
            // Test Enter key
            _react1.fireEvent.keyDown(chatButton, {
                key: "Enter"
            });
            expect(chatButton).toHaveAttribute("tabIndex", "0");
            // Test Space key
            _react1.fireEvent.keyDown(chatButton, {
                key: " "
            });
            expect(chatButton).toHaveAttribute("role", "button");
        });
    });
    describe("Conflict Avoidance", ()=>{
        it("should position away from FloatingNavigation FAB on mobile", async ()=>{
            mockWindowDimensions(375, 667);
            renderWithProviders({
                position: "bottom-right"
            });
            await (0, _react1.waitFor)(()=>{
                const widget = document.querySelector('[class*="fixed"]');
                expect(widget).toHaveClass("right-16"); // Moved left to avoid FAB at right-6
            });
        });
        it("should not conflict with mobile navigation z-index", ()=>{
            renderWithProviders();
            const widget = document.querySelector('[class*="fixed"]');
            expect(widget).toHaveClass("z-40"); // Below mobile nav z-50
        });
    });
});

//# sourceMappingURL=data:application/json;base64,