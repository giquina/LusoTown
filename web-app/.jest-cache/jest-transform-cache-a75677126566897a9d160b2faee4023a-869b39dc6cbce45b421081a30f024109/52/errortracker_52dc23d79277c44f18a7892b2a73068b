ed893056e21217d23c4ebe29afff89dc
/**
 * Comprehensive Error Tracking System for LusoTown Platform
 * Handles Portuguese community-specific error tracking and monitoring with Sentry integration
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ErrorTracker: function() {
        return ErrorTracker;
    },
    errorTracker: function() {
        return errorTracker;
    }
});
const _nextjs = /*#__PURE__*/ _interop_require_wildcard(require("@sentry/nextjs"));
const _errormonitoring = require("../../config/error-monitoring");
const _errorHandling = require("../errorHandling");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class ErrorTracker {
    constructor(){
        this.errorQueue = [];
        this.performanceQueue = [];
        this.errorCounts = new Map();
        this.lastFlush = new Date();
        this.sessionId = this.generateSessionId();
        this.setupErrorCapture();
        this.setupPerformanceCapture();
        this.setupPeriodicFlush();
    }
    generateSessionId() {
        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }
    setupErrorCapture() {
        if (typeof window === "undefined") return;
        // Capture unhandled errors
        window.addEventListener("error", (event)=>{
            this.trackError({
                message: event.message,
                type: _errorHandling.ErrorType.CLIENT_ERROR,
                severity: _errormonitoring.ERROR_SEVERITY.HIGH,
                context: "unhandled-error",
                stack: event.error?.stack,
                url: event.filename,
                metadata: {
                    lineno: event.lineno,
                    colno: event.colno
                }
            });
        });
        // Capture unhandled promise rejections
        window.addEventListener("unhandledrejection", (event)=>{
            this.trackError({
                message: event.reason?.message || "Unhandled promise rejection",
                type: _errorHandling.ErrorType.CLIENT_ERROR,
                severity: _errormonitoring.ERROR_SEVERITY.HIGH,
                context: "unhandled-rejection",
                stack: event.reason?.stack,
                metadata: {
                    reason: event.reason
                }
            });
        });
    }
    trackError(errorData) {
        const error = {
            id: this.generateErrorId(),
            timestamp: new Date(),
            message: errorData.message || "Unknown error",
            type: errorData.type || _errorHandling.ErrorType.UNKNOWN,
            severity: errorData.severity || _errormonitoring.ERROR_SEVERITY.MEDIUM,
            context: errorData.context || "unknown",
            stack: errorData.stack,
            userAgent: typeof window !== "undefined" ? navigator.userAgent : undefined,
            url: typeof window !== "undefined" ? window.location.href : undefined,
            sessionId: this.sessionId,
            userId: errorData.userId,
            portugueseContext: errorData.portugueseContext,
            metadata: errorData.metadata
        };
        // Send to Sentry with Portuguese community context
        this.sendToSentry(error);
        this.errorQueue.push(error);
        this.updateErrorCounts(error);
        this.checkAlertThresholds(error);
        // Immediate flush for critical errors
        if (error.severity === _errormonitoring.ERROR_SEVERITY.CRITICAL) {
            this.flushErrors();
        }
    }
    trackPerformanceMetric(metricData) {
        const metric = {
            ...metricData,
            timestamp: new Date(),
            exceedsThreshold: metricData.threshold ? metricData.value > metricData.threshold : false
        };
        this.performanceQueue.push(metric);
        // Track performance issues as errors if they exceed thresholds
        if (metric.exceedsThreshold) {
            this.trackError({
                message: `Performance threshold exceeded: ${metric.name} (${metric.value}ms > ${metric.threshold}ms)`,
                type: _errorHandling.ErrorType.CLIENT_ERROR,
                severity: _errormonitoring.ERROR_SEVERITY.MEDIUM,
                context: "performance-degradation",
                metadata: {
                    metric
                }
            });
        }
    }
    generateErrorId() {
        return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    updateErrorCounts(error) {
        const key = `${error.context}-${error.severity}`;
        const current = this.errorCounts.get(key) || 0;
        this.errorCounts.set(key, current + 1);
    }
    checkAlertThresholds(error) {
        const category = Object.values(_errormonitoring.ERROR_CATEGORIES).find((cat)=>cat.context === error.context);
        if (category) {
            const key = `${error.context}-${error.severity}`;
            const count = this.errorCounts.get(key) || 0;
            if (count >= category.alertThreshold) {
                this.triggerAlert(error, category, count);
            }
        }
    }
    triggerAlert(error, category, count) {
        if (!_errormonitoring.MONITORING_ALERTS.criticalErrors.enabled) return;
        console.error("ALERT TRIGGERED:", {
            category: category.name,
            error: error.message,
            count,
            severity: error.severity,
            context: error.context,
            timestamp: error.timestamp
        });
        // Dispatch custom event for UI notifications
        if (typeof window !== "undefined") {
            window.dispatchEvent(new CustomEvent("lusotown:error-alert", {
                detail: {
                    error,
                    category,
                    count
                }
            }));
        }
    }
    setupPeriodicFlush() {
        // Flush errors and metrics every 5 minutes
        setInterval(()=>{
            this.flushErrors();
            this.flushMetrics();
        }, 5 * 60 * 1000);
        // Flush on page unload
        if (typeof window !== "undefined") {
            window.addEventListener("beforeunload", ()=>{
                this.flushErrors();
                this.flushMetrics();
            });
        }
    }
    async flushErrors() {
        if (this.errorQueue.length === 0) return;
        const errorsToFlush = [
            ...this.errorQueue
        ];
        this.errorQueue = [];
        try {
            if (_errormonitoring.ERROR_MONITORING.enabled && _errormonitoring.ERROR_MONITORING.endpoint) {
                await this.sendToMonitoringService(errorsToFlush, "errors");
            } else {
                console.group("\uD83D\uDEA8 Error Batch:", errorsToFlush.length, "errors");
                errorsToFlush.forEach((error)=>{
                    console.error("Error:", error.message, error);
                });
                console.groupEnd();
            }
        } catch (flushError) {
            console.error("Failed to flush errors:", flushError);
            this.errorQueue.unshift(...errorsToFlush);
        }
    }
    async flushMetrics() {
        if (this.performanceQueue.length === 0) return;
        const metricsToFlush = [
            ...this.performanceQueue
        ];
        this.performanceQueue = [];
        try {
            if (_errormonitoring.ERROR_MONITORING.enabled && _errormonitoring.ERROR_MONITORING.endpoint) {
                await this.sendToMonitoringService(metricsToFlush, "metrics");
            } else {
                console.group("\uD83D\uDCCA Performance Metrics:", metricsToFlush.length, "metrics");
                metricsToFlush.forEach((metric)=>{
                    const status = metric.exceedsThreshold ? "❌" : "✅";
                    console.log(`${status} ${metric.name}: ${metric.value}ms`, metric);
                });
                console.groupEnd();
            }
        } catch (flushError) {
            console.error("Failed to flush metrics:", flushError);
            this.performanceQueue.unshift(...metricsToFlush);
        }
    }
    async sendToMonitoringService(data, type) {
        if (!_errormonitoring.ERROR_MONITORING.endpoint || !_errormonitoring.ERROR_MONITORING.apiKey) return;
        const response = await fetch(_errormonitoring.ERROR_MONITORING.endpoint, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${_errormonitoring.ERROR_MONITORING.apiKey}`
            },
            body: JSON.stringify({
                type,
                data,
                environment: _errormonitoring.ERROR_MONITORING.environment,
                timestamp: new Date().toISOString(),
                sessionId: this.sessionId
            })
        });
        if (!response.ok) {
            throw new Error(`Failed to send ${type} to monitoring service: ${response.statusText}`);
        }
    }
    sendToSentry(error) {
        try {
            // Set user context if available
            if (error.userId) {
                _nextjs.setUser({
                    id: error.userId,
                    segment: "portuguese-community"
                });
            }
            // Set Portuguese community context
            _nextjs.setContext("portuguese_community", {
                feature_context: error.context,
                language: error.portugueseContext?.language || "unknown",
                cultural_feature: error.portugueseContext?.culturalFeature,
                business_directory_action: error.portugueseContext?.businessDirectoryAction,
                mobile_device: error.portugueseContext?.mobileDevice || false,
                character_encoding_issue: error.portugueseContext?.characterEncodingIssue || false
            });
            // Set additional metadata
            _nextjs.setTags({
                error_severity: error.severity,
                error_type: error.type,
                error_context: error.context,
                session_id: error.sessionId
            });
            // Add breadcrumb for error sequence
            _nextjs.addBreadcrumb({
                message: `Error in ${error.context}`,
                category: "error",
                level: error.severity,
                data: {
                    error_id: error.id,
                    portuguese_context: error.portugueseContext,
                    metadata: error.metadata
                }
            });
            // Capture the error
            if (error.stack) {
                const sentryError = new Error(error.message);
                sentryError.stack = error.stack;
                _nextjs.captureException(sentryError);
            } else {
                _nextjs.captureMessage(error.message, error.severity);
            }
        } catch (sentryError) {
            console.error("Failed to send error to Sentry:", sentryError);
        }
    }
    // Public methods for manual tracking
    trackPortugueseFeatureError(featureContext, error, metadata) {
        const language = typeof window !== "undefined" ? localStorage.getItem("preferred-language") || "en" : "en";
        this.trackError({
            message: typeof error === "string" ? error : error.message,
            type: _errorHandling.ErrorType.CLIENT_ERROR,
            severity: _errormonitoring.ERROR_SEVERITY.HIGH,
            context: _errormonitoring.PORTUGUESE_ERROR_CONTEXTS[featureContext],
            stack: typeof error === "string" ? undefined : error.stack,
            portugueseContext: {
                language,
                culturalFeature: featureContext,
                mobileDevice: typeof window !== "undefined" ? /Mobile|Android|iPhone|iPad/.test(navigator.userAgent) : false
            },
            metadata
        });
    }
    getErrorSummary() {
        return {
            totalErrors: this.errorQueue.length,
            errorsByContext: Array.from(this.errorCounts.entries()).reduce((acc, [key, count])=>{
                acc[key] = count;
                return acc;
            }, {}),
            criticalErrors: this.errorQueue.filter((e)=>e.severity === _errormonitoring.ERROR_SEVERITY.CRITICAL).length,
            portugueseRelatedErrors: this.errorQueue.filter((e)=>e.portugueseContext).length
        };
    }
}
const errorTracker = new ErrorTracker();

//# sourceMappingURL=data:application/json;base64,