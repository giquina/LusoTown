3a7619de0a93d76f0ed4c1b9598ffb3b
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_MOBILE_SETTINGS: function() {
        return DEFAULT_MOBILE_SETTINGS;
    },
    DEFAULT_PWA_SETTINGS: function() {
        return DEFAULT_PWA_SETTINGS;
    },
    DEFAULT_RESPONSIVE: function() {
        return DEFAULT_RESPONSIVE;
    },
    default: function() {
        return _default;
    },
    useCarouselNavigation: function() {
        return useCarouselNavigation;
    },
    useMobilePerformance: function() {
        return useMobilePerformance;
    },
    usePWAFeatures: function() {
        return usePWAFeatures;
    },
    useResponsive: function() {
        return useResponsive;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _framermotion = require("framer-motion");
const _outline = require("@heroicons/react/24/outline");
const _LanguageContext = require("../../context/LanguageContext");
const _portuguesebundleoptimizer = require("../../utils/portuguese-bundle-optimizer");
const _EnhancedMobileGestures = require("../EnhancedMobileGestures");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
/**
 * Default responsive configuration
 */ const DEFAULT_RESPONSIVE = {
    mobile: {
        itemsPerView: 1,
        spacing: 16
    },
    tablet: {
        itemsPerView: 2,
        spacing: 20
    },
    desktop: {
        itemsPerView: 3,
        spacing: 24
    }
};
/**
 * Default mobile settings optimized for Portuguese-speaking community
 */ const DEFAULT_MOBILE_SETTINGS = {
    enableSwipeGestures: true,
    enableHapticFeedback: false,
    enableMomentumScrolling: true,
    enablePullToRefresh: true,
    touchThreshold: 44,
    swipeVelocityThreshold: 0.3,
    enableLazyLoading: true,
    preloadDistance: 2 // Preload 2 items ahead
};
/**
 * Default PWA settings for offline Portuguese cultural content
 */ const DEFAULT_PWA_SETTINGS = {
    enableOfflineMode: true,
    enablePushNotifications: true,
    enableBackgroundSync: true,
    cacheStrategy: "stale-while-revalidate",
    offlineQueueLimit: 50
};
/**
 * Custom hook for responsive configuration
 */ function useResponsive(responsive) {
    const [currentConfig, setCurrentConfig] = (0, _react.useState)(responsive.mobile);
    const [screenSize, setScreenSize] = (0, _react.useState)("mobile");
    (0, _react.useEffect)(()=>{
        const updateConfig = ()=>{
            const width = window.innerWidth;
            if (width >= 1024) {
                setCurrentConfig(responsive.desktop);
                setScreenSize("desktop");
            } else if (width >= 768) {
                setCurrentConfig(responsive.tablet);
                setScreenSize("tablet");
            } else {
                setCurrentConfig(responsive.mobile);
                setScreenSize("mobile");
            }
        };
        updateConfig();
        window.addEventListener("resize", updateConfig);
        return ()=>window.removeEventListener("resize", updateConfig);
    }, [
        responsive
    ]);
    return {
        currentConfig,
        screenSize
    };
}
/**
 * Custom hook for mobile performance monitoring
 */ function useMobilePerformance(onUpdate) {
    const [metrics, setMetrics] = (0, _react.useState)({
        loadTime: 0,
        renderTime: 0,
        interactionLatency: 0,
        memoryUsage: 0,
        networkStatus: "online"
    });
    (0, _react.useEffect)(()=>{
        const startTime = performance.now();
        // Network status monitoring
        const updateNetworkStatus = ()=>{
            const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
            let status = navigator.onLine ? "online" : "offline";
            if (connection && connection.effectiveType) {
                if ([
                    "slow-2g",
                    "2g"
                ].includes(connection.effectiveType)) {
                    status = "slow";
                }
            }
            setMetrics((prev)=>({
                    ...prev,
                    networkStatus: status
                }));
        };
        // Memory usage monitoring
        const updateMemoryUsage = ()=>{
            if ("memory" in performance) {
                const memory = performance.memory;
                setMetrics((prev)=>({
                        ...prev,
                        memoryUsage: memory.usedJSHeapSize / 1024 / 1024 // Convert to MB
                    }));
            }
        };
        // Load time measurement
        const updateLoadTime = ()=>{
            const loadTime = performance.now() - startTime;
            setMetrics((prev)=>({
                    ...prev,
                    loadTime
                }));
        };
        updateNetworkStatus();
        updateMemoryUsage();
        updateLoadTime();
        // Set up periodic updates
        const interval = setInterval(()=>{
            updateMemoryUsage();
            updateNetworkStatus();
        }, 5000);
        // Cleanup
        return ()=>clearInterval(interval);
    }, []);
    (0, _react.useEffect)(()=>{
        onUpdate?.(metrics);
    }, [
        metrics,
        onUpdate
    ]);
    return metrics;
}
/**
 * Custom hook for PWA features
 */ function usePWAFeatures(settings) {
    const [isOffline, setIsOffline] = (0, _react.useState)(!navigator.onLine);
    const [installPrompt, setInstallPrompt] = (0, _react.useState)(null);
    (0, _react.useEffect)(()=>{
        const handleOnline = ()=>setIsOffline(false);
        const handleOffline = ()=>setIsOffline(true);
        const handleBeforeInstallPrompt = (e)=>{
            e.preventDefault();
            setInstallPrompt(e);
        };
        window.addEventListener("online", handleOnline);
        window.addEventListener("offline", handleOffline);
        window.addEventListener("beforeinstallprompt", handleBeforeInstallPrompt);
        return ()=>{
            window.removeEventListener("online", handleOnline);
            window.removeEventListener("offline", handleOffline);
            window.removeEventListener("beforeinstallprompt", handleBeforeInstallPrompt);
        };
    }, []);
    const installPWA = (0, _react.useCallback)(async ()=>{
        if (installPrompt) {
            installPrompt.prompt();
            const result = await installPrompt.userChoice;
            setInstallPrompt(null);
            return result.outcome === "accepted";
        }
        return false;
    }, [
        installPrompt
    ]);
    return {
        isOffline,
        canInstall: !!installPrompt,
        installPWA
    };
}
/**
 * Custom hook for carousel navigation with mobile optimizations
 */ function useCarouselNavigation(items, itemsPerView, autoAdvance = false, autoAdvanceInterval = 5000, mobileSettings) {
    const [currentIndex, setCurrentIndex] = (0, _react.useState)(0);
    const [isPlaying, setIsPlaying] = (0, _react.useState)(autoAdvance);
    const [isTransitioning, setIsTransitioning] = (0, _react.useState)(false);
    const intervalRef = (0, _react.useRef)(null);
    // Mobile momentum scrolling
    const x = (0, _framermotion.useMotionValue)(0);
    const containerRef = (0, _react.useRef)(null);
    const settings = {
        ...DEFAULT_MOBILE_SETTINGS,
        ...mobileSettings
    };
    const maxIndex = Math.max(0, items.length - itemsPerView);
    const goToSlide = (0, _react.useCallback)((index, withAnimation = true)=>{
        const newIndex = Math.max(0, Math.min(index, maxIndex));
        if (newIndex !== currentIndex) {
            setIsTransitioning(withAnimation);
            setCurrentIndex(newIndex);
            // Haptic feedback disabled for better UX
            // if (settings.enableHapticFeedback && 'vibrate' in navigator) {
            //   navigator.vibrate(10)
            // }
            if (withAnimation) {
                setTimeout(()=>setIsTransitioning(false), 300);
            }
        }
    }, [
        currentIndex,
        maxIndex,
        settings.enableHapticFeedback
    ]);
    const goToNext = (0, _react.useCallback)((withAnimation = true)=>{
        const nextIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;
        goToSlide(nextIndex, withAnimation);
    }, [
        currentIndex,
        maxIndex,
        goToSlide
    ]);
    const goToPrevious = (0, _react.useCallback)((withAnimation = true)=>{
        const prevIndex = currentIndex <= 0 ? maxIndex : currentIndex - 1;
        goToSlide(prevIndex, withAnimation);
    }, [
        currentIndex,
        maxIndex,
        goToSlide
    ]);
    const togglePlay = (0, _react.useCallback)(()=>{
        setIsPlaying((prev)=>!prev);
    }, []);
    // Auto-advance logic
    (0, _react.useEffect)(()=>{
        if (isPlaying && items.length > itemsPerView) {
            intervalRef.current = setInterval(()=>goToNext(true), autoAdvanceInterval);
        } else if (intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
        }
        return ()=>{
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, [
        isPlaying,
        items.length,
        itemsPerView,
        goToNext,
        autoAdvanceInterval
    ]);
    // Reset current index if items change
    (0, _react.useEffect)(()=>{
        if (currentIndex > maxIndex) {
            setCurrentIndex(0);
        }
    }, [
        items.length,
        maxIndex,
        currentIndex
    ]);
    return {
        currentIndex,
        isPlaying,
        isTransitioning,
        goToSlide,
        goToNext,
        goToPrevious,
        togglePlay,
        maxIndex,
        x,
        containerRef
    };
}
/**
 * Loading skeleton component
 */ function CarouselSkeleton({ itemsPerView }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: "grid gap-6 animate-pulse",
        style: {
            gridTemplateColumns: `repeat(${itemsPerView}, 1fr)`
        },
        children: Array.from({
            length: itemsPerView
        }).map((_, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "bg-gray-200 rounded-xl h-64"
            }, index))
    });
}
/**
 * Empty state component
 */ function EmptyState({ message }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: "flex flex-col items-center justify-center py-12 text-center",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mb-4",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    className: "text-2xl",
                    children: "\uD83C\uDFDB️"
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                className: "text-gray-600 max-w-md",
                children: message
            })
        ]
    });
}
/**
 * Main LusophoneCarousel Component with Enhanced Mobile Features
 */ const LusophoneCarousel = /*#__PURE__*/ (0, _react.memo)(({ items, renderItem, title, subtitle, responsive = DEFAULT_RESPONSIVE, autoAdvance = false, autoAdvanceInterval = 5000, showControls = true, showDots = true, className = "", onItemClick, loading = false, emptyStateMessage, // Enhanced mobile features
mobileSettings, pwaSettings, onSwipeGesture, onPullToRefresh, onPerformanceUpdate, enablePortugueseGestures = true, enableAccessibilityAnnouncements = true })=>{
    const { language, t } = (0, _LanguageContext.useLanguage)();
    const { stats, loadBundle } = (0, _portuguesebundleoptimizer.usePortugueseBundleOptimization)();
    const { currentConfig, screenSize } = useResponsive(responsive);
    const carouselRef = (0, _react.useRef)(null);
    const [isIntersecting, setIsIntersecting] = (0, _react.useState)(false);
    const controls = (0, _framermotion.useAnimation)();
    // Enhanced mobile settings
    const mobileConfig = {
        ...DEFAULT_MOBILE_SETTINGS,
        ...mobileSettings
    };
    const pwaConfig = {
        ...DEFAULT_PWA_SETTINGS,
        ...pwaSettings
    };
    // Mobile performance monitoring
    const performanceMetrics = useMobilePerformance(onPerformanceUpdate);
    // PWA features
    const { isOffline, canInstall, installPWA } = usePWAFeatures(pwaConfig);
    // Portuguese gesture patterns
    const { detectCulturalPattern } = (0, _EnhancedMobileGestures.usePortugueseGestures)();
    const { currentIndex, isPlaying, isTransitioning, goToSlide, goToNext, goToPrevious, togglePlay, maxIndex, x, containerRef } = useCarouselNavigation(items, currentConfig.itemsPerView, autoAdvance, autoAdvanceInterval, mobileConfig);
    // Pull to refresh state
    const [isPullingToRefresh, setIsPullingToRefresh] = (0, _react.useState)(false);
    const pullDistance = (0, _framermotion.useMotionValue)(0);
    // Enhanced gesture handlers
    const handleSwipe = (0, _react.useCallback)((gesture)=>{
        const { direction, distance, velocity } = gesture;
        if (velocity > mobileConfig.swipeVelocityThreshold && distance > mobileConfig.touchThreshold) {
            const currentItem = items[currentIndex];
            if (direction === "left") {
                goToNext();
                onSwipeGesture?.("left", currentItem);
            } else if (direction === "right") {
                goToPrevious();
                onSwipeGesture?.("right", currentItem);
            }
            // Detect Portuguese cultural gestures
            if (enablePortugueseGestures) {
                const culturalPattern = detectCulturalPattern(gesture);
                if (culturalPattern) {
                    // Handle Portuguese cultural patterns
                    announceAccessibility(t(`carousel.culturalGesture.${culturalPattern}`, `Detected ${culturalPattern} gesture`));
                }
            }
        }
    }, [
        goToNext,
        goToPrevious,
        onSwipeGesture,
        items,
        currentIndex,
        mobileConfig,
        enablePortugueseGestures,
        detectCulturalPattern,
        t
    ]);
    const handlePullToRefresh = (0, _react.useCallback)(async ()=>{
        if (!onPullToRefresh || isPullingToRefresh) return;
        setIsPullingToRefresh(true);
        try {
            await onPullToRefresh();
        } finally{
            setIsPullingToRefresh(false);
            (0, _framermotion.animate)(pullDistance, 0, {
                duration: 0.3
            });
        }
    }, [
        onPullToRefresh,
        isPullingToRefresh,
        pullDistance
    ]);
    const handlePanStart = (0, _react.useCallback)(()=>{
        if (isPlaying) {
            togglePlay() // Pause auto-advance during interaction
            ;
        }
    }, [
        isPlaying,
        togglePlay
    ]);
    const handlePan = (0, _react.useCallback)((event, info)=>{
        if (screenSize !== "mobile") return;
        const { offset, velocity } = info;
        // Pull to refresh gesture (downward at top)
        if (mobileConfig.enablePullToRefresh && offset.y > 0 && currentIndex === 0) {
            const pullAmount = Math.min(offset.y * 0.5, 100);
            pullDistance.set(pullAmount);
            if (pullAmount > 60 && Math.abs(velocity.y) > 200) {
                handlePullToRefresh();
            }
        }
        // Horizontal swipe for navigation
        if (Math.abs(offset.x) > Math.abs(offset.y)) {
            const progress = offset.x / 200 // Normalize to -1 to 1
            ;
            x.set(offset.x * 0.5) // Damped movement
            ;
        }
    }, [
        screenSize,
        mobileConfig,
        currentIndex,
        pullDistance,
        handlePullToRefresh,
        x
    ]);
    const handlePanEnd = (0, _react.useCallback)((event, info)=>{
        const { offset, velocity } = info;
        // Snap back if not enough velocity/distance
        (0, _framermotion.animate)(x, 0, {
            duration: 0.3,
            ease: "easeOut"
        });
        (0, _framermotion.animate)(pullDistance, 0, {
            duration: 0.3
        });
        // Resume auto-advance if it was playing
        if (autoAdvance && !isPlaying) {
            setTimeout(()=>togglePlay(), 1000);
        }
    }, [
        x,
        pullDistance,
        autoAdvance,
        isPlaying,
        togglePlay
    ]);
    const handleKeyDown = (0, _react.useCallback)((event)=>{
        switch(event.key){
            case "ArrowLeft":
                event.preventDefault();
                goToPrevious();
                announceAccessibility(t("carousel.navigation.previous", "Previous item"));
                break;
            case "ArrowRight":
                event.preventDefault();
                goToNext();
                announceAccessibility(t("carousel.navigation.next", "Next item"));
                break;
            case " ":
                event.preventDefault();
                if (autoAdvance) {
                    togglePlay();
                    announceAccessibility(isPlaying ? t("carousel.paused", "Carousel paused") : t("carousel.playing", "Carousel playing"));
                }
                break;
            case "Home":
                event.preventDefault();
                goToSlide(0);
                announceAccessibility(t("carousel.navigation.first", "First item"));
                break;
            case "End":
                event.preventDefault();
                goToSlide(maxIndex);
                announceAccessibility(t("carousel.navigation.last", "Last item"));
                break;
        }
    }, [
        goToPrevious,
        goToNext,
        togglePlay,
        goToSlide,
        maxIndex,
        autoAdvance,
        isPlaying,
        t
    ]);
    const handleItemClick = (0, _react.useCallback)((item, index)=>{
        onItemClick?.(item, index);
        announceAccessibility(t("carousel.itemSelected", `Selected ${item.title[language]}`));
    }, [
        onItemClick,
        t,
        language
    ]);
    // Accessibility announcements
    const announceAccessibility = (0, _react.useCallback)((message)=>{
        if (!enableAccessibilityAnnouncements) return;
        if ("speechSynthesis" in window) {
            const utterance = new SpeechSynthesisUtterance(message);
            utterance.lang = language === "pt" ? "pt-PT" : "en-GB";
            utterance.volume = 0.3;
            speechSynthesis.speak(utterance);
        }
    }, [
        enableAccessibilityAnnouncements,
        language
    ]);
    // Calculate visible items
    const visibleItems = items.slice(currentIndex, currentIndex + currentConfig.itemsPerView);
    // Pad with items from beginning if needed (for smooth infinite scroll)
    while(visibleItems.length < currentConfig.itemsPerView && items.length > 0){
        const remainingNeeded = currentConfig.itemsPerView - visibleItems.length;
        const itemsToAdd = items.slice(0, remainingNeeded);
        visibleItems.push(...itemsToAdd);
    }
    if (loading) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("section", {
            className: `lusophone-carousel ${className}`,
            children: [
                (title || subtitle) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "mb-8 text-center",
                    children: [
                        title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                            className: "text-3xl font-bold text-gray-900 mb-2",
                            children: title[language]
                        }),
                        subtitle && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-lg text-gray-600",
                            children: subtitle[language]
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(CarouselSkeleton, {
                    itemsPerView: currentConfig.itemsPerView
                })
            ]
        });
    }
    if (items.length === 0) {
        const defaultEmptyMessage = {
            en: "No items available at the moment. Check back soon for new content!",
            pt: "Nenhum item dispon\xedvel no momento. Volte em breve para novo conte\xfado!"
        };
        const message = emptyStateMessage ? emptyStateMessage[language] : defaultEmptyMessage[language];
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("section", {
            className: `lusophone-carousel ${className}`,
            children: [
                (title || subtitle) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    className: "mb-8 text-center",
                    children: [
                        title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                            className: "text-3xl font-bold text-gray-900 mb-2",
                            children: title[language]
                        }),
                        subtitle && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-lg text-gray-600",
                            children: subtitle[language]
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(EmptyState, {
                    message: message
                })
            ]
        });
    }
    const shouldShowNavigation = items.length > currentConfig.itemsPerView;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("section", {
        className: `lusophone-carousel ${className} ${isOffline ? "offline-mode" : ""}`,
        role: "region",
        "aria-label": title ? title[language] : t("carousel.defaultLabel", "Content carousel"),
        children: [
            (isOffline || performanceMetrics.networkStatus === "slow") && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "mb-4 p-2 bg-yellow-100 border border-yellow-200 rounded-lg flex items-center gap-2",
                children: [
                    isOffline ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.WifiIcon, {
                                className: "w-4 h-4 text-yellow-600"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-sm text-yellow-800",
                                children: t("carousel.offline", "Offline mode - Cached Portuguese cultural content")
                            })
                        ]
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.CloudIcon, {
                                className: "w-4 h-4 text-yellow-600"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-sm text-yellow-800",
                                children: t("carousel.slowConnection", "Slow connection - Portuguese content may load slowly")
                            })
                        ]
                    }),
                    canInstall && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: installPWA,
                        className: "ml-auto text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600",
                        children: t("carousel.installApp", "Install App")
                    })
                ]
            }),
            (title || subtitle) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "mb-8 text-center",
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        className: "text-3xl font-bold text-gray-900 mb-2",
                        children: title[language]
                    }),
                    subtitle && /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-lg text-gray-600",
                        children: subtitle[language]
                    }),
                    process.env.NODE_ENV === "development" && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "text-xs text-gray-400 mt-2",
                        children: [
                            "Load: ",
                            performanceMetrics.loadTime.toFixed(0),
                            "ms | Memory: ",
                            performanceMetrics.memoryUsage.toFixed(1),
                            "MB | Network: ",
                            performanceMetrics.networkStatus
                        ]
                    })
                ]
            }),
            mobileConfig.enablePullToRefresh && screenSize === "mobile" && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                style: {
                    y: pullDistance
                },
                className: "absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full z-30",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "bg-white rounded-full p-2 shadow-lg border",
                    children: isPullingToRefresh ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"
                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "w-4 h-4 text-blue-500",
                        children: "↓"
                    })
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMobileGestures.EnhancedMobileGestures, {
                onSwipe: handleSwipe,
                onTap: (point)=>{
                    // Handle tap on empty areas
                    if (screenSize === "mobile") {
                        announceAccessibility(t("carousel.tapped", "Carousel tapped"));
                    }
                },
                enablePortugueseGestures: enablePortugueseGestures,
                enableHapticFeedback: mobileConfig.enableHapticFeedback,
                enableVoiceAnnouncements: enableAccessibilityAnnouncements && language === "pt",
                className: "relative",
                disabled: loading || items.length === 0,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                    className: "relative",
                    drag: screenSize === "mobile" ? "x" : false,
                    dragConstraints: {
                        left: 0,
                        right: 0
                    },
                    onDragStart: handlePanStart,
                    onDrag: handlePan,
                    onDragEnd: handlePanEnd,
                    dragElastic: 0.1,
                    dragMomentum: mobileConfig.enableMomentumScrolling,
                    children: [
                        shouldShowNavigation && showControls && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                    onClick: goToPrevious,
                                    className: `absolute left-2 md:left-4 top-1/2 -translate-y-1/2 z-20 
                           bg-white/90 hover:bg-white shadow-lg hover:shadow-xl 
                           ${screenSize === "mobile" ? "w-11 h-11" : "w-12 h-12"} 
                           rounded-full flex items-center justify-center
                           border border-primary-200 hover:border-primary-300
                           transition-all duration-300 group touch-manipulation
                           focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2
                           ${isTransitioning ? "opacity-50" : ""}`,
                                    "aria-label": t("carousel.previous", "Previous Portuguese cultural items"),
                                    disabled: currentIndex === 0 && !autoAdvance,
                                    style: {
                                        minWidth: "44px",
                                        minHeight: "44px"
                                    },
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.ChevronLeftIcon, {
                                        className: `${screenSize === "mobile" ? "w-4 h-4" : "w-5 h-5"} text-primary-600 group-hover:text-primary-800 transition-colors`
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                    onClick: goToNext,
                                    className: `absolute right-2 md:right-4 top-1/2 -translate-y-1/2 z-20
                           bg-white/90 hover:bg-white shadow-lg hover:shadow-xl
                           ${screenSize === "mobile" ? "w-11 h-11" : "w-12 h-12"}
                           rounded-full flex items-center justify-center
                           border border-primary-200 hover:border-primary-300
                           transition-all duration-300 group touch-manipulation
                           focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2
                           ${isTransitioning ? "opacity-50" : ""}`,
                                    "aria-label": t("carousel.next", "Next Portuguese cultural items"),
                                    disabled: currentIndex >= maxIndex && !autoAdvance,
                                    style: {
                                        minWidth: "44px",
                                        minHeight: "44px"
                                    },
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.ChevronRightIcon, {
                                        className: `${screenSize === "mobile" ? "w-4 h-4" : "w-5 h-5"} text-primary-600 group-hover:text-primary-800 transition-colors`
                                    })
                                }),
                                autoAdvance && screenSize !== "mobile" && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                    onClick: togglePlay,
                                    className: "absolute right-20 top-1/2 -translate-y-1/2 z-20 bg-white/90 hover:bg-white shadow-lg hover:shadow-xl w-12 h-12 rounded-full flex items-center justify-center border border-primary-200 hover:border-primary-300 transition-all duration-300 group touch-manipulation focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2",
                                    "aria-label": isPlaying ? t("carousel.pause", "Pause Portuguese cultural carousel") : t("carousel.play", "Play Portuguese cultural carousel"),
                                    style: {
                                        minWidth: "44px",
                                        minHeight: "44px"
                                    },
                                    children: isPlaying ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.PauseIcon, {
                                        className: "w-5 h-5 text-primary-600 group-hover:text-primary-800 transition-colors"
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.PlayIcon, {
                                        className: "w-5 h-5 text-primary-600 group-hover:text-primary-800 transition-colors"
                                    })
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            ref: carouselRef,
                            className: `overflow-hidden rounded-xl bg-gradient-to-br from-primary-50 to-gold-50 
                       ${screenSize === "mobile" ? "p-4" : "p-6"} 
                       ${isTransitioning ? "pointer-events-none" : ""}`,
                            onKeyDown: handleKeyDown,
                            tabIndex: 0,
                            role: "group",
                            "aria-label": t("carousel.content", "Portuguese cultural carousel content"),
                            style: {
                                touchAction: "pan-x pinch-zoom"
                            },
                            children: [
                                screenSize === "mobile" && mobileConfig.enableSwipeGestures && currentIndex === 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "absolute top-4 right-4 z-10 bg-black/10 backdrop-blur-sm rounded-full p-2",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-xs text-gray-600",
                                        children: "← →"
                                    })
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.AnimatePresence, {
                                    mode: "wait",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                                        initial: {
                                            opacity: 0,
                                            x: screenSize === "mobile" ? 30 : 50,
                                            scale: screenSize === "mobile" ? 0.95 : 1
                                        },
                                        animate: {
                                            opacity: 1,
                                            x: 0,
                                            scale: 1
                                        },
                                        exit: {
                                            opacity: 0,
                                            x: screenSize === "mobile" ? -30 : -50,
                                            scale: screenSize === "mobile" ? 0.95 : 1
                                        },
                                        transition: {
                                            duration: screenSize === "mobile" ? 0.25 : 0.3,
                                            ease: screenSize === "mobile" ? "easeInOut" : [
                                                0.4,
                                                0,
                                                0.2,
                                                1
                                            ]
                                        },
                                        className: "grid gap-4 md:gap-6",
                                        style: {
                                            gridTemplateColumns: `repeat(${currentConfig.itemsPerView}, 1fr)`,
                                            minHeight: screenSize === "mobile" ? "200px" : "auto"
                                        },
                                        children: visibleItems.map((item, index)=>{
                                            const globalIndex = currentIndex + index;
                                            const shouldLazyLoad = mobileConfig.enableLazyLoading && Math.abs(globalIndex - currentIndex) > mobileConfig.preloadDistance;
                                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                                                initial: {
                                                    opacity: 0,
                                                    y: screenSize === "mobile" ? 10 : 20
                                                },
                                                animate: {
                                                    opacity: 1,
                                                    y: 0
                                                },
                                                transition: {
                                                    duration: screenSize === "mobile" ? 0.2 : 0.3,
                                                    delay: index * (screenSize === "mobile" ? 0.05 : 0.1),
                                                    ease: "easeOut"
                                                },
                                                whileHover: screenSize !== "mobile" ? {
                                                    y: -4,
                                                    scale: 1.02
                                                } : undefined,
                                                whileTap: {
                                                    scale: 0.98
                                                },
                                                className: `cursor-pointer touch-manipulation
                                 ${screenSize === "mobile" ? "active:scale-95" : ""}
                                 ${shouldLazyLoad ? "loading-placeholder" : ""}`,
                                                onClick: ()=>handleItemClick(item, globalIndex),
                                                role: "button",
                                                tabIndex: 0,
                                                onKeyDown: (e)=>{
                                                    if (e.key === "Enter" || e.key === " ") {
                                                        e.preventDefault();
                                                        handleItemClick(item, globalIndex);
                                                    }
                                                },
                                                "aria-label": `${item.title[language]} - ${t("carousel.item", "Portuguese cultural item")} ${globalIndex + 1} of ${items.length}`,
                                                style: {
                                                    minHeight: screenSize === "mobile" ? "160px" : "200px",
                                                    minWidth: screenSize === "mobile" ? "280px" : "300px"
                                                },
                                                children: shouldLazyLoad ? // Lazy loading placeholder
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                    className: "w-full h-full bg-gray-200 rounded-lg animate-pulse flex items-center justify-center",
                                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                        className: "text-gray-400",
                                                        children: t("carousel.loading", "Loading Portuguese content...")
                                                    })
                                                }) : renderItem(item, globalIndex)
                                            }, `${item.id}-${currentIndex}-${index}`);
                                        })
                                    }, currentIndex)
                                }),
                                screenSize === "mobile" && mobileConfig.enableSwipeGestures && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "absolute bottom-2 left-1/2 transform -translate-x-1/2 flex gap-1",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "w-1 h-1 bg-gray-400 rounded-full opacity-50"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "w-1 h-1 bg-gray-400 rounded-full opacity-75"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "w-1 h-1 bg-primary-500 rounded-full"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "w-1 h-1 bg-gray-400 rounded-full opacity-75"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "w-1 h-1 bg-gray-400 rounded-full opacity-50"
                                        })
                                    ]
                                })
                            ]
                        }),
                        shouldShowNavigation && showDots && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: `flex justify-center mt-6 ${screenSize === "mobile" ? "space-x-3" : "space-x-2"}`,
                            children: [
                                Array.from({
                                    length: maxIndex + 1
                                }).map((_, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        onClick: ()=>goToSlide(index),
                                        className: `${screenSize === "mobile" ? "w-4 h-4" : "w-3 h-3"} 
                             rounded-full transition-all duration-300 touch-manipulation
                             focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2
                             ${index === currentIndex ? "bg-primary-600 scale-125 shadow-lg" : "bg-primary-300 hover:bg-primary-400 hover:scale-110"}`,
                                        "aria-label": t("carousel.goToSlide", `Go to Portuguese cultural slide ${index + 1} of ${maxIndex + 1}`, {
                                            slide: index + 1,
                                            total: maxIndex + 1
                                        }),
                                        style: {
                                            minWidth: "44px",
                                            minHeight: "44px"
                                        }
                                    }, index)),
                                screenSize === "mobile" && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "absolute bottom-0 left-0 w-full h-1 bg-gray-200 rounded-full overflow-hidden",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                                        className: "h-full bg-primary-500 rounded-full",
                                        initial: {
                                            width: "0%"
                                        },
                                        animate: {
                                            width: `${(currentIndex + 1) / (maxIndex + 1) * 100}%`
                                        },
                                        transition: {
                                            duration: 0.3,
                                            ease: "easeOut"
                                        }
                                    })
                                })
                            ]
                        })
                    ]
                })
            }),
            autoAdvance && screenSize === "mobile" && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "flex justify-center mt-4",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("button", {
                    onClick: togglePlay,
                    className: "flex items-center gap-2 bg-white border border-primary-200 rounded-full px-4 py-2 shadow-sm hover:shadow-md transition-all duration-200",
                    style: {
                        minHeight: "44px"
                    },
                    children: [
                        isPlaying ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.PauseIcon, {
                            className: "w-4 h-4 text-primary-600"
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.PlayIcon, {
                            className: "w-4 h-4 text-primary-600"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-sm text-primary-700",
                            children: isPlaying ? t("carousel.pause", "Pause") : t("carousel.play", "Play")
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "sr-only",
                "aria-live": "polite",
                "aria-atomic": "true",
                role: "status",
                children: t("carousel.status", `Showing Portuguese cultural items ${currentIndex + 1} to ${Math.min(currentIndex + currentConfig.itemsPerView, items.length)} of ${items.length}. ${isOffline ? "Offline mode active." : ""} ${performanceMetrics.networkStatus === "slow" ? "Slow connection detected." : ""}`, {
                    start: currentIndex + 1,
                    end: Math.min(currentIndex + currentConfig.itemsPerView, items.length),
                    total: items.length,
                    networkStatus: performanceMetrics.networkStatus
                })
            }),
            process.env.NODE_ENV === "development" && onPerformanceUpdate && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "mt-4 p-2 bg-gray-100 rounded text-xs",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Load: ",
                            performanceMetrics.loadTime.toFixed(0),
                            "ms"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Memory: ",
                            performanceMetrics.memoryUsage.toFixed(1),
                            "MB"
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Network: ",
                            performanceMetrics.networkStatus
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            "Mobile Settings: Swipe=",
                            mobileConfig.enableSwipeGestures.toString(),
                            ", Haptic=",
                            mobileConfig.enableHapticFeedback.toString()
                        ]
                    })
                ]
            })
        ]
    });
});
const _default = LusophoneCarousel;

//# sourceMappingURL=data:application/json;base64,