92705fbc3e0dcf806d37cb6aca10294a
"use strict";
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: mockPush
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../utils/test-utils");
const _Header = /*#__PURE__*/ _interop_require_default(require("../../src/components/Header"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock next/navigation
const mockPush = jest.fn();
describe("Header Component", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockPush.mockClear();
    });
    describe("Basic Rendering", ()=>{
        it("should render logo and main navigation", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Should render logo
            expect(_testutils.screen.getByRole("link", {
                name: /lusotown/i
            })).toBeInTheDocument();
            // Should render main navigation links
            expect(_testutils.screen.getByText("Events")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Services")).toBeInTheDocument();
        });
        it("should render language toggle", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Language toggle should be present
            const languageToggle = _testutils.screen.getByRole("button", {
                name: /language/i
            });
            expect(languageToggle).toBeInTheDocument();
        });
        it("should render cart and saved items buttons", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Cart button should be present
            expect(_testutils.screen.getByRole("button", {
                name: /cart/i
            })).toBeInTheDocument();
            // Saved items button should be present
            expect(_testutils.screen.getByRole("button", {
                name: /saved/i
            })).toBeInTheDocument();
        });
    });
    describe("Portuguese Language Support", ()=>{
        it("should display Portuguese navigation when language is set to PT", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "pt"
            });
            // Should show Portuguese navigation text
            expect(_testutils.screen.getByText("Eventos")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Servi\xe7os")).toBeInTheDocument();
        });
        it("should display English navigation when language is set to EN", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "en"
            });
            // Should show English navigation text
            expect(_testutils.screen.getByText("Events")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Services")).toBeInTheDocument();
        });
        it("should toggle between Portuguese and English", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "en"
            });
            // Initial state should be English
            expect(_testutils.screen.getByText("Events")).toBeInTheDocument();
            // Click language toggle
            const languageToggle = _testutils.screen.getByRole("button", {
                name: /language/i
            });
            _testutils.fireEvent.click(languageToggle);
            // Should switch to Portuguese
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText("Eventos")).toBeInTheDocument();
            });
        });
    });
    describe("Mobile Navigation", ()=>{
        beforeEach(()=>{
            _testutils.mobileTestUtils.setMobileViewport();
        });
        it("should show mobile menu button on small screens", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Mobile menu button should be visible
            const mobileMenuButton = _testutils.screen.getByRole("button", {
                name: /menu/i
            });
            expect(mobileMenuButton).toBeInTheDocument();
        });
        it("should open mobile menu when hamburger is clicked", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const mobileMenuButton = _testutils.screen.getByRole("button", {
                name: /menu/i
            });
            _testutils.fireEvent.click(mobileMenuButton);
            // Mobile menu should open and show navigation links
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByRole("dialog")).toBeInTheDocument();
            });
        });
        it("should close mobile menu when close button is clicked", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const mobileMenuButton = _testutils.screen.getByRole("button", {
                name: /menu/i
            });
            _testutils.fireEvent.click(mobileMenuButton);
            // Wait for menu to open
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByRole("dialog")).toBeInTheDocument();
            });
            // Click close button
            const closeButton = _testutils.screen.getByRole("button", {
                name: /close/i
            });
            _testutils.fireEvent.click(closeButton);
            // Menu should close
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.queryByRole("dialog")).not.toBeInTheDocument();
            });
        });
        it("should handle touch interactions properly", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const mobileMenuButton = _testutils.screen.getByRole("button", {
                name: /menu/i
            });
            // Simulate touch interaction
            _testutils.mobileTestUtils.mockTouchStart(mobileMenuButton, 10, 10);
            _testutils.fireEvent.click(mobileMenuButton);
            // Should open menu
            expect(_testutils.screen.getByRole("dialog")).toBeInTheDocument();
        });
    });
    describe("Services Dropdown", ()=>{
        it("should show services dropdown on hover", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const servicesButton = _testutils.screen.getByText("Services");
            // Hover over services
            _testutils.fireEvent.mouseEnter(servicesButton);
            // Should show dropdown with service options
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText("Cultural Tours")).toBeInTheDocument();
                expect(_testutils.screen.getByText("Executive Transport")).toBeInTheDocument();
                expect(_testutils.screen.getByText("Close Protection")).toBeInTheDocument();
                expect(_testutils.screen.getByText("Transport & SIA")).toBeInTheDocument();
            });
        });
        it("should hide services dropdown when mouse leaves", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const servicesButton = _testutils.screen.getByText("Services");
            // Hover over services
            _testutils.fireEvent.mouseEnter(servicesButton);
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText("Cultural Tours")).toBeInTheDocument();
            });
            // Mouse leave
            _testutils.fireEvent.mouseLeave(servicesButton);
            // Dropdown should hide
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.queryByText("Cultural Tours")).not.toBeInTheDocument();
            });
        });
        it("should navigate to correct service page when clicked", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const servicesButton = _testutils.screen.getByText("Services");
            _testutils.fireEvent.mouseEnter(servicesButton);
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText("Transport & SIA")).toBeInTheDocument();
            });
            // Click on Transport & SIA
            _testutils.fireEvent.click(_testutils.screen.getByText("Transport & SIA"));
            // Should navigate to transport page
            expect(mockPush).toHaveBeenCalledWith("/transport");
        });
    });
    describe("User Authentication", ()=>{
        it("should show login button when user is not authenticated", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            expect(_testutils.screen.getByText("Sign In")).toBeInTheDocument();
        });
        it("should show user menu when user is authenticated", ()=>{
            const mockUser = _testutils.portugueseTestUtils.mockPortugueseUser;
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                mockUser
            });
            // Should show user name or avatar
            expect(_testutils.screen.getByText(mockUser.name)).toBeInTheDocument();
        });
        it("should show premium badge for premium users", ()=>{
            const mockPremiumUser = {
                ..._testutils.portugueseTestUtils.mockPortugueseUser,
                membershipTier: "premium"
            };
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                mockUser: mockPremiumUser
            });
            // Should show premium indicator
            expect(_testutils.screen.getByTestId("premium-badge")).toBeInTheDocument();
        });
        it("should handle logout correctly", async ()=>{
            const mockUser = _testutils.portugueseTestUtils.mockPortugueseUser;
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                mockUser
            });
            // Click user menu
            const userButton = _testutils.screen.getByText(mockUser.name);
            _testutils.fireEvent.click(userButton);
            // Click logout
            const logoutButton = _testutils.screen.getByText("Sign Out");
            _testutils.fireEvent.click(logoutButton);
            // Should trigger logout
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText("Sign In")).toBeInTheDocument();
            });
        });
    });
    describe("Search Functionality", ()=>{
        it("should render search bar on desktop", ()=>{
            _testutils.mobileTestUtils.setDesktopViewport();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const searchInput = _testutils.screen.getByPlaceholderText(/search/i);
            expect(searchInput).toBeInTheDocument();
        });
        it("should handle search input in Portuguese", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "pt"
            });
            const searchInput = _testutils.screen.getByPlaceholderText(/pesquisar/i);
            _testutils.fireEvent.change(searchInput, {
                target: {
                    value: "fado"
                }
            });
            expect(searchInput).toHaveValue("fado");
        });
        it("should handle Portuguese character input correctly", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "pt"
            });
            const searchInput = _testutils.screen.getByPlaceholderText(/pesquisar/i);
            // Test Portuguese characters
            _testutils.fireEvent.change(searchInput, {
                target: {
                    value: "S\xe3o Jo\xe3o"
                }
            });
            expect(searchInput).toHaveValue("S\xe3o Jo\xe3o");
        });
    });
    describe("Accessibility", ()=>{
        it("should have proper ARIA labels", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Logo should have proper aria-label
            const logo = _testutils.screen.getByRole("link", {
                name: /lusotown/i
            });
            expect(logo).toHaveAttribute("aria-label");
            // Navigation should have proper role
            const nav = _testutils.screen.getByRole("navigation");
            expect(nav).toBeInTheDocument();
            // Mobile menu button should have aria-expanded
            const mobileMenuButton = _testutils.screen.getByRole("button", {
                name: /menu/i
            });
            expect(mobileMenuButton).toHaveAttribute("aria-expanded");
        });
        it("should be keyboard navigable", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Tab through main navigation
            const eventsLink = _testutils.screen.getByText("Events");
            eventsLink.focus();
            expect(eventsLink).toHaveFocus();
            // Tab to services
            _testutils.fireEvent.keyDown(eventsLink, {
                key: "Tab"
            });
            const servicesLink = _testutils.screen.getByText("Services");
            expect(servicesLink).toHaveFocus();
        });
        it("should support screen readers with proper semantic markup", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Should have main navigation landmark
            expect(_testutils.screen.getByRole("navigation")).toBeInTheDocument();
            // Should have proper heading structure
            expect(_testutils.screen.getByRole("banner")).toBeInTheDocument();
        });
    });
    describe("Performance", ()=>{
        it("should render quickly on mobile devices", async ()=>{
            _testutils.mobileTestUtils.setMobileViewport();
            const startTime = performance.now();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            const endTime = performance.now();
            // Should render within reasonable time (less than 100ms)
            expect(endTime - startTime).toBeLessThan(100);
        });
        it("should not cause layout shifts during language changes", async ()=>{
            const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "en"
            });
            // Get initial layout
            const header = _testutils.screen.getByRole("banner");
            const initialHeight = header.getBoundingClientRect().height;
            // Change language
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Layout should remain stable
            const newHeight = header.getBoundingClientRect().height;
            expect(Math.abs(newHeight - initialHeight)).toBeLessThan(5) // Allow 5px tolerance
            ;
        });
    });
    describe("Network Connectivity", ()=>{
        it("should handle offline state gracefully", ()=>{
            // Mock offline state
            Object.defineProperty(navigator, "onLine", {
                writable: true,
                value: false
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}));
            // Should still render basic navigation
            expect(_testutils.screen.getByText("Events")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Services")).toBeInTheDocument();
        });
    });
    describe("Portuguese Cultural Features", ()=>{
        it("should link to Portuguese cultural services correctly", async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "pt"
            });
            const servicesButton = _testutils.screen.getByText("Servi\xe7os");
            _testutils.fireEvent.mouseEnter(servicesButton);
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText("Tours Culturais")).toBeInTheDocument();
            });
            // Should navigate to cultural tours
            _testutils.fireEvent.click(_testutils.screen.getByText("Tours Culturais"));
            expect(mockPush).toHaveBeenCalledWith("/services#cultural-tours");
        });
        it("should maintain Portuguese context in navigation", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Header.default, {}), {
                initialLanguage: "pt"
            });
            // Portuguese navigation should maintain cultural context
            expect(_testutils.screen.getByText("Eventos")).toBeInTheDocument();
            expect(_testutils.screen.getByText("Servi\xe7os")).toBeInTheDocument();
            // Should not show generic translations
            expect(_testutils.screen.queryByText("Events (Generic)")).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,