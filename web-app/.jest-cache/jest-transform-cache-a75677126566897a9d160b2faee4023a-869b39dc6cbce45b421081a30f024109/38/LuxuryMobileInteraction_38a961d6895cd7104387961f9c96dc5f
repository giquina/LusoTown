79371fd9c9a46cda79304f3b7761fb4f
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LuxuryFAB: function() {
        return LuxuryFAB;
    },
    LuxuryLongPress: function() {
        return LuxuryLongPress;
    },
    LuxuryModal: function() {
        return LuxuryModal;
    },
    LuxuryPullToRefresh: function() {
        return LuxuryPullToRefresh;
    },
    LuxuryRipple: function() {
        return LuxuryRipple;
    },
    LuxurySwipe: function() {
        return LuxurySwipe;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _framermotion = require("framer-motion");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function LuxuryRipple({ children, className = "", disabled = false, rippleColor = "rgba(255, 255, 255, 0.3)", onClick, hapticFeedback = "light", ...rest }) {
    const [ripples, setRipples] = (0, _react.useState)([]);
    const rippleRef = (0, _react.useRef)(null);
    const triggerHaptic = (0, _react.useCallback)((type)=>{
        // Simulate haptic feedback with CSS animation classes
        if (rippleRef.current) {
            rippleRef.current.classList.add(`luxury-haptic-${type}`);
            setTimeout(()=>{
                rippleRef.current?.classList.remove(`luxury-haptic-${type}`);
            }, 200);
        }
    }, []);
    const createRipple = (0, _react.useCallback)((event)=>{
        if (disabled || !rippleRef.current) return;
        const rect = rippleRef.current.getBoundingClientRect();
        // Handle both mouse and touch events
        const clientX = "touches" in event ? event.touches[0].clientX : event.clientX;
        const clientY = "touches" in event ? event.touches[0].clientY : event.clientY;
        const x = clientX - rect.left;
        const y = clientY - rect.top;
        const size = Math.max(rect.width, rect.height) * 2;
        const newRipple = {
            id: Date.now() + Math.random(),
            x: x - size / 2,
            y: y - size / 2,
            size
        };
        setRipples((prev)=>[
                ...prev,
                newRipple
            ]);
        triggerHaptic(hapticFeedback);
        // Remove ripple after animation
        setTimeout(()=>{
            setRipples((prev)=>prev.filter((ripple)=>ripple.id !== newRipple.id));
        }, 600);
        onClick?.();
    }, [
        disabled,
        onClick,
        hapticFeedback,
        triggerHaptic
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ...rest,
        ref: rippleRef,
        className: `luxury-touch-target relative overflow-hidden ${className}`,
        onMouseDown: createRipple,
        onTouchStart: createRipple,
        onClick: createRipple,
        children: [
            children,
            ripples.map((ripple)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    className: "absolute rounded-full pointer-events-none",
                    style: {
                        left: ripple.x,
                        top: ripple.y,
                        width: ripple.size,
                        height: ripple.size,
                        backgroundColor: rippleColor
                    },
                    initial: {
                        scale: 0,
                        opacity: 0.6
                    },
                    animate: {
                        scale: 1,
                        opacity: 0
                    },
                    transition: {
                        duration: 0.6,
                        ease: [
                            0.215,
                            0.61,
                            0.355,
                            1
                        ]
                    }
                }, ripple.id))
        ]
    });
}
function LuxurySwipe({ children, onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown, swipeThreshold = 100, className = "" }) {
    const [isPressed, setIsPressed] = (0, _react.useState)(false);
    const [dragStart, setDragStart] = (0, _react.useState)({
        x: 0,
        y: 0
    });
    const dragX = (0, _framermotion.useSpring)(0, {
        stiffness: 300,
        damping: 30
    });
    const dragY = (0, _framermotion.useSpring)(0, {
        stiffness: 300,
        damping: 30
    });
    const opacity = (0, _framermotion.useTransform)(dragX, [
        -200,
        0,
        200
    ], [
        0.6,
        1,
        0.6
    ]);
    const scale = (0, _framermotion.useTransform)(dragX, [
        -100,
        0,
        100
    ], [
        0.95,
        1,
        0.95
    ]);
    const handleDragStart = (event)=>{
        setIsPressed(true);
        const clientX = event.clientX || event.touches?.[0]?.clientX || 0;
        const clientY = event.clientY || event.touches?.[0]?.clientY || 0;
        setDragStart({
            x: clientX,
            y: clientY
        });
    };
    const handleDragEnd = (event)=>{
        if (!isPressed) return;
        setIsPressed(false);
        const clientX = event.clientX || event.changedTouches?.[0]?.clientX || 0;
        const clientY = event.clientY || event.changedTouches?.[0]?.clientY || 0;
        const deltaX = clientX - dragStart.x;
        const deltaY = clientY - dragStart.y;
        // Reset position
        dragX.set(0);
        dragY.set(0);
        // Trigger swipe actions
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
            if (deltaX > swipeThreshold && onSwipeRight) {
                onSwipeRight();
            } else if (deltaX < -swipeThreshold && onSwipeLeft) {
                onSwipeLeft();
            }
        } else {
            if (deltaY > swipeThreshold && onSwipeDown) {
                onSwipeDown();
            } else if (deltaY < -swipeThreshold && onSwipeUp) {
                onSwipeUp();
            }
        }
    };
    const handleDrag = (event)=>{
        if (!isPressed) return;
        const clientX = event.clientX || event.touches?.[0]?.clientX || 0;
        const clientY = event.clientY || event.touches?.[0]?.clientY || 0;
        const deltaX = clientX - dragStart.x;
        const deltaY = clientY - dragStart.y;
        dragX.set(deltaX * 0.5); // Dampen the movement
        dragY.set(deltaY * 0.5);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
        className: `luxury-swipe-container ${className}`,
        style: {
            x: dragX,
            y: dragY,
            opacity,
            scale,
            cursor: isPressed ? "grabbing" : "grab"
        },
        onMouseDown: handleDragStart,
        onMouseMove: handleDrag,
        onMouseUp: handleDragEnd,
        onMouseLeave: handleDragEnd,
        onTouchStart: handleDragStart,
        onTouchMove: handleDrag,
        onTouchEnd: handleDragEnd,
        whileTap: {
            scale: 0.98
        },
        transition: {
            type: "spring",
            stiffness: 300,
            damping: 25
        },
        children: children
    });
}
function LuxuryPullToRefresh({ children, onRefresh, threshold = 80, disabled = false, className = "" }) {
    const [isRefreshing, setIsRefreshing] = (0, _react.useState)(false);
    const [pullDistance, setPullDistance] = (0, _react.useState)(0);
    const [startY, setStartY] = (0, _react.useState)(0);
    const [canPull, setCanPull] = (0, _react.useState)(false);
    const refreshY = (0, _framermotion.useSpring)(0, {
        stiffness: 300,
        damping: 30
    });
    const refreshOpacity = (0, _framermotion.useTransform)(refreshY, [
        0,
        threshold
    ], [
        0,
        1
    ]);
    const refreshRotation = (0, _framermotion.useTransform)(refreshY, [
        0,
        threshold
    ], [
        0,
        180
    ]);
    const handleTouchStart = (e)=>{
        if (disabled || isRefreshing) return;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollTop === 0) {
            setCanPull(true);
            setStartY(e.touches[0].clientY);
        }
    };
    const handleTouchMove = (e)=>{
        if (!canPull || disabled || isRefreshing) return;
        const currentY = e.touches[0].clientY;
        const distance = Math.max(0, currentY - startY);
        if (distance > 0) {
            e.preventDefault();
            const dampedDistance = Math.min(distance * 0.6, threshold * 1.5);
            setPullDistance(dampedDistance);
            refreshY.set(dampedDistance);
        }
    };
    const handleTouchEnd = async ()=>{
        if (!canPull || disabled || isRefreshing) return;
        setCanPull(false);
        if (pullDistance >= threshold) {
            setIsRefreshing(true);
            try {
                await onRefresh();
            } finally{
                setIsRefreshing(false);
            }
        }
        setPullDistance(0);
        refreshY.set(0);
    };
    (0, _react.useEffect)(()=>{
        if (isRefreshing) {
            refreshY.set(threshold);
        } else {
            refreshY.set(0);
        }
    }, [
        isRefreshing,
        refreshY,
        threshold
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `luxury-pull-refresh-container ${className}`,
        onTouchStart: handleTouchStart,
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                className: "luxury-pull-refresh",
                style: {
                    y: refreshY,
                    opacity: refreshOpacity
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                        className: "luxury-pull-icon",
                        style: {
                            rotate: refreshRotation
                        },
                        children: isRefreshing ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "luxury-loading-spinner"
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)("svg", {
                            width: "24",
                            height: "24",
                            viewBox: "0 0 24 24",
                            fill: "none",
                            stroke: "currentColor",
                            strokeWidth: "2",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                    d: "M1 4v6h6"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                    d: "M23 20v-6h-6"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                    d: "M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        className: "text-sm font-medium text-gray-600 ml-2",
                        children: isRefreshing ? "Refreshing..." : pullDistance >= threshold ? "Release to refresh" : "Pull to refresh"
                    })
                ]
            }),
            children
        ]
    });
}
function LuxuryLongPress({ children, onLongPress, delay = 500, className = "", hapticFeedback = true }) {
    const [isPressed, setIsPressed] = (0, _react.useState)(false);
    const [progress, setProgress] = (0, _react.useState)(0);
    const timerRef = (0, _react.useRef)();
    const progressRef = (0, _react.useRef)();
    const startPress = (0, _react.useCallback)(()=>{
        if (timerRef.current) return;
        setIsPressed(true);
        setProgress(0);
        // Start progress animation
        const startTime = Date.now();
        progressRef.current = setInterval(()=>{
            const elapsed = Date.now() - startTime;
            const newProgress = Math.min(elapsed / delay * 100, 100);
            setProgress(newProgress);
            if (newProgress >= 100) {
                clearInterval(progressRef.current);
            }
        }, 16);
        // Set main timer
        timerRef.current = setTimeout(()=>{
            if (hapticFeedback) {
                // Trigger haptic feedback class
                const element = document.querySelector(`.${className}`);
                element?.classList.add("luxury-haptic-heavy");
                setTimeout(()=>element?.classList.remove("luxury-haptic-heavy"), 200);
            }
            onLongPress();
            endPress();
        }, delay);
    }, [
        onLongPress,
        delay,
        hapticFeedback,
        className
    ]);
    const endPress = (0, _react.useCallback)(()=>{
        if (timerRef.current) {
            clearTimeout(timerRef.current);
            timerRef.current = undefined;
        }
        if (progressRef.current) {
            clearInterval(progressRef.current);
            progressRef.current = undefined;
        }
        setIsPressed(false);
        setProgress(0);
    }, []);
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (timerRef.current) clearTimeout(timerRef.current);
            if (progressRef.current) clearInterval(progressRef.current);
        };
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `relative ${className}`,
        onMouseDown: startPress,
        onMouseUp: endPress,
        onMouseLeave: endPress,
        onTouchStart: startPress,
        onTouchEnd: endPress,
        onTouchCancel: endPress,
        children: [
            children,
            isPressed && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                className: "absolute inset-0 border-2 border-red-500 rounded-lg pointer-events-none",
                initial: {
                    opacity: 0
                },
                animate: {
                    opacity: 1
                },
                exit: {
                    opacity: 0
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "absolute bottom-0 left-0 h-1 bg-red-500 transition-all duration-75 ease-linear",
                    style: {
                        width: `${progress}%`
                    }
                })
            })
        ]
    });
}
function LuxuryFAB({ icon, onClick, variant = "primary", size = "medium", className = "", tooltip, badge }) {
    const [isHovered, setIsHovered] = (0, _react.useState)(false);
    const sizeClasses = {
        small: "w-12 h-12",
        medium: "w-16 h-16",
        large: "w-20 h-20"
    };
    const variantClasses = {
        primary: "bg-gradient-to-br from-red-600 to-red-700 text-white shadow-lg hover:shadow-xl",
        secondary: "bg-white text-red-600 shadow-lg hover:shadow-xl border-2 border-red-100"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(LuxuryRipple, {
        onClick: onClick,
        className: `luxury-fab ${sizeClasses[size]} ${variantClasses[variant]} ${className}`,
        hapticFeedback: "medium",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
            className: "relative flex items-center justify-center w-full h-full",
            whileHover: {
                scale: 1.05,
                rotate: 5
            },
            whileTap: {
                scale: 0.95
            },
            onHoverStart: ()=>setIsHovered(true),
            onHoverEnd: ()=>setIsHovered(false),
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    animate: {
                        rotate: isHovered ? 15 : 0
                    },
                    transition: {
                        type: "spring",
                        stiffness: 300
                    },
                    children: icon
                }),
                badge && badge > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    className: "absolute -top-2 -right-2 bg-red-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center",
                    initial: {
                        scale: 0
                    },
                    animate: {
                        scale: 1
                    },
                    transition: {
                        type: "spring",
                        stiffness: 500
                    },
                    children: badge > 99 ? "99+" : badge
                }),
                tooltip && isHovered && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                    className: "absolute bottom-full mb-2 px-3 py-1 bg-black text-white text-sm rounded-lg whitespace-nowrap",
                    initial: {
                        opacity: 0,
                        y: 10
                    },
                    animate: {
                        opacity: 1,
                        y: 0
                    },
                    exit: {
                        opacity: 0,
                        y: 10
                    },
                    children: [
                        tooltip,
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-black"
                        })
                    ]
                })
            ]
        })
    });
}
function LuxuryModal({ isOpen, onClose, children, title, size = "medium", showCloseButton = true, className = "" }) {
    const sizeClasses = {
        small: "max-w-md",
        medium: "max-w-2xl",
        large: "max-w-4xl",
        fullscreen: "max-w-[95vw] max-h-[95vh]"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.AnimatePresence, {
        children: isOpen && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
            className: "luxury-modal-overlay",
            initial: {
                opacity: 0
            },
            animate: {
                opacity: 1
            },
            exit: {
                opacity: 0
            },
            onClick: onClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                className: `luxury-modal-content ${sizeClasses[size]} ${className}`,
                initial: {
                    scale: 0.9,
                    opacity: 0,
                    y: 20
                },
                animate: {
                    scale: 1,
                    opacity: 1,
                    y: 0
                },
                exit: {
                    scale: 0.9,
                    opacity: 0,
                    y: 20
                },
                transition: {
                    type: "spring",
                    stiffness: 300,
                    damping: 25
                },
                onClick: (e)=>e.stopPropagation(),
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center justify-between p-6 border-b border-gray-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                                className: "text-xl font-bold text-gray-900",
                                children: title
                            }),
                            showCloseButton && /*#__PURE__*/ (0, _jsxruntime.jsx)(LuxuryRipple, {
                                onClick: onClose,
                                className: "p-3 rounded-full hover:bg-gray-100 min-w-[44px] min-h-[44px] flex items-center justify-center",
                                "aria-label": "Close modal",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                    className: "w-6 h-6 text-gray-500",
                                    fill: "none",
                                    stroke: "currentColor",
                                    viewBox: "0 0 24 24",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round",
                                        strokeWidth: 2,
                                        d: "M6 18L18 6M6 6l12 12"
                                    })
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "p-6",
                        children: children
                    })
                ]
            })
        })
    });
}
const _default = {
    LuxuryRipple,
    LuxurySwipe,
    LuxuryPullToRefresh,
    LuxuryLongPress,
    LuxuryFAB,
    LuxuryModal
};

//# sourceMappingURL=data:application/json;base64,