ea41120886c5ac63ea2268dfd536820a
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EnhancedMobileGestures: function() {
        return EnhancedMobileGestures;
    },
    default: function() {
        return _default;
    },
    usePortugueseGestures: function() {
        return usePortugueseGestures;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _framermotion = require("framer-motion");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function EnhancedMobileGestures({ children, onSwipe, onPinch, onLongPress, onDoubleTap, onTap, swipeThreshold = 50, longPressDelay = 500, doubleTapDelay = 300, pinchThreshold = 0.1, enablePortugueseGestures = true, enableHapticFeedback = true, enableVoiceAnnouncements = false, showSwipeIndicators = true, showTouchRipples = true, className = "", disabled = false }) {
    const containerRef = (0, _react.useRef)(null);
    const [touches, setTouches] = (0, _react.useState)(new Map());
    const [isLongPressing, setIsLongPressing] = (0, _react.useState)(false);
    const [lastTap, setLastTap] = (0, _react.useState)(null);
    const [swipeDirection, setSwipeDirection] = (0, _react.useState)(null);
    const [touchRipples, setTouchRipples] = (0, _react.useState)([]);
    const longPressTimer = (0, _react.useRef)();
    const swipeStartRef = (0, _react.useRef)(null);
    const initialDistance = (0, _react.useRef)(0);
    const initialScale = (0, _react.useRef)(1);
    // Motion values for visual feedback
    const x = (0, _framermotion.useMotionValue)(0);
    const y = (0, _framermotion.useMotionValue)(0);
    const opacity = (0, _framermotion.useTransform)(x, [
        -200,
        0,
        200
    ], [
        0.5,
        1,
        0.5
    ]);
    const scale = (0, _framermotion.useMotionValue)(1);
    // Create touch ripple effect
    const createRipple = (0, _react.useCallback)((x, y)=>{
        if (!showTouchRipples) return;
        const rippleId = Date.now();
        setTouchRipples((prev)=>[
                ...prev,
                {
                    id: rippleId,
                    x,
                    y
                }
            ]);
        setTimeout(()=>{
            setTouchRipples((prev)=>prev.filter((ripple)=>ripple.id !== rippleId));
        }, 600);
    }, [
        showTouchRipples
    ]);
    // Haptic feedback helper
    const triggerHapticFeedback = (0, _react.useCallback)((intensity = "medium")=>{
        if (!enableHapticFeedback) return;
        if ("vibrate" in navigator) {
            const patterns = {
                light: [
                    10
                ],
                medium: [
                    20
                ],
                heavy: [
                    30,
                    10,
                    30
                ]
            };
            navigator.vibrate(patterns[intensity]);
        }
    }, [
        enableHapticFeedback
    ]);
    // Voice announcement helper
    const announceGesture = (0, _react.useCallback)((gesture)=>{
        if (!enableVoiceAnnouncements) return;
        const messages = {
            "swipe-left": "Deslizar para a esquerda",
            "swipe-right": "Deslizar para a direita",
            "swipe-up": "Deslizar para cima",
            "swipe-down": "Deslizar para baixo",
            "long-press": "Press\xe3o longa",
            "double-tap": "Toque duplo",
            "pinch-in": "Beliscar para dentro",
            "pinch-out": "Beliscar para fora"
        };
        const message = messages[gesture];
        if (message && "speechSynthesis" in window) {
            const utterance = new SpeechSynthesisUtterance(message);
            utterance.lang = "pt-PT";
            speechSynthesis.speak(utterance);
        }
    }, [
        enableVoiceAnnouncements
    ]);
    // Get distance between two points
    const getDistance = (point1, point2)=>{
        return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
    };
    // Get gesture direction
    const getSwipeDirection = (start, end)=>{
        const deltaX = end.x - start.x;
        const deltaY = end.y - start.y;
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
            return deltaX > 0 ? "right" : "left";
        } else {
            return deltaY > 0 ? "down" : "up";
        }
    };
    // Handle touch start
    const handleTouchStart = (0, _react.useCallback)((e)=>{
        if (disabled) return;
        const newTouches = new Map(touches);
        Array.from(e.touches).forEach((touch)=>{
            const touchPoint = {
                x: touch.clientX,
                y: touch.clientY,
                time: Date.now(),
                id: touch.identifier
            };
            newTouches.set(touch.identifier, touchPoint);
            createRipple(touch.clientX, touch.clientY);
            // Set swipe start for single touch
            if (e.touches.length === 1) {
                swipeStartRef.current = touchPoint;
                // Start long press timer
                longPressTimer.current = setTimeout(()=>{
                    setIsLongPressing(true);
                    onLongPress?.(touchPoint);
                    triggerHapticFeedback("heavy");
                    announceGesture("long-press");
                }, longPressDelay);
            }
            // Handle pinch start for two touches
            if (e.touches.length === 2 && newTouches.size >= 2) {
                const touchArray = Array.from(newTouches.values());
                const distance = getDistance(touchArray[0], touchArray[1]);
                initialDistance.current = distance;
                initialScale.current = 1;
            }
        });
        setTouches(newTouches);
    }, [
        disabled,
        touches,
        createRipple,
        onLongPress,
        triggerHapticFeedback,
        announceGesture,
        longPressDelay
    ]);
    // Handle touch move
    const handleTouchMove = (0, _react.useCallback)((e)=>{
        if (disabled) return;
        // Clear long press if finger moves too much
        if (longPressTimer.current && swipeStartRef.current) {
            const currentTouch = e.touches[0];
            const distance = getDistance(swipeStartRef.current, {
                x: currentTouch.clientX,
                y: currentTouch.clientY,
                time: Date.now()
            });
            if (distance > 10) {
                clearTimeout(longPressTimer.current);
                setIsLongPressing(false);
            }
        }
        // Handle pinch gesture
        if (e.touches.length === 2 && touches.size >= 2) {
            const touch1 = e.touches[0];
            const touch2 = e.touches[1];
            const currentDistance = getDistance({
                x: touch1.clientX,
                y: touch1.clientY,
                time: Date.now()
            }, {
                x: touch2.clientX,
                y: touch2.clientY,
                time: Date.now()
            });
            if (initialDistance.current > 0) {
                const scaleChange = currentDistance / initialDistance.current;
                const scaleDelta = Math.abs(scaleChange - initialScale.current);
                if (scaleDelta > pinchThreshold) {
                    const center = {
                        x: (touch1.clientX + touch2.clientX) / 2,
                        y: (touch1.clientY + touch2.clientY) / 2
                    };
                    onPinch?.({
                        scale: scaleChange,
                        center,
                        velocity: scaleDelta
                    });
                    // Visual feedback
                    scale.set(scaleChange);
                    // Haptic feedback for significant pinch
                    if (scaleDelta > 0.3) {
                        triggerHapticFeedback("light");
                        announceGesture(scaleChange > 1 ? "pinch-out" : "pinch-in");
                    }
                    initialScale.current = scaleChange;
                }
            }
        }
        // Handle swipe visual feedback
        if (e.touches.length === 1 && swipeStartRef.current) {
            const currentTouch = e.touches[0];
            const deltaX = currentTouch.clientX - swipeStartRef.current.x;
            const deltaY = currentTouch.clientY - swipeStartRef.current.y;
            x.set(deltaX * 0.3); // Damped movement
            y.set(deltaY * 0.3);
            // Show swipe direction indicator
            if (Math.abs(deltaX) > swipeThreshold || Math.abs(deltaY) > swipeThreshold) {
                const direction = getSwipeDirection(swipeStartRef.current, {
                    x: currentTouch.clientX,
                    y: currentTouch.clientY,
                    time: Date.now()
                });
                setSwipeDirection(direction);
            }
        }
    }, [
        disabled,
        touches,
        onPinch,
        swipeThreshold,
        pinchThreshold,
        scale,
        x,
        y,
        triggerHapticFeedback,
        announceGesture
    ]);
    // Handle touch end
    const handleTouchEnd = (0, _react.useCallback)((e)=>{
        if (disabled) return;
        // Clear long press timer
        if (longPressTimer.current) {
            clearTimeout(longPressTimer.current);
            setIsLongPressing(false);
        }
        // Handle swipe gesture
        if (swipeStartRef.current && e.changedTouches.length === 1) {
            const endTouch = e.changedTouches[0];
            const endPoint = {
                x: endTouch.clientX,
                y: endTouch.clientY,
                time: Date.now()
            };
            const distance = getDistance(swipeStartRef.current, endPoint);
            const duration = endPoint.time - swipeStartRef.current.time;
            const velocity = distance / duration;
            if (distance > swipeThreshold) {
                const direction = getSwipeDirection(swipeStartRef.current, endPoint);
                onSwipe?.({
                    direction,
                    distance,
                    velocity,
                    duration
                });
                triggerHapticFeedback("medium");
                announceGesture(`swipe-${direction}`);
                setSwipeDirection(direction);
                // Visual feedback
                const targetX = direction === "left" ? -100 : direction === "right" ? 100 : 0;
                const targetY = direction === "up" ? -100 : direction === "down" ? 100 : 0;
                (0, _framermotion.animate)(x, targetX, {
                    duration: 0.2,
                    ease: "easeOut"
                }).then(()=>{
                    (0, _framermotion.animate)(x, 0, {
                        duration: 0.3,
                        ease: "easeInOut"
                    });
                });
                (0, _framermotion.animate)(y, targetY, {
                    duration: 0.2,
                    ease: "easeOut"
                }).then(()=>{
                    (0, _framermotion.animate)(y, 0, {
                        duration: 0.3,
                        ease: "easeInOut"
                    });
                });
            } else {
                // Handle tap and double tap
                const currentTime = Date.now();
                if (lastTap && currentTime - lastTap.time < doubleTapDelay) {
                    // Double tap
                    onDoubleTap?.(endPoint);
                    triggerHapticFeedback("heavy");
                    announceGesture("double-tap");
                    setLastTap(null);
                } else {
                    // Single tap
                    onTap?.(endPoint);
                    setLastTap(endPoint);
                    // Clear single tap if no double tap follows
                    setTimeout(()=>{
                        setLastTap(null);
                    }, doubleTapDelay);
                }
            }
            swipeStartRef.current = null;
        }
        // Reset visual state
        setTimeout(()=>{
            setSwipeDirection(null);
            (0, _framermotion.animate)(scale, 1, {
                duration: 0.3,
                ease: "easeInOut"
            });
        }, 200);
        // Update touches map
        const newTouches = new Map(touches);
        Array.from(e.changedTouches).forEach((touch)=>{
            newTouches.delete(touch.identifier);
        });
        setTouches(newTouches);
    }, [
        disabled,
        touches,
        onSwipe,
        onDoubleTap,
        onTap,
        swipeThreshold,
        doubleTapDelay,
        lastTap,
        triggerHapticFeedback,
        announceGesture,
        x,
        y,
        scale
    ]);
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (longPressTimer.current) {
                clearTimeout(longPressTimer.current);
            }
        };
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
        ref: containerRef,
        className: `relative overflow-hidden ${className}`,
        style: {
            touchAction: "manipulation",
            x,
            y,
            opacity,
            scale
        },
        onTouchStart: handleTouchStart,
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        onTouchCancel: handleTouchEnd,
        children: [
            showSwipeIndicators && swipeDirection && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                initial: {
                    opacity: 0,
                    scale: 0.5
                },
                animate: {
                    opacity: 1,
                    scale: 1
                },
                exit: {
                    opacity: 0,
                    scale: 0.5
                },
                className: "absolute inset-0 flex items-center justify-center pointer-events-none z-10",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "bg-black/20 backdrop-blur-sm rounded-full p-4",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "text-white text-2xl",
                        children: [
                            swipeDirection === "left" && "←",
                            swipeDirection === "right" && "→",
                            swipeDirection === "up" && "↑",
                            swipeDirection === "down" && "↓"
                        ]
                    })
                })
            }),
            touchRipples.map((ripple)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    initial: {
                        scale: 0,
                        opacity: 0.8,
                        x: ripple.x - 25,
                        y: ripple.y - 25
                    },
                    animate: {
                        scale: 2,
                        opacity: 0
                    },
                    transition: {
                        duration: 0.6,
                        ease: "easeOut"
                    },
                    className: "absolute w-12 h-12 bg-blue-400 rounded-full pointer-events-none z-10",
                    style: {
                        background: "radial-gradient(circle, rgba(59,130,246,0.3) 0%, transparent 70%)"
                    }
                }, ripple.id)),
            isLongPressing && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                initial: {
                    scale: 0,
                    opacity: 0
                },
                animate: {
                    scale: 1,
                    opacity: 1
                },
                className: "absolute inset-0 flex items-center justify-center pointer-events-none z-10",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "bg-red-500/20 backdrop-blur-sm rounded-full p-6",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "w-8 h-8 border-4 border-white border-t-transparent rounded-full animate-spin"
                    })
                })
            }),
            children
        ]
    });
}
function usePortugueseGestures() {
    const [gestureHistory, setGestureHistory] = (0, _react.useState)([]);
    const detectCulturalPattern = (0, _react.useCallback)((gesture)=>{
        setGestureHistory((prev)=>[
                ...prev.slice(-4),
                gesture
            ]);
        // Portuguese flag pattern: right-down-left-up
        const flagPattern = [
            "right",
            "down",
            "left",
            "up"
        ];
        const recentGestures = gestureHistory.slice(-3).map((g)=>g.direction);
        recentGestures.push(gesture.direction);
        if (JSON.stringify(recentGestures) === JSON.stringify(flagPattern)) {
            // Easter egg: Portuguese flag gesture detected
            if ("navigator" in window && "vibrate" in navigator) {
                navigator.vibrate([
                    200,
                    100,
                    200,
                    100,
                    200
                ]);
            }
            return "portuguese-flag";
        }
        // Fado pattern: slow swipes in circle
        if (gestureHistory.length >= 4) {
            const speeds = gestureHistory.slice(-4).map((g)=>g.velocity);
            const avgSpeed = speeds.reduce((a, b)=>a + b) / speeds.length;
            if (avgSpeed < 0.5) {
                return "fado-rhythm";
            }
        }
        return null;
    }, [
        gestureHistory
    ]);
    return {
        detectCulturalPattern,
        gestureHistory
    };
}
const _default = EnhancedMobileGestures;

//# sourceMappingURL=data:application/json;base64,