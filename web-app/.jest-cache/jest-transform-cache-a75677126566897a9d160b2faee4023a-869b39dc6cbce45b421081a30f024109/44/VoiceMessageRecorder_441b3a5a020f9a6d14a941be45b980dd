6063adf4f91ea37cab2ad3371e362f73
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return VoiceMessageRecorder;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _framermotion = require("framer-motion");
const _lucidereact = require("lucide-react");
const _LanguageContext = require("../context/LanguageContext");
const _voicemessaging = require("../config/voice-messaging");
const _brand = require("../config/brand");
function VoiceMessageRecorder({ onSendVoiceMessage, membershipTier = "standard", preferredDialect = "pt-PT", disabled = false, className = "" }) {
    const { language } = (0, _LanguageContext.useLanguage)();
    const [recordingState, setRecordingState] = (0, _react.useState)({
        isRecording: false,
        isPaused: false,
        isPlaying: false,
        duration: 0,
        audioBlob: null,
        audioUrl: null,
        transcription: "",
        confidence: 0
    });
    const [selectedCategory, setSelectedCategory] = (0, _react.useState)("casual");
    const [showSettings, setShowSettings] = (0, _react.useState)(false);
    const [transcriptionEnabled, setTranscriptionEnabled] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const mediaRecorderRef = (0, _react.useRef)(null);
    const audioPlayerRef = (0, _react.useRef)(null);
    const streamRef = (0, _react.useRef)(null);
    const timerRef = (0, _react.useRef)(null);
    const recognitionRef = (0, _react.useRef)(null);
    const voiceConfig = (0, _voicemessaging.getVoiceConfigForTier)(membershipTier);
    const speechConfig = (0, _voicemessaging.getSpeechToTextForDialect)(preferredDialect);
    const translations = {
        en: {
            holdToRecord: "Hold to record voice message",
            tapToRecord: "Tap to record voice message",
            recording: "Recording...",
            paused: "Paused",
            playRecording: "Play recording",
            deleteRecording: "Delete recording",
            sendVoiceMessage: "Send voice message",
            transcription: "Transcription",
            voiceSettings: "Voice settings",
            category: "Message category",
            enableTranscription: "Enable transcription",
            dialect: "Portuguese dialect",
            quality: "Recording quality",
            maxDuration: "Max duration",
            recordingError: "Recording failed. Please check microphone permissions.",
            transcriptionError: "Transcription failed. Voice message will be sent without text.",
            microphonePermission: "Microphone permission required",
            maxDurationReached: "Maximum recording duration reached"
        },
        pt: {
            holdToRecord: "Pressione para gravar mensagem de voz",
            tapToRecord: "Toque para gravar mensagem de voz",
            recording: "Gravando...",
            paused: "Pausado",
            playRecording: "Reproduzir grava\xe7\xe3o",
            deleteRecording: "Eliminar grava\xe7\xe3o",
            sendVoiceMessage: "Enviar mensagem de voz",
            transcription: "Transcri\xe7\xe3o",
            voiceSettings: "Configura\xe7\xf5es de voz",
            category: "Categoria da mensagem",
            enableTranscription: "Ativar transcri\xe7\xe3o",
            dialect: "Dialeto portugu\xeas",
            quality: "Qualidade da grava\xe7\xe3o",
            maxDuration: "Dura\xe7\xe3o m\xe1xima",
            recordingError: "Falha na grava\xe7\xe3o. Verifique as permiss\xf5es do microfone.",
            transcriptionError: "Falha na transcri\xe7\xe3o. Mensagem ser\xe1 enviada sem texto.",
            microphonePermission: "Permiss\xe3o do microfone necess\xe1ria",
            maxDurationReached: "Dura\xe7\xe3o m\xe1xima de grava\xe7\xe3o atingida"
        }
    };
    const t = translations[language];
    // Initialize speech recognition
    (0, _react.useEffect)(()=>{
        if (typeof window !== "undefined" && "webkitSpeechRecognition" in window) {
            const SpeechRecognition = window.webkitSpeechRecognition;
            recognitionRef.current = new SpeechRecognition();
            const recognition = recognitionRef.current;
            recognition.continuous = speechConfig.continuous;
            recognition.interimResults = speechConfig.interimResults;
            recognition.lang = speechConfig.language;
            recognition.maxAlternatives = speechConfig.maxAlternatives;
            recognition.onresult = (event)=>{
                let transcript = "";
                let confidence = 0;
                for(let i = event.resultIndex; i < event.results.length; i++){
                    if (event.results[i].isFinal) {
                        transcript += event.results[i][0].transcript;
                        confidence = Math.max(confidence, event.results[i][0].confidence);
                    }
                }
                if (transcript && confidence >= speechConfig.confidenceThreshold) {
                    setRecordingState((prev)=>({
                            ...prev,
                            transcription: transcript.trim(),
                            confidence
                        }));
                }
            };
            recognition.onerror = (event)=>{
                console.warn("Speech recognition error:", event.error);
            };
        }
    }, [
        preferredDialect
    ]);
    // Timer function
    const startTimer = (0, _react.useCallback)(()=>{
        const startTime = Date.now();
        timerRef.current = setInterval(()=>{
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            setRecordingState((prev)=>({
                    ...prev,
                    duration: elapsed
                }));
            // Auto-stop at max duration
            if (elapsed >= voiceConfig.maxDuration) {
                stopRecording();
            }
        }, 100);
    }, [
        voiceConfig.maxDuration
    ]);
    const stopTimer = (0, _react.useCallback)(()=>{
        if (timerRef.current) {
            clearInterval(timerRef.current);
            timerRef.current = null;
        }
    }, []);
    const startRecording = async ()=>{
        try {
            setError(null);
            const stream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    sampleRate: voiceConfig.sampleRate,
                    channelCount: voiceConfig.channelCount,
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true
                }
            });
            streamRef.current = stream;
            const mediaRecorder = new MediaRecorder(stream, {
                mimeType: voiceConfig.mimeType,
                audioBitsPerSecond: voiceConfig.bitRate
            });
            mediaRecorderRef.current = mediaRecorder;
            const chunks = [];
            mediaRecorder.ondataavailable = (event)=>{
                if (event.data.size > 0) {
                    chunks.push(event.data);
                }
            };
            mediaRecorder.onstop = ()=>{
                const audioBlob = new Blob(chunks, {
                    type: voiceConfig.mimeType
                });
                const audioUrl = URL.createObjectURL(audioBlob);
                setRecordingState((prev)=>({
                        ...prev,
                        audioBlob,
                        audioUrl,
                        isRecording: false
                    }));
            };
            mediaRecorder.start(100) // Collect data every 100ms
            ;
            setRecordingState((prev)=>({
                    ...prev,
                    isRecording: true,
                    isPaused: false,
                    duration: 0,
                    transcription: "",
                    confidence: 0
                }));
            startTimer();
            // Start speech recognition if enabled
            if (transcriptionEnabled && recognitionRef.current) {
                recognitionRef.current.start();
            }
        } catch (error) {
            console.error("Error starting recording:", error);
            setError(t.recordingError);
        }
    };
    const stopRecording = (0, _react.useCallback)(()=>{
        if (mediaRecorderRef.current && recordingState.isRecording) {
            mediaRecorderRef.current.stop();
        }
        if (streamRef.current) {
            streamRef.current.getTracks().forEach((track)=>track.stop());
            streamRef.current = null;
        }
        if (recognitionRef.current) {
            try {
                recognitionRef.current.stop();
            } catch (e) {
            // Recognition might already be stopped
            }
        }
        stopTimer();
    }, [
        recordingState.isRecording,
        stopTimer
    ]);
    const pauseRecording = ()=>{
        if (mediaRecorderRef.current && recordingState.isRecording) {
            mediaRecorderRef.current.pause();
            stopTimer();
            setRecordingState((prev)=>({
                    ...prev,
                    isPaused: true
                }));
        }
    };
    const resumeRecording = ()=>{
        if (mediaRecorderRef.current && recordingState.isPaused) {
            mediaRecorderRef.current.resume();
            startTimer();
            setRecordingState((prev)=>({
                    ...prev,
                    isPaused: false
                }));
        }
    };
    const playRecording = ()=>{
        if (recordingState.audioUrl && audioPlayerRef.current) {
            audioPlayerRef.current.play();
            setRecordingState((prev)=>({
                    ...prev,
                    isPlaying: true
                }));
        }
    };
    const pausePlayback = ()=>{
        if (audioPlayerRef.current) {
            audioPlayerRef.current.pause();
            setRecordingState((prev)=>({
                    ...prev,
                    isPlaying: false
                }));
        }
    };
    const deleteRecording = ()=>{
        if (recordingState.audioUrl) {
            URL.revokeObjectURL(recordingState.audioUrl);
        }
        setRecordingState({
            isRecording: false,
            isPaused: false,
            isPlaying: false,
            duration: 0,
            audioBlob: null,
            audioUrl: null,
            transcription: "",
            confidence: 0
        });
    };
    const sendVoiceMessage = ()=>{
        if (recordingState.audioBlob) {
            onSendVoiceMessage(recordingState.audioBlob, recordingState.transcription, recordingState.duration);
            deleteRecording();
        }
    };
    const formatDuration = (seconds)=>{
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, "0")}`;
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `voice-message-recorder ${className}`,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.AnimatePresence, {
                children: error && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                    initial: {
                        opacity: 0,
                        y: -10
                    },
                    animate: {
                        opacity: 1,
                        y: 0
                    },
                    exit: {
                        opacity: 0,
                        y: -10
                    },
                    className: "mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center space-x-2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertCircle, {
                            className: "w-4 h-4 text-red-600 flex-shrink-0"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-sm text-red-700",
                            children: error
                        })
                    ]
                })
            }),
            !recordingState.audioBlob ? /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center space-x-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.button, {
                        whileHover: {
                            scale: 1.05
                        },
                        whileTap: {
                            scale: 0.95
                        },
                        onMouseDown: startRecording,
                        onMouseUp: stopRecording,
                        onTouchStart: startRecording,
                        onTouchEnd: stopRecording,
                        disabled: disabled,
                        className: `
              relative w-16 h-16 rounded-full flex items-center justify-center transition-all duration-200
              ${recordingState.isRecording ? "bg-red-500 animate-pulse" : "bg-primary-600 hover:bg-primary-700"}
              ${disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer"}
            `,
                        style: {
                            backgroundColor: recordingState.isRecording ? "#ef4444" : _brand.PORTUGUESE_COLORS.primary
                        },
                        children: [
                            recordingState.isRecording ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Square, {
                                className: "w-6 h-6 text-white"
                            }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Mic, {
                                className: "w-6 h-6 text-white"
                            }),
                            recordingState.isRecording && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                                animate: {
                                    scale: [
                                        1,
                                        1.2,
                                        1
                                    ]
                                },
                                transition: {
                                    duration: 1,
                                    repeat: Infinity
                                },
                                className: "absolute -inset-1 rounded-full border-2 border-red-300"
                            })
                        ]
                    }),
                    recordingState.isRecording && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                        initial: {
                            opacity: 0,
                            x: -10
                        },
                        animate: {
                            opacity: 1,
                            x: 0
                        },
                        className: "flex items-center space-x-3",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "w-2 h-2 bg-red-500 rounded-full animate-pulse"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm font-medium text-gray-700",
                                        children: recordingState.isPaused ? t.paused : t.recording
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-1 text-sm text-gray-600",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Timer, {
                                        className: "w-4 h-4"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        children: formatDuration(recordingState.duration)
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        children: "/"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        children: formatDuration(voiceConfig.maxDuration)
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: recordingState.isPaused ? resumeRecording : pauseRecording,
                                className: "p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-full transition-colors",
                                children: recordingState.isPaused ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Play, {
                                    className: "w-4 h-4"
                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Pause, {
                                    className: "w-4 h-4"
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>setShowSettings(!showSettings),
                        className: "p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-full transition-colors",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Settings, {
                            className: "w-5 h-5"
                        })
                    })
                ]
            }) : /* Playback Interface */ /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                initial: {
                    opacity: 0,
                    y: 10
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                className: "space-y-4",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("audio", {
                        ref: audioPlayerRef,
                        src: recordingState.audioUrl || undefined,
                        onEnded: ()=>setRecordingState((prev)=>({
                                    ...prev,
                                    isPlaying: false
                                }))
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-4",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: recordingState.isPlaying ? pausePlayback : playRecording,
                                className: "w-12 h-12 bg-primary-600 hover:bg-primary-700 rounded-full flex items-center justify-center text-white transition-colors",
                                style: {
                                    backgroundColor: _brand.PORTUGUESE_COLORS.primary
                                },
                                children: recordingState.isPlaying ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Pause, {
                                    className: "w-5 h-5"
                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Play, {
                                    className: "w-5 h-5 ml-0.5"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex-1",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center space-x-2 text-sm text-gray-600",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Volume2, {
                                                className: "w-4 h-4"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                children: formatDuration(recordingState.duration)
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Waveform, {
                                                className: "w-4 h-4"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "mt-1 h-1 bg-gray-200 rounded-full",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                            className: "h-full bg-primary-600 rounded-full transition-all duration-100",
                                            style: {
                                                width: recordingState.isPlaying ? "100%" : "0%",
                                                backgroundColor: _brand.PORTUGUESE_COLORS.primary
                                            }
                                        })
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                        onClick: deleteRecording,
                                        className: "p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition-colors",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Trash2, {
                                            className: "w-5 h-5"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.button, {
                                        whileHover: {
                                            scale: 1.05
                                        },
                                        whileTap: {
                                            scale: 0.95
                                        },
                                        onClick: sendVoiceMessage,
                                        className: "px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg flex items-center space-x-2 transition-colors",
                                        style: {
                                            backgroundColor: _brand.PORTUGUESE_COLORS.primary
                                        },
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Send, {
                                                className: "w-4 h-4"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-sm font-medium",
                                                children: t.sendVoiceMessage
                                            })
                                        ]
                                    })
                                ]
                            })
                        ]
                    }),
                    transcriptionEnabled && recordingState.transcription && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                        initial: {
                            opacity: 0,
                            y: 10
                        },
                        animate: {
                            opacity: 1,
                            y: 0
                        },
                        className: "p-3 bg-gray-50 rounded-lg border border-gray-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center justify-between mb-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center space-x-2",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Languages, {
                                                className: "w-4 h-4 text-gray-600"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-sm font-medium text-gray-700",
                                                children: t.transcription
                                            })
                                        ]
                                    }),
                                    recordingState.confidence > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center space-x-1",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.CheckCircle, {
                                                className: "w-4 h-4 text-green-600"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                className: "text-xs text-gray-600",
                                                children: [
                                                    Math.round(recordingState.confidence * 100),
                                                    "%"
                                                ]
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                                className: "text-sm text-gray-800 italic",
                                children: [
                                    '"',
                                    recordingState.transcription,
                                    '"'
                                ]
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.AnimatePresence, {
                children: showSettings && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                    initial: {
                        opacity: 0,
                        height: 0
                    },
                    animate: {
                        opacity: 1,
                        height: "auto"
                    },
                    exit: {
                        opacity: 0,
                        height: 0
                    },
                    className: "mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200 space-y-4",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h4", {
                            className: "font-medium text-gray-900",
                            children: t.voiceSettings
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                    className: "block text-sm font-medium text-gray-700 mb-2",
                                    children: t.category
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("select", {
                                    value: selectedCategory,
                                    onChange: (e)=>setSelectedCategory(e.target.value),
                                    className: "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent",
                                    children: Object.entries(_voicemessaging.VOICE_MESSAGE_CATEGORIES).map(([key, category])=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("option", {
                                            value: key,
                                            children: [
                                                category.icon,
                                                " ",
                                                category.label[language]
                                            ]
                                        }, key))
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "flex items-center justify-between",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                    className: "text-sm font-medium text-gray-700",
                                    children: t.enableTranscription
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                    onClick: ()=>setTranscriptionEnabled(!transcriptionEnabled),
                                    className: `
                  relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2
                  ${transcriptionEnabled ? "bg-primary-600" : "bg-gray-200"}
                `,
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: `
                    pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition duration-200 ease-in-out
                    ${transcriptionEnabled ? "translate-x-5" : "translate-x-0"}
                  `
                                    })
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "text-sm text-gray-600",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                    className: "font-medium",
                                    children: [
                                        t.maxDuration,
                                        ":"
                                    ]
                                }),
                                " ",
                                formatDuration(voiceConfig.maxDuration)
                            ]
                        })
                    ]
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,