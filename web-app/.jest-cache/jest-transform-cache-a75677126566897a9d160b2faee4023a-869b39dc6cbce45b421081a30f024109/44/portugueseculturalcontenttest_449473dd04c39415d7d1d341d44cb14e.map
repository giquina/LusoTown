{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/carousels/portuguese-cultural-content.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { LanguageProvider } from '@/context/LanguageContext'\nimport { \n  WeekendEventsCarousel,\n  PALOPHeritageCarousel,\n  WeeklyDiscoveryCarousel,\n  CulturalCelebrationsCarousel,\n  createMockWeekendEvents,\n  createMockPALOPHeritage,\n  createMockWeeklyDiscovery,\n  createMockCulturalCelebrations\n} from '@/components/carousels/LusophoneCarouselExamples'\n\n// Mock framer-motion for consistent testing\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\n    section: ({ children, ...props }: any) => <section {...props}>{children}</section>\n  },\n  AnimatePresence: ({ children }: any) => <div>{children}</div>,\n  useMotionValue: () => ({ set: jest.fn(), get: () => 0 }),\n  useTransform: () => 0,\n  animate: jest.fn(),\n  useAnimation: () => ({ start: jest.fn(), stop: jest.fn() })\n}))\n\n// Mock EnhancedMobileGestures\njest.mock('@/components/EnhancedMobileGestures', () => ({\n  EnhancedMobileGestures: ({ children, onSwipe, onTap }: any) => (\n    <div data-testid=\"enhanced-mobile-gestures\" onClick={() => onTap?.({ x: 100, y: 100 })}>\n      {children}\n    </div>\n  ),\n  usePortugueseGestures: () => ({\n    detectCulturalPattern: jest.fn(() => 'traditional-navigation'),\n    gestureHistory: []\n  })\n}))\n\n// Mock performance and navigator APIs\nObject.defineProperty(navigator, 'onLine', {\n  writable: true,\n  value: true\n})\n\nObject.defineProperty(performance, 'memory', {\n  writable: true,\n  value: {\n    usedJSHeapSize: 1024 * 1024 * 10 // 10MB\n  }\n})\n\ndescribe('Portuguese Cultural Content in Carousels', () => {\n  \n  const renderWithLanguageProvider = (component: React.ReactElement, language = 'en') => {\n    return render(\n      <LanguageProvider>\n        {component}\n      </LanguageProvider>\n    )\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Weekend Events Carousel - Portuguese Cultural Authenticity', () => {\n    \n    it('displays authentic Portuguese cultural events', async () => {\n      const mockEvents = createMockWeekendEvents(6)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel \n          events={mockEvents} \n          showControls={true}\n          autoAdvance={false}\n        />\n      )\n      \n      // Should display Portuguese cultural event titles\n      await waitFor(() => {\n        expect(screen.getByText(/Fado Night|Noite de Fado/i)).toBeInTheDocument()\n      })\n      \n      // Check for Portuguese flag emoji\n      const portugalFlag = screen.queryByText('ðŸ‡µðŸ‡¹')\n      if (portugalFlag) {\n        expect(portugalFlag).toBeInTheDocument()\n      }\n      \n      // Check for authentic Portuguese terminology\n      const portugueseSpeakingCommunity = screen.queryByText(/Portuguese.?speaking.?community/i)\n      if (portugueseSpeakingCommunity) {\n        expect(portugueseSpeakingCommunity).toBeInTheDocument()\n      }\n    })\n    \n    it('includes diverse Portuguese-speaking countries events', async () => {\n      const mockEvents = createMockWeekendEvents(8)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} />\n      )\n      \n      // Should include events from multiple Portuguese-speaking countries\n      const lusophoneFlags = ['ðŸ‡µðŸ‡¹', 'ðŸ‡§ðŸ‡·', 'ðŸ‡¨ðŸ‡»', 'ðŸ‡¦ðŸ‡´', 'ðŸ‡²ðŸ‡¿', 'ðŸ‡¬ðŸ‡¼', 'ðŸ‡¸ðŸ‡¹', 'ðŸ‡¹ðŸ‡±']\n      let flagCount = 0\n      \n      lusophoneFlags.forEach(flag => {\n        const flagElement = screen.queryByText(flag)\n        if (flagElement) {\n          flagCount++\n        }\n      })\n      \n      // Should have representation from multiple countries\n      expect(flagCount).toBeGreaterThan(1)\n    })\n    \n    it('displays events with Portuguese cultural categories', async () => {\n      const mockEvents = createMockWeekendEvents(5)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} />\n      )\n      \n      // Check for authentic Portuguese cultural categories\n      const culturalElements = [\n        /Fado|fado/,\n        /Samba|samba/,\n        /Morna|morna/,\n        /Traditional|Tradicional/i,\n        /Folk|FolclÃ³rico/i,\n        /Music|MÃºsica/i,\n        /Dance|DanÃ§a/i\n      ]\n      \n      let foundCulturalElements = 0\n      culturalElements.forEach(pattern => {\n        const element = screen.queryByText(pattern)\n        if (element) {\n          foundCulturalElements++\n        }\n      })\n      \n      expect(foundCulturalElements).toBeGreaterThan(0)\n    })\n  })\n\n  describe('PALOP Heritage Carousel - African Portuguese-Speaking Countries', () => {\n    \n    it('displays authentic PALOP country content', async () => {\n      const mockPALOPHeritage = createMockPALOPHeritage(5)\n      \n      renderWithLanguageProvider(\n        <PALOPHeritageCarousel heritage={mockPALOPHeritage} />\n      )\n      \n      // Should display PALOP country names\n      const palopCountries = [\n        /Angola/i,\n        /Cape Verde|Cabo Verde/i,\n        /Mozambique|MoÃ§ambique/i,\n        /Guinea-Bissau|GuinÃ©-Bissau/i,\n        /SÃ£o TomÃ©|Sao Tome/i,\n        /East Timor|Timor-Leste/i\n      ]\n      \n      let foundCountries = 0\n      palopCountries.forEach(pattern => {\n        const countryElement = screen.queryByText(pattern)\n        if (countryElement) {\n          foundCountries++\n        }\n      })\n      \n      expect(foundCountries).toBeGreaterThan(0)\n    })\n    \n    it('includes authentic PALOP cultural elements', async () => {\n      const mockPALOPHeritage = createMockPALOPHeritage(4)\n      \n      renderWithLanguageProvider(\n        <PALOPHeritageCarousel heritage={mockPALOPHeritage} />\n      )\n      \n      // Check for authentic PALOP cultural elements\n      const palopCulturalElements = [\n        /Semba|semba/,\n        /Kizomba|kizomba/,\n        /Morna|morna/,\n        /Coladeira|coladeira/,\n        /Marrabenta|marrabenta/,\n        /FunanÃ¡|funana/,\n        /Kuduro|kuduro/\n      ]\n      \n      let foundElements = 0\n      palopCulturalElements.forEach(pattern => {\n        const element = screen.queryByText(pattern)\n        if (element) {\n          foundElements++\n        }\n      })\n      \n      // Should have some PALOP cultural elements\n      expect(foundElements).toBeGreaterThanOrEqual(0) // Some might not be present in mock\n    })\n    \n    it('displays correct PALOP flag emojis', async () => {\n      const mockPALOPHeritage = createMockPALOPHeritage(6)\n      \n      renderWithLanguageProvider(\n        <PALOPHeritageCarousel heritage={mockPALOPHeritage} />\n      )\n      \n      // Check for PALOP flag emojis\n      const palopFlags = ['ðŸ‡¦ðŸ‡´', 'ðŸ‡¨ðŸ‡»', 'ðŸ‡²ðŸ‡¿', 'ðŸ‡¬ðŸ‡¼', 'ðŸ‡¸ðŸ‡¹', 'ðŸ‡¹ðŸ‡±']\n      let flagCount = 0\n      \n      palopFlags.forEach(flag => {\n        const flagElement = screen.queryByText(flag)\n        if (flagElement) {\n          flagCount++\n        }\n      })\n      \n      // Should display at least some PALOP flags\n      expect(flagCount).toBeGreaterThanOrEqual(0)\n    })\n  })\n\n  describe('Weekly Discovery Carousel - UK Portuguese Community', () => {\n    \n    it('features UK-based Portuguese businesses and locations', async () => {\n      const mockDiscovery = createMockWeeklyDiscovery(5)\n      \n      renderWithLanguageProvider(\n        <WeeklyDiscoveryCarousel discoveries={mockDiscovery} />\n      )\n      \n      // Check for UK locations\n      const ukLocations = [\n        /London/i,\n        /Manchester/i,\n        /Birmingham/i,\n        /Liverpool/i,\n        /Bristol/i,\n        /Edinburgh/i,\n        /Cambridge/i,\n        /Oxford/i\n      ]\n      \n      let foundLocations = 0\n      ukLocations.forEach(pattern => {\n        const locationElement = screen.queryByText(pattern)\n        if (locationElement) {\n          foundLocations++\n        }\n      })\n      \n      expect(foundLocations).toBeGreaterThan(0)\n    })\n    \n    it('includes authentic Portuguese business types', async () => {\n      const mockDiscovery = createMockWeeklyDiscovery(4)\n      \n      renderWithLanguageProvider(\n        <WeeklyDiscoveryCarousel discoveries={mockDiscovery} />\n      )\n      \n      // Check for Portuguese business categories\n      const businessTypes = [\n        /Restaurant|Restaurante/i,\n        /Cultural Center|Centro Cultural/i,\n        /Portuguese|PortuguÃªs/i,\n        /Pastelaria|Bakery/i,\n        /Market|Mercado/i\n      ]\n      \n      let foundTypes = 0\n      businessTypes.forEach(pattern => {\n        const typeElement = screen.queryByText(pattern)\n        if (typeElement) {\n          foundTypes++\n        }\n      })\n      \n      expect(foundTypes).toBeGreaterThan(0)\n    })\n  })\n\n  describe('Cultural Celebrations Carousel - Lusophone Festivities', () => {\n    \n    it('displays authentic Portuguese cultural celebrations', async () => {\n      const mockCelebrations = createMockCulturalCelebrations(5)\n      \n      renderWithLanguageProvider(\n        <CulturalCelebrationsCarousel celebrations={mockCelebrations} />\n      )\n      \n      // Check for Portuguese celebrations\n      const portugalCelebrations = [\n        /Festa de Santo AntÃ³nio|Saint Anthony/i,\n        /Carnaval|Carnival/i,\n        /Festa Junina|June Festival/i,\n        /Independence|IndependÃªncia/i,\n        /Portuguese Heritage|HeranÃ§a Portuguesa/i\n      ]\n      \n      let foundCelebrations = 0\n      portugalCelebrations.forEach(pattern => {\n        const celebrationElement = screen.queryByText(pattern)\n        if (celebrationElement) {\n          foundCelebrations++\n        }\n      })\n      \n      expect(foundCelebrations).toBeGreaterThan(0)\n    })\n    \n    it('includes celebration periods and significance', async () => {\n      const mockCelebrations = createMockCulturalCelebrations(3)\n      \n      renderWithLanguageProvider(\n        <CulturalCelebrationsCarousel celebrations={mockCelebrations} />\n      )\n      \n      // Should include celebration context\n      const celebrationContext = [\n        /June|Junho/i,\n        /Festival|Festa/i,\n        /Traditional|Tradicional/i,\n        /Heritage|HeranÃ§a/i,\n        /Cultural|Cultural/i\n      ]\n      \n      let foundContext = 0\n      celebrationContext.forEach(pattern => {\n        const contextElement = screen.queryByText(pattern)\n        if (contextElement) {\n          foundContext++\n        }\n      })\n      \n      expect(foundContext).toBeGreaterThan(0)\n    })\n  })\n\n  describe('Bilingual Content Support (EN/PT)', () => {\n    \n    it('displays English content by default', async () => {\n      const mockEvents = createMockWeekendEvents(3)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} />,\n        'en'\n      )\n      \n      // Should show English titles\n      await waitFor(() => {\n        const englishContent = screen.queryByText(/Night|Workshop|Festival|Cultural/i)\n        expect(englishContent).toBeInTheDocument()\n      })\n    })\n    \n    it('switches to Portuguese when language context changes', async () => {\n      // This would require a more complex test with language switching\n      // For now, we test that Portuguese content structure is present\n      \n      const mockEvents = createMockWeekendEvents(3)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} />\n      )\n      \n      // Check that bilingual structure exists in mock data\n      expect(mockEvents[0]).toHaveProperty('title.en')\n      expect(mockEvents[0]).toHaveProperty('title.pt')\n      expect(mockEvents[0]).toHaveProperty('description.en')\n      expect(mockEvents[0]).toHaveProperty('description.pt')\n    })\n  })\n\n  describe('Cultural Authenticity Validation', () => {\n    \n    it('uses correct Portuguese terminology', async () => {\n      const mockEvents = createMockWeekendEvents(3)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} />\n      )\n      \n      // Should NOT use generic \"Portuguese community\"\n      const incorrectTerminology = screen.queryByText(/^Portuguese community$/i)\n      expect(incorrectTerminology).not.toBeInTheDocument()\n      \n      // Should use \"Portuguese-speaking community\" if terminology is present\n      const correctTerminology = screen.queryByText(/Portuguese.?speaking.?community/i)\n      // This is optional as not all carousels may include this terminology\n    })\n    \n    it('references United Kingdom not just London', async () => {\n      const mockDiscovery = createMockWeeklyDiscovery(4)\n      \n      renderWithLanguageProvider(\n        <WeeklyDiscoveryCarousel discoveries={mockDiscovery} />\n      )\n      \n      // Should include UK-wide locations, not just London\n      const ukWideLocations = [\n        /Manchester/i,\n        /Birmingham/i,\n        /Liverpool/i,\n        /Bristol/i,\n        /Edinburgh/i,\n        /Cambridge/i,\n        /Oxford/i,\n        /United Kingdom|UK/i\n      ]\n      \n      let foundNonLondonLocations = 0\n      ukWideLocations.forEach(pattern => {\n        const locationElement = screen.queryByText(pattern)\n        if (locationElement) {\n          foundNonLondonLocations++\n        }\n      })\n      \n      // Should have some UK representation beyond London\n      expect(foundNonLondonLocations).toBeGreaterThanOrEqual(0)\n    })\n    \n    it('includes diverse lusophone representation', async () => {\n      const mockPALOPHeritage = createMockPALOPHeritage(6)\n      \n      renderWithLanguageProvider(\n        <PALOPHeritageCarousel heritage={mockPALOPHeritage} />\n      )\n      \n      // Should represent multiple lusophone countries\n      const lusophoneCountries = [\n        /Portugal/i,\n        /Brazil|Brasil/i,\n        /Angola/i,\n        /Cape Verde|Cabo Verde/i,\n        /Mozambique|MoÃ§ambique/i,\n        /Guinea-Bissau|GuinÃ©-Bissau/i\n      ]\n      \n      let countryRepresentation = 0\n      lusophoneCountries.forEach(pattern => {\n        const countryElement = screen.queryByText(pattern)\n        if (countryElement) {\n          countryRepresentation++\n        }\n      })\n      \n      // Should represent multiple lusophone countries\n      expect(countryRepresentation).toBeGreaterThan(1)\n    })\n  })\n\n  describe('Cultural Content Quality Assurance', () => {\n    \n    it('maintains cultural sensitivity in event descriptions', async () => {\n      const mockEvents = createMockWeekendEvents(4)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} />\n      )\n      \n      // Check for respectful cultural language\n      const culturalTerms = [\n        /Traditional|Tradicional/i,\n        /Heritage|HeranÃ§a/i,\n        /Authentic|AutÃªntico/i,\n        /Cultural|Cultural/i,\n        /Community|Comunidade/i\n      ]\n      \n      let respectfulTermsFound = 0\n      culturalTerms.forEach(pattern => {\n        const termElement = screen.queryByText(pattern)\n        if (termElement) {\n          respectfulTermsFound++\n        }\n      })\n      \n      // Should use respectful cultural terminology\n      expect(respectfulTermsFound).toBeGreaterThan(0)\n    })\n    \n    it('avoids cultural stereotypes and oversimplification', async () => {\n      const mockEvents = createMockWeekendEvents(5)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} />\n      )\n      \n      // Should NOT contain oversimplified or stereotypical content\n      const problematicTerms = [\n        /exotic/i,\n        /quaint/i,\n        /primitive/i,\n        /backward/i\n      ]\n      \n      problematicTerms.forEach(pattern => {\n        const problematicElement = screen.queryByText(pattern)\n        expect(problematicElement).not.toBeInTheDocument()\n      })\n    })\n    \n    it('provides accurate cultural context', async () => {\n      const mockCelebrations = createMockCulturalCelebrations(3)\n      \n      renderWithLanguageProvider(\n        <CulturalCelebrationsCarousel celebrations={mockCelebrations} />\n      )\n      \n      // Should provide meaningful cultural context\n      const contextualElements = [\n        /significance|significado/i,\n        /tradition|tradiÃ§Ã£o/i,\n        /celebration|celebraÃ§Ã£o/i,\n        /festival|festa/i,\n        /cultural|cultural/i\n      ]\n      \n      let contextualElementsFound = 0\n      contextualElements.forEach(pattern => {\n        const contextElement = screen.queryByText(pattern)\n        if (contextElement) {\n          contextualElementsFound++\n        }\n      })\n      \n      expect(contextualElementsFound).toBeGreaterThan(0)\n    })\n  })\n\n  describe('Navigation and Interaction with Cultural Content', () => {\n    \n    it('maintains cultural context during carousel navigation', async () => {\n      const mockEvents = createMockWeekendEvents(4)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel events={mockEvents} showControls={true} />\n      )\n      \n      // Initial cultural content should be visible\n      await waitFor(() => {\n        expect(screen.getByText(/Fado|Brazilian|Portuguese/i)).toBeInTheDocument()\n      })\n      \n      // Navigate to next item\n      const nextButton = screen.getByRole('button', { name: /next/i })\n      fireEvent.click(nextButton)\n      \n      // Should still show cultural content after navigation\n      await waitFor(() => {\n        expect(screen.getByText(/Fado|Brazilian|Portuguese|Cultural/i)).toBeInTheDocument()\n      })\n    })\n    \n    it('provides cultural accessibility announcements', async () => {\n      const mockEvents = createMockWeekendEvents(3)\n      \n      renderWithLanguageProvider(\n        <WeekendEventsCarousel \n          events={mockEvents} \n          showControls={true}\n          enableAccessibilityAnnouncements={true}\n        />\n      )\n      \n      // Check for accessibility features\n      const ariaLabels = screen.getAllByRole('button')\n      ariaLabels.forEach(button => {\n        const ariaLabel = button.getAttribute('aria-label')\n        if (ariaLabel) {\n          expect(ariaLabel.length).toBeGreaterThan(0)\n        }\n      })\n    })\n  })\n})"],"names":["jest","mock","motion","div","children","props","section","AnimatePresence","useMotionValue","set","fn","get","useTransform","animate","useAnimation","start","stop","EnhancedMobileGestures","onSwipe","onTap","data-testid","onClick","x","y","usePortugueseGestures","detectCulturalPattern","gestureHistory","Object","defineProperty","navigator","writable","value","performance","usedJSHeapSize","describe","renderWithLanguageProvider","component","language","render","LanguageProvider","beforeEach","clearAllMocks","it","mockEvents","createMockWeekendEvents","WeekendEventsCarousel","events","showControls","autoAdvance","waitFor","expect","screen","getByText","toBeInTheDocument","portugalFlag","queryByText","portugueseSpeakingCommunity","lusophoneFlags","flagCount","forEach","flag","flagElement","toBeGreaterThan","culturalElements","foundCulturalElements","pattern","element","mockPALOPHeritage","createMockPALOPHeritage","PALOPHeritageCarousel","heritage","palopCountries","foundCountries","countryElement","palopCulturalElements","foundElements","toBeGreaterThanOrEqual","palopFlags","mockDiscovery","createMockWeeklyDiscovery","WeeklyDiscoveryCarousel","discoveries","ukLocations","foundLocations","locationElement","businessTypes","foundTypes","typeElement","mockCelebrations","createMockCulturalCelebrations","CulturalCelebrationsCarousel","celebrations","portugalCelebrations","foundCelebrations","celebrationElement","celebrationContext","foundContext","contextElement","englishContent","toHaveProperty","incorrectTerminology","not","correctTerminology","ukWideLocations","foundNonLondonLocations","lusophoneCountries","countryRepresentation","culturalTerms","respectfulTermsFound","termElement","problematicTerms","problematicElement","contextualElements","contextualElementsFound","nextButton","getByRole","name","fireEvent","click","enableAccessibilityAnnouncements","ariaLabels","getAllByRole","button","ariaLabel","getAttribute","length"],"mappings":"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"}