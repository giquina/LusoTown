{"version":3,"sources":["/workspaces/LusoTown/web-app/src/lib/auth.ts"],"sourcesContent":["\"use client\";\n\nimport { supabase, type Profile } from \"@/lib/supabase\";\nimport { getImageWithFallback } from \"@/lib/profileImages\";\nimport { User as SupabaseUser } from \"@supabase/supabase-js\";\nimport {\n  safeAsync,\n  safeLocalStorage,\n  LusoTownError,\n  ErrorType,\n} from \"@/lib/errorHandling\";\nimport { DEMO_CONFIG, ADMIN_CONFIG, validateDemoCredentials, isAdminEmail } from \"@/config/credentials\";\n\n// User interface for the application\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: \"user\" | \"admin\";\n  membershipTier: \"free\" | \"core\" | \"premium\";\n  profileImage?: string;\n  joinedDate: string;\n  interests: string[];\n  favoriteEvents: string[];\n  location: string;\n}\n\n// Auth state change listener type\nexport type AuthStateChangeHandler = (user: User | null) => void;\n\n// Map Supabase profile to User interface\nfunction mapProfileToUser(profile: Profile, supabaseUser: SupabaseUser): User {\n  return {\n    id: profile.id,\n    email: profile.email,\n    name:\n      profile.first_name + (profile.last_name ? ` ${profile.last_name}` : \"\"),\n    role: isAdminEmail(profile.email) ? \"admin\" : \"user\", // Admin check via secure config\n    membershipTier: profile.membership_tier,\n    profileImage:\n      profile.profile_picture_url || getImageWithFallback(\"default-user\"),\n    joinedDate: new Date(profile.created_at).toISOString().split(\"T\")[0],\n    interests: [], // Will be populated from user_interests table if needed\n    favoriteEvents: [], // Will be populated from user favoriteEvents if needed\n    location: profile.location || \"\",\n  };\n}\n\nexport class AuthService {\n  private static instance: AuthService;\n  private currentUser: User | null = null;\n  private authStateListeners: AuthStateChangeHandler[] = [];\n\n  static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n      AuthService.instance.initializeAuthListener();\n    }\n    return AuthService.instance;\n  }\n\n  private initializeAuthListener() {\n    // Check for existing demo session on initialization\n    this.loadDemoSessionIfExists();\n\n    // Listen for auth state changes from Supabase\n    supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === \"SIGNED_IN\" && session?.user) {\n        await this.loadUserProfile(session.user);\n      } else if (event === \"SIGNED_OUT\") {\n        this.currentUser = null;\n        this.notifyAuthStateChange(null);\n      }\n    });\n\n    // Try to load current session on initialization\n    this.loadCurrentSession();\n  }\n\n  private async loadCurrentSession() {\n    try {\n      const {\n        data: { session },\n        error,\n      } = await supabase.auth.getSession();\n      if (error) throw error;\n\n      if (session?.user) {\n        await this.loadUserProfile(session.user);\n      }\n    } catch (error) {\n      console.error(\"Error loading current session:\", error);\n    }\n  }\n\n  // Demo authentication methods\n  private isDemoLogin(email: string, password: string): boolean {\n    return validateDemoCredentials(email, password);\n  }\n\n  private createDemoUser(): User {\n    return {\n      id: DEMO_CONFIG.userId,\n      email: DEMO_CONFIG.email,\n      name: \"Maria Silva\",\n      role: \"user\",\n      membershipTier: \"premium\",\n      profileImage: \"/profiles/default-avatar.svg\",\n      joinedDate: \"2024-01-15\",\n      interests: [\n        \"Cultural Events\",\n        \"Lusophone Food\",\n        \"Language Exchange\",\n        \"Fado Music\",\n        \"Lusophone Literature\",\n      ],\n      favoriteEvents: [\"event-1\", \"event-3\", \"event-5\"],\n      location: \"Camden, London\",\n    };\n  }\n\n  private async handleDemoLogin(): Promise<{\n    success: boolean;\n    user?: User;\n    error?: string;\n  }> {\n    try {\n      // Simulate loading delay for realistic experience\n      await new Promise((resolve) => setTimeout(resolve, 1500));\n\n      const demoUser = this.createDemoUser();\n\n      // Store demo session in localStorage for persistence\n      if (typeof window !== \"undefined\") {\n        safeLocalStorage.setJSON(\"lusotown_demo_session\", {\n          user: demoUser,\n          timestamp: Date.now(),\n        });\n      }\n\n      this.currentUser = demoUser;\n      this.notifyAuthStateChange(demoUser);\n\n      return { success: true, user: demoUser };\n    } catch (error) {\n      console.error(\"Demo login error:\", error);\n      return { success: false, error: \"Demo login failed\" };\n    }\n  }\n\n  private loadDemoSessionIfExists(): void {\n    if (typeof window === \"undefined\") return;\n\n    const sessionData = safeLocalStorage.getJSON<{\n      user: User;\n      timestamp: number;\n    }>(\"lusotown_demo_session\");\n    if (sessionData) {\n      // Check if session is still valid (24 hours)\n      const twentyFourHours = 24 * 60 * 60 * 1000;\n      if (Date.now() - sessionData.timestamp < twentyFourHours) {\n        this.currentUser = sessionData.user;\n        this.notifyAuthStateChange(sessionData.user);\n      } else {\n        // Clear expired session\n        safeLocalStorage.removeItem(\"lusotown_demo_session\");\n      }\n    }\n  }\n\n  private clearDemoSession(): void {\n    if (typeof window !== \"undefined\") {\n      safeLocalStorage.removeItem(\"lusotown_demo_session\");\n    }\n  }\n\n  private async loadUserProfile(\n    supabaseUser: SupabaseUser\n  ): Promise<User | null> {\n    try {\n      // Get the user's profile from the profiles table\n      const { data: profile, error } = await supabase\n        .from(\"profiles\")\n        .select(\"*\")\n        .eq(\"id\", supabaseUser.id)\n        .single();\n\n      if (error) {\n        console.error(\"Error loading user profile:\", error);\n        return null;\n      }\n\n      if (profile) {\n        const user = mapProfileToUser(profile, supabaseUser);\n        this.currentUser = user;\n        this.notifyAuthStateChange(user);\n        return user;\n      }\n    } catch (error) {\n      console.error(\"Error in loadUserProfile:\", error);\n    }\n    return null;\n  }\n\n  private notifyAuthStateChange(user: User | null) {\n    this.authStateListeners.forEach((listener) => listener(user));\n  }\n\n  onAuthStateChange(handler: AuthStateChangeHandler): () => void {\n    this.authStateListeners.push(handler);\n\n    // Return unsubscribe function\n    return () => {\n      this.authStateListeners = this.authStateListeners.filter(\n        (listener) => listener !== handler\n      );\n    };\n  }\n\n  async login(\n    email: string,\n    password: string\n  ): Promise<{ success: boolean; user?: User; error?: string }> {\n    try {\n      // Check if this is demo login\n      if (this.isDemoLogin(email, password)) {\n        return await this.handleDemoLogin();\n      }\n\n      // Regular Supabase authentication\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email: email.trim(),\n        password: password,\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      if (data.user) {\n        const user = await this.loadUserProfile(data.user);\n        if (user) {\n          return { success: true, user };\n        } else {\n          return { success: false, error: \"Failed to load user profile\" };\n        }\n      }\n\n      return { success: false, error: \"Unknown authentication error\" };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return { success: false, error: \"An unexpected error occurred\" };\n    }\n  }\n\n  async signup(\n    email: string,\n    password: string,\n    userData: { firstName: string; lastName?: string }\n  ): Promise<{ success: boolean; user?: User; error?: string }> {\n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email: email.trim(),\n        password: password,\n        options: {\n          data: {\n            first_name: userData.firstName,\n            last_name: userData.lastName || \"\",\n          },\n        },\n      });\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      if (data.user) {\n        // The profile will be created automatically by the database trigger\n        // We'll wait a moment for it to be created, then load it\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        const user = await this.loadUserProfile(data.user);\n        if (user) {\n          return { success: true, user };\n        } else {\n          return {\n            success: true,\n            error:\n              \"Account created. Please check your email to verify your account.\",\n          };\n        }\n      }\n\n      return { success: false, error: \"Unknown signup error\" };\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      return { success: false, error: \"An unexpected error occurred\" };\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      // Handle demo session logout\n      if (this.currentUser?.id === DEMO_CONFIG.userId) {\n        this.clearDemoSession();\n        this.currentUser = null;\n        this.notifyAuthStateChange(null);\n        return;\n      }\n\n      // Regular Supabase logout\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n\n      this.currentUser = null;\n      this.notifyAuthStateChange(null);\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      throw error;\n    }\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUser;\n  }\n\n  isAuthenticated(): boolean {\n    return this.currentUser !== null;\n  }\n\n  isDemoUser(): boolean {\n    return this.currentUser?.id === DEMO_CONFIG.userId;\n  }\n\n  isAdmin(): boolean {\n    const user = this.getCurrentUser();\n    return user?.role === \"admin\";\n  }\n\n  async updateFavorites(\n    eventId: string,\n    action: \"add\" | \"remove\"\n  ): Promise<void> {\n    const user = this.getCurrentUser();\n    if (!user) return;\n\n    // Update local state\n    if (action === \"add\" && !user.favoriteEvents.includes(eventId)) {\n      user.favoriteEvents.push(eventId);\n    } else if (action === \"remove\") {\n      user.favoriteEvents = user.favoriteEvents.filter((id) => id !== eventId);\n    }\n\n    // Implement database update for favorite events\n    try {\n      // Update localStorage for immediate UI feedback\n      localStorage.setItem(\"lusotown-user\", JSON.stringify(user));\n\n      // Update database (would require Supabase integration)\n      // await supabase\n      //   .from('user_favorite_events')\n      //   .upsert({ user_id: user.id, event_id: eventId, is_favorite: action === 'add' })\n\n      console.log(`${action} favorite event ${eventId} for user ${user.id}`);\n    } catch (error) {\n      console.error(\"Error updating favorites:\", error);\n    }\n  }\n\n  async updateProfile(updates: Partial<User>): Promise<void> {\n    const user = this.getCurrentUser();\n    if (!user) throw new Error(\"No user logged in\");\n\n    try {\n      // Map User interface updates to Profile table updates\n      const profileUpdates: Partial<Profile> = {};\n\n      if (updates.name) {\n        const nameParts = updates.name.split(\" \");\n        profileUpdates.first_name = nameParts[0];\n        if (nameParts.length > 1) {\n          profileUpdates.last_name = nameParts.slice(1).join(\" \");\n        }\n      }\n\n      if (updates.location) profileUpdates.location = updates.location;\n      if (updates.membershipTier)\n        profileUpdates.membership_tier = updates.membershipTier;\n      if (updates.profileImage)\n        profileUpdates.profile_picture_url = updates.profileImage;\n\n      // Update the profile in Supabase\n      const { error } = await supabase\n        .from(\"profiles\")\n        .update({\n          ...profileUpdates,\n          updated_at: new Date().toISOString(),\n        })\n        .eq(\"id\", user.id);\n\n      if (error) throw error;\n\n      // Update local user state\n      Object.assign(user, updates);\n      this.notifyAuthStateChange(user);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      throw error;\n    }\n  }\n\n  async resetPassword(\n    email: string\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n\n      if (error) {\n        return { success: false, error: error.message };\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Password reset error:\", error);\n      return { success: false, error: \"An unexpected error occurred\" };\n    }\n  }\n}\n\n// Export singleton instance\nexport const authService = AuthService.getInstance();\n\n// Convenience exports for common auth operations\nexport const getCurrentUser = () => authService.getCurrentUser();\nexport const isAuthenticated = () => authService.isAuthenticated();\nexport const isDemoUser = () => authService.isDemoUser();\nexport const isAdmin = () => authService.isAdmin();\nexport const logout = () => authService.logout();\n\n// Hook-like function for auth state changes (for React components)\nexport const useAuthState = (callback: AuthStateChangeHandler) => {\n  return authService.onAuthStateChange(callback);\n};\n"],"names":["AuthService","authService","getCurrentUser","isAdmin","isAuthenticated","isDemoUser","logout","useAuthState","mapProfileToUser","profile","supabaseUser","id","email","name","first_name","last_name","role","isAdminEmail","membershipTier","membership_tier","profileImage","profile_picture_url","getImageWithFallback","joinedDate","Date","created_at","toISOString","split","interests","favoriteEvents","location","getInstance","instance","initializeAuthListener","loadDemoSessionIfExists","supabase","auth","onAuthStateChange","event","session","user","loadUserProfile","currentUser","notifyAuthStateChange","loadCurrentSession","data","error","getSession","console","isDemoLogin","password","validateDemoCredentials","createDemoUser","DEMO_CONFIG","userId","handleDemoLogin","Promise","resolve","setTimeout","demoUser","window","safeLocalStorage","setJSON","timestamp","now","success","sessionData","getJSON","twentyFourHours","removeItem","clearDemoSession","from","select","eq","single","authStateListeners","forEach","listener","handler","push","filter","login","signInWithPassword","trim","message","signup","userData","signUp","options","firstName","lastName","signOut","updateFavorites","eventId","action","includes","localStorage","setItem","JSON","stringify","log","updateProfile","updates","Error","profileUpdates","nameParts","length","slice","join","update","updated_at","Object","assign","resetPassword","resetPasswordForEmail","callback"],"mappings":"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"}