845e608ad942f6058d3efd2d6b18d804
/**
 * AI Notification Engine Test Suite
 * Production-ready testing for Portuguese-speaking community Platform
 * 
 * Tests cover:
 * - Production deployment readiness
 * - Portuguese cultural personalization
 * - Performance optimization
 * - Error handling and monitoring
 * - A/B testing framework
 * - Database integration
 */ "use strict";
// Mock Supabase client with enhanced mocking for all methods
jest.mock("../../src/lib/supabase", ()=>({
        supabase: {
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    eq: jest.fn(()=>({
                                            single: jest.fn(()=>Promise.resolve({
                                                    data: mockTemplateData,
                                                    error: null
                                                })),
                                            lte: jest.fn(()=>({
                                                    order: jest.fn(()=>({
                                                            order: jest.fn(()=>({
                                                                    limit: jest.fn(()=>Promise.resolve({
                                                                            data: [],
                                                                            error: null
                                                                        }))
                                                                }))
                                                        }))
                                                }))
                                        })),
                                    order: jest.fn(()=>({
                                            limit: jest.fn(()=>Promise.resolve({
                                                    data: mockAnalyticsData,
                                                    error: null
                                                }))
                                        })),
                                    single: jest.fn(()=>Promise.resolve({
                                            data: mockTemplateData,
                                            error: null
                                        }))
                                })),
                            gte: jest.fn(()=>({
                                    not: jest.fn(()=>Promise.resolve({
                                            data: mockAnalyticsData,
                                            error: null
                                        }))
                                })),
                            limit: jest.fn(()=>Promise.resolve({
                                    data: [
                                        mockTemplateData
                                    ],
                                    error: null
                                })),
                            lte: jest.fn(()=>({
                                    order: jest.fn(()=>({
                                            order: jest.fn(()=>({
                                                    limit: jest.fn(()=>Promise.resolve({
                                                            data: [],
                                                            error: null
                                                        }))
                                                }))
                                        }))
                                }))
                        })),
                    insert: jest.fn(()=>({
                            select: jest.fn(()=>({
                                    single: jest.fn(()=>Promise.resolve({
                                            data: mockNotificationData,
                                            error: null
                                        }))
                                }))
                        })),
                    update: jest.fn(()=>({
                            eq: jest.fn(()=>Promise.resolve({
                                    data: null,
                                    error: null
                                }))
                        }))
                }))
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _AINotificationEngine = require("../../src/services/AINotificationEngine");
const mockTemplateData = {
    id: "cultural_event_fado",
    name: "Fado Night Invitation",
    category: "cultural",
    cultural_contexts: [
        {
            portuguese_region: "lisboa",
            cultural_significance: "Traditional fado heritage"
        }
    ],
    content_variations: {
        formal: {
            title: "Authentic Fado Performance Tonight",
            message: "Join us for traditional Portuguese fado music.",
            title_pt: "Espet\xe1culo de Fado Aut\xeantico Esta Noite",
            message_pt: "Junte-se a n\xf3s para fado tradicional portugu\xeas."
        },
        casual: {
            title: "Fado Night - Feel the Saudade! \uD83C\uDFB5",
            message: "Tonight's fado will touch your Portuguese soul.",
            title_pt: "Noite de Fado - Sente a Saudade! \uD83C\uDFB5",
            message_pt: "O fado de hoje vai tocar a tua alma portuguesa."
        },
        friendly: {
            title: "Your Portuguese Heart is Calling! \uD83D\uDC99",
            message: "Come feel the saudade with fellow Portuguese souls.",
            title_pt: "O Teu Cora\xe7\xe3o Portugu\xeas Est\xe1 a Chamar! \uD83D\uDC99",
            message_pt: "Vem sentir a saudade com outras almas portuguesas."
        }
    },
    dynamic_variables: [
        "venue",
        "time",
        "fadista_name"
    ],
    engagement_triggers: [
        "cultural_heritage",
        "music_interest"
    ],
    target_diaspora_groups: [
        "first_generation",
        "heritage_connection"
    ]
};
const mockAnalyticsData = [
    {
        notification_id: "test-notif-1",
        user_id: "test-user-1",
        engagement_score: 85,
        cultural_region: "lisboa",
        diaspora_generation: "first_generation",
        send_hour: 19,
        sent_timestamp: new Date().toISOString(),
        opened_timestamp: new Date().toISOString()
    },
    {
        notification_id: "test-notif-2",
        user_id: "test-user-2",
        engagement_score: 72,
        cultural_region: "norte",
        diaspora_generation: "second_generation",
        send_hour: 20,
        sent_timestamp: new Date().toISOString(),
        opened_timestamp: new Date().toISOString()
    }
];
const mockNotificationData = {
    id: "generated-notification-1",
    user_id: "test-user-1",
    title: "Your Portuguese Heart is Calling! \uD83D\uDC99",
    message: "Come feel the saudade with fellow Portuguese souls.",
    ai_generated: true,
    engagement_score: 85
};
describe("AI Notification Engine - Production Readiness", ()=>{
    let engine;
    beforeEach(()=>{
        engine = new _AINotificationEngine.SmartNotificationEngine();
        jest.clearAllMocks();
    });
    describe("System Initialization", ()=>{
        test("should initialize without errors", async ()=>{
            expect(engine).toBeDefined();
            expect(engine).toBeInstanceOf(_AINotificationEngine.SmartNotificationEngine);
        });
        test("should handle initialization failures gracefully", async ()=>{
            // Test initialization with database connection failure
            const consoleSpy = jest.spyOn(console, "error").mockImplementation();
            // This should not throw, even with connection issues
            const testEngine = new _AINotificationEngine.SmartNotificationEngine();
            expect(testEngine).toBeDefined();
            consoleSpy.mockRestore();
        });
    });
    describe("Portuguese Cultural Personalization", ()=>{
        const createMockUserBehavior = (region)=>({
                user_id: `test-user-${region}`,
                engagement_patterns: {
                    peak_activity_hours: [
                        19,
                        20,
                        21
                    ],
                    preferred_days: [
                        "friday",
                        "saturday"
                    ],
                    avg_response_time_minutes: 15,
                    click_through_rate: 0.65,
                    notification_open_rate: 0.80
                },
                cultural_preferences: {
                    portuguese_region: region,
                    cultural_significance: `${region} cultural heritage`,
                    diaspora_relevance: "first_generation",
                    language_preference: "pt",
                    cultural_interests: [
                        "fado",
                        "cultural_events"
                    ]
                },
                content_affinity: {
                    event_types: [
                        "cultural",
                        "social"
                    ],
                    business_categories: [
                        "restaurants",
                        "cultural_centers"
                    ],
                    communication_style: "friendly"
                },
                ai_insights: {
                    engagement_likelihood: 0.85,
                    optimal_send_times: [
                        "19:00",
                        "20:00"
                    ],
                    content_preferences: [
                        "cultural_events",
                        "music"
                    ],
                    churn_risk: 0.1
                }
            });
        test("should generate personalized notifications for Lisboa region", async ()=>{
            const userBehavior = createMockUserBehavior("lisboa");
            const dynamicData = {
                venue: "Portuguese Cultural Center",
                time: "19:30",
                fadista_name: "Maria Jo\xe3o"
            };
            const result = await engine.generatePersonalizedNotification("test-user-lisboa", "cultural_event_fado", dynamicData, userBehavior);
            expect(result).toBeDefined();
            expect(result.notification).toBeDefined();
            expect(result.cultural_adaptation).toBeDefined();
            expect(result.performance_prediction).toBeDefined();
            // Verify Portuguese cultural context
            expect(result.notification.cultural_context?.portuguese_region).toBe("lisboa");
            expect(result.cultural_adaptation.cultural_authenticity_score).toBeGreaterThan(0.5);
            expect(result.performance_prediction.likelihood_score).toBeGreaterThan(0);
        });
        test("should adapt content for different Portuguese regions", async ()=>{
            const regions = [
                "lisboa",
                "norte",
                "acores",
                "madeira"
            ];
            const results = [];
            for (const region of regions){
                const userBehavior = createMockUserBehavior(region);
                const result = await engine.generatePersonalizedNotification(`test-user-${region}`, "cultural_event_fado", {
                    venue: "Test Venue",
                    time: "19:00"
                }, userBehavior);
                results.push({
                    region,
                    result
                });
            }
            // Verify each region gets personalized treatment
            results.forEach(({ region, result })=>{
                expect(result.cultural_adaptation).toBeDefined();
                expect(result.notification.cultural_context?.portuguese_region).toBe(region);
                expect(result.cultural_adaptation.cultural_authenticity_score).toBeGreaterThan(0);
            });
        });
        test("should handle diaspora generation preferences", async ()=>{
            const generations = [
                "first_generation",
                "second_generation",
                "heritage_connection"
            ];
            for (const generation of generations){
                const userBehavior = createMockUserBehavior("lisboa");
                userBehavior.cultural_preferences.diaspora_relevance = generation;
                const result = await engine.generatePersonalizedNotification(`test-user-${generation}`, "cultural_event_fado", {
                    venue: "Test",
                    time: "19:00"
                }, userBehavior);
                expect(result.notification.cultural_context?.diaspora_relevance).toBe(generation);
                // Check if any reasoning contains the generation pattern
                const reasoningText = result.cultural_adaptation.adaptation_reasoning.join(" ");
                const generationPattern = generation.replace("_", " ");
                expect(reasoningText.toLowerCase()).toContain(generationPattern.toLowerCase());
            }
        });
    });
    describe("Engagement Prediction", ()=>{
        test("should predict engagement accurately", async ()=>{
            const userBehavior = createMockUserBehavior("lisboa");
            const prediction = await engine.predictEngagement("test-user", mockTemplateData, userBehavior);
            expect(prediction).toBeDefined();
            expect(prediction.likelihood_score).toBeGreaterThanOrEqual(0);
            expect(prediction.likelihood_score).toBeLessThanOrEqual(100);
            expect(prediction.optimal_send_time).toMatch(/^\d{2}:\d{2}$/);
            expect(prediction.content_recommendation).toMatch(/^(formal|casual|friendly)$/);
            expect(Array.isArray(prediction.reasoning)).toBe(true);
        });
        test("should provide higher predictions for culturally relevant content", async ()=>{
            const userBehavior = createMockUserBehavior("lisboa");
            // High cultural relevance user
            userBehavior.cultural_preferences.cultural_interests = [
                "fado",
                "portuguese_cuisine",
                "cultural_events"
            ];
            userBehavior.engagement_patterns.click_through_rate = 0.8;
            const prediction = await engine.predictEngagement("test-user-high-cultural", mockTemplateData, userBehavior);
            expect(prediction.likelihood_score).toBeGreaterThan(60);
            expect(prediction.cultural_adaptation_needed).toBe(false);
        });
        test("should handle prediction errors gracefully", async ()=>{
            const invalidUserBehavior = {};
            const prediction = await engine.predictEngagement("test-user-invalid", mockTemplateData, invalidUserBehavior);
            // Should return default prediction, not throw
            expect(prediction).toBeDefined();
            expect(prediction.likelihood_score).toBe(50);
            expect(prediction.reasoning).toContain("Default prediction due to insufficient data");
        });
    });
    describe("Timing Optimization", ()=>{
        test("should optimize notification timing for Portuguese-speaking community", async ()=>{
            const notifications = [
                mockNotificationData
            ];
            const result = await engine.optimizeTimingForCommunity(notifications);
            expect(result).toBeDefined();
            expect(result.optimized_notifications).toBeDefined();
            expect(result.timing_insights).toBeDefined();
            expect(result.performance_prediction).toBeDefined();
            // Verify Portuguese evening hours are preferred (18-22)
            const optimizedTime = result.optimized_notifications[0]?.optimal_send_time;
            if (optimizedTime) {
                const hour = parseInt(optimizedTime.split(":")[0]);
                expect(hour).toBeGreaterThanOrEqual(17);
                expect(hour).toBeLessThanOrEqual(23);
            }
        });
        test("should consider Portuguese cultural events timing", async ()=>{
            // Mock Santos Populares period (June)
            const originalDate = Date;
            global.Date = jest.fn(()=>new originalDate(2025, 5, 13)) // June 13th
            ;
            global.Date.now = originalDate.now;
            const notifications = [
                mockNotificationData
            ];
            const result = await engine.optimizeTimingForCommunity(notifications);
            expect(result.performance_prediction).toBeDefined();
            global.Date = originalDate;
        });
    });
    describe("A/B Testing Framework", ()=>{
        test("should execute A/B tests correctly", async ()=>{
            const variants = [
                {
                    id: "variant-a",
                    name: "Formal Style",
                    percentage: 50,
                    content_modifications: {
                        tone: "formal"
                    },
                    target_metrics: [
                        "open_rate",
                        "click_rate"
                    ]
                },
                {
                    id: "variant-b",
                    name: "Friendly Style",
                    percentage: 50,
                    content_modifications: {
                        tone: "friendly"
                    },
                    target_metrics: [
                        "engagement_rate"
                    ]
                }
            ];
            const targetUsers = [
                "user1",
                "user2",
                "user3",
                "user4"
            ];
            const assignments = await engine.runABTest("cultural_event_fado", variants, targetUsers);
            expect(assignments).toBeDefined();
            expect(assignments.length).toBe(2);
            // Verify user distribution
            const totalAssigned = assignments.reduce((sum, assignment)=>sum + assignment.users.length, 0);
            expect(totalAssigned).toBeLessThanOrEqual(targetUsers.length);
        });
    });
    describe("Performance Monitoring", ()=>{
        test("should provide health check information", async ()=>{
            const healthCheck = await engine.healthCheck();
            expect(healthCheck).toBeDefined();
            expect(healthCheck.status).toMatch(/^(healthy|degraded|critical)$/);
            expect(healthCheck.checks).toBeDefined();
            expect(healthCheck.message).toBeDefined();
            expect(healthCheck.timestamp).toBeDefined();
            // Verify critical checks
            expect(typeof healthCheck.checks.initialized).toBe("boolean");
            expect(typeof healthCheck.checks.database_connection).toBe("boolean");
        });
        test("should provide performance metrics", async ()=>{
            const metrics = await engine.getPerformanceMetrics();
            expect(metrics).toBeDefined();
            expect(metrics.system_health).toMatch(/^(healthy|degraded|critical|unknown)$/);
            expect(typeof metrics.average_prediction_time).toBe("number");
            expect(typeof metrics.error_rate).toBe("number");
            expect(typeof metrics.queue_size).toBe("number");
            expect(Array.isArray(metrics.recommendations)).toBe(true);
        });
    });
    describe("Queue Processing", ()=>{
        test("should queue notifications for optimal delivery", async ()=>{
            const userId = "test-user-queue";
            const templateId = "cultural_event_fado";
            const dynamicData = {
                venue: "Test Venue",
                time: "19:00"
            };
            // This should not throw
            await expect(engine.queueNotificationForOptimalDelivery(userId, templateId, dynamicData, "normal")).resolves.not.toThrow();
        });
        test("should process notification queue", async ()=>{
            const result = await engine.processNotificationQueue();
            expect(result).toBeDefined();
            expect(typeof result.total_sent).toBe("number");
            expect(result.audience_insights).toBeDefined();
            expect(result.audience_insights.preferred_content_style).toBeDefined();
        });
    });
    describe("Error Handling and Resilience", ()=>{
        test("should handle database connection failures", async ()=>{
            // Mock database failure
            const originalSupabase = require("../../src/lib/supabase").supabase;
            require("../../src/lib/supabase").supabase = {
                from: ()=>({
                        select: ()=>Promise.resolve({
                                data: null,
                                error: new Error("Connection failed")
                            })
                    })
            };
            const userBehavior = createMockUserBehavior("lisboa");
            // Should not throw, should return fallback
            const result = await engine.generatePersonalizedNotification("test-user-db-error", "cultural_event_fado", {
                venue: "Test",
                time: "19:00"
            }, userBehavior);
            expect(result).toBeDefined();
            // Restore original
            require("../../src/lib/supabase").supabase = originalSupabase;
        });
        test("should handle invalid user behavior gracefully", async ()=>{
            const invalidBehavior = {
                user_id: "invalid",
                engagement_patterns: null,
                cultural_preferences: null,
                content_affinity: null,
                ai_insights: null
            };
            // Should not throw
            await expect(engine.predictEngagement("invalid-user", mockTemplateData, invalidBehavior)).resolves.toBeDefined();
        });
    });
    describe("Integration with Portuguese Configuration", ()=>{
        test("should use configuration-driven data (no hardcoding)", async ()=>{
            const userBehavior = createMockUserBehavior("lisboa");
            const result = await engine.generatePersonalizedNotification("test-config-user", "cultural_event_fado", {
                venue: "{{venue}}",
                contact: "{{contact_email}}"
            }, userBehavior);
            // Verify no hardcoded values in action_data
            if (result.notification.action_data) {
                const actionData = JSON.stringify(result.notification.action_data);
                expect(actionData).not.toContain("demo@example.com");
                expect(actionData).not.toContain("hardcoded");
                expect(actionData).not.toContain("\xa319.99");
            }
        });
    });
    function createMockUserBehavior(region) {
        return {
            user_id: `test-user-${region}`,
            engagement_patterns: {
                peak_activity_hours: [
                    19,
                    20,
                    21
                ],
                preferred_days: [
                    "friday",
                    "saturday"
                ],
                avg_response_time_minutes: 15,
                click_through_rate: 0.65,
                notification_open_rate: 0.80
            },
            cultural_preferences: {
                portuguese_region: region,
                cultural_significance: `${region} cultural heritage`,
                diaspora_relevance: "first_generation",
                language_preference: "pt",
                cultural_interests: [
                    "fado",
                    "cultural_events"
                ]
            },
            content_affinity: {
                event_types: [
                    "cultural",
                    "social"
                ],
                business_categories: [
                    "restaurants",
                    "cultural_centers"
                ],
                communication_style: "friendly"
            },
            ai_insights: {
                engagement_likelihood: 0.85,
                optimal_send_times: [
                    "19:00",
                    "20:00"
                ],
                content_preferences: [
                    "cultural_events",
                    "music"
                ],
                churn_risk: 0.1
            }
        };
    }
});
describe("AI Notification Engine - Load Testing", ()=>{
    test("should handle concurrent prediction requests", async ()=>{
        const promises = [];
        const userBehavior = {
            user_id: "load-test-user",
            engagement_patterns: {
                peak_activity_hours: [
                    19,
                    20
                ],
                preferred_days: [
                    "friday"
                ],
                avg_response_time_minutes: 15,
                click_through_rate: 0.5,
                notification_open_rate: 0.7
            },
            cultural_preferences: {
                portuguese_region: "lisboa",
                cultural_significance: "Test",
                diaspora_relevance: "first_generation",
                language_preference: "pt",
                cultural_interests: [
                    "cultural_events"
                ]
            },
            content_affinity: {
                event_types: [
                    "cultural"
                ],
                business_categories: [
                    "restaurants"
                ],
                communication_style: "friendly"
            },
            ai_insights: {
                engagement_likelihood: 0.8,
                optimal_send_times: [
                    "19:00"
                ],
                content_preferences: [
                    "cultural_events"
                ],
                churn_risk: 0.1
            }
        };
        // Create 10 concurrent prediction requests
        for(let i = 0; i < 10; i++){
            promises.push(_AINotificationEngine.aiNotificationEngine.predictEngagement(`load-test-user-${i}`, mockTemplateData, userBehavior));
        }
        const results = await Promise.all(promises);
        expect(results).toHaveLength(10);
        results.forEach((result)=>{
            expect(result).toBeDefined();
            expect(result.likelihood_score).toBeGreaterThanOrEqual(0);
        });
    }, 10000) // 10 second timeout for load test
    ;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0x1c29Ub3duL3dlYi1hcHAvX190ZXN0c19fL3NlcnZpY2VzL0FJTm90aWZpY2F0aW9uRW5naW5lLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQUkgTm90aWZpY2F0aW9uIEVuZ2luZSBUZXN0IFN1aXRlXG4gKiBQcm9kdWN0aW9uLXJlYWR5IHRlc3RpbmcgZm9yIFBvcnR1Z3Vlc2Utc3BlYWtpbmcgY29tbXVuaXR5IFBsYXRmb3JtXG4gKiBcbiAqIFRlc3RzIGNvdmVyOlxuICogLSBQcm9kdWN0aW9uIGRlcGxveW1lbnQgcmVhZGluZXNzXG4gKiAtIFBvcnR1Z3Vlc2UgY3VsdHVyYWwgcGVyc29uYWxpemF0aW9uXG4gKiAtIFBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxuICogLSBFcnJvciBoYW5kbGluZyBhbmQgbW9uaXRvcmluZ1xuICogLSBBL0IgdGVzdGluZyBmcmFtZXdvcmtcbiAqIC0gRGF0YWJhc2UgaW50ZWdyYXRpb25cbiAqL1xuXG5pbXBvcnQgeyBhaU5vdGlmaWNhdGlvbkVuZ2luZSwgU21hcnROb3RpZmljYXRpb25FbmdpbmUgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvQUlOb3RpZmljYXRpb25FbmdpbmUnXG5pbXBvcnQgeyBVc2VyQmVoYXZpb3JQcm9maWxlLCBDdWx0dXJhbENvbnRleHQgfSBmcm9tICcuLi8uLi9zcmMvc2VydmljZXMvTm90aWZpY2F0aW9uU2VydmljZSdcblxuLy8gTW9jayBTdXBhYmFzZSBjbGllbnQgd2l0aCBlbmhhbmNlZCBtb2NraW5nIGZvciBhbGwgbWV0aG9kc1xuamVzdC5tb2NrKCcuLi8uLi9zcmMvbGliL3N1cGFiYXNlJywgKCkgPT4gKHtcbiAgc3VwYWJhc2U6IHtcbiAgICBmcm9tOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICBzZWxlY3Q6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgZXE6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICBlcTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgICAgc2luZ2xlOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IFxuICAgICAgICAgICAgICBkYXRhOiBtb2NrVGVtcGxhdGVEYXRhLCBcbiAgICAgICAgICAgICAgZXJyb3I6IG51bGwgXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBsdGU6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICAgICAgb3JkZXI6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICAgICAgICBvcmRlcjogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgbGltaXQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsXG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICB9KSksXG4gICAgICAgICAgb3JkZXI6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICAgIGxpbWl0OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICAgIGRhdGE6IG1vY2tBbmFseXRpY3NEYXRhLFxuICAgICAgICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICAgfSkpLFxuICAgICAgICAgIHNpbmdsZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgZGF0YTogbW9ja1RlbXBsYXRlRGF0YSxcbiAgICAgICAgICAgIGVycm9yOiBudWxsXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKSxcbiAgICAgICAgZ3RlOiBqZXN0LmZuKCgpID0+ICh7XG4gICAgICAgICAgbm90OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICBkYXRhOiBtb2NrQW5hbHl0aWNzRGF0YSxcbiAgICAgICAgICAgIGVycm9yOiBudWxsXG4gICAgICAgICAgfSkpXG4gICAgICAgIH0pKSxcbiAgICAgICAgbGltaXQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBkYXRhOiBbbW9ja1RlbXBsYXRlRGF0YV0sXG4gICAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgICAgfSkpLFxuICAgICAgICBsdGU6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICBvcmRlcjogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICAgICAgb3JkZXI6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICAgICAgbGltaXQ6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgIH0pKVxuICAgICAgICB9KSlcbiAgICAgIH0pKSxcbiAgICAgIGluc2VydDogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICBzZWxlY3Q6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgICBzaW5nbGU6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIGRhdGE6IG1vY2tOb3RpZmljYXRpb25EYXRhLFxuICAgICAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSkpXG4gICAgICB9KSksXG4gICAgICB1cGRhdGU6IGplc3QuZm4oKCkgPT4gKHtcbiAgICAgICAgZXE6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgIGVycm9yOiBudWxsXG4gICAgICAgIH0pKVxuICAgICAgfSkpXG4gICAgfSkpXG4gIH1cbn0pKVxuXG5jb25zdCBtb2NrVGVtcGxhdGVEYXRhID0ge1xuICBpZDogJ2N1bHR1cmFsX2V2ZW50X2ZhZG8nLFxuICBuYW1lOiAnRmFkbyBOaWdodCBJbnZpdGF0aW9uJyxcbiAgY2F0ZWdvcnk6ICdjdWx0dXJhbCcsXG4gIGN1bHR1cmFsX2NvbnRleHRzOiBbXG4gICAgeyBwb3J0dWd1ZXNlX3JlZ2lvbjogJ2xpc2JvYScsIGN1bHR1cmFsX3NpZ25pZmljYW5jZTogJ1RyYWRpdGlvbmFsIGZhZG8gaGVyaXRhZ2UnIH1cbiAgXSxcbiAgY29udGVudF92YXJpYXRpb25zOiB7XG4gICAgZm9ybWFsOiB7XG4gICAgICB0aXRsZTogJ0F1dGhlbnRpYyBGYWRvIFBlcmZvcm1hbmNlIFRvbmlnaHQnLFxuICAgICAgbWVzc2FnZTogJ0pvaW4gdXMgZm9yIHRyYWRpdGlvbmFsIFBvcnR1Z3Vlc2UgZmFkbyBtdXNpYy4nLFxuICAgICAgdGl0bGVfcHQ6ICdFc3BldMOhY3VsbyBkZSBGYWRvIEF1dMOqbnRpY28gRXN0YSBOb2l0ZScsXG4gICAgICBtZXNzYWdlX3B0OiAnSnVudGUtc2UgYSBuw7NzIHBhcmEgZmFkbyB0cmFkaWNpb25hbCBwb3J0dWd1w6pzLidcbiAgICB9LFxuICAgIGNhc3VhbDoge1xuICAgICAgdGl0bGU6ICdGYWRvIE5pZ2h0IC0gRmVlbCB0aGUgU2F1ZGFkZSEg8J+OtScsXG4gICAgICBtZXNzYWdlOiAnVG9uaWdodFxcJ3MgZmFkbyB3aWxsIHRvdWNoIHlvdXIgUG9ydHVndWVzZSBzb3VsLicsXG4gICAgICB0aXRsZV9wdDogJ05vaXRlIGRlIEZhZG8gLSBTZW50ZSBhIFNhdWRhZGUhIPCfjrUnLFxuICAgICAgbWVzc2FnZV9wdDogJ08gZmFkbyBkZSBob2plIHZhaSB0b2NhciBhIHR1YSBhbG1hIHBvcnR1Z3Vlc2EuJ1xuICAgIH0sXG4gICAgZnJpZW5kbHk6IHtcbiAgICAgIHRpdGxlOiAnWW91ciBQb3J0dWd1ZXNlIEhlYXJ0IGlzIENhbGxpbmchIPCfkpknLFxuICAgICAgbWVzc2FnZTogJ0NvbWUgZmVlbCB0aGUgc2F1ZGFkZSB3aXRoIGZlbGxvdyBQb3J0dWd1ZXNlIHNvdWxzLicsXG4gICAgICB0aXRsZV9wdDogJ08gVGV1IENvcmHDp8OjbyBQb3J0dWd1w6pzIEVzdMOhIGEgQ2hhbWFyISDwn5KZJyxcbiAgICAgIG1lc3NhZ2VfcHQ6ICdWZW0gc2VudGlyIGEgc2F1ZGFkZSBjb20gb3V0cmFzIGFsbWFzIHBvcnR1Z3Vlc2FzLidcbiAgICB9XG4gIH0sXG4gIGR5bmFtaWNfdmFyaWFibGVzOiBbJ3ZlbnVlJywgJ3RpbWUnLCAnZmFkaXN0YV9uYW1lJ10sXG4gIGVuZ2FnZW1lbnRfdHJpZ2dlcnM6IFsnY3VsdHVyYWxfaGVyaXRhZ2UnLCAnbXVzaWNfaW50ZXJlc3QnXSxcbiAgdGFyZ2V0X2RpYXNwb3JhX2dyb3VwczogWydmaXJzdF9nZW5lcmF0aW9uJywgJ2hlcml0YWdlX2Nvbm5lY3Rpb24nXVxufVxuXG5jb25zdCBtb2NrQW5hbHl0aWNzRGF0YSA9IFtcbiAge1xuICAgIG5vdGlmaWNhdGlvbl9pZDogJ3Rlc3Qtbm90aWYtMScsXG4gICAgdXNlcl9pZDogJ3Rlc3QtdXNlci0xJyxcbiAgICBlbmdhZ2VtZW50X3Njb3JlOiA4NSxcbiAgICBjdWx0dXJhbF9yZWdpb246ICdsaXNib2EnLFxuICAgIGRpYXNwb3JhX2dlbmVyYXRpb246ICdmaXJzdF9nZW5lcmF0aW9uJyxcbiAgICBzZW5kX2hvdXI6IDE5LFxuICAgIHNlbnRfdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgb3BlbmVkX3RpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIH0sXG4gIHtcbiAgICBub3RpZmljYXRpb25faWQ6ICd0ZXN0LW5vdGlmLTInLFxuICAgIHVzZXJfaWQ6ICd0ZXN0LXVzZXItMicsXG4gICAgZW5nYWdlbWVudF9zY29yZTogNzIsXG4gICAgY3VsdHVyYWxfcmVnaW9uOiAnbm9ydGUnLFxuICAgIGRpYXNwb3JhX2dlbmVyYXRpb246ICdzZWNvbmRfZ2VuZXJhdGlvbicsXG4gICAgc2VuZF9ob3VyOiAyMCxcbiAgICBzZW50X3RpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIG9wZW5lZF90aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICB9XG5dXG5cbmNvbnN0IG1vY2tOb3RpZmljYXRpb25EYXRhID0ge1xuICBpZDogJ2dlbmVyYXRlZC1ub3RpZmljYXRpb24tMScsXG4gIHVzZXJfaWQ6ICd0ZXN0LXVzZXItMScsXG4gIHRpdGxlOiAnWW91ciBQb3J0dWd1ZXNlIEhlYXJ0IGlzIENhbGxpbmchIPCfkpknLFxuICBtZXNzYWdlOiAnQ29tZSBmZWVsIHRoZSBzYXVkYWRlIHdpdGggZmVsbG93IFBvcnR1Z3Vlc2Ugc291bHMuJyxcbiAgYWlfZ2VuZXJhdGVkOiB0cnVlLFxuICBlbmdhZ2VtZW50X3Njb3JlOiA4NVxufVxuXG5kZXNjcmliZSgnQUkgTm90aWZpY2F0aW9uIEVuZ2luZSAtIFByb2R1Y3Rpb24gUmVhZGluZXNzJywgKCkgPT4ge1xuICBsZXQgZW5naW5lOiBTbWFydE5vdGlmaWNhdGlvbkVuZ2luZVxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGVuZ2luZSA9IG5ldyBTbWFydE5vdGlmaWNhdGlvbkVuZ2luZSgpXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcbiAgfSlcblxuICBkZXNjcmliZSgnU3lzdGVtIEluaXRpYWxpemF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGhvdXQgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgZXhwZWN0KGVuZ2luZSkudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KGVuZ2luZSkudG9CZUluc3RhbmNlT2YoU21hcnROb3RpZmljYXRpb25FbmdpbmUpXG4gICAgfSlcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgaW5pdGlhbGl6YXRpb24gZmFpbHVyZXMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRlc3QgaW5pdGlhbGl6YXRpb24gd2l0aCBkYXRhYmFzZSBjb25uZWN0aW9uIGZhaWx1cmVcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpXG4gICAgICBcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCB0aHJvdywgZXZlbiB3aXRoIGNvbm5lY3Rpb24gaXNzdWVzXG4gICAgICBjb25zdCB0ZXN0RW5naW5lID0gbmV3IFNtYXJ0Tm90aWZpY2F0aW9uRW5naW5lKClcbiAgICAgIGV4cGVjdCh0ZXN0RW5naW5lKS50b0JlRGVmaW5lZCgpXG4gICAgICBcbiAgICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1BvcnR1Z3Vlc2UgQ3VsdHVyYWwgUGVyc29uYWxpemF0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IGNyZWF0ZU1vY2tVc2VyQmVoYXZpb3IgPSAocmVnaW9uOiBzdHJpbmcpOiBVc2VyQmVoYXZpb3JQcm9maWxlID0+ICh7XG4gICAgICB1c2VyX2lkOiBgdGVzdC11c2VyLSR7cmVnaW9ufWAsXG4gICAgICBlbmdhZ2VtZW50X3BhdHRlcm5zOiB7XG4gICAgICAgIHBlYWtfYWN0aXZpdHlfaG91cnM6IFsxOSwgMjAsIDIxXSxcbiAgICAgICAgcHJlZmVycmVkX2RheXM6IFsnZnJpZGF5JywgJ3NhdHVyZGF5J10sXG4gICAgICAgIGF2Z19yZXNwb25zZV90aW1lX21pbnV0ZXM6IDE1LFxuICAgICAgICBjbGlja190aHJvdWdoX3JhdGU6IDAuNjUsXG4gICAgICAgIG5vdGlmaWNhdGlvbl9vcGVuX3JhdGU6IDAuODBcbiAgICAgIH0sXG4gICAgICBjdWx0dXJhbF9wcmVmZXJlbmNlczoge1xuICAgICAgICBwb3J0dWd1ZXNlX3JlZ2lvbjogcmVnaW9uIGFzIEN1bHR1cmFsQ29udGV4dFsncG9ydHVndWVzZV9yZWdpb24nXSxcbiAgICAgICAgY3VsdHVyYWxfc2lnbmlmaWNhbmNlOiBgJHtyZWdpb259IGN1bHR1cmFsIGhlcml0YWdlYCxcbiAgICAgICAgZGlhc3BvcmFfcmVsZXZhbmNlOiAnZmlyc3RfZ2VuZXJhdGlvbicsXG4gICAgICAgIGxhbmd1YWdlX3ByZWZlcmVuY2U6ICdwdCcsXG4gICAgICAgIGN1bHR1cmFsX2ludGVyZXN0czogWydmYWRvJywgJ2N1bHR1cmFsX2V2ZW50cyddXG4gICAgICB9LFxuICAgICAgY29udGVudF9hZmZpbml0eToge1xuICAgICAgICBldmVudF90eXBlczogWydjdWx0dXJhbCcsICdzb2NpYWwnXSxcbiAgICAgICAgYnVzaW5lc3NfY2F0ZWdvcmllczogWydyZXN0YXVyYW50cycsICdjdWx0dXJhbF9jZW50ZXJzJ10sXG4gICAgICAgIGNvbW11bmljYXRpb25fc3R5bGU6ICdmcmllbmRseSdcbiAgICAgIH0sXG4gICAgICBhaV9pbnNpZ2h0czoge1xuICAgICAgICBlbmdhZ2VtZW50X2xpa2VsaWhvb2Q6IDAuODUsXG4gICAgICAgIG9wdGltYWxfc2VuZF90aW1lczogWycxOTowMCcsICcyMDowMCddLFxuICAgICAgICBjb250ZW50X3ByZWZlcmVuY2VzOiBbJ2N1bHR1cmFsX2V2ZW50cycsICdtdXNpYyddLFxuICAgICAgICBjaHVybl9yaXNrOiAwLjFcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIHBlcnNvbmFsaXplZCBub3RpZmljYXRpb25zIGZvciBMaXNib2EgcmVnaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlckJlaGF2aW9yID0gY3JlYXRlTW9ja1VzZXJCZWhhdmlvcignbGlzYm9hJylcbiAgICAgIGNvbnN0IGR5bmFtaWNEYXRhID0ge1xuICAgICAgICB2ZW51ZTogJ1BvcnR1Z3Vlc2UgQ3VsdHVyYWwgQ2VudGVyJyxcbiAgICAgICAgdGltZTogJzE5OjMwJyxcbiAgICAgICAgZmFkaXN0YV9uYW1lOiAnTWFyaWEgSm/Do28nXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGVuZ2luZS5nZW5lcmF0ZVBlcnNvbmFsaXplZE5vdGlmaWNhdGlvbihcbiAgICAgICAgJ3Rlc3QtdXNlci1saXNib2EnLFxuICAgICAgICAnY3VsdHVyYWxfZXZlbnRfZmFkbycsXG4gICAgICAgIGR5bmFtaWNEYXRhLFxuICAgICAgICB1c2VyQmVoYXZpb3JcbiAgICAgIClcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KHJlc3VsdC5ub3RpZmljYXRpb24pLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VsdHVyYWxfYWRhcHRhdGlvbikudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KHJlc3VsdC5wZXJmb3JtYW5jZV9wcmVkaWN0aW9uKS50b0JlRGVmaW5lZCgpXG5cbiAgICAgIC8vIFZlcmlmeSBQb3J0dWd1ZXNlIGN1bHR1cmFsIGNvbnRleHRcbiAgICAgIGV4cGVjdChyZXN1bHQubm90aWZpY2F0aW9uLmN1bHR1cmFsX2NvbnRleHQ/LnBvcnR1Z3Vlc2VfcmVnaW9uKS50b0JlKCdsaXNib2EnKVxuICAgICAgZXhwZWN0KHJlc3VsdC5jdWx0dXJhbF9hZGFwdGF0aW9uLmN1bHR1cmFsX2F1dGhlbnRpY2l0eV9zY29yZSkudG9CZUdyZWF0ZXJUaGFuKDAuNSlcbiAgICAgIGV4cGVjdChyZXN1bHQucGVyZm9ybWFuY2VfcHJlZGljdGlvbi5saWtlbGlob29kX3Njb3JlKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICB9KVxuXG4gICAgdGVzdCgnc2hvdWxkIGFkYXB0IGNvbnRlbnQgZm9yIGRpZmZlcmVudCBQb3J0dWd1ZXNlIHJlZ2lvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZWdpb25zID0gWydsaXNib2EnLCAnbm9ydGUnLCAnYWNvcmVzJywgJ21hZGVpcmEnXVxuICAgICAgY29uc3QgcmVzdWx0czogYW55W10gPSBbXVxuXG4gICAgICBmb3IgKGNvbnN0IHJlZ2lvbiBvZiByZWdpb25zKSB7XG4gICAgICAgIGNvbnN0IHVzZXJCZWhhdmlvciA9IGNyZWF0ZU1vY2tVc2VyQmVoYXZpb3IocmVnaW9uKVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBlbmdpbmUuZ2VuZXJhdGVQZXJzb25hbGl6ZWROb3RpZmljYXRpb24oXG4gICAgICAgICAgYHRlc3QtdXNlci0ke3JlZ2lvbn1gLFxuICAgICAgICAgICdjdWx0dXJhbF9ldmVudF9mYWRvJyxcbiAgICAgICAgICB7IHZlbnVlOiAnVGVzdCBWZW51ZScsIHRpbWU6ICcxOTowMCcgfSxcbiAgICAgICAgICB1c2VyQmVoYXZpb3JcbiAgICAgICAgKVxuICAgICAgICByZXN1bHRzLnB1c2goeyByZWdpb24sIHJlc3VsdCB9KVxuICAgICAgfVxuXG4gICAgICAvLyBWZXJpZnkgZWFjaCByZWdpb24gZ2V0cyBwZXJzb25hbGl6ZWQgdHJlYXRtZW50XG4gICAgICByZXN1bHRzLmZvckVhY2goKHsgcmVnaW9uLCByZXN1bHQgfSkgPT4ge1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1bHR1cmFsX2FkYXB0YXRpb24pLnRvQmVEZWZpbmVkKClcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5ub3RpZmljYXRpb24uY3VsdHVyYWxfY29udGV4dD8ucG9ydHVndWVzZV9yZWdpb24pLnRvQmUocmVnaW9uKVxuICAgICAgICBleHBlY3QocmVzdWx0LmN1bHR1cmFsX2FkYXB0YXRpb24uY3VsdHVyYWxfYXV0aGVudGljaXR5X3Njb3JlKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZGlhc3BvcmEgZ2VuZXJhdGlvbiBwcmVmZXJlbmNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGdlbmVyYXRpb25zID0gWydmaXJzdF9nZW5lcmF0aW9uJywgJ3NlY29uZF9nZW5lcmF0aW9uJywgJ2hlcml0YWdlX2Nvbm5lY3Rpb24nXVxuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IGdlbmVyYXRpb24gb2YgZ2VuZXJhdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdXNlckJlaGF2aW9yID0gY3JlYXRlTW9ja1VzZXJCZWhhdmlvcignbGlzYm9hJylcbiAgICAgICAgdXNlckJlaGF2aW9yLmN1bHR1cmFsX3ByZWZlcmVuY2VzLmRpYXNwb3JhX3JlbGV2YW5jZSA9IGdlbmVyYXRpb24gYXMgYW55XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZW5naW5lLmdlbmVyYXRlUGVyc29uYWxpemVkTm90aWZpY2F0aW9uKFxuICAgICAgICAgIGB0ZXN0LXVzZXItJHtnZW5lcmF0aW9ufWAsXG4gICAgICAgICAgJ2N1bHR1cmFsX2V2ZW50X2ZhZG8nLFxuICAgICAgICAgIHsgdmVudWU6ICdUZXN0JywgdGltZTogJzE5OjAwJyB9LFxuICAgICAgICAgIHVzZXJCZWhhdmlvclxuICAgICAgICApXG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdC5ub3RpZmljYXRpb24uY3VsdHVyYWxfY29udGV4dD8uZGlhc3BvcmFfcmVsZXZhbmNlKS50b0JlKGdlbmVyYXRpb24pXG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBhbnkgcmVhc29uaW5nIGNvbnRhaW5zIHRoZSBnZW5lcmF0aW9uIHBhdHRlcm5cbiAgICAgICAgY29uc3QgcmVhc29uaW5nVGV4dCA9IHJlc3VsdC5jdWx0dXJhbF9hZGFwdGF0aW9uLmFkYXB0YXRpb25fcmVhc29uaW5nLmpvaW4oJyAnKVxuICAgICAgICBjb25zdCBnZW5lcmF0aW9uUGF0dGVybiA9IGdlbmVyYXRpb24ucmVwbGFjZSgnXycsICcgJylcbiAgICAgICAgZXhwZWN0KHJlYXNvbmluZ1RleHQudG9Mb3dlckNhc2UoKSkudG9Db250YWluKGdlbmVyYXRpb25QYXR0ZXJuLnRvTG93ZXJDYXNlKCkpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnRW5nYWdlbWVudCBQcmVkaWN0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBwcmVkaWN0IGVuZ2FnZW1lbnQgYWNjdXJhdGVseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXJCZWhhdmlvciA9IGNyZWF0ZU1vY2tVc2VyQmVoYXZpb3IoJ2xpc2JvYScpXG4gICAgICBcbiAgICAgIGNvbnN0IHByZWRpY3Rpb24gPSBhd2FpdCBlbmdpbmUucHJlZGljdEVuZ2FnZW1lbnQoXG4gICAgICAgICd0ZXN0LXVzZXInLFxuICAgICAgICBtb2NrVGVtcGxhdGVEYXRhIGFzIGFueSxcbiAgICAgICAgdXNlckJlaGF2aW9yXG4gICAgICApXG5cbiAgICAgIGV4cGVjdChwcmVkaWN0aW9uKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QocHJlZGljdGlvbi5saWtlbGlob29kX3Njb3JlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApXG4gICAgICBleHBlY3QocHJlZGljdGlvbi5saWtlbGlob29kX3Njb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMClcbiAgICAgIGV4cGVjdChwcmVkaWN0aW9uLm9wdGltYWxfc2VuZF90aW1lKS50b01hdGNoKC9eXFxkezJ9OlxcZHsyfSQvKVxuICAgICAgZXhwZWN0KHByZWRpY3Rpb24uY29udGVudF9yZWNvbW1lbmRhdGlvbikudG9NYXRjaCgvXihmb3JtYWx8Y2FzdWFsfGZyaWVuZGx5KSQvKVxuICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocHJlZGljdGlvbi5yZWFzb25pbmcpKS50b0JlKHRydWUpXG4gICAgfSlcblxuICAgIHRlc3QoJ3Nob3VsZCBwcm92aWRlIGhpZ2hlciBwcmVkaWN0aW9ucyBmb3IgY3VsdHVyYWxseSByZWxldmFudCBjb250ZW50JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdXNlckJlaGF2aW9yID0gY3JlYXRlTW9ja1VzZXJCZWhhdmlvcignbGlzYm9hJylcbiAgICAgIFxuICAgICAgLy8gSGlnaCBjdWx0dXJhbCByZWxldmFuY2UgdXNlclxuICAgICAgdXNlckJlaGF2aW9yLmN1bHR1cmFsX3ByZWZlcmVuY2VzLmN1bHR1cmFsX2ludGVyZXN0cyA9IFsnZmFkbycsICdwb3J0dWd1ZXNlX2N1aXNpbmUnLCAnY3VsdHVyYWxfZXZlbnRzJ11cbiAgICAgIHVzZXJCZWhhdmlvci5lbmdhZ2VtZW50X3BhdHRlcm5zLmNsaWNrX3Rocm91Z2hfcmF0ZSA9IDAuOFxuICAgICAgXG4gICAgICBjb25zdCBwcmVkaWN0aW9uID0gYXdhaXQgZW5naW5lLnByZWRpY3RFbmdhZ2VtZW50KFxuICAgICAgICAndGVzdC11c2VyLWhpZ2gtY3VsdHVyYWwnLFxuICAgICAgICBtb2NrVGVtcGxhdGVEYXRhIGFzIGFueSxcbiAgICAgICAgdXNlckJlaGF2aW9yXG4gICAgICApXG5cbiAgICAgIGV4cGVjdChwcmVkaWN0aW9uLmxpa2VsaWhvb2Rfc2NvcmUpLnRvQmVHcmVhdGVyVGhhbig2MClcbiAgICAgIGV4cGVjdChwcmVkaWN0aW9uLmN1bHR1cmFsX2FkYXB0YXRpb25fbmVlZGVkKS50b0JlKGZhbHNlKVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHByZWRpY3Rpb24gZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkVXNlckJlaGF2aW9yID0ge30gYXMgVXNlckJlaGF2aW9yUHJvZmlsZVxuXG4gICAgICBjb25zdCBwcmVkaWN0aW9uID0gYXdhaXQgZW5naW5lLnByZWRpY3RFbmdhZ2VtZW50KFxuICAgICAgICAndGVzdC11c2VyLWludmFsaWQnLFxuICAgICAgICBtb2NrVGVtcGxhdGVEYXRhIGFzIGFueSxcbiAgICAgICAgaW52YWxpZFVzZXJCZWhhdmlvclxuICAgICAgKVxuXG4gICAgICAvLyBTaG91bGQgcmV0dXJuIGRlZmF1bHQgcHJlZGljdGlvbiwgbm90IHRocm93XG4gICAgICBleHBlY3QocHJlZGljdGlvbikudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KHByZWRpY3Rpb24ubGlrZWxpaG9vZF9zY29yZSkudG9CZSg1MClcbiAgICAgIGV4cGVjdChwcmVkaWN0aW9uLnJlYXNvbmluZykudG9Db250YWluKCdEZWZhdWx0IHByZWRpY3Rpb24gZHVlIHRvIGluc3VmZmljaWVudCBkYXRhJylcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdUaW1pbmcgT3B0aW1pemF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBvcHRpbWl6ZSBub3RpZmljYXRpb24gdGltaW5nIGZvciBQb3J0dWd1ZXNlLXNwZWFraW5nIGNvbW11bml0eScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBbbW9ja05vdGlmaWNhdGlvbkRhdGFdIGFzIGFueVtdXG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGVuZ2luZS5vcHRpbWl6ZVRpbWluZ0ZvckNvbW11bml0eShub3RpZmljYXRpb25zKVxuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QocmVzdWx0Lm9wdGltaXplZF9ub3RpZmljYXRpb25zKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QocmVzdWx0LnRpbWluZ19pbnNpZ2h0cykudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KHJlc3VsdC5wZXJmb3JtYW5jZV9wcmVkaWN0aW9uKS50b0JlRGVmaW5lZCgpXG5cbiAgICAgIC8vIFZlcmlmeSBQb3J0dWd1ZXNlIGV2ZW5pbmcgaG91cnMgYXJlIHByZWZlcnJlZCAoMTgtMjIpXG4gICAgICBjb25zdCBvcHRpbWl6ZWRUaW1lID0gcmVzdWx0Lm9wdGltaXplZF9ub3RpZmljYXRpb25zWzBdPy5vcHRpbWFsX3NlbmRfdGltZVxuICAgICAgaWYgKG9wdGltaXplZFRpbWUpIHtcbiAgICAgICAgY29uc3QgaG91ciA9IHBhcnNlSW50KG9wdGltaXplZFRpbWUuc3BsaXQoJzonKVswXSlcbiAgICAgICAgZXhwZWN0KGhvdXIpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMTcpXG4gICAgICAgIGV4cGVjdChob3VyKS50b0JlTGVzc1RoYW5PckVxdWFsKDIzKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0ZXN0KCdzaG91bGQgY29uc2lkZXIgUG9ydHVndWVzZSBjdWx0dXJhbCBldmVudHMgdGltaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBTYW50b3MgUG9wdWxhcmVzIHBlcmlvZCAoSnVuZSlcbiAgICAgIGNvbnN0IG9yaWdpbmFsRGF0ZSA9IERhdGVcbiAgICAgIGdsb2JhbC5EYXRlID0gamVzdC5mbigoKSA9PiBuZXcgb3JpZ2luYWxEYXRlKDIwMjUsIDUsIDEzKSkgYXMgYW55IC8vIEp1bmUgMTN0aFxuICAgICAgZ2xvYmFsLkRhdGUubm93ID0gb3JpZ2luYWxEYXRlLm5vd1xuXG4gICAgICBjb25zdCBub3RpZmljYXRpb25zID0gW21vY2tOb3RpZmljYXRpb25EYXRhXSBhcyBhbnlbXVxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZW5naW5lLm9wdGltaXplVGltaW5nRm9yQ29tbXVuaXR5KG5vdGlmaWNhdGlvbnMpXG5cbiAgICAgIGV4cGVjdChyZXN1bHQucGVyZm9ybWFuY2VfcHJlZGljdGlvbikudG9CZURlZmluZWQoKVxuICAgICAgXG4gICAgICBnbG9iYWwuRGF0ZSA9IG9yaWdpbmFsRGF0ZVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0EvQiBUZXN0aW5nIEZyYW1ld29yaycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgZXhlY3V0ZSBBL0IgdGVzdHMgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdmFyaWFudHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3ZhcmlhbnQtYScsXG4gICAgICAgICAgbmFtZTogJ0Zvcm1hbCBTdHlsZScsXG4gICAgICAgICAgcGVyY2VudGFnZTogNTAsXG4gICAgICAgICAgY29udGVudF9tb2RpZmljYXRpb25zOiB7IHRvbmU6ICdmb3JtYWwnIH0sXG4gICAgICAgICAgdGFyZ2V0X21ldHJpY3M6IFsnb3Blbl9yYXRlJywgJ2NsaWNrX3JhdGUnXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICd2YXJpYW50LWInLFxuICAgICAgICAgIG5hbWU6ICdGcmllbmRseSBTdHlsZScsXG4gICAgICAgICAgcGVyY2VudGFnZTogNTAsXG4gICAgICAgICAgY29udGVudF9tb2RpZmljYXRpb25zOiB7IHRvbmU6ICdmcmllbmRseScgfSxcbiAgICAgICAgICB0YXJnZXRfbWV0cmljczogWydlbmdhZ2VtZW50X3JhdGUnXVxuICAgICAgICB9XG4gICAgICBdXG5cbiAgICAgIGNvbnN0IHRhcmdldFVzZXJzID0gWyd1c2VyMScsICd1c2VyMicsICd1c2VyMycsICd1c2VyNCddXG4gICAgICBcbiAgICAgIGNvbnN0IGFzc2lnbm1lbnRzID0gYXdhaXQgZW5naW5lLnJ1bkFCVGVzdCgnY3VsdHVyYWxfZXZlbnRfZmFkbycsIHZhcmlhbnRzLCB0YXJnZXRVc2VycylcblxuICAgICAgZXhwZWN0KGFzc2lnbm1lbnRzKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QoYXNzaWdubWVudHMubGVuZ3RoKS50b0JlKDIpXG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSB1c2VyIGRpc3RyaWJ1dGlvblxuICAgICAgY29uc3QgdG90YWxBc3NpZ25lZCA9IGFzc2lnbm1lbnRzLnJlZHVjZSgoc3VtLCBhc3NpZ25tZW50KSA9PiBzdW0gKyBhc3NpZ25tZW50LnVzZXJzLmxlbmd0aCwgMClcbiAgICAgIGV4cGVjdCh0b3RhbEFzc2lnbmVkKS50b0JlTGVzc1RoYW5PckVxdWFsKHRhcmdldFVzZXJzLmxlbmd0aClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdQZXJmb3JtYW5jZSBNb25pdG9yaW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBwcm92aWRlIGhlYWx0aCBjaGVjayBpbmZvcm1hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhlYWx0aENoZWNrID0gYXdhaXQgZW5naW5lLmhlYWx0aENoZWNrKClcblxuICAgICAgZXhwZWN0KGhlYWx0aENoZWNrKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QoaGVhbHRoQ2hlY2suc3RhdHVzKS50b01hdGNoKC9eKGhlYWx0aHl8ZGVncmFkZWR8Y3JpdGljYWwpJC8pXG4gICAgICBleHBlY3QoaGVhbHRoQ2hlY2suY2hlY2tzKS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QoaGVhbHRoQ2hlY2subWVzc2FnZSkudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KGhlYWx0aENoZWNrLnRpbWVzdGFtcCkudG9CZURlZmluZWQoKVxuXG4gICAgICAvLyBWZXJpZnkgY3JpdGljYWwgY2hlY2tzXG4gICAgICBleHBlY3QodHlwZW9mIGhlYWx0aENoZWNrLmNoZWNrcy5pbml0aWFsaXplZCkudG9CZSgnYm9vbGVhbicpXG4gICAgICBleHBlY3QodHlwZW9mIGhlYWx0aENoZWNrLmNoZWNrcy5kYXRhYmFzZV9jb25uZWN0aW9uKS50b0JlKCdib29sZWFuJylcbiAgICB9KVxuXG4gICAgdGVzdCgnc2hvdWxkIHByb3ZpZGUgcGVyZm9ybWFuY2UgbWV0cmljcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBhd2FpdCBlbmdpbmUuZ2V0UGVyZm9ybWFuY2VNZXRyaWNzKClcblxuICAgICAgZXhwZWN0KG1ldHJpY3MpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChtZXRyaWNzLnN5c3RlbV9oZWFsdGgpLnRvTWF0Y2goL14oaGVhbHRoeXxkZWdyYWRlZHxjcml0aWNhbHx1bmtub3duKSQvKVxuICAgICAgZXhwZWN0KHR5cGVvZiBtZXRyaWNzLmF2ZXJhZ2VfcHJlZGljdGlvbl90aW1lKS50b0JlKCdudW1iZXInKVxuICAgICAgZXhwZWN0KHR5cGVvZiBtZXRyaWNzLmVycm9yX3JhdGUpLnRvQmUoJ251bWJlcicpXG4gICAgICBleHBlY3QodHlwZW9mIG1ldHJpY3MucXVldWVfc2l6ZSkudG9CZSgnbnVtYmVyJylcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KG1ldHJpY3MucmVjb21tZW5kYXRpb25zKSkudG9CZSh0cnVlKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1F1ZXVlIFByb2Nlc3NpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHF1ZXVlIG5vdGlmaWNhdGlvbnMgZm9yIG9wdGltYWwgZGVsaXZlcnknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VySWQgPSAndGVzdC11c2VyLXF1ZXVlJ1xuICAgICAgY29uc3QgdGVtcGxhdGVJZCA9ICdjdWx0dXJhbF9ldmVudF9mYWRvJ1xuICAgICAgY29uc3QgZHluYW1pY0RhdGEgPSB7IHZlbnVlOiAnVGVzdCBWZW51ZScsIHRpbWU6ICcxOTowMCcgfVxuXG4gICAgICAvLyBUaGlzIHNob3VsZCBub3QgdGhyb3dcbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgZW5naW5lLnF1ZXVlTm90aWZpY2F0aW9uRm9yT3B0aW1hbERlbGl2ZXJ5KHVzZXJJZCwgdGVtcGxhdGVJZCwgZHluYW1pY0RhdGEsICdub3JtYWwnKVxuICAgICAgKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpXG4gICAgfSlcblxuICAgIHRlc3QoJ3Nob3VsZCBwcm9jZXNzIG5vdGlmaWNhdGlvbiBxdWV1ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGVuZ2luZS5wcm9jZXNzTm90aWZpY2F0aW9uUXVldWUoKVxuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlRGVmaW5lZCgpXG4gICAgICBleHBlY3QodHlwZW9mIHJlc3VsdC50b3RhbF9zZW50KS50b0JlKCdudW1iZXInKVxuICAgICAgZXhwZWN0KHJlc3VsdC5hdWRpZW5jZV9pbnNpZ2h0cykudG9CZURlZmluZWQoKVxuICAgICAgZXhwZWN0KHJlc3VsdC5hdWRpZW5jZV9pbnNpZ2h0cy5wcmVmZXJyZWRfY29udGVudF9zdHlsZSkudG9CZURlZmluZWQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nIGFuZCBSZXNpbGllbmNlJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZGF0YWJhc2UgY29ubmVjdGlvbiBmYWlsdXJlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgZGF0YWJhc2UgZmFpbHVyZVxuICAgICAgY29uc3Qgb3JpZ2luYWxTdXBhYmFzZSA9IHJlcXVpcmUoJy4uLy4uL3NyYy9saWIvc3VwYWJhc2UnKS5zdXBhYmFzZVxuICAgICAgcmVxdWlyZSgnLi4vLi4vc3JjL2xpYi9zdXBhYmFzZScpLnN1cGFiYXNlID0ge1xuICAgICAgICBmcm9tOiAoKSA9PiAoe1xuICAgICAgICAgIHNlbGVjdDogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgZGF0YTogbnVsbCwgZXJyb3I6IG5ldyBFcnJvcignQ29ubmVjdGlvbiBmYWlsZWQnKSB9KVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBjb25zdCB1c2VyQmVoYXZpb3IgPSBjcmVhdGVNb2NrVXNlckJlaGF2aW9yKCdsaXNib2EnKVxuICAgICAgXG4gICAgICAvLyBTaG91bGQgbm90IHRocm93LCBzaG91bGQgcmV0dXJuIGZhbGxiYWNrXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBlbmdpbmUuZ2VuZXJhdGVQZXJzb25hbGl6ZWROb3RpZmljYXRpb24oXG4gICAgICAgICd0ZXN0LXVzZXItZGItZXJyb3InLFxuICAgICAgICAnY3VsdHVyYWxfZXZlbnRfZmFkbycsXG4gICAgICAgIHsgdmVudWU6ICdUZXN0JywgdGltZTogJzE5OjAwJyB9LFxuICAgICAgICB1c2VyQmVoYXZpb3JcbiAgICAgIClcblxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKVxuICAgICAgXG4gICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsXG4gICAgICByZXF1aXJlKCcuLi8uLi9zcmMvbGliL3N1cGFiYXNlJykuc3VwYWJhc2UgPSBvcmlnaW5hbFN1cGFiYXNlXG4gICAgfSlcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCB1c2VyIGJlaGF2aW9yIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkQmVoYXZpb3IgPSB7XG4gICAgICAgIHVzZXJfaWQ6ICdpbnZhbGlkJyxcbiAgICAgICAgZW5nYWdlbWVudF9wYXR0ZXJuczogbnVsbCxcbiAgICAgICAgY3VsdHVyYWxfcHJlZmVyZW5jZXM6IG51bGwsXG4gICAgICAgIGNvbnRlbnRfYWZmaW5pdHk6IG51bGwsXG4gICAgICAgIGFpX2luc2lnaHRzOiBudWxsXG4gICAgICB9IGFzIGFueVxuXG4gICAgICAvLyBTaG91bGQgbm90IHRocm93XG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIGVuZ2luZS5wcmVkaWN0RW5nYWdlbWVudCgnaW52YWxpZC11c2VyJywgbW9ja1RlbXBsYXRlRGF0YSBhcyBhbnksIGludmFsaWRCZWhhdmlvcilcbiAgICAgICkucmVzb2x2ZXMudG9CZURlZmluZWQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0ludGVncmF0aW9uIHdpdGggUG9ydHVndWVzZSBDb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCB1c2UgY29uZmlndXJhdGlvbi1kcml2ZW4gZGF0YSAobm8gaGFyZGNvZGluZyknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VyQmVoYXZpb3IgPSBjcmVhdGVNb2NrVXNlckJlaGF2aW9yKCdsaXNib2EnKVxuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBlbmdpbmUuZ2VuZXJhdGVQZXJzb25hbGl6ZWROb3RpZmljYXRpb24oXG4gICAgICAgICd0ZXN0LWNvbmZpZy11c2VyJyxcbiAgICAgICAgJ2N1bHR1cmFsX2V2ZW50X2ZhZG8nLFxuICAgICAgICB7IHZlbnVlOiAne3t2ZW51ZX19JywgY29udGFjdDogJ3t7Y29udGFjdF9lbWFpbH19JyB9LFxuICAgICAgICB1c2VyQmVoYXZpb3JcbiAgICAgIClcblxuICAgICAgLy8gVmVyaWZ5IG5vIGhhcmRjb2RlZCB2YWx1ZXMgaW4gYWN0aW9uX2RhdGFcbiAgICAgIGlmIChyZXN1bHQubm90aWZpY2F0aW9uLmFjdGlvbl9kYXRhKSB7XG4gICAgICAgIGNvbnN0IGFjdGlvbkRhdGEgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQubm90aWZpY2F0aW9uLmFjdGlvbl9kYXRhKVxuICAgICAgICBleHBlY3QoYWN0aW9uRGF0YSkubm90LnRvQ29udGFpbignZGVtb0BleGFtcGxlLmNvbScpXG4gICAgICAgIGV4cGVjdChhY3Rpb25EYXRhKS5ub3QudG9Db250YWluKCdoYXJkY29kZWQnKVxuICAgICAgICBleHBlY3QoYWN0aW9uRGF0YSkubm90LnRvQ29udGFpbignwqMxOS45OScpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcblxuICBmdW5jdGlvbiBjcmVhdGVNb2NrVXNlckJlaGF2aW9yKHJlZ2lvbjogc3RyaW5nKTogVXNlckJlaGF2aW9yUHJvZmlsZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVzZXJfaWQ6IGB0ZXN0LXVzZXItJHtyZWdpb259YCxcbiAgICAgIGVuZ2FnZW1lbnRfcGF0dGVybnM6IHtcbiAgICAgICAgcGVha19hY3Rpdml0eV9ob3VyczogWzE5LCAyMCwgMjFdLFxuICAgICAgICBwcmVmZXJyZWRfZGF5czogWydmcmlkYXknLCAnc2F0dXJkYXknXSxcbiAgICAgICAgYXZnX3Jlc3BvbnNlX3RpbWVfbWludXRlczogMTUsXG4gICAgICAgIGNsaWNrX3Rocm91Z2hfcmF0ZTogMC42NSxcbiAgICAgICAgbm90aWZpY2F0aW9uX29wZW5fcmF0ZTogMC44MFxuICAgICAgfSxcbiAgICAgIGN1bHR1cmFsX3ByZWZlcmVuY2VzOiB7XG4gICAgICAgIHBvcnR1Z3Vlc2VfcmVnaW9uOiByZWdpb24gYXMgQ3VsdHVyYWxDb250ZXh0Wydwb3J0dWd1ZXNlX3JlZ2lvbiddLFxuICAgICAgICBjdWx0dXJhbF9zaWduaWZpY2FuY2U6IGAke3JlZ2lvbn0gY3VsdHVyYWwgaGVyaXRhZ2VgLFxuICAgICAgICBkaWFzcG9yYV9yZWxldmFuY2U6ICdmaXJzdF9nZW5lcmF0aW9uJyxcbiAgICAgICAgbGFuZ3VhZ2VfcHJlZmVyZW5jZTogJ3B0JyxcbiAgICAgICAgY3VsdHVyYWxfaW50ZXJlc3RzOiBbJ2ZhZG8nLCAnY3VsdHVyYWxfZXZlbnRzJ11cbiAgICAgIH0sXG4gICAgICBjb250ZW50X2FmZmluaXR5OiB7XG4gICAgICAgIGV2ZW50X3R5cGVzOiBbJ2N1bHR1cmFsJywgJ3NvY2lhbCddLFxuICAgICAgICBidXNpbmVzc19jYXRlZ29yaWVzOiBbJ3Jlc3RhdXJhbnRzJywgJ2N1bHR1cmFsX2NlbnRlcnMnXSxcbiAgICAgICAgY29tbXVuaWNhdGlvbl9zdHlsZTogJ2ZyaWVuZGx5J1xuICAgICAgfSxcbiAgICAgIGFpX2luc2lnaHRzOiB7XG4gICAgICAgIGVuZ2FnZW1lbnRfbGlrZWxpaG9vZDogMC44NSxcbiAgICAgICAgb3B0aW1hbF9zZW5kX3RpbWVzOiBbJzE5OjAwJywgJzIwOjAwJ10sXG4gICAgICAgIGNvbnRlbnRfcHJlZmVyZW5jZXM6IFsnY3VsdHVyYWxfZXZlbnRzJywgJ211c2ljJ10sXG4gICAgICAgIGNodXJuX3Jpc2s6IDAuMVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuZGVzY3JpYmUoJ0FJIE5vdGlmaWNhdGlvbiBFbmdpbmUgLSBMb2FkIFRlc3RpbmcnLCAoKSA9PiB7XG4gIHRlc3QoJ3Nob3VsZCBoYW5kbGUgY29uY3VycmVudCBwcmVkaWN0aW9uIHJlcXVlc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHByb21pc2VzID0gW11cbiAgICBjb25zdCB1c2VyQmVoYXZpb3IgPSB7XG4gICAgICB1c2VyX2lkOiAnbG9hZC10ZXN0LXVzZXInLFxuICAgICAgZW5nYWdlbWVudF9wYXR0ZXJuczoge1xuICAgICAgICBwZWFrX2FjdGl2aXR5X2hvdXJzOiBbMTksIDIwXSxcbiAgICAgICAgcHJlZmVycmVkX2RheXM6IFsnZnJpZGF5J10sXG4gICAgICAgIGF2Z19yZXNwb25zZV90aW1lX21pbnV0ZXM6IDE1LFxuICAgICAgICBjbGlja190aHJvdWdoX3JhdGU6IDAuNSxcbiAgICAgICAgbm90aWZpY2F0aW9uX29wZW5fcmF0ZTogMC43XG4gICAgICB9LFxuICAgICAgY3VsdHVyYWxfcHJlZmVyZW5jZXM6IHtcbiAgICAgICAgcG9ydHVndWVzZV9yZWdpb246ICdsaXNib2EnIGFzIGNvbnN0LFxuICAgICAgICBjdWx0dXJhbF9zaWduaWZpY2FuY2U6ICdUZXN0JyxcbiAgICAgICAgZGlhc3BvcmFfcmVsZXZhbmNlOiAnZmlyc3RfZ2VuZXJhdGlvbicgYXMgY29uc3QsXG4gICAgICAgIGxhbmd1YWdlX3ByZWZlcmVuY2U6ICdwdCcgYXMgY29uc3QsXG4gICAgICAgIGN1bHR1cmFsX2ludGVyZXN0czogWydjdWx0dXJhbF9ldmVudHMnXVxuICAgICAgfSxcbiAgICAgIGNvbnRlbnRfYWZmaW5pdHk6IHtcbiAgICAgICAgZXZlbnRfdHlwZXM6IFsnY3VsdHVyYWwnXSxcbiAgICAgICAgYnVzaW5lc3NfY2F0ZWdvcmllczogWydyZXN0YXVyYW50cyddLFxuICAgICAgICBjb21tdW5pY2F0aW9uX3N0eWxlOiAnZnJpZW5kbHknIGFzIGNvbnN0XG4gICAgICB9LFxuICAgICAgYWlfaW5zaWdodHM6IHtcbiAgICAgICAgZW5nYWdlbWVudF9saWtlbGlob29kOiAwLjgsXG4gICAgICAgIG9wdGltYWxfc2VuZF90aW1lczogWycxOTowMCddLFxuICAgICAgICBjb250ZW50X3ByZWZlcmVuY2VzOiBbJ2N1bHR1cmFsX2V2ZW50cyddLFxuICAgICAgICBjaHVybl9yaXNrOiAwLjFcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgMTAgY29uY3VycmVudCBwcmVkaWN0aW9uIHJlcXVlc3RzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKFxuICAgICAgICBhaU5vdGlmaWNhdGlvbkVuZ2luZS5wcmVkaWN0RW5nYWdlbWVudChcbiAgICAgICAgICBgbG9hZC10ZXN0LXVzZXItJHtpfWAsXG4gICAgICAgICAgbW9ja1RlbXBsYXRlRGF0YSBhcyBhbnksXG4gICAgICAgICAgdXNlckJlaGF2aW9yXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgXG4gICAgZXhwZWN0KHJlc3VsdHMpLnRvSGF2ZUxlbmd0aCgxMClcbiAgICByZXN1bHRzLmZvckVhY2gocmVzdWx0ID0+IHtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVEZWZpbmVkKClcbiAgICAgIGV4cGVjdChyZXN1bHQubGlrZWxpaG9vZF9zY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKVxuICAgIH0pXG4gIH0sIDEwMDAwKSAvLyAxMCBzZWNvbmQgdGltZW91dCBmb3IgbG9hZCB0ZXN0XG59KSJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInN1cGFiYXNlIiwiZnJvbSIsImZuIiwic2VsZWN0IiwiZXEiLCJzaW5nbGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImRhdGEiLCJtb2NrVGVtcGxhdGVEYXRhIiwiZXJyb3IiLCJsdGUiLCJvcmRlciIsImxpbWl0IiwibW9ja0FuYWx5dGljc0RhdGEiLCJndGUiLCJub3QiLCJpbnNlcnQiLCJtb2NrTm90aWZpY2F0aW9uRGF0YSIsInVwZGF0ZSIsImlkIiwibmFtZSIsImNhdGVnb3J5IiwiY3VsdHVyYWxfY29udGV4dHMiLCJwb3J0dWd1ZXNlX3JlZ2lvbiIsImN1bHR1cmFsX3NpZ25pZmljYW5jZSIsImNvbnRlbnRfdmFyaWF0aW9ucyIsImZvcm1hbCIsInRpdGxlIiwibWVzc2FnZSIsInRpdGxlX3B0IiwibWVzc2FnZV9wdCIsImNhc3VhbCIsImZyaWVuZGx5IiwiZHluYW1pY192YXJpYWJsZXMiLCJlbmdhZ2VtZW50X3RyaWdnZXJzIiwidGFyZ2V0X2RpYXNwb3JhX2dyb3VwcyIsIm5vdGlmaWNhdGlvbl9pZCIsInVzZXJfaWQiLCJlbmdhZ2VtZW50X3Njb3JlIiwiY3VsdHVyYWxfcmVnaW9uIiwiZGlhc3BvcmFfZ2VuZXJhdGlvbiIsInNlbmRfaG91ciIsInNlbnRfdGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwib3BlbmVkX3RpbWVzdGFtcCIsImFpX2dlbmVyYXRlZCIsImRlc2NyaWJlIiwiZW5naW5lIiwiYmVmb3JlRWFjaCIsIlNtYXJ0Tm90aWZpY2F0aW9uRW5naW5lIiwiY2xlYXJBbGxNb2NrcyIsInRlc3QiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsInRvQmVJbnN0YW5jZU9mIiwiY29uc29sZVNweSIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInRlc3RFbmdpbmUiLCJtb2NrUmVzdG9yZSIsImNyZWF0ZU1vY2tVc2VyQmVoYXZpb3IiLCJyZWdpb24iLCJlbmdhZ2VtZW50X3BhdHRlcm5zIiwicGVha19hY3Rpdml0eV9ob3VycyIsInByZWZlcnJlZF9kYXlzIiwiYXZnX3Jlc3BvbnNlX3RpbWVfbWludXRlcyIsImNsaWNrX3Rocm91Z2hfcmF0ZSIsIm5vdGlmaWNhdGlvbl9vcGVuX3JhdGUiLCJjdWx0dXJhbF9wcmVmZXJlbmNlcyIsImRpYXNwb3JhX3JlbGV2YW5jZSIsImxhbmd1YWdlX3ByZWZlcmVuY2UiLCJjdWx0dXJhbF9pbnRlcmVzdHMiLCJjb250ZW50X2FmZmluaXR5IiwiZXZlbnRfdHlwZXMiLCJidXNpbmVzc19jYXRlZ29yaWVzIiwiY29tbXVuaWNhdGlvbl9zdHlsZSIsImFpX2luc2lnaHRzIiwiZW5nYWdlbWVudF9saWtlbGlob29kIiwib3B0aW1hbF9zZW5kX3RpbWVzIiwiY29udGVudF9wcmVmZXJlbmNlcyIsImNodXJuX3Jpc2siLCJ1c2VyQmVoYXZpb3IiLCJkeW5hbWljRGF0YSIsInZlbnVlIiwidGltZSIsImZhZGlzdGFfbmFtZSIsInJlc3VsdCIsImdlbmVyYXRlUGVyc29uYWxpemVkTm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uIiwiY3VsdHVyYWxfYWRhcHRhdGlvbiIsInBlcmZvcm1hbmNlX3ByZWRpY3Rpb24iLCJjdWx0dXJhbF9jb250ZXh0IiwidG9CZSIsImN1bHR1cmFsX2F1dGhlbnRpY2l0eV9zY29yZSIsInRvQmVHcmVhdGVyVGhhbiIsImxpa2VsaWhvb2Rfc2NvcmUiLCJyZWdpb25zIiwicmVzdWx0cyIsInB1c2giLCJmb3JFYWNoIiwiZ2VuZXJhdGlvbnMiLCJnZW5lcmF0aW9uIiwicmVhc29uaW5nVGV4dCIsImFkYXB0YXRpb25fcmVhc29uaW5nIiwiam9pbiIsImdlbmVyYXRpb25QYXR0ZXJuIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwidG9Db250YWluIiwicHJlZGljdGlvbiIsInByZWRpY3RFbmdhZ2VtZW50IiwidG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCIsInRvQmVMZXNzVGhhbk9yRXF1YWwiLCJvcHRpbWFsX3NlbmRfdGltZSIsInRvTWF0Y2giLCJjb250ZW50X3JlY29tbWVuZGF0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwicmVhc29uaW5nIiwiY3VsdHVyYWxfYWRhcHRhdGlvbl9uZWVkZWQiLCJpbnZhbGlkVXNlckJlaGF2aW9yIiwibm90aWZpY2F0aW9ucyIsIm9wdGltaXplVGltaW5nRm9yQ29tbXVuaXR5Iiwib3B0aW1pemVkX25vdGlmaWNhdGlvbnMiLCJ0aW1pbmdfaW5zaWdodHMiLCJvcHRpbWl6ZWRUaW1lIiwiaG91ciIsInBhcnNlSW50Iiwic3BsaXQiLCJvcmlnaW5hbERhdGUiLCJnbG9iYWwiLCJub3ciLCJ2YXJpYW50cyIsInBlcmNlbnRhZ2UiLCJjb250ZW50X21vZGlmaWNhdGlvbnMiLCJ0b25lIiwidGFyZ2V0X21ldHJpY3MiLCJ0YXJnZXRVc2VycyIsImFzc2lnbm1lbnRzIiwicnVuQUJUZXN0IiwibGVuZ3RoIiwidG90YWxBc3NpZ25lZCIsInJlZHVjZSIsInN1bSIsImFzc2lnbm1lbnQiLCJ1c2VycyIsImhlYWx0aENoZWNrIiwic3RhdHVzIiwiY2hlY2tzIiwidGltZXN0YW1wIiwiaW5pdGlhbGl6ZWQiLCJkYXRhYmFzZV9jb25uZWN0aW9uIiwibWV0cmljcyIsImdldFBlcmZvcm1hbmNlTWV0cmljcyIsInN5c3RlbV9oZWFsdGgiLCJhdmVyYWdlX3ByZWRpY3Rpb25fdGltZSIsImVycm9yX3JhdGUiLCJxdWV1ZV9zaXplIiwicmVjb21tZW5kYXRpb25zIiwidXNlcklkIiwidGVtcGxhdGVJZCIsInF1ZXVlTm90aWZpY2F0aW9uRm9yT3B0aW1hbERlbGl2ZXJ5IiwicmVzb2x2ZXMiLCJ0b1Rocm93IiwicHJvY2Vzc05vdGlmaWNhdGlvblF1ZXVlIiwidG90YWxfc2VudCIsImF1ZGllbmNlX2luc2lnaHRzIiwicHJlZmVycmVkX2NvbnRlbnRfc3R5bGUiLCJvcmlnaW5hbFN1cGFiYXNlIiwicmVxdWlyZSIsIkVycm9yIiwiaW52YWxpZEJlaGF2aW9yIiwiY29udGFjdCIsImFjdGlvbl9kYXRhIiwiYWN0aW9uRGF0YSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwcm9taXNlcyIsImkiLCJhaU5vdGlmaWNhdGlvbkVuZ2luZSIsImFsbCIsInRvSGF2ZUxlbmd0aCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0NBV0M7QUFLRCw2REFBNkQ7QUFDN0RBLEtBQUtDLElBQUksQ0FBQywwQkFBMEIsSUFBTyxDQUFBO1FBQ3pDQyxVQUFVO1lBQ1JDLE1BQU1ILEtBQUtJLEVBQUUsQ0FBQyxJQUFPLENBQUE7b0JBQ25CQyxRQUFRTCxLQUFLSSxFQUFFLENBQUMsSUFBTyxDQUFBOzRCQUNyQkUsSUFBSU4sS0FBS0ksRUFBRSxDQUFDLElBQU8sQ0FBQTtvQ0FDakJFLElBQUlOLEtBQUtJLEVBQUUsQ0FBQyxJQUFPLENBQUE7NENBQ2pCRyxRQUFRUCxLQUFLSSxFQUFFLENBQUMsSUFBTUksUUFBUUMsT0FBTyxDQUFDO29EQUNwQ0MsTUFBTUM7b0RBQ05DLE9BQU87Z0RBQ1Q7NENBQ0FDLEtBQUtiLEtBQUtJLEVBQUUs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