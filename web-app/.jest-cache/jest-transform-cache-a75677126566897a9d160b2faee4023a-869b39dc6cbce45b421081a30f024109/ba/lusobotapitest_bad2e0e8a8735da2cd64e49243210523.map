{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/lusobot/lusobot-api.test.ts"],"sourcesContent":["/**\n * LusoBot API Production Tests\n * \n * Comprehensive API testing for the LusoBot chat endpoint,\n * including authentication, rate limiting, and database integration.\n */\n\nimport { NextRequest } from 'next/server'\nimport { POST, GET } from '@/app/api/lusobot/chat/route'\n\n// Mock Supabase\nconst mockSupabase = {\n  auth: {\n    getUser: jest.fn()\n  },\n  from: jest.fn(() => ({\n    select: jest.fn(() => ({\n      eq: jest.fn(() => ({\n        single: jest.fn()\n      })),\n      order: jest.fn(() => ({\n        limit: jest.fn()\n      })),\n      limit: jest.fn()\n    })),\n    insert: jest.fn(),\n    upsert: jest.fn()\n  })),\n  rpc: jest.fn()\n}\n\njest.mock('@supabase/auth-helpers-nextjs', () => ({\n  createRouteHandlerClient: jest.fn(() => mockSupabase)\n}))\n\njest.mock('next/headers', () => ({\n  cookies: jest.fn()\n}))\n\n// Mock LusoBot engine\njest.mock('@/lib/lusobot-engine', () => ({\n  LusoBotEngine: {\n    generateResponse: jest.fn()\n  },\n  SaudadeEngine: {\n    detectSaudade: jest.fn()\n  }\n}))\n\ndescribe('LusoBot API Tests', () => {\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('POST /api/lusobot/chat - Authentication', () => {\n    test('should require user authentication', async () => {\n      mockSupabase.auth.getUser.mockResolvedValueOnce({\n        data: { user: null },\n        error: new Error('Not authenticated')\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Hello LusoBot'\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(401)\n      expect(data.error).toBe('Unauthorized')\n    })\n\n    test('should accept authenticated requests', async () => {\n      const mockUser = { id: 'user_123', email: 'test@example.com' }\n      \n      mockSupabase.auth.getUser.mockResolvedValueOnce({\n        data: { user: mockUser },\n        error: null\n      })\n\n      // Mock database responses\n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'cultural_personality_profiles') {\n          return {\n            select: () => ({\n              eq: () => ({\n                single: () => Promise.resolve({\n                  data: { portuguese_region: 'diaspora_uk', saudade_capacity: 7 },\n                  error: null\n                })\n              })\n            })\n          }\n        }\n        if (table === 'profiles') {\n          return {\n            select: () => ({\n              eq: () => ({\n                single: () => Promise.resolve({\n                  data: { first_name: 'Test', cultural_background: 'portuguese' },\n                  error: null\n                })\n              })\n            })\n          }\n        }\n        return {\n          select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n          insert: () => Promise.resolve({ data: null, error: null }),\n          upsert: () => Promise.resolve({ data: null, error: null })\n        }\n      })\n\n      // Mock LusoBot response\n      const { LusoBotEngine } = require('@/lib/lusobot-engine')\n      LusoBotEngine.generateResponse.mockResolvedValueOnce({\n        id: 'response_123',\n        role: 'assistant',\n        content: 'Hello! How can I help you today?',\n        timestamp: new Date(),\n        language: 'en',\n        culturalContext: {\n          region: 'diaspora_uk',\n          topic: 'community',\n          expertise: ['cultural_events'],\n          confidence: 0.8\n        },\n        emotionalTone: {\n          saudade: 0.2,\n          nostalgia: 0.1,\n          hope: 0.6,\n          community: 0.7,\n          heritage: 0.5\n        },\n        suggestions: []\n      })\n\n      // Mock saudade detection\n      const { SaudadeEngine } = require('@/lib/lusobot-engine')\n      SaudadeEngine.detectSaudade.mockReturnValueOnce({\n        saudade: 0.1,\n        nostalgia: 0.0,\n        hope: 0.3,\n        community: 0.2,\n        heritage: 0.1\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Hello LusoBot',\n          language: 'en'\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.response).toBeDefined()\n      expect(data.response.content).toBe('Hello! How can I help you today?')\n      expect(data.conversation_context).toBeDefined()\n      expect(data.session_metadata).toBeDefined()\n    })\n  })\n\n  describe('POST /api/lusobot/chat - Input Validation', () => {\n    beforeEach(() => {\n      mockSupabase.auth.getUser.mockResolvedValueOnce({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n    })\n\n    test('should reject empty messages', async () => {\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: ''\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toBe('Message is required')\n    })\n\n    test('should reject whitespace-only messages', async () => {\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: '   \\n\\t  '\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toBe('Message is required')\n    })\n\n    test('should accept valid Portuguese messages', async () => {\n      // Setup mocks for successful request\n      const setupMocks = () => {\n        mockSupabase.from.mockImplementation((table: string) => ({\n          select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n          insert: () => Promise.resolve({ data: null, error: null }),\n          upsert: () => Promise.resolve({ data: null, error: null })\n        }))\n\n        const { LusoBotEngine, SaudadeEngine } = require('@/lib/lusobot-engine')\n        LusoBotEngine.generateResponse.mockResolvedValue({\n          id: 'response_pt',\n          content: 'OlÃ¡! Como posso ajudar?',\n          language: 'pt',\n          culturalContext: { confidence: 0.8 },\n          emotionalTone: { saudade: 0.3 }\n        })\n        SaudadeEngine.detectSaudade.mockReturnValue({ saudade: 0.3 })\n      }\n\n      setupMocks()\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'OlÃ¡, como estÃ¡s?',\n          language: 'pt'\n        })\n      })\n\n      const response = await POST(request)\n      expect(response.status).toBe(200)\n    })\n  })\n\n  describe('POST /api/lusobot/chat - Cultural Context Processing', () => {\n    beforeEach(() => {\n      mockSupabase.auth.getUser.mockResolvedValueOnce({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n    })\n\n    test('should process Portuguese cultural context correctly', async () => {\n      // Mock cultural profile\n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'cultural_personality_profiles') {\n          return {\n            select: () => ({\n              eq: () => ({\n                single: () => Promise.resolve({\n                  data: {\n                    portuguese_region: 'north',\n                    saudade_capacity: 8,\n                    fado_resonance: 9,\n                    generation_in_uk: 1\n                  }\n                })\n              })\n            })\n          }\n        }\n        return {\n          select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n          insert: () => Promise.resolve({ data: null, error: null })\n        }\n      })\n\n      const { LusoBotEngine, SaudadeEngine } = require('@/lib/lusobot-engine')\n      \n      // Mock saudade detection for high saudade content\n      SaudadeEngine.detectSaudade.mockReturnValueOnce({\n        saudade: 0.8,\n        nostalgia: 0.7,\n        hope: 0.3,\n        community: 0.6,\n        heritage: 0.9\n      })\n\n      LusoBotEngine.generateResponse.mockResolvedValueOnce({\n        id: 'cultural_response',\n        content: 'Compreendo essa saudade profunda que sentes.',\n        language: 'pt',\n        culturalContext: {\n          region: 'north',\n          topic: 'saudade',\n          confidence: 0.9\n        },\n        emotionalTone: {\n          saudade: 0.8,\n          heritage: 0.9\n        }\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Tenho muitas saudades do Porto, da minha terra',\n          language: 'pt',\n          cultural_context: {\n            portuguese_region: 'north',\n            saudade_intensity: 8\n          }\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.conversation_context.saudade_detected).toBe(true)\n      expect(data.conversation_context.emotional_support_provided).toBe(true)\n    })\n\n    test('should generate contextual recommendations', async () => {\n      // Setup for food-related query\n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'events') {\n          return {\n            select: () => ({\n              ilike: () => ({\n                eq: () => ({\n                  gte: () => ({\n                    limit: () => Promise.resolve({\n                      data: [\n                        {\n                          id: 'cooking_event_1',\n                          title: 'Portuguese Cooking Workshop',\n                          date: '2024-01-15'\n                        }\n                      ]\n                    })\n                  })\n                })\n              })\n            })\n          }\n        }\n        return {\n          select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n          insert: () => Promise.resolve({ data: null, error: null })\n        }\n      })\n\n      const { LusoBotEngine, SaudadeEngine } = require('@/lib/lusobot-engine')\n      \n      SaudadeEngine.detectSaudade.mockReturnValue({ saudade: 0.2 })\n      LusoBotEngine.generateResponse.mockResolvedValue({\n        id: 'food_response',\n        content: 'Let me help you find Portuguese restaurants',\n        culturalContext: { topic: 'cuisine' }\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Where can I find good Portuguese food in London?',\n          language: 'en'\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.conversation_context.recommendations).toBeDefined()\n    })\n  })\n\n  describe('POST /api/lusobot/chat - Database Integration', () => {\n    test('should store conversation interactions', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      const insertMock = jest.fn().mockResolvedValue({ data: null, error: null })\n      \n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'voice_assistant_interactions') {\n          return { insert: insertMock }\n        }\n        return {\n          select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n          insert: () => Promise.resolve({ data: null, error: null })\n        }\n      })\n\n      const { LusoBotEngine, SaudadeEngine } = require('@/lib/lusobot-engine')\n      \n      SaudadeEngine.detectSaudade.mockReturnValue({ saudade: 0.1 })\n      LusoBotEngine.generateResponse.mockResolvedValue({\n        id: 'test_response',\n        content: 'Test response',\n        culturalContext: { topic: 'general' }\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Test message',\n          language: 'en'\n        })\n      })\n\n      const response = await POST(request)\n      \n      expect(response.status).toBe(200)\n      expect(insertMock).toHaveBeenCalledWith(\n        expect.objectContaining({\n          user_id: 'user_123',\n          input_text: 'Test message',\n          interaction_type: 'text_input'\n        })\n      )\n    })\n\n    test('should update conversation context', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      const rpcMock = jest.fn().mockResolvedValue({ data: null, error: null })\n      mockSupabase.rpc = rpcMock\n\n      mockSupabase.from.mockImplementation(() => ({\n        select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n        insert: () => Promise.resolve({ data: null, error: null })\n      }))\n\n      const { LusoBotEngine, SaudadeEngine } = require('@/lib/lusobot-engine')\n      \n      SaudadeEngine.detectSaudade.mockReturnValue({\n        saudade: 0.7,\n        community: 0.5\n      })\n      LusoBotEngine.generateResponse.mockResolvedValue({\n        id: 'context_test',\n        content: 'Context update test'\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'I miss home so much',\n          language: 'en'\n        })\n      })\n\n      await POST(request)\n\n      expect(rpcMock).toHaveBeenCalledWith(\n        'update_lusobot_context',\n        expect.objectContaining({\n          p_user_id: 'user_123',\n          p_saudade_intensity: 7\n        })\n      )\n    })\n  })\n\n  describe('GET /api/lusobot/chat - Conversation History', () => {\n    test('should require authentication for history access', async () => {\n      mockSupabase.auth.getUser.mockResolvedValueOnce({\n        data: { user: null },\n        error: new Error('Not authenticated')\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat?session_id=test_session')\n      const response = await GET(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(401)\n      expect(data.error).toBe('Unauthorized')\n    })\n\n    test('should require session ID parameter', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat')\n      const response = await GET(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(400)\n      expect(data.error).toBe('Session ID is required')\n    })\n\n    test('should return conversation history', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      const mockConversations = [\n        {\n          id: 'interaction_1',\n          input_text: 'Hello',\n          ai_response_text: 'Hi there!',\n          cultural_topic_detected: 'greeting',\n          created_at: '2024-01-01T10:00:00Z'\n        }\n      ]\n\n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'voice_assistant_interactions') {\n          return {\n            select: () => ({\n              eq: () => ({\n                eq: () => ({\n                  order: () => ({\n                    limit: () => Promise.resolve({\n                      data: mockConversations,\n                      error: null\n                    })\n                  })\n                })\n              })\n            })\n          }\n        }\n        if (table === 'lusobot_conversation_context') {\n          return {\n            select: () => ({\n              eq: () => ({\n                eq: () => ({\n                  single: () => Promise.resolve({\n                    data: { conversation_count: 5 },\n                    error: null\n                  })\n                })\n              })\n            })\n          }\n        }\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat?session_id=test_session')\n      const response = await GET(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.conversations).toEqual(mockConversations)\n      expect(data.total_interactions).toBe(1)\n    })\n  })\n\n  describe('Error Handling', () => {\n    test('should handle LusoBot engine errors gracefully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      mockSupabase.from.mockImplementation(() => ({\n        select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n        insert: () => Promise.resolve({ data: null, error: null })\n      }))\n\n      const { LusoBotEngine } = require('@/lib/lusobot-engine')\n      LusoBotEngine.generateResponse.mockRejectedValue(new Error('AI processing error'))\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Test message'\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(500)\n      expect(data.error).toBe('Failed to process LusoBot conversation')\n    })\n\n    test('should handle database errors gracefully', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      mockSupabase.from.mockImplementation(() => ({\n        select: () => ({ eq: () => ({ single: () => Promise.reject(new Error('Database error')) }) })\n      }))\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Test message'\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(500)\n      expect(data.error).toBe('Failed to process LusoBot conversation')\n    })\n\n    test('should track failed AI interactions', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      const insertMock = jest.fn().mockResolvedValue({ data: null, error: null })\n      \n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'ai_service_usage') {\n          return { insert: insertMock }\n        }\n        return {\n          select: () => ({ eq: () => ({ single: () => Promise.reject(new Error('DB Error')) }) })\n        }\n      })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Test message'\n        })\n      })\n\n      await POST(request)\n\n      expect(insertMock).toHaveBeenCalledWith(\n        expect.objectContaining({\n          service_name: 'lusobot',\n          operation_type: 'chat_interaction',\n          success: false,\n          error_message: expect.any(String)\n        })\n      )\n    })\n  })\n\n  describe('Performance and Monitoring', () => {\n    test('should track response latency', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      const insertMock = jest.fn().mockResolvedValue({ data: null, error: null })\n      \n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'ai_service_usage') {\n          return { insert: insertMock }\n        }\n        return {\n          select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n          insert: () => Promise.resolve({ data: null, error: null })\n        }\n      })\n\n      const { LusoBotEngine, SaudadeEngine } = require('@/lib/lusobot-engine')\n      \n      // Add delay to simulate processing time\n      LusoBotEngine.generateResponse.mockImplementation(\n        () => new Promise(resolve => \n          setTimeout(() => resolve({\n            id: 'perf_test',\n            content: 'Performance test response'\n          }), 100)\n        )\n      )\n      SaudadeEngine.detectSaudade.mockReturnValue({ saudade: 0.1 })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Performance test'\n        })\n      })\n\n      await POST(request)\n\n      expect(insertMock).toHaveBeenCalledWith(\n        expect.objectContaining({\n          service_name: 'lusobot',\n          latency_ms: expect.any(Number),\n          success: true\n        })\n      )\n    })\n\n    test('should generate session metadata', async () => {\n      mockSupabase.auth.getUser.mockResolvedValue({\n        data: { user: { id: 'user_123' } },\n        error: null\n      })\n\n      mockSupabase.from.mockImplementation((table: string) => {\n        if (table === 'lusobot_conversation_context') {\n          return {\n            select: () => ({\n              eq: () => ({\n                eq: () => ({\n                  single: () => Promise.resolve({\n                    data: {\n                      conversation_count: 3,\n                      conversation_effectiveness_score: 0.85\n                    }\n                  })\n                })\n              })\n            })\n          }\n        }\n        return {\n          select: () => ({ eq: () => ({ single: () => Promise.resolve({ data: null }) }) }),\n          insert: () => Promise.resolve({ data: null, error: null })\n        }\n      })\n\n      const { LusoBotEngine, SaudadeEngine } = require('@/lib/lusobot-engine')\n      \n      LusoBotEngine.generateResponse.mockResolvedValue({\n        id: 'metadata_test',\n        content: 'Metadata test response'\n      })\n      SaudadeEngine.detectSaudade.mockReturnValue({ saudade: 0.1 })\n\n      const request = new NextRequest('http://localhost:3000/api/lusobot/chat', {\n        method: 'POST',\n        body: JSON.stringify({\n          message: 'Metadata test',\n          session_id: 'test_session_123'\n        })\n      })\n\n      const response = await POST(request)\n      const data = await response.json()\n\n      expect(response.status).toBe(200)\n      expect(data.session_metadata).toEqual({\n        session_id: 'test_session_123',\n        conversation_count: 3,\n        cultural_effectiveness: 0.85\n      })\n    })\n  })\n})"],"names":["jest","mock","createRouteHandlerClient","fn","mockSupabase","cookies","LusoBotEngine","generateResponse","SaudadeEngine","detectSaudade","auth","getUser","from","select","eq","single","order","limit","insert","upsert","rpc","describe","beforeEach","clearAllMocks","test","mockResolvedValueOnce","data","user","error","Error","request","NextRequest","method","body","JSON","stringify","message","response","POST","json","expect","status","toBe","mockUser","id","email","mockImplementation","table","Promise","resolve","portuguese_region","saudade_capacity","first_name","cultural_background","require","role","content","timestamp","Date","language","culturalContext","region","topic","expertise","confidence","emotionalTone","saudade","nostalgia","hope","community","heritage","suggestions","mockReturnValueOnce","toBeDefined","conversation_context","session_metadata","setupMocks","mockResolvedValue","mockReturnValue","fado_resonance","generation_in_uk","cultural_context","saudade_intensity","saudade_detected","emotional_support_provided","ilike","gte","title","date","recommendations","insertMock","toHaveBeenCalledWith","objectContaining","user_id","input_text","interaction_type","rpcMock","p_user_id","p_saudade_intensity","GET","mockConversations","ai_response_text","cultural_topic_detected","created_at","conversation_count","conversations","toEqual","total_interactions","mockRejectedValue","reject","service_name","operation_type","success","error_message","any","String","setTimeout","latency_ms","Number","conversation_effectiveness_score","session_id","cultural_effectiveness"],"mappings":"AAAA;;;;;CAKC;AA0BDA,KAAKC,IAAI,CAAC,iCAAiC,IAAO,CAAA;QAChDC,0BAA0BF,KAAKG,EAAE,CAAC,IAAMC;IAC1C,CAAA;AAEAJ,KAAKC,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC/BI,SAASL,KAAKG,EAAE;IAClB,CAAA;AAEA,sBAAsB;AACtBH,KAAKC,IAAI,CAAC,wBAAwB,IAAO,CAAA;QACvCK,eAAe;YACbC,kBAAkBP,KAAKG,EAAE;QAC3B;QACAK,eAAe;YACbC,eAAeT,KAAKG,EAAE;QACxB;IACF,CAAA;;;;wBAxC4B;uBACF;AAE1B,gBAAgB;AAChB,MAAMC,eAAe;IACnBM,MAAM;QACJC,SAASX,KAAKG,EAAE;IAClB;IACAS,MAAMZ,KAAKG,EAAE,CAAC,IAAO,CAAA;YACnBU,QAAQb,KAAKG,EAAE,CAAC,IAAO,CAAA;oBACrBW,IAAId,KAAKG,EAAE,CAAC,IAAO,CAAA;4BACjBY,QAAQf,KAAKG,EAAE;wBACjB,CAAA;oBACAa,OAAOhB,KAAKG,EAAE,CAAC,IAAO,CAAA;4BACpBc,OAAOjB,KAAKG,EAAE;wBAChB,CAAA;oBACAc,OAAOjB,KAAKG,EAAE;gBAChB,CAAA;YACAe,QAAQlB,KAAKG,EAAE;YACfgB,QAAQnB,KAAKG,EAAE;QACjB,CAAA;IACAiB,KAAKpB,KAAKG,EAAE;AACd;AAoBAkB,SAAS,qBAAqB;IAE5BC,WAAW;QACTtB,KAAKuB,aAAa;IACpB;IAEAF,SAAS,2CAA2C;QAClDG,KAAK,sCAAsC;YACzCpB,aAAaM,IAAI,CAACC,OAAO,CAACc,qBAAqB,CAAC;gBAC9CC,MAAM;oBAAEC,MAAM;gBAAK;gBACnBC,OAAO,IAAIC,MAAM;YACnB;YAEA,MAAMC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;gBACX;YACF;YAEA,MAAMC,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKE,KAAK,EAAEc,IAAI,CAAC;QAC1B;QAEAlB,KAAK,wCAAwC;YAC3C,MAAMmB,WAAW;gBAAEC,IAAI;gBAAYC,OAAO;YAAmB;YAE7DzC,aAAaM,IAAI,CAACC,OAAO,CAACc,qBAAqB,CAAC;gBAC9CC,MAAM;oBAAEC,MAAMgB;gBAAS;gBACvBf,OAAO;YACT;YAEA,0BAA0B;YAC1BxB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,iCAAiC;oBAC7C,OAAO;wBACLlC,QAAQ,IAAO,CAAA;gCACbC,IAAI,IAAO,CAAA;wCACTC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;gDAC5BvB,MAAM;oDAAEwB,mBAAmB;oDAAeC,kBAAkB;gDAAE;gDAC9DvB,OAAO;4CACT;oCACF,CAAA;4BACF,CAAA;oBACF;gBACF;gBACA,IAAImB,UAAU,YAAY;oBACxB,OAAO;wBACLlC,QAAQ,IAAO,CAAA;gCACbC,IAAI,IAAO,CAAA;wCACTC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;gDAC5BvB,MAAM;oDAAE0B,YAAY;oDAAQC,qBAAqB;gDAAa;gDAC9DzB,OAAO;4CACT;oCACF,CAAA;4BACF,CAAA;oBACF;gBACF;gBACA,OAAO;oBACLf,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;oBACxDT,QAAQ,IAAM6B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D;YACF;YAEA,wBAAwB;YACxB,MAAM,EAAEtB,aAAa,EAAE,GAAGgD,QAAQ;YAClChD,cAAcC,gBAAgB,CAACkB,qBAAqB,CAAC;gBACnDmB,IAAI;gBACJW,MAAM;gBACNC,SAAS;gBACTC,WAAW,IAAIC;gBACfC,UAAU;gBACVC,iBAAiB;oBACfC,QAAQ;oBACRC,OAAO;oBACPC,WAAW;wBAAC;qBAAkB;oBAC9BC,YAAY;gBACd;gBACAC,eAAe;oBACbC,SAAS;oBACTC,WAAW;oBACXC,MAAM;oBACNC,WAAW;oBACXC,UAAU;gBACZ;gBACAC,aAAa,EAAE;YACjB;YAEA,yBAAyB;YACzB,MAAM,EAAE/D,aAAa,EAAE,GAAG8C,QAAQ;YAClC9C,cAAcC,aAAa,CAAC+D,mBAAmB,CAAC;gBAC9CN,SAAS;gBACTC,WAAW;gBACXC,MAAM;gBACNC,WAAW;gBACXC,UAAU;YACZ;YAEA,MAAMxC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;oBACTuB,UAAU;gBACZ;YACF;YAEA,MAAMtB,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKW,QAAQ,EAAEoC,WAAW;YACjCjC,OAAOd,KAAKW,QAAQ,CAACmB,OAAO,EAAEd,IAAI,CAAC;YACnCF,OAAOd,KAAKgD,oBAAoB,EAAED,WAAW;YAC7CjC,OAAOd,KAAKiD,gBAAgB,EAAEF,WAAW;QAC3C;IACF;IAEApD,SAAS,6CAA6C;QACpDC,WAAW;YACTlB,aAAaM,IAAI,CAACC,OAAO,CAACc,qBAAqB,CAAC;gBAC9CC,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;QACF;QAEAJ,KAAK,gCAAgC;YACnC,MAAMM,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;gBACX;YACF;YAEA,MAAMC,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKE,KAAK,EAAEc,IAAI,CAAC;QAC1B;QAEAlB,KAAK,0CAA0C;YAC7C,MAAMM,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;gBACX;YACF;YAEA,MAAMC,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKE,KAAK,EAAEc,IAAI,CAAC;QAC1B;QAEAlB,KAAK,2CAA2C;YAC9C,qCAAqC;YACrC,MAAMoD,aAAa;gBACjBxE,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC,QAAmB,CAAA;wBACvDlC,QAAQ,IAAO,CAAA;gCAAEC,IAAI,IAAO,CAAA;wCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;gDAAEvB,MAAM;4CAAK;oCAAG,CAAA;4BAAG,CAAA;wBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;gCAAEvB,MAAM;gCAAME,OAAO;4BAAK;wBACxDT,QAAQ,IAAM6B,QAAQC,OAAO,CAAC;gCAAEvB,MAAM;gCAAME,OAAO;4BAAK;oBAC1D,CAAA;gBAEA,MAAM,EAAEtB,aAAa,EAAEE,aAAa,EAAE,GAAG8C,QAAQ;gBACjDhD,cAAcC,gBAAgB,CAACsE,iBAAiB,CAAC;oBAC/CjC,IAAI;oBACJY,SAAS;oBACTG,UAAU;oBACVC,iBAAiB;wBAAEI,YAAY;oBAAI;oBACnCC,eAAe;wBAAEC,SAAS;oBAAI;gBAChC;gBACA1D,cAAcC,aAAa,CAACqE,eAAe,CAAC;oBAAEZ,SAAS;gBAAI;YAC7D;YAEAU;YAEA,MAAM9C,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;oBACTuB,UAAU;gBACZ;YACF;YAEA,MAAMtB,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5BU,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;QAC/B;IACF;IAEArB,SAAS,wDAAwD;QAC/DC,WAAW;YACTlB,aAAaM,IAAI,CAACC,OAAO,CAACc,qBAAqB,CAAC;gBAC9CC,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;QACF;QAEAJ,KAAK,wDAAwD;YAC3D,wBAAwB;YACxBpB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,iCAAiC;oBAC7C,OAAO;wBACLlC,QAAQ,IAAO,CAAA;gCACbC,IAAI,IAAO,CAAA;wCACTC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;gDAC5BvB,MAAM;oDACJwB,mBAAmB;oDACnBC,kBAAkB;oDAClB4B,gBAAgB;oDAChBC,kBAAkB;gDACpB;4CACF;oCACF,CAAA;4BACF,CAAA;oBACF;gBACF;gBACA,OAAO;oBACLnE,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D;YACF;YAEA,MAAM,EAAEtB,aAAa,EAAEE,aAAa,EAAE,GAAG8C,QAAQ;YAEjD,kDAAkD;YAClD9C,cAAcC,aAAa,CAAC+D,mBAAmB,CAAC;gBAC9CN,SAAS;gBACTC,WAAW;gBACXC,MAAM;gBACNC,WAAW;gBACXC,UAAU;YACZ;YAEAhE,cAAcC,gBAAgB,CAACkB,qBAAqB,CAAC;gBACnDmB,IAAI;gBACJY,SAAS;gBACTG,UAAU;gBACVC,iBAAiB;oBACfC,QAAQ;oBACRC,OAAO;oBACPE,YAAY;gBACd;gBACAC,eAAe;oBACbC,SAAS;oBACTI,UAAU;gBACZ;YACF;YAEA,MAAMxC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;oBACTuB,UAAU;oBACVsB,kBAAkB;wBAChB/B,mBAAmB;wBACnBgC,mBAAmB;oBACrB;gBACF;YACF;YAEA,MAAM7C,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKgD,oBAAoB,CAACS,gBAAgB,EAAEzC,IAAI,CAAC;YACxDF,OAAOd,KAAKgD,oBAAoB,CAACU,0BAA0B,EAAE1C,IAAI,CAAC;QACpE;QAEAlB,KAAK,8CAA8C;YACjD,+BAA+B;YAC/BpB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,UAAU;oBACtB,OAAO;wBACLlC,QAAQ,IAAO,CAAA;gCACbwE,OAAO,IAAO,CAAA;wCACZvE,IAAI,IAAO,CAAA;gDACTwE,KAAK,IAAO,CAAA;wDACVrE,OAAO,IAAM+B,QAAQC,OAAO,CAAC;gEAC3BvB,MAAM;oEACJ;wEACEkB,IAAI;wEACJ2C,OAAO;wEACPC,MAAM;oEACR;iEACD;4DACH;oDACF,CAAA;4CACF,CAAA;oCACF,CAAA;4BACF,CAAA;oBACF;gBACF;gBACA,OAAO;oBACL3E,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D;YACF;YAEA,MAAM,EAAEtB,aAAa,EAAEE,aAAa,EAAE,GAAG8C,QAAQ;YAEjD9C,cAAcC,aAAa,CAACqE,eAAe,CAAC;gBAAEZ,SAAS;YAAI;YAC3D5D,cAAcC,gBAAgB,CAACsE,iBAAiB,CAAC;gBAC/CjC,IAAI;gBACJY,SAAS;gBACTI,iBAAiB;oBAAEE,OAAO;gBAAU;YACtC;YAEA,MAAMhC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;oBACTuB,UAAU;gBACZ;YACF;YAEA,MAAMtB,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKgD,oBAAoB,CAACe,eAAe,EAAEhB,WAAW;QAC/D;IACF;IAEApD,SAAS,iDAAiD;QACxDG,KAAK,0CAA0C;YAC7CpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEA,MAAM8D,aAAa1F,KAAKG,EAAE,GAAG0E,iBAAiB,CAAC;gBAAEnD,MAAM;gBAAME,OAAO;YAAK;YAEzExB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,gCAAgC;oBAC5C,OAAO;wBAAE7B,QAAQwE;oBAAW;gBAC9B;gBACA,OAAO;oBACL7E,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D;YACF;YAEA,MAAM,EAAEtB,aAAa,EAAEE,aAAa,EAAE,GAAG8C,QAAQ;YAEjD9C,cAAcC,aAAa,CAACqE,eAAe,CAAC;gBAAEZ,SAAS;YAAI;YAC3D5D,cAAcC,gBAAgB,CAACsE,iBAAiB,CAAC;gBAC/CjC,IAAI;gBACJY,SAAS;gBACTI,iBAAiB;oBAAEE,OAAO;gBAAU;YACtC;YAEA,MAAMhC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;oBACTuB,UAAU;gBACZ;YACF;YAEA,MAAMtB,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAE5BU,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOkD,YAAYC,oBAAoB,CACrCnD,OAAOoD,gBAAgB,CAAC;gBACtBC,SAAS;gBACTC,YAAY;gBACZC,kBAAkB;YACpB;QAEJ;QAEAvE,KAAK,sCAAsC;YACzCpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEA,MAAMoE,UAAUhG,KAAKG,EAAE,GAAG0E,iBAAiB,CAAC;gBAAEnD,MAAM;gBAAME,OAAO;YAAK;YACtExB,aAAagB,GAAG,GAAG4E;YAEnB5F,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,IAAO,CAAA;oBAC1CjC,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D,CAAA;YAEA,MAAM,EAAEtB,aAAa,EAAEE,aAAa,EAAE,GAAG8C,QAAQ;YAEjD9C,cAAcC,aAAa,CAACqE,eAAe,CAAC;gBAC1CZ,SAAS;gBACTG,WAAW;YACb;YACA/D,cAAcC,gBAAgB,CAACsE,iBAAiB,CAAC;gBAC/CjC,IAAI;gBACJY,SAAS;YACX;YAEA,MAAM1B,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;oBACTuB,UAAU;gBACZ;YACF;YAEA,MAAMrB,IAAAA,WAAI,EAACR;YAEXU,OAAOwD,SAASL,oBAAoB,CAClC,0BACAnD,OAAOoD,gBAAgB,CAAC;gBACtBK,WAAW;gBACXC,qBAAqB;YACvB;QAEJ;IACF;IAEA7E,SAAS,gDAAgD;QACvDG,KAAK,oDAAoD;YACvDpB,aAAaM,IAAI,CAACC,OAAO,CAACc,qBAAqB,CAAC;gBAC9CC,MAAM;oBAAEC,MAAM;gBAAK;gBACnBC,OAAO,IAAIC,MAAM;YACnB;YAEA,MAAMC,UAAU,IAAIC,mBAAW,CAAC;YAChC,MAAMM,WAAW,MAAM8D,IAAAA,UAAG,EAACrE;YAC3B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKE,KAAK,EAAEc,IAAI,CAAC;QAC1B;QAEAlB,KAAK,uCAAuC;YAC1CpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEA,MAAME,UAAU,IAAIC,mBAAW,CAAC;YAChC,MAAMM,WAAW,MAAM8D,IAAAA,UAAG,EAACrE;YAC3B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKE,KAAK,EAAEc,IAAI,CAAC;QAC1B;QAEAlB,KAAK,sCAAsC;YACzCpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEA,MAAMwE,oBAAoB;gBACxB;oBACExD,IAAI;oBACJkD,YAAY;oBACZO,kBAAkB;oBAClBC,yBAAyB;oBACzBC,YAAY;gBACd;aACD;YAEDnG,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,gCAAgC;oBAC5C,OAAO;wBACLlC,QAAQ,IAAO,CAAA;gCACbC,IAAI,IAAO,CAAA;wCACTA,IAAI,IAAO,CAAA;gDACTE,OAAO,IAAO,CAAA;wDACZC,OAAO,IAAM+B,QAAQC,OAAO,CAAC;gEAC3BvB,MAAM0E;gEACNxE,OAAO;4DACT;oDACF,CAAA;4CACF,CAAA;oCACF,CAAA;4BACF,CAAA;oBACF;gBACF;gBACA,IAAImB,UAAU,gCAAgC;oBAC5C,OAAO;wBACLlC,QAAQ,IAAO,CAAA;gCACbC,IAAI,IAAO,CAAA;wCACTA,IAAI,IAAO,CAAA;gDACTC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;wDAC5BvB,MAAM;4DAAE8E,oBAAoB;wDAAE;wDAC9B5E,OAAO;oDACT;4CACF,CAAA;oCACF,CAAA;4BACF,CAAA;oBACF;gBACF;YACF;YAEA,MAAME,UAAU,IAAIC,mBAAW,CAAC;YAChC,MAAMM,WAAW,MAAM8D,IAAAA,UAAG,EAACrE;YAC3B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAK+E,aAAa,EAAEC,OAAO,CAACN;YACnC5D,OAAOd,KAAKiF,kBAAkB,EAAEjE,IAAI,CAAC;QACvC;IACF;IAEArB,SAAS,kBAAkB;QACzBG,KAAK,kDAAkD;YACrDpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEAxB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,IAAO,CAAA;oBAC1CjC,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D,CAAA;YAEA,MAAM,EAAEtB,aAAa,EAAE,GAAGgD,QAAQ;YAClChD,cAAcC,gBAAgB,CAACqG,iBAAiB,CAAC,IAAI/E,MAAM;YAE3D,MAAMC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;gBACX;YACF;YAEA,MAAMC,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKE,KAAK,EAAEc,IAAI,CAAC;QAC1B;QAEAlB,KAAK,4CAA4C;YAC/CpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEAxB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,IAAO,CAAA;oBAC1CjC,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQ6D,MAAM,CAAC,IAAIhF,MAAM;gCAAmB,CAAA;wBAAG,CAAA;gBAC7F,CAAA;YAEA,MAAMC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;gBACX;YACF;YAEA,MAAMC,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKE,KAAK,EAAEc,IAAI,CAAC;QAC1B;QAEAlB,KAAK,uCAAuC;YAC1CpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEA,MAAM8D,aAAa1F,KAAKG,EAAE,GAAG0E,iBAAiB,CAAC;gBAAEnD,MAAM;gBAAME,OAAO;YAAK;YAEzExB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,oBAAoB;oBAChC,OAAO;wBAAE7B,QAAQwE;oBAAW;gBAC9B;gBACA,OAAO;oBACL7E,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQ6D,MAAM,CAAC,IAAIhF,MAAM;gCAAa,CAAA;wBAAG,CAAA;gBACvF;YACF;YAEA,MAAMC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;gBACX;YACF;YAEA,MAAME,IAAAA,WAAI,EAACR;YAEXU,OAAOkD,YAAYC,oBAAoB,CACrCnD,OAAOoD,gBAAgB,CAAC;gBACtBkB,cAAc;gBACdC,gBAAgB;gBAChBC,SAAS;gBACTC,eAAezE,OAAO0E,GAAG,CAACC;YAC5B;QAEJ;IACF;IAEA9F,SAAS,8BAA8B;QACrCG,KAAK,iCAAiC;YACpCpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEA,MAAM8D,aAAa1F,KAAKG,EAAE,GAAG0E,iBAAiB,CAAC;gBAAEnD,MAAM;gBAAME,OAAO;YAAK;YAEzExB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,oBAAoB;oBAChC,OAAO;wBAAE7B,QAAQwE;oBAAW;gBAC9B;gBACA,OAAO;oBACL7E,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D;YACF;YAEA,MAAM,EAAEtB,aAAa,EAAEE,aAAa,EAAE,GAAG8C,QAAQ;YAEjD,wCAAwC;YACxChD,cAAcC,gBAAgB,CAACuC,kBAAkB,CAC/C,IAAM,IAAIE,QAAQC,CAAAA,UAChBmE,WAAW,IAAMnE,QAAQ;4BACvBL,IAAI;4BACJY,SAAS;wBACX,IAAI;YAGRhD,cAAcC,aAAa,CAACqE,eAAe,CAAC;gBAAEZ,SAAS;YAAI;YAE3D,MAAMpC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;gBACX;YACF;YAEA,MAAME,IAAAA,WAAI,EAACR;YAEXU,OAAOkD,YAAYC,oBAAoB,CACrCnD,OAAOoD,gBAAgB,CAAC;gBACtBkB,cAAc;gBACdO,YAAY7E,OAAO0E,GAAG,CAACI;gBACvBN,SAAS;YACX;QAEJ;QAEAxF,KAAK,oCAAoC;YACvCpB,aAAaM,IAAI,CAACC,OAAO,CAACkE,iBAAiB,CAAC;gBAC1CnD,MAAM;oBAAEC,MAAM;wBAAEiB,IAAI;oBAAW;gBAAE;gBACjChB,OAAO;YACT;YAEAxB,aAAaQ,IAAI,CAACkC,kBAAkB,CAAC,CAACC;gBACpC,IAAIA,UAAU,gCAAgC;oBAC5C,OAAO;wBACLlC,QAAQ,IAAO,CAAA;gCACbC,IAAI,IAAO,CAAA;wCACTA,IAAI,IAAO,CAAA;gDACTC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;wDAC5BvB,MAAM;4DACJ8E,oBAAoB;4DACpBe,kCAAkC;wDACpC;oDACF;4CACF,CAAA;oCACF,CAAA;4BACF,CAAA;oBACF;gBACF;gBACA,OAAO;oBACL1G,QAAQ,IAAO,CAAA;4BAAEC,IAAI,IAAO,CAAA;oCAAEC,QAAQ,IAAMiC,QAAQC,OAAO,CAAC;4CAAEvB,MAAM;wCAAK;gCAAG,CAAA;wBAAG,CAAA;oBAC/ER,QAAQ,IAAM8B,QAAQC,OAAO,CAAC;4BAAEvB,MAAM;4BAAME,OAAO;wBAAK;gBAC1D;YACF;YAEA,MAAM,EAAEtB,aAAa,EAAEE,aAAa,EAAE,GAAG8C,QAAQ;YAEjDhD,cAAcC,gBAAgB,CAACsE,iBAAiB,CAAC;gBAC/CjC,IAAI;gBACJY,SAAS;YACX;YACAhD,cAAcC,aAAa,CAACqE,eAAe,CAAC;gBAAEZ,SAAS;YAAI;YAE3D,MAAMpC,UAAU,IAAIC,mBAAW,CAAC,0CAA0C;gBACxEC,QAAQ;gBACRC,MAAMC,KAAKC,SAAS,CAAC;oBACnBC,SAAS;oBACToF,YAAY;gBACd;YACF;YAEA,MAAMnF,WAAW,MAAMC,IAAAA,WAAI,EAACR;YAC5B,MAAMJ,OAAO,MAAMW,SAASE,IAAI;YAEhCC,OAAOH,SAASI,MAAM,EAAEC,IAAI,CAAC;YAC7BF,OAAOd,KAAKiD,gBAAgB,EAAE+B,OAAO,CAAC;gBACpCc,YAAY;gBACZhB,oBAAoB;gBACpBiB,wBAAwB;YAC1B;QACF;IACF;AACF"}