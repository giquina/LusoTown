05ac56773d5c35ab1fbca73f9b7b9930
/**
 * Business Directory Carousel Tests
 * 
 * Comprehensive tests for business directory carousel implementation
 * focusing on Portuguese cultural authenticity and mobile-first design
 */ "use strict";
// Mock Next.js Image component
jest.mock("next/image", ()=>{
    return function Image({ src, alt, ...props }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
            src: src,
            alt: alt,
            ...props
        });
    };
});
// Mock context and hooks
jest.mock("@/context/LanguageContext", ()=>({
        useLanguage: ()=>mockUseLanguage
    }));
jest.mock("@/hooks/useMediaQuery", ()=>({
        useMediaQuery: ()=>mockUseMediaQuery()
    }));
jest.mock("@/hooks/useGeolocation", ()=>({
        useGeolocation: ()=>({
                coordinates: null,
                isLoading: false,
                error: null
            })
    }));
// Mock business directory service
jest.mock("@/lib/businessDirectory", ()=>({
        portugueseBusinessService: {
            searchBusinesses: jest.fn().mockResolvedValue({
                businesses: [],
                featuredBusinesses: [],
                total: 0
            })
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
require("@testing-library/jest-dom");
const _businessdirectorycarousels = require("../src/config/business-directory-carousels");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the useLanguage hook
const mockUseLanguage = {
    language: "en",
    t: (key, defaultValue)=>defaultValue || key
};
// Mock useMediaQuery hook
const mockUseMediaQuery = jest.fn();
describe("Business Directory Configuration", ()=>{
    beforeEach(()=>{
        mockUseMediaQuery.mockReturnValue(false) // Desktop by default
        ;
    });
    describe("Featured Portuguese Businesses", ()=>{
        it("should include businesses from all lusophone countries", ()=>{
            const countries = [
                ...new Set(_businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.map((b)=>b.ownerCountry))
            ];
            expect(countries).toContain("portugal");
            expect(countries).toContain("brazil");
            expect(countries).toContain("angola");
            expect(countries).toContain("cape_verde");
            // Should have diverse representation
            expect(countries.length).toBeGreaterThanOrEqual(3);
        });
        it("should have geographic diversity across UK cities", ()=>{
            const cities = [
                ...new Set(_businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.map((b)=>b.location.city))
            ];
            expect(cities).toContain("London");
            expect(cities).toContain("Manchester");
            expect(cities).toContain("Birmingham");
            expect(cities).toContain("Edinburgh");
            // Should serve multiple UK cities
            expect(cities.length).toBeGreaterThanOrEqual(4);
        });
        it("should have bilingual titles and descriptions", ()=>{
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                expect(business.title).toHaveProperty("en");
                expect(business.title).toHaveProperty("pt");
                expect(business.description).toHaveProperty("en");
                expect(business.description).toHaveProperty("pt");
                // Both languages should have content
                expect(business.title.en).toBeTruthy();
                expect(business.title.pt).toBeTruthy();
                expect(business.description.en).toBeTruthy();
                expect(business.description.pt).toBeTruthy();
            });
        });
        it("should include cultural connections", ()=>{
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                expect(business.culturalConnection).toBeTruthy();
                expect(typeof business.culturalConnection).toBe("string");
                expect(business.culturalConnection.length).toBeGreaterThan(20);
            });
        });
        it("should have proper ratings and review counts", ()=>{
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                expect(business.rating).toBeGreaterThanOrEqual(0);
                expect(business.rating).toBeLessThanOrEqual(5);
                expect(business.reviewCount).toBeGreaterThanOrEqual(0);
                expect(typeof business.reviewCount).toBe("number");
            });
        });
        it("should include authentic Portuguese specialties", ()=>{
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                expect(Array.isArray(business.specialties)).toBe(true);
                expect(business.specialties.length).toBeGreaterThan(0);
                // Specialties should be culturally relevant
                business.specialties.forEach((specialty)=>{
                    expect(typeof specialty).toBe("string");
                    expect(specialty.length).toBeGreaterThan(2);
                });
            });
        });
    });
    describe("Business Directory Categories", ()=>{
        it("should have comprehensive category coverage", ()=>{
            expect(_businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.length).toBeGreaterThanOrEqual(5);
            const categoryIds = _businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.map((cat)=>cat.id);
            expect(categoryIds).toContain("restaurants");
            expect(categoryIds).toContain("cultural_services");
            expect(categoryIds).toContain("beauty_wellness");
            expect(categoryIds).toContain("professional_services");
            expect(categoryIds).toContain("retail");
        });
        it("should have bilingual category names and descriptions", ()=>{
            _businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.forEach((category)=>{
                expect(category.name).toHaveProperty("en");
                expect(category.name).toHaveProperty("pt");
                expect(category.description).toHaveProperty("en");
                expect(category.description).toHaveProperty("pt");
                // Content validation
                expect(category.name.en).toBeTruthy();
                expect(category.name.pt).toBeTruthy();
                expect(category.description.en).toBeTruthy();
                expect(category.description.pt).toBeTruthy();
            });
        });
        it("should include cultural emojis", ()=>{
            _businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.forEach((category)=>{
                expect(category.emoji).toBeTruthy();
                expect(typeof category.emoji).toBe("string");
                expect(category.emoji.length).toBeGreaterThanOrEqual(1);
            });
        });
        it("should have realistic business counts and ratings", ()=>{
            _businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.forEach((category)=>{
                expect(category.totalBusinesses).toBeGreaterThan(0);
                expect(category.averageRating).toBeGreaterThanOrEqual(0);
                expect(category.averageRating).toBeLessThanOrEqual(5);
                expect(Array.isArray(category.countries)).toBe(true);
                expect(category.countries.length).toBeGreaterThan(0);
            });
        });
    });
    describe("PALOP Business Showcase", ()=>{
        it("should feature businesses from all PALOP countries", ()=>{
            const palopCountries = [
                ...new Set(_businessdirectorycarousels.PALOP_BUSINESS_SHOWCASE.map((b)=>b.ownerCountry))
            ];
            expect(palopCountries).toContain("angola");
            expect(palopCountries).toContain("cape_verde");
            expect(palopCountries).toContain("mozambique");
            // Should represent multiple PALOP countries
            expect(palopCountries.length).toBeGreaterThanOrEqual(3);
        });
        it("should have proper PALOP flag emojis", ()=>{
            const validPalopFlags = [
                "\uD83C\uDDE6\uD83C\uDDF4",
                "\uD83C\uDDE8\uD83C\uDDFB",
                "\uD83C\uDDEC\uD83C\uDDFC",
                "\uD83C\uDDF2\uD83C\uDDFF",
                "\uD83C\uDDF8\uD83C\uDDF9"
            ];
            _businessdirectorycarousels.PALOP_BUSINESS_SHOWCASE.forEach((business)=>{
                expect(validPalopFlags).toContain(business.flagEmoji);
            });
        });
        it("should have cultural connections for all PALOP businesses", ()=>{
            _businessdirectorycarousels.PALOP_BUSINESS_SHOWCASE.forEach((business)=>{
                expect(business.culturalConnection).toBeTruthy();
                expect(typeof business.culturalConnection).toBe("string");
                // Should mention cultural heritage or traditions
                const culturalKeywords = [
                    "cultural",
                    "tradition",
                    "heritage",
                    "authentic",
                    "community"
                ];
                const hasCulturalContent = culturalKeywords.some((keyword)=>business.culturalConnection.toLowerCase().includes(keyword));
                expect(hasCulturalContent).toBe(true);
            });
        });
    });
    describe("Geographic Distribution", ()=>{
        it("should cover major UK cities", ()=>{
            const cities = Object.keys(_businessdirectorycarousels.BUSINESS_GEOGRAPHIC_DISTRIBUTION);
            expect(cities).toContain("London");
            expect(cities).toContain("Manchester");
            expect(cities).toContain("Birmingham");
            expect(cities).toContain("Edinburgh");
            expect(cities).toContain("Glasgow");
        });
        it("should have realistic business counts per city", ()=>{
            Object.entries(_businessdirectorycarousels.BUSINESS_GEOGRAPHIC_DISTRIBUTION).forEach(([city, data])=>{
                expect(data.total).toBeGreaterThan(0);
                expect(data.total).toBeLessThan(200) // Realistic upper limit
                ;
                // Total should match sum of countries
                const countrySum = Object.values(data.byCountry).reduce((sum, count)=>sum + count, 0);
                expect(countrySum).toBe(data.total);
                // Should have multiple regions for major cities
                expect(Array.isArray(data.regions)).toBe(true);
                if (city === "London") {
                    expect(data.regions.length).toBeGreaterThanOrEqual(5);
                }
            });
        });
        it("should show Portuguese and Brazilian dominance with PALOP representation", ()=>{
            Object.entries(_businessdirectorycarousels.BUSINESS_GEOGRAPHIC_DISTRIBUTION).forEach(([city, data])=>{
                // Portugal should be well represented
                expect(data.byCountry.portugal).toBeGreaterThan(0);
                // Brazil should have good representation
                expect(data.byCountry.brazil).toBeGreaterThan(0);
                // Should have some PALOP representation
                const palopCount = ("angola" in data.byCountry ? data.byCountry.angola : 0) + ("cape_verde" in data.byCountry ? data.byCountry.cape_verde : 0) + ("mozambique" in data.byCountry ? data.byCountry.mozambique : 0);
                if (city === "London") {
                    expect(palopCount).toBeGreaterThan(0);
                }
            });
        });
    });
    describe("Utility Functions", ()=>{
        describe("getFeaturedBusinessesByCategory", ()=>{
            it("should return businesses for valid categories", ()=>{
                const restaurants = (0, _businessdirectorycarousels.getFeaturedBusinessesByCategory)("restaurant");
                const culturalServices = (0, _businessdirectorycarousels.getFeaturedBusinessesByCategory)("cultural_services");
                expect(Array.isArray(restaurants)).toBe(true);
                expect(Array.isArray(culturalServices)).toBe(true);
                if (restaurants.length > 0) {
                    restaurants.forEach((business)=>{
                        expect(business.category).toBe("restaurant");
                        expect(business.isFeatured).toBe(true);
                    });
                }
            });
        });
        describe("getBusinessesByCity", ()=>{
            it("should filter businesses by city correctly", ()=>{
                const londonBusinesses = (0, _businessdirectorycarousels.getBusinessesByCity)("London");
                const manchesterBusinesses = (0, _businessdirectorycarousels.getBusinessesByCity)("Manchester");
                expect(Array.isArray(londonBusinesses)).toBe(true);
                expect(Array.isArray(manchesterBusinesses)).toBe(true);
                londonBusinesses.forEach((business)=>{
                    expect(business.location.city).toBe("London");
                });
                manchesterBusinesses.forEach((business)=>{
                    expect(business.location.city).toBe("Manchester");
                });
            });
        });
        describe("getPremiumBusinesses", ()=>{
            it("should return only premium businesses sorted by priority", ()=>{
                const premiumBusinesses = (0, _businessdirectorycarousels.getPremiumBusinesses)();
                expect(Array.isArray(premiumBusinesses)).toBe(true);
                premiumBusinesses.forEach((business)=>{
                    expect(business.isPremium).toBe(true);
                });
                // Should be sorted by priority (descending)
                for(let i = 1; i < premiumBusinesses.length; i++){
                    expect(premiumBusinesses[i - 1]?.priority || 0).toBeGreaterThanOrEqual(premiumBusinesses[i]?.priority || 0);
                }
            });
        });
        describe("getBusinessDirectoryStats", ()=>{
            it("should return comprehensive statistics", ()=>{
                const stats = (0, _businessdirectorycarousels.getBusinessDirectoryStats)();
                expect(typeof stats.totalBusinesses).toBe("number");
                expect(typeof stats.totalFeatured).toBe("number");
                expect(typeof stats.totalPremium).toBe("number");
                expect(typeof stats.totalVerified).toBe("number");
                expect(typeof stats.averageRating).toBe("number");
                expect(Array.isArray(stats.countriesRepresented)).toBe(true);
                expect(Array.isArray(stats.citiesServed)).toBe(true);
                expect(typeof stats.totalCategories).toBe("number");
                // Validation
                expect(stats.totalBusinesses).toBeGreaterThan(0);
                expect(stats.averageRating).toBeGreaterThanOrEqual(0);
                expect(stats.averageRating).toBeLessThanOrEqual(5);
                expect(stats.countriesRepresented).toContain("Portugal");
                expect(stats.countriesRepresented).toContain("Brazil");
                expect(stats.citiesServed).toContain("London");
                expect(stats.totalCategories).toBeGreaterThanOrEqual(5);
            });
        });
    });
    describe("Cultural Authenticity", ()=>{
        it("should maintain Portuguese cultural authenticity in all content", ()=>{
            // Check featured businesses for cultural authenticity
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                const culturalKeywords = [
                    "portuguese",
                    "brazilian",
                    "angolan",
                    "authentic",
                    "traditional",
                    "cultural",
                    "heritage"
                ];
                const hasPortugueseCulture = culturalKeywords.some((keyword)=>business.description.en.toLowerCase().includes(keyword) || business.culturalConnection.toLowerCase().includes(keyword));
                expect(hasPortugueseCulture).toBe(true);
            });
        });
        it("should use proper Portuguese terminology", ()=>{
            // Check for proper Portuguese terms in Portuguese descriptions
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                if (business.ownerCountry === "portugal") {
                    const portugueseTerms = [
                        "portugu\xeas",
                        "portuguesa",
                        "aut\xeantico",
                        "tradicional",
                        "cultural"
                    ];
                    const hasPortugueseTerms = portugueseTerms.some((term)=>business.description.pt.toLowerCase().includes(term));
                    // At least some Portuguese businesses should use proper terminology
                    if (business.category === "restaurant" || business.category === "cultural_services") {
                        expect(hasPortugueseTerms).toBe(true);
                    }
                }
            });
        });
        it("should include proper flag emojis for each country", ()=>{
            const flagMapping = {
                "portugal": "\uD83C\uDDF5\uD83C\uDDF9",
                "brazil": "\uD83C\uDDE7\uD83C\uDDF7",
                "angola": "\uD83C\uDDE6\uD83C\uDDF4",
                "cape_verde": "\uD83C\uDDE8\uD83C\uDDFB",
                "mozambique": "\uD83C\uDDF2\uD83C\uDDFF",
                "guinea_bissau": "\uD83C\uDDEC\uD83C\uDDFC",
                "sao_tome_principe": "\uD83C\uDDF8\uD83C\uDDF9"
            };
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                const expectedFlag = flagMapping[business.ownerCountry];
                if (expectedFlag) {
                    expect(business.flagEmoji).toBe(expectedFlag);
                }
            });
        });
    });
    describe("Mobile-First Design Compliance", ()=>{
        it("should have proper mobile breakpoint considerations", ()=>{
            // All carousel configurations should consider mobile
            _businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.forEach((category)=>{
                // Categories should be designed for mobile display
                expect(category.name.en.length).toBeLessThan(25) // Mobile-friendly length
                ;
                expect(category.name.pt.length).toBeLessThan(30) // Portuguese can be longer
                ;
            });
        });
        it("should have appropriate content length for mobile cards", ()=>{
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                // Titles should be mobile-friendly
                expect(business.title.en.length).toBeLessThan(60);
                expect(business.title.pt.length).toBeLessThan(70);
                // Descriptions should be readable on mobile but not too long
                expect(business.description.en.length).toBeGreaterThan(50);
                expect(business.description.en.length).toBeLessThan(200);
            });
        });
        it("should have phone numbers in proper format", ()=>{
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                // UK phone numbers should start with +44
                expect(business.contact.phone).toMatch(/^\+44/);
                // Should have proper formatting
                expect(business.contact.phone).toMatch(/^\+44\s\d{2,3}\s\d{3,4}\s\d{4}$/);
            });
        });
    });
    describe("Performance and Data Quality", ()=>{
        it("should have reasonable data sizes for carousel performance", ()=>{
            // Featured businesses shouldn't be too many for initial load
            expect(_businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.length).toBeLessThan(20);
            // Categories should be manageable
            expect(_businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.length).toBeLessThan(10);
            // PALOP showcase should be focused
            expect(_businessdirectorycarousels.PALOP_BUSINESS_SHOWCASE.length).toBeLessThan(15);
        });
        it("should have consistent data structure across all businesses", ()=>{
            const requiredFields = [
                "id",
                "title",
                "description",
                "image",
                "flagEmoji",
                "category",
                "region",
                "ownerCountry",
                "ownerName",
                "location",
                "contact",
                "services",
                "servicesPortuguese",
                "rating",
                "reviewCount",
                "priceRange",
                "culturalConnection",
                "isVerified",
                "isFeatured",
                "isPremium",
                "establishedYear",
                "specialties",
                "priority"
            ];
            _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.forEach((business)=>{
                requiredFields.forEach((field)=>{
                    expect(business).toHaveProperty(field);
                });
            });
        });
        it("should have proper priority ordering for featured content", ()=>{
            // Premium businesses should have priority 1
            const premiumBusinesses = _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.filter((b)=>b.isPremium);
            premiumBusinesses.forEach((business)=>{
                expect(business.priority).toBe(1);
            });
            // Non-premium should have lower priority
            const nonPremiumBusinesses = _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES.filter((b)=>!b.isPremium);
            nonPremiumBusinesses.forEach((business)=>{
                expect(business.priority).toBeGreaterThan(1);
            });
        });
    });
});
describe("Carousel Integration Requirements", ()=>{
    it("should be compatible with LusophoneCarousel component", ()=>{
        // Verify that business items have required carousel item structure
        const sampleBusiness = _businessdirectorycarousels.FEATURED_PORTUGUESE_BUSINESSES[0];
        expect(sampleBusiness).toHaveProperty("id");
        expect(sampleBusiness?.title).toHaveProperty("en");
        expect(sampleBusiness?.title).toHaveProperty("pt");
        expect(sampleBusiness?.description).toHaveProperty("en");
        expect(sampleBusiness?.description).toHaveProperty("pt");
        expect(sampleBusiness).toHaveProperty("image");
        expect(sampleBusiness).toHaveProperty("flagEmoji");
        expect(sampleBusiness).toHaveProperty("category");
        expect(sampleBusiness).toHaveProperty("priority");
    });
    it("should provide proper carousel configuration options", ()=>{
        // Categories should work with compact carousel config
        expect(_businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.length).toBeGreaterThan(3) // Good for compact display
        ;
        expect(_businessdirectorycarousels.BUSINESS_DIRECTORY_CATEGORIES.length).toBeLessThan(8) // Not too many for carousel
        ;
        // Featured businesses should work with standard carousel config
        const premiumCount = (0, _businessdirectorycarousels.getPremiumBusinesses)().length;
        expect(premiumCount).toBeGreaterThanOrEqual(3) // Minimum for carousel
        ;
        expect(premiumCount).toBeLessThan(12) // Reasonable for auto-advance
        ;
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0x1c29Ub3duL3dlYi1hcHAvX190ZXN0c19fL2J1c2luZXNzLWRpcmVjdG9yeS1jYXJvdXNlbC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJ1c2luZXNzIERpcmVjdG9yeSBDYXJvdXNlbCBUZXN0c1xuICogXG4gKiBDb21wcmVoZW5zaXZlIHRlc3RzIGZvciBidXNpbmVzcyBkaXJlY3RvcnkgY2Fyb3VzZWwgaW1wbGVtZW50YXRpb25cbiAqIGZvY3VzaW5nIG9uIFBvcnR1Z3Vlc2UgY3VsdHVyYWwgYXV0aGVudGljaXR5IGFuZCBtb2JpbGUtZmlyc3QgZGVzaWduXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgeyBhY3QgfSBmcm9tICdyZWFjdC1kb20vdGVzdC11dGlscydcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSdcblxuLy8gTW9jayB0aGUgdXNlTGFuZ3VhZ2UgaG9va1xuY29uc3QgbW9ja1VzZUxhbmd1YWdlID0ge1xuICBsYW5ndWFnZTogJ2VuJyxcbiAgdDogKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBzdHJpbmcpID0+IGRlZmF1bHRWYWx1ZSB8fCBrZXlcbn1cblxuLy8gTW9jayBOZXh0LmpzIEltYWdlIGNvbXBvbmVudFxuamVzdC5tb2NrKCduZXh0L2ltYWdlJywgKCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gSW1hZ2UoeyBzcmMsIGFsdCwgLi4ucHJvcHMgfTogYW55KSB7XG4gICAgcmV0dXJuIDxpbWcgc3JjPXtzcmN9IGFsdD17YWx0fSB7Li4ucHJvcHN9IC8+XG4gIH1cbn0pXG5cbi8vIE1vY2sgdXNlTWVkaWFRdWVyeSBob29rXG5jb25zdCBtb2NrVXNlTWVkaWFRdWVyeSA9IGplc3QuZm4oKVxuXG4vLyBNb2NrIGNvbnRleHQgYW5kIGhvb2tzXG5qZXN0Lm1vY2soJ0AvY29udGV4dC9MYW5ndWFnZUNvbnRleHQnLCAoKSA9PiAoe1xuICB1c2VMYW5ndWFnZTogKCkgPT4gbW9ja1VzZUxhbmd1YWdlXG59KSlcblxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZU1lZGlhUXVlcnknLCAoKSA9PiAoe1xuICB1c2VNZWRpYVF1ZXJ5OiAoKSA9PiBtb2NrVXNlTWVkaWFRdWVyeSgpXG59KSlcblxuamVzdC5tb2NrKCdAL2hvb2tzL3VzZUdlb2xvY2F0aW9uJywgKCkgPT4gKHtcbiAgdXNlR2VvbG9jYXRpb246ICgpID0+ICh7XG4gICAgY29vcmRpbmF0ZXM6IG51bGwsXG4gICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICBlcnJvcjogbnVsbFxuICB9KVxufSkpXG5cbi8vIE1vY2sgYnVzaW5lc3MgZGlyZWN0b3J5IHNlcnZpY2Vcbmplc3QubW9jaygnQC9saWIvYnVzaW5lc3NEaXJlY3RvcnknLCAoKSA9PiAoe1xuICBwb3J0dWd1ZXNlQnVzaW5lc3NTZXJ2aWNlOiB7XG4gICAgc2VhcmNoQnVzaW5lc3NlczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGJ1c2luZXNzZXM6IFtdLFxuICAgICAgZmVhdHVyZWRCdXNpbmVzc2VzOiBbXSxcbiAgICAgIHRvdGFsOiAwXG4gICAgfSlcbiAgfVxufSkpXG5cbi8vIEltcG9ydCBjb25maWd1cmF0aW9uXG5pbXBvcnQge1xuICBGRUFUVVJFRF9QT1JUVUdVRVNFX0JVU0lORVNTRVMsXG4gIEJVU0lORVNTX0RJUkVDVE9SWV9DQVRFR09SSUVTLFxuICBQQUxPUF9CVVNJTkVTU19TSE9XQ0FTRSxcbiAgQlVTSU5FU1NfR0VPR1JBUEhJQ19ESVNUUklCVVRJT04sXG4gIGdldEZlYXR1cmVkQnVzaW5lc3Nlc0J5Q2F0ZWdvcnksXG4gIGdldEJ1c2luZXNzZXNCeUNpdHksXG4gIGdldFByZW1pdW1CdXNpbmVzc2VzLFxuICBnZXRCdXNpbmVzc0RpcmVjdG9yeVN0YXRzXG59IGZyb20gJ0AvY29uZmlnL2J1c2luZXNzLWRpcmVjdG9yeS1jYXJvdXNlbHMnXG5cbmRlc2NyaWJlKCdCdXNpbmVzcyBEaXJlY3RvcnkgQ29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja1VzZU1lZGlhUXVlcnkubW9ja1JldHVyblZhbHVlKGZhbHNlKSAvLyBEZXNrdG9wIGJ5IGRlZmF1bHRcbiAgfSlcblxuICBkZXNjcmliZSgnRmVhdHVyZWQgUG9ydHVndWVzZSBCdXNpbmVzc2VzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5jbHVkZSBidXNpbmVzc2VzIGZyb20gYWxsIGx1c29waG9uZSBjb3VudHJpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb3VudHJpZXMgPSBbLi4ubmV3IFNldChGRUFUVVJFRF9QT1JUVUdVRVNFX0JVU0lORVNTRVMubWFwKGIgPT4gYi5vd25lckNvdW50cnkpKV1cbiAgICAgIFxuICAgICAgZXhwZWN0KGNvdW50cmllcykudG9Db250YWluKCdwb3J0dWdhbCcpXG4gICAgICBleHBlY3QoY291bnRyaWVzKS50b0NvbnRhaW4oJ2JyYXppbCcpXG4gICAgICBleHBlY3QoY291bnRyaWVzKS50b0NvbnRhaW4oJ2FuZ29sYScpXG4gICAgICBleHBlY3QoY291bnRyaWVzKS50b0NvbnRhaW4oJ2NhcGVfdmVyZGUnKVxuICAgICAgXG4gICAgICAvLyBTaG91bGQgaGF2ZSBkaXZlcnNlIHJlcHJlc2VudGF0aW9uXG4gICAgICBleHBlY3QoY291bnRyaWVzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgzKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgZ2VvZ3JhcGhpYyBkaXZlcnNpdHkgYWNyb3NzIFVLIGNpdGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNpdGllcyA9IFsuLi5uZXcgU2V0KEZFQVRVUkVEX1BPUlRVR1VFU0VfQlVTSU5FU1NFUy5tYXAoYiA9PiBiLmxvY2F0aW9uLmNpdHkpKV1cbiAgICAgIFxuICAgICAgZXhwZWN0KGNpdGllcykudG9Db250YWluKCdMb25kb24nKVxuICAgICAgZXhwZWN0KGNpdGllcykudG9Db250YWluKCdNYW5jaGVzdGVyJylcbiAgICAgIGV4cGVjdChjaXRpZXMpLnRvQ29udGFpbignQmlybWluZ2hhbScpXG4gICAgICBleHBlY3QoY2l0aWVzKS50b0NvbnRhaW4oJ0VkaW5idXJnaCcpXG4gICAgICBcbiAgICAgIC8vIFNob3VsZCBzZXJ2ZSBtdWx0aXBsZSBVSyBjaXRpZXNcbiAgICAgIGV4cGVjdChjaXRpZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDQpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBiaWxpbmd1YWwgdGl0bGVzIGFuZCBkZXNjcmlwdGlvbnMnLCAoKSA9PiB7XG4gICAgICBGRUFUVVJFRF9QT1JUVUdVRVNFX0JVU0lORVNTRVMuZm9yRWFjaChidXNpbmVzcyA9PiB7XG4gICAgICAgIGV4cGVjdChidXNpbmVzcy50aXRsZSkudG9IYXZlUHJvcGVydHkoJ2VuJylcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLnRpdGxlKS50b0hhdmVQcm9wZXJ0eSgncHQnKVxuICAgICAgICBleHBlY3QoYnVzaW5lc3MuZGVzY3JpcHRpb24pLnRvSGF2ZVByb3BlcnR5KCdlbicpXG4gICAgICAgIGV4cGVjdChidXNpbmVzcy5kZXNjcmlwdGlvbikudG9IYXZlUHJvcGVydHkoJ3B0JylcbiAgICAgICAgXG4gICAgICAgIC8vIEJvdGggbGFuZ3VhZ2VzIHNob3VsZCBoYXZlIGNvbnRlbnRcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLnRpdGxlLmVuKS50b0JlVHJ1dGh5KClcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLnRpdGxlLnB0KS50b0JlVHJ1dGh5KClcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLmRlc2NyaXB0aW9uLmVuKS50b0JlVHJ1dGh5KClcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLmRlc2NyaXB0aW9uLnB0KS50b0JlVHJ1dGh5KClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgaW5jbHVkZSBjdWx0dXJhbCBjb25uZWN0aW9ucycsICgpID0+IHtcbiAgICAgIEZFQVRVUkVEX1BPUlRVR1VFU0VfQlVTSU5FU1NFUy5mb3JFYWNoKGJ1c2luZXNzID0+IHtcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLmN1bHR1cmFsQ29ubmVjdGlvbikudG9CZVRydXRoeSgpXG4gICAgICAgIGV4cGVjdCh0eXBlb2YgYnVzaW5lc3MuY3VsdHVyYWxDb25uZWN0aW9uKS50b0JlKCdzdHJpbmcnKVxuICAgICAgICBleHBlY3QoYnVzaW5lc3MuY3VsdHVyYWxDb25uZWN0aW9uLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDIwKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYXZlIHByb3BlciByYXRpbmdzIGFuZCByZXZpZXcgY291bnRzJywgKCkgPT4ge1xuICAgICAgRkVBVFVSRURfUE9SVFVHVUVTRV9CVVNJTkVTU0VTLmZvckVhY2goYnVzaW5lc3MgPT4ge1xuICAgICAgICBleHBlY3QoYnVzaW5lc3MucmF0aW5nKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApXG4gICAgICAgIGV4cGVjdChidXNpbmVzcy5yYXRpbmcpLnRvQmVMZXNzVGhhbk9yRXF1YWwoNSlcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLnJldmlld0NvdW50KS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApXG4gICAgICAgIGV4cGVjdCh0eXBlb2YgYnVzaW5lc3MucmV2aWV3Q291bnQpLnRvQmUoJ251bWJlcicpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgYXV0aGVudGljIFBvcnR1Z3Vlc2Ugc3BlY2lhbHRpZXMnLCAoKSA9PiB7XG4gICAgICBGRUFUVVJFRF9QT1JUVUdVRVNFX0JVU0lORVNTRVMuZm9yRWFjaChidXNpbmVzcyA9PiB7XG4gICAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KGJ1c2luZXNzLnNwZWNpYWx0aWVzKSkudG9CZSh0cnVlKVxuICAgICAgICBleHBlY3QoYnVzaW5lc3Muc3BlY2lhbHRpZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgICAgXG4gICAgICAgIC8vIFNwZWNpYWx0aWVzIHNob3VsZCBiZSBjdWx0dXJhbGx5IHJlbGV2YW50XG4gICAgICAgIGJ1c2luZXNzLnNwZWNpYWx0aWVzLmZvckVhY2goc3BlY2lhbHR5ID0+IHtcbiAgICAgICAgICBleHBlY3QodHlwZW9mIHNwZWNpYWx0eSkudG9CZSgnc3RyaW5nJylcbiAgICAgICAgICBleHBlY3Qoc3BlY2lhbHR5Lmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDIpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0J1c2luZXNzIERpcmVjdG9yeSBDYXRlZ29yaWVzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGF2ZSBjb21wcmVoZW5zaXZlIGNhdGVnb3J5IGNvdmVyYWdlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KEJVU0lORVNTX0RJUkVDVE9SWV9DQVRFR09SSUVTLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCg1KVxuICAgICAgXG4gICAgICBjb25zdCBjYXRlZ29yeUlkcyA9IEJVU0lORVNTX0RJUkVDVE9SWV9DQVRFR09SSUVTLm1hcChjYXQgPT4gY2F0LmlkKVxuICAgICAgZXhwZWN0KGNhdGVnb3J5SWRzKS50b0NvbnRhaW4oJ3Jlc3RhdXJhbnRzJylcbiAgICAgIGV4cGVjdChjYXRlZ29yeUlkcykudG9Db250YWluKCdjdWx0dXJhbF9zZXJ2aWNlcycpXG4gICAgICBleHBlY3QoY2F0ZWdvcnlJZHMpLnRvQ29udGFpbignYmVhdXR5X3dlbGxuZXNzJylcbiAgICAgIGV4cGVjdChjYXRlZ29yeUlkcykudG9Db250YWluKCdwcm9mZXNzaW9uYWxfc2VydmljZXMnKVxuICAgICAgZXhwZWN0KGNhdGVnb3J5SWRzKS50b0NvbnRhaW4oJ3JldGFpbCcpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBiaWxpbmd1YWwgY2F0ZWdvcnkgbmFtZXMgYW5kIGRlc2NyaXB0aW9ucycsICgpID0+IHtcbiAgICAgIEJVU0lORVNTX0RJUkVDVE9SWV9DQVRFR09SSUVTLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoY2F0ZWdvcnkubmFtZSkudG9IYXZlUHJvcGVydHkoJ2VuJylcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5Lm5hbWUpLnRvSGF2ZVByb3BlcnR5KCdwdCcpXG4gICAgICAgIGV4cGVjdChjYXRlZ29yeS5kZXNjcmlwdGlvbikudG9IYXZlUHJvcGVydHkoJ2VuJylcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5LmRlc2NyaXB0aW9uKS50b0hhdmVQcm9wZXJ0eSgncHQnKVxuICAgICAgICBcbiAgICAgICAgLy8gQ29udGVudCB2YWxpZGF0aW9uXG4gICAgICAgIGV4cGVjdChjYXRlZ29yeS5uYW1lLmVuKS50b0JlVHJ1dGh5KClcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5Lm5hbWUucHQpLnRvQmVUcnV0aHkoKVxuICAgICAgICBleHBlY3QoY2F0ZWdvcnkuZGVzY3JpcHRpb24uZW4pLnRvQmVUcnV0aHkoKVxuICAgICAgICBleHBlY3QoY2F0ZWdvcnkuZGVzY3JpcHRpb24ucHQpLnRvQmVUcnV0aHkoKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBpbmNsdWRlIGN1bHR1cmFsIGVtb2ppcycsICgpID0+IHtcbiAgICAgIEJVU0lORVNTX0RJUkVDVE9SWV9DQVRFR09SSUVTLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoY2F0ZWdvcnkuZW1vamkpLnRvQmVUcnV0aHkoKVxuICAgICAgICBleHBlY3QodHlwZW9mIGNhdGVnb3J5LmVtb2ppKS50b0JlKCdzdHJpbmcnKVxuICAgICAgICBleHBlY3QoY2F0ZWdvcnkuZW1vamkubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDEpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgcmVhbGlzdGljIGJ1c2luZXNzIGNvdW50cyBhbmQgcmF0aW5ncycsICgpID0+IHtcbiAgICAgIEJVU0lORVNTX0RJUkVDVE9SWV9DQVRFR09SSUVTLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICBleHBlY3QoY2F0ZWdvcnkudG90YWxCdXNpbmVzc2VzKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5LmF2ZXJhZ2VSYXRpbmcpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMClcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5LmF2ZXJhZ2VSYXRpbmcpLnRvQmVMZXNzVGhhbk9yRXF1YWwoNSlcbiAgICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkoY2F0ZWdvcnkuY291bnRyaWVzKSkudG9CZSh0cnVlKVxuICAgICAgICBleHBlY3QoY2F0ZWdvcnkuY291bnRyaWVzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1BBTE9QIEJ1c2luZXNzIFNob3djYXNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZmVhdHVyZSBidXNpbmVzc2VzIGZyb20gYWxsIFBBTE9QIGNvdW50cmllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHBhbG9wQ291bnRyaWVzID0gWy4uLm5ldyBTZXQoUEFMT1BfQlVTSU5FU1NfU0hPV0NBU0UubWFwKGIgPT4gYi5vd25lckNvdW50cnkpKV1cbiAgICAgIFxuICAgICAgZXhwZWN0KHBhbG9wQ291bnRyaWVzKS50b0NvbnRhaW4oJ2FuZ29sYScpXG4gICAgICBleHBlY3QocGFsb3BDb3VudHJpZXMpLnRvQ29udGFpbignY2FwZV92ZXJkZScpXG4gICAgICBleHBlY3QocGFsb3BDb3VudHJpZXMpLnRvQ29udGFpbignbW96YW1iaXF1ZScpXG4gICAgICBcbiAgICAgIC8vIFNob3VsZCByZXByZXNlbnQgbXVsdGlwbGUgUEFMT1AgY291bnRyaWVzXG4gICAgICBleHBlY3QocGFsb3BDb3VudHJpZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDMpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBwcm9wZXIgUEFMT1AgZmxhZyBlbW9qaXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2YWxpZFBhbG9wRmxhZ3MgPSBbJ/Cfh6bwn4e0JywgJ/Cfh6jwn4e7JywgJ/Cfh6zwn4e8JywgJ/Cfh7Lwn4e/JywgJ/Cfh7jwn4e5J11cbiAgICAgIFxuICAgICAgUEFMT1BfQlVTSU5FU1NfU0hPV0NBU0UuZm9yRWFjaChidXNpbmVzcyA9PiB7XG4gICAgICAgIGV4cGVjdCh2YWxpZFBhbG9wRmxhZ3MpLnRvQ29udGFpbihidXNpbmVzcy5mbGFnRW1vamkpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgY3VsdHVyYWwgY29ubmVjdGlvbnMgZm9yIGFsbCBQQUxPUCBidXNpbmVzc2VzJywgKCkgPT4ge1xuICAgICAgUEFMT1BfQlVTSU5FU1NfU0hPV0NBU0UuZm9yRWFjaChidXNpbmVzcyA9PiB7XG4gICAgICAgIGV4cGVjdChidXNpbmVzcy5jdWx0dXJhbENvbm5lY3Rpb24pLnRvQmVUcnV0aHkoKVxuICAgICAgICBleHBlY3QodHlwZW9mIGJ1c2luZXNzLmN1bHR1cmFsQ29ubmVjdGlvbikudG9CZSgnc3RyaW5nJylcbiAgICAgICAgXG4gICAgICAgIC8vIFNob3VsZCBtZW50aW9uIGN1bHR1cmFsIGhlcml0YWdlIG9yIHRyYWRpdGlvbnNcbiAgICAgICAgY29uc3QgY3VsdHVyYWxLZXl3b3JkcyA9IFsnY3VsdHVyYWwnLCAndHJhZGl0aW9uJywgJ2hlcml0YWdlJywgJ2F1dGhlbnRpYycsICdjb21tdW5pdHknXVxuICAgICAgICBjb25zdCBoYXNDdWx0dXJhbENvbnRlbnQgPSBjdWx0dXJhbEtleXdvcmRzLnNvbWUoa2V5d29yZCA9PiBcbiAgICAgICAgICBidXNpbmVzcy5jdWx0dXJhbENvbm5lY3Rpb24udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhrZXl3b3JkKVxuICAgICAgICApXG4gICAgICAgIGV4cGVjdChoYXNDdWx0dXJhbENvbnRlbnQpLnRvQmUodHJ1ZSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnR2VvZ3JhcGhpYyBEaXN0cmlidXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjb3ZlciBtYWpvciBVSyBjaXRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjaXRpZXMgPSBPYmplY3Qua2V5cyhCVVNJTkVTU19HRU9HUkFQSElDX0RJU1RSSUJVVElPTilcbiAgICAgIFxuICAgICAgZXhwZWN0KGNpdGllcykudG9Db250YWluKCdMb25kb24nKVxuICAgICAgZXhwZWN0KGNpdGllcykudG9Db250YWluKCdNYW5jaGVzdGVyJylcbiAgICAgIGV4cGVjdChjaXRpZXMpLnRvQ29udGFpbignQmlybWluZ2hhbScpXG4gICAgICBleHBlY3QoY2l0aWVzKS50b0NvbnRhaW4oJ0VkaW5idXJnaCcpXG4gICAgICBleHBlY3QoY2l0aWVzKS50b0NvbnRhaW4oJ0dsYXNnb3cnKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgcmVhbGlzdGljIGJ1c2luZXNzIGNvdW50cyBwZXIgY2l0eScsICgpID0+IHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKEJVU0lORVNTX0dFT0dSQVBISUNfRElTVFJJQlVUSU9OKS5mb3JFYWNoKChbY2l0eSwgZGF0YV0pID0+IHtcbiAgICAgICAgZXhwZWN0KGRhdGEudG90YWwpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgICBleHBlY3QoZGF0YS50b3RhbCkudG9CZUxlc3NUaGFuKDIwMCkgLy8gUmVhbGlzdGljIHVwcGVyIGxpbWl0XG4gICAgICAgIFxuICAgICAgICAvLyBUb3RhbCBzaG91bGQgbWF0Y2ggc3VtIG9mIGNvdW50cmllc1xuICAgICAgICBjb25zdCBjb3VudHJ5U3VtID0gT2JqZWN0LnZhbHVlcyhkYXRhLmJ5Q291bnRyeSkucmVkdWNlKChzdW0sIGNvdW50KSA9PiBzdW0gKyBjb3VudCwgMClcbiAgICAgICAgZXhwZWN0KGNvdW50cnlTdW0pLnRvQmUoZGF0YS50b3RhbClcbiAgICAgICAgXG4gICAgICAgIC8vIFNob3VsZCBoYXZlIG11bHRpcGxlIHJlZ2lvbnMgZm9yIG1ham9yIGNpdGllc1xuICAgICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShkYXRhLnJlZ2lvbnMpKS50b0JlKHRydWUpXG4gICAgICAgIGlmIChjaXR5ID09PSAnTG9uZG9uJykge1xuICAgICAgICAgIGV4cGVjdChkYXRhLnJlZ2lvbnMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDUpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgc2hvdyBQb3J0dWd1ZXNlIGFuZCBCcmF6aWxpYW4gZG9taW5hbmNlIHdpdGggUEFMT1AgcmVwcmVzZW50YXRpb24nLCAoKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhCVVNJTkVTU19HRU9HUkFQSElDX0RJU1RSSUJVVElPTikuZm9yRWFjaCgoW2NpdHksIGRhdGFdKSA9PiB7XG4gICAgICAgIC8vIFBvcnR1Z2FsIHNob3VsZCBiZSB3ZWxsIHJlcHJlc2VudGVkXG4gICAgICAgIGV4cGVjdChkYXRhLmJ5Q291bnRyeS5wb3J0dWdhbCkudG9CZUdyZWF0ZXJUaGFuKDApXG4gICAgICAgIFxuICAgICAgICAvLyBCcmF6aWwgc2hvdWxkIGhhdmUgZ29vZCByZXByZXNlbnRhdGlvblxuICAgICAgICBleHBlY3QoZGF0YS5ieUNvdW50cnkuYnJhemlsKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgICAgXG4gICAgICAgIC8vIFNob3VsZCBoYXZlIHNvbWUgUEFMT1AgcmVwcmVzZW50YXRpb25cbiAgICAgICAgY29uc3QgcGFsb3BDb3VudCA9ICgnYW5nb2xhJyBpbiBkYXRhLmJ5Q291bnRyeSA/IGRhdGEuYnlDb3VudHJ5LmFuZ29sYSA6IDApICsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgnY2FwZV92ZXJkZScgaW4gZGF0YS5ieUNvdW50cnkgPyBkYXRhLmJ5Q291bnRyeS5jYXBlX3ZlcmRlIDogMCkgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKCdtb3phbWJpcXVlJyBpbiBkYXRhLmJ5Q291bnRyeSA/IGRhdGEuYnlDb3VudHJ5Lm1vemFtYmlxdWUgOiAwKVxuICAgICAgICBcbiAgICAgICAgaWYgKGNpdHkgPT09ICdMb25kb24nKSB7XG4gICAgICAgICAgZXhwZWN0KHBhbG9wQ291bnQpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1V0aWxpdHkgRnVuY3Rpb25zJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCdnZXRGZWF0dXJlZEJ1c2luZXNzZXNCeUNhdGVnb3J5JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYnVzaW5lc3NlcyBmb3IgdmFsaWQgY2F0ZWdvcmllcycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdGF1cmFudHMgPSBnZXRGZWF0dXJlZEJ1c2luZXNzZXNCeUNhdGVnb3J5KCdyZXN0YXVyYW50JylcbiAgICAgICAgY29uc3QgY3VsdHVyYWxTZXJ2aWNlcyA9IGdldEZlYXR1cmVkQnVzaW5lc3Nlc0J5Q2F0ZWdvcnkoJ2N1bHR1cmFsX3NlcnZpY2VzJylcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHJlc3RhdXJhbnRzKSkudG9CZSh0cnVlKVxuICAgICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShjdWx0dXJhbFNlcnZpY2VzKSkudG9CZSh0cnVlKVxuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3RhdXJhbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXN0YXVyYW50cy5mb3JFYWNoKGJ1c2luZXNzID0+IHtcbiAgICAgICAgICAgIGV4cGVjdChidXNpbmVzcy5jYXRlZ29yeSkudG9CZSgncmVzdGF1cmFudCcpXG4gICAgICAgICAgICBleHBlY3QoYnVzaW5lc3MuaXNGZWF0dXJlZCkudG9CZSh0cnVlKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGRlc2NyaWJlKCdnZXRCdXNpbmVzc2VzQnlDaXR5JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBmaWx0ZXIgYnVzaW5lc3NlcyBieSBjaXR5IGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgY29uc3QgbG9uZG9uQnVzaW5lc3NlcyA9IGdldEJ1c2luZXNzZXNCeUNpdHkoJ0xvbmRvbicpXG4gICAgICAgIGNvbnN0IG1hbmNoZXN0ZXJCdXNpbmVzc2VzID0gZ2V0QnVzaW5lc3Nlc0J5Q2l0eSgnTWFuY2hlc3RlcicpXG4gICAgICAgIFxuICAgICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShsb25kb25CdXNpbmVzc2VzKSkudG9CZSh0cnVlKVxuICAgICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShtYW5jaGVzdGVyQnVzaW5lc3NlcykpLnRvQmUodHJ1ZSlcbiAgICAgICAgXG4gICAgICAgIGxvbmRvbkJ1c2luZXNzZXMuZm9yRWFjaChidXNpbmVzcyA9PiB7XG4gICAgICAgICAgZXhwZWN0KGJ1c2luZXNzLmxvY2F0aW9uLmNpdHkpLnRvQmUoJ0xvbmRvbicpXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICBtYW5jaGVzdGVyQnVzaW5lc3Nlcy5mb3JFYWNoKGJ1c2luZXNzID0+IHtcbiAgICAgICAgICBleHBlY3QoYnVzaW5lc3MubG9jYXRpb24uY2l0eSkudG9CZSgnTWFuY2hlc3RlcicpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgnZ2V0UHJlbWl1bUJ1c2luZXNzZXMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIHJldHVybiBvbmx5IHByZW1pdW0gYnVzaW5lc3NlcyBzb3J0ZWQgYnkgcHJpb3JpdHknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZW1pdW1CdXNpbmVzc2VzID0gZ2V0UHJlbWl1bUJ1c2luZXNzZXMoKVxuICAgICAgICBcbiAgICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkocHJlbWl1bUJ1c2luZXNzZXMpKS50b0JlKHRydWUpXG4gICAgICAgIFxuICAgICAgICBwcmVtaXVtQnVzaW5lc3Nlcy5mb3JFYWNoKGJ1c2luZXNzID0+IHtcbiAgICAgICAgICBleHBlY3QoYnVzaW5lc3MuaXNQcmVtaXVtKS50b0JlKHRydWUpXG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICAvLyBTaG91bGQgYmUgc29ydGVkIGJ5IHByaW9yaXR5IChkZXNjZW5kaW5nKVxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHByZW1pdW1CdXNpbmVzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZXhwZWN0KHByZW1pdW1CdXNpbmVzc2VzW2ktMV0/LnByaW9yaXR5IHx8IDApLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwocHJlbWl1bUJ1c2luZXNzZXNbaV0/LnByaW9yaXR5IHx8IDApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGRlc2NyaWJlKCdnZXRCdXNpbmVzc0RpcmVjdG9yeVN0YXRzJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gY29tcHJlaGVuc2l2ZSBzdGF0aXN0aWNzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGF0cyA9IGdldEJ1c2luZXNzRGlyZWN0b3J5U3RhdHMoKVxuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBzdGF0cy50b3RhbEJ1c2luZXNzZXMpLnRvQmUoJ251bWJlcicpXG4gICAgICAgIGV4cGVjdCh0eXBlb2Ygc3RhdHMudG90YWxGZWF0dXJlZCkudG9CZSgnbnVtYmVyJylcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBzdGF0cy50b3RhbFByZW1pdW0pLnRvQmUoJ251bWJlcicpXG4gICAgICAgIGV4cGVjdCh0eXBlb2Ygc3RhdHMudG90YWxWZXJpZmllZCkudG9CZSgnbnVtYmVyJylcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBzdGF0cy5hdmVyYWdlUmF0aW5nKS50b0JlKCdudW1iZXInKVxuICAgICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShzdGF0cy5jb3VudHJpZXNSZXByZXNlbnRlZCkpLnRvQmUodHJ1ZSlcbiAgICAgICAgZXhwZWN0KEFycmF5LmlzQXJyYXkoc3RhdHMuY2l0aWVzU2VydmVkKSkudG9CZSh0cnVlKVxuICAgICAgICBleHBlY3QodHlwZW9mIHN0YXRzLnRvdGFsQ2F0ZWdvcmllcykudG9CZSgnbnVtYmVyJylcbiAgICAgICAgXG4gICAgICAgIC8vIFZhbGlkYXRpb25cbiAgICAgICAgZXhwZWN0KHN0YXRzLnRvdGFsQnVzaW5lc3NlcykudG9CZUdyZWF0ZXJUaGFuKDApXG4gICAgICAgIGV4cGVjdChzdGF0cy5hdmVyYWdlUmF0aW5nKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApXG4gICAgICAgIGV4cGVjdChzdGF0cy5hdmVyYWdlUmF0aW5nKS50b0JlTGVzc1RoYW5PckVxdWFsKDUpXG4gICAgICAgIGV4cGVjdChzdGF0cy5jb3VudHJpZXNSZXByZXNlbnRlZCkudG9Db250YWluKCdQb3J0dWdhbCcpXG4gICAgICAgIGV4cGVjdChzdGF0cy5jb3VudHJpZXNSZXByZXNlbnRlZCkudG9Db250YWluKCdCcmF6aWwnKVxuICAgICAgICBleHBlY3Qoc3RhdHMuY2l0aWVzU2VydmVkKS50b0NvbnRhaW4oJ0xvbmRvbicpXG4gICAgICAgIGV4cGVjdChzdGF0cy50b3RhbENhdGVnb3JpZXMpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoNSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnQ3VsdHVyYWwgQXV0aGVudGljaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgbWFpbnRhaW4gUG9ydHVndWVzZSBjdWx0dXJhbCBhdXRoZW50aWNpdHkgaW4gYWxsIGNvbnRlbnQnLCAoKSA9PiB7XG4gICAgICAvLyBDaGVjayBmZWF0dXJlZCBidXNpbmVzc2VzIGZvciBjdWx0dXJhbCBhdXRoZW50aWNpdHlcbiAgICAgIEZFQVRVUkVEX1BPUlRVR1VFU0VfQlVTSU5FU1NFUy5mb3JFYWNoKGJ1c2luZXNzID0+IHtcbiAgICAgICAgY29uc3QgY3VsdHVyYWxLZXl3b3JkcyA9IFsncG9ydHVndWVzZScsICdicmF6aWxpYW4nLCAnYW5nb2xhbicsICdhdXRoZW50aWMnLCAndHJhZGl0aW9uYWwnLCAnY3VsdHVyYWwnLCAnaGVyaXRhZ2UnXVxuICAgICAgICBjb25zdCBoYXNQb3J0dWd1ZXNlQ3VsdHVyZSA9IGN1bHR1cmFsS2V5d29yZHMuc29tZShrZXl3b3JkID0+IFxuICAgICAgICAgIGJ1c2luZXNzLmRlc2NyaXB0aW9uLmVuLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoa2V5d29yZCkgfHxcbiAgICAgICAgICBidXNpbmVzcy5jdWx0dXJhbENvbm5lY3Rpb24udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhrZXl3b3JkKVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICBleHBlY3QoaGFzUG9ydHVndWVzZUN1bHR1cmUpLnRvQmUodHJ1ZSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgdXNlIHByb3BlciBQb3J0dWd1ZXNlIHRlcm1pbm9sb2d5JywgKCkgPT4ge1xuICAgICAgLy8gQ2hlY2sgZm9yIHByb3BlciBQb3J0dWd1ZXNlIHRlcm1zIGluIFBvcnR1Z3Vlc2UgZGVzY3JpcHRpb25zXG4gICAgICBGRUFUVVJFRF9QT1JUVUdVRVNFX0JVU0lORVNTRVMuZm9yRWFjaChidXNpbmVzcyA9PiB7XG4gICAgICAgIGlmIChidXNpbmVzcy5vd25lckNvdW50cnkgPT09ICdwb3J0dWdhbCcpIHtcbiAgICAgICAgICBjb25zdCBwb3J0dWd1ZXNlVGVybXMgPSBbJ3BvcnR1Z3XDqnMnLCAncG9ydHVndWVzYScsICdhdXTDqm50aWNvJywgJ3RyYWRpY2lvbmFsJywgJ2N1bHR1cmFsJ11cbiAgICAgICAgICBjb25zdCBoYXNQb3J0dWd1ZXNlVGVybXMgPSBwb3J0dWd1ZXNlVGVybXMuc29tZSh0ZXJtID0+IFxuICAgICAgICAgICAgYnVzaW5lc3MuZGVzY3JpcHRpb24ucHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0ZXJtKVxuICAgICAgICAgIClcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBdCBsZWFzdCBzb21lIFBvcnR1Z3Vlc2UgYnVzaW5lc3NlcyBzaG91bGQgdXNlIHByb3BlciB0ZXJtaW5vbG9neVxuICAgICAgICAgIGlmIChidXNpbmVzcy5jYXRlZ29yeSA9PT0gJ3Jlc3RhdXJhbnQnIHx8IGJ1c2luZXNzLmNhdGVnb3J5ID09PSAnY3VsdHVyYWxfc2VydmljZXMnKSB7XG4gICAgICAgICAgICBleHBlY3QoaGFzUG9ydHVndWVzZVRlcm1zKS50b0JlKHRydWUpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgcHJvcGVyIGZsYWcgZW1vamlzIGZvciBlYWNoIGNvdW50cnknLCAoKSA9PiB7XG4gICAgICBjb25zdCBmbGFnTWFwcGluZyA9IHtcbiAgICAgICAgJ3BvcnR1Z2FsJzogJ/Cfh7Xwn4e5JyxcbiAgICAgICAgJ2JyYXppbCc6ICfwn4en8J+HtycsXG4gICAgICAgICdhbmdvbGEnOiAn8J+HpvCfh7QnLFxuICAgICAgICAnY2FwZV92ZXJkZSc6ICfwn4eo8J+HuycsXG4gICAgICAgICdtb3phbWJpcXVlJzogJ/Cfh7Lwn4e/JyxcbiAgICAgICAgJ2d1aW5lYV9iaXNzYXUnOiAn8J+HrPCfh7wnLFxuICAgICAgICAnc2FvX3RvbWVfcHJpbmNpcGUnOiAn8J+HuPCfh7knXG4gICAgICB9XG5cbiAgICAgIEZFQVRVUkVEX1BPUlRVR1VFU0VfQlVTSU5FU1NFUy5mb3JFYWNoKGJ1c2luZXNzID0+IHtcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRGbGFnID0gZmxhZ01hcHBpbmdbYnVzaW5lc3Mub3duZXJDb3VudHJ5IGFzIGtleW9mIHR5cGVvZiBmbGFnTWFwcGluZ11cbiAgICAgICAgaWYgKGV4cGVjdGVkRmxhZykge1xuICAgICAgICAgIGV4cGVjdChidXNpbmVzcy5mbGFnRW1vamkpLnRvQmUoZXhwZWN0ZWRGbGFnKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ01vYmlsZS1GaXJzdCBEZXNpZ24gQ29tcGxpYW5jZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhdmUgcHJvcGVyIG1vYmlsZSBicmVha3BvaW50IGNvbnNpZGVyYXRpb25zJywgKCkgPT4ge1xuICAgICAgLy8gQWxsIGNhcm91c2VsIGNvbmZpZ3VyYXRpb25zIHNob3VsZCBjb25zaWRlciBtb2JpbGVcbiAgICAgIEJVU0lORVNTX0RJUkVDVE9SWV9DQVRFR09SSUVTLmZvckVhY2goY2F0ZWdvcnkgPT4ge1xuICAgICAgICAvLyBDYXRlZ29yaWVzIHNob3VsZCBiZSBkZXNpZ25lZCBmb3IgbW9iaWxlIGRpc3BsYXlcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5Lm5hbWUuZW4ubGVuZ3RoKS50b0JlTGVzc1RoYW4oMjUpIC8vIE1vYmlsZS1mcmllbmRseSBsZW5ndGhcbiAgICAgICAgZXhwZWN0KGNhdGVnb3J5Lm5hbWUucHQubGVuZ3RoKS50b0JlTGVzc1RoYW4oMzApIC8vIFBvcnR1Z3Vlc2UgY2FuIGJlIGxvbmdlclxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYXZlIGFwcHJvcHJpYXRlIGNvbnRlbnQgbGVuZ3RoIGZvciBtb2JpbGUgY2FyZHMnLCAoKSA9PiB7XG4gICAgICBGRUFUVVJFRF9QT1JUVUdVRVNFX0JVU0lORVNTRVMuZm9yRWFjaChidXNpbmVzcyA9PiB7XG4gICAgICAgIC8vIFRpdGxlcyBzaG91bGQgYmUgbW9iaWxlLWZyaWVuZGx5XG4gICAgICAgIGV4cGVjdChidXNpbmVzcy50aXRsZS5lbi5sZW5ndGgpLnRvQmVMZXNzVGhhbig2MClcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLnRpdGxlLnB0Lmxlbmd0aCkudG9CZUxlc3NUaGFuKDcwKVxuICAgICAgICBcbiAgICAgICAgLy8gRGVzY3JpcHRpb25zIHNob3VsZCBiZSByZWFkYWJsZSBvbiBtb2JpbGUgYnV0IG5vdCB0b28gbG9uZ1xuICAgICAgICBleHBlY3QoYnVzaW5lc3MuZGVzY3JpcHRpb24uZW4ubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oNTApXG4gICAgICAgIGV4cGVjdChidXNpbmVzcy5kZXNjcmlwdGlvbi5lbi5sZW5ndGgpLnRvQmVMZXNzVGhhbigyMDApXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgcGhvbmUgbnVtYmVycyBpbiBwcm9wZXIgZm9ybWF0JywgKCkgPT4ge1xuICAgICAgRkVBVFVSRURfUE9SVFVHVUVTRV9CVVNJTkVTU0VTLmZvckVhY2goYnVzaW5lc3MgPT4ge1xuICAgICAgICAvLyBVSyBwaG9uZSBudW1iZXJzIHNob3VsZCBzdGFydCB3aXRoICs0NFxuICAgICAgICBleHBlY3QoYnVzaW5lc3MuY29udGFjdC5waG9uZSkudG9NYXRjaCgvXlxcKzQ0LylcbiAgICAgICAgXG4gICAgICAgIC8vIFNob3VsZCBoYXZlIHByb3BlciBmb3JtYXR0aW5nXG4gICAgICAgIGV4cGVjdChidXNpbmVzcy5jb250YWN0LnBob25lKS50b01hdGNoKC9eXFwrNDRcXHNcXGR7MiwzfVxcc1xcZHszLDR9XFxzXFxkezR9JC8pXG4gICAgICB9KVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIGFuZCBEYXRhIFF1YWxpdHknLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYXZlIHJlYXNvbmFibGUgZGF0YSBzaXplcyBmb3IgY2Fyb3VzZWwgcGVyZm9ybWFuY2UnLCAoKSA9PiB7XG4gICAgICAvLyBGZWF0dXJlZCBidXNpbmVzc2VzIHNob3VsZG4ndCBiZSB0b28gbWFueSBmb3IgaW5pdGlhbCBsb2FkXG4gICAgICBleHBlY3QoRkVBVFVSRURfUE9SVFVHVUVTRV9CVVNJTkVTU0VTLmxlbmd0aCkudG9CZUxlc3NUaGFuKDIwKVxuICAgICAgXG4gICAgICAvLyBDYXRlZ29yaWVzIHNob3VsZCBiZSBtYW5hZ2VhYmxlXG4gICAgICBleHBlY3QoQlVTSU5FU1NfRElSRUNUT1JZX0NBVEVHT1JJRVMubGVuZ3RoKS50b0JlTGVzc1RoYW4oMTApXG4gICAgICBcbiAgICAgIC8vIFBBTE9QIHNob3djYXNlIHNob3VsZCBiZSBmb2N1c2VkXG4gICAgICBleHBlY3QoUEFMT1BfQlVTSU5FU1NfU0hPV0NBU0UubGVuZ3RoKS50b0JlTGVzc1RoYW4oMTUpXG4gICAgfSlcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBjb25zaXN0ZW50IGRhdGEgc3RydWN0dXJlIGFjcm9zcyBhbGwgYnVzaW5lc3NlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVpcmVkRmllbGRzID0gW1xuICAgICAgICAnaWQnLCAndGl0bGUnLCAnZGVzY3JpcHRpb24nLCAnaW1hZ2UnLCAnZmxhZ0Vtb2ppJywgJ2NhdGVnb3J5JyxcbiAgICAgICAgJ3JlZ2lvbicsICdvd25lckNvdW50cnknLCAnb3duZXJOYW1lJywgJ2xvY2F0aW9uJywgJ2NvbnRhY3QnLFxuICAgICAgICAnc2VydmljZXMnLCAnc2VydmljZXNQb3J0dWd1ZXNlJywgJ3JhdGluZycsICdyZXZpZXdDb3VudCcsXG4gICAgICAgICdwcmljZVJhbmdlJywgJ2N1bHR1cmFsQ29ubmVjdGlvbicsICdpc1ZlcmlmaWVkJywgJ2lzRmVhdHVyZWQnLFxuICAgICAgICAnaXNQcmVtaXVtJywgJ2VzdGFibGlzaGVkWWVhcicsICdzcGVjaWFsdGllcycsICdwcmlvcml0eSdcbiAgICAgIF1cblxuICAgICAgRkVBVFVSRURfUE9SVFVHVUVTRV9CVVNJTkVTU0VTLmZvckVhY2goYnVzaW5lc3MgPT4ge1xuICAgICAgICByZXF1aXJlZEZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgICBleHBlY3QoYnVzaW5lc3MpLnRvSGF2ZVByb3BlcnR5KGZpZWxkKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYXZlIHByb3BlciBwcmlvcml0eSBvcmRlcmluZyBmb3IgZmVhdHVyZWQgY29udGVudCcsICgpID0+IHtcbiAgICAgIC8vIFByZW1pdW0gYnVzaW5lc3NlcyBzaG91bGQgaGF2ZSBwcmlvcml0eSAxXG4gICAgICBjb25zdCBwcmVtaXVtQnVzaW5lc3NlcyA9IEZFQVRVUkVEX1BPUlRVR1VFU0VfQlVTSU5FU1NFUy5maWx0ZXIoYiA9PiBiLmlzUHJlbWl1bSlcbiAgICAgIHByZW1pdW1CdXNpbmVzc2VzLmZvckVhY2goYnVzaW5lc3MgPT4ge1xuICAgICAgICBleHBlY3QoYnVzaW5lc3MucHJpb3JpdHkpLnRvQmUoMSlcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIC8vIE5vbi1wcmVtaXVtIHNob3VsZCBoYXZlIGxvd2VyIHByaW9yaXR5XG4gICAgICBjb25zdCBub25QcmVtaXVtQnVzaW5lc3NlcyA9IEZFQVRVUkVEX1BPUlRVR1VFU0VfQlVTSU5FU1NFUy5maWx0ZXIoYiA9PiAhYi5pc1ByZW1pdW0pXG4gICAgICBub25QcmVtaXVtQnVzaW5lc3Nlcy5mb3JFYWNoKGJ1c2luZXNzID0+IHtcbiAgICAgICAgZXhwZWN0KGJ1c2luZXNzLnByaW9yaXR5KS50b0JlR3JlYXRlclRoYW4oMSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcbn0pXG5cbmRlc2NyaWJlKCdDYXJvdXNlbCBJbnRlZ3JhdGlvbiBSZXF1aXJlbWVudHMnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgYmUgY29tcGF0aWJsZSB3aXRoIEx1c29waG9uZUNhcm91c2VsIGNvbXBvbmVudCcsICgpID0+IHtcbiAgICAvLyBWZXJpZnkgdGhhdCBidXNpbmVzcyBpdGVtcyBoYXZlIHJlcXVpcmVkIGNhcm91c2VsIGl0ZW0gc3RydWN0dXJlXG4gICAgY29uc3Qgc2FtcGxlQnVzaW5lc3MgPSBGRUFUVVJFRF9QT1JUVUdVRVNFX0JVU0lORVNTRVNbMF1cbiAgICBcbiAgICBleHBlY3Qoc2FtcGxlQnVzaW5lc3MpLnRvSGF2ZVByb3BlcnR5KCdpZCcpXG4gICAgZXhwZWN0KHNhbXBsZUJ1c2luZXNzPy50aXRsZSkudG9IYXZlUHJvcGVydHkoJ2VuJylcbiAgICBleHBlY3Qoc2FtcGxlQnVzaW5lc3M/LnRpdGxlKS50b0hhdmVQcm9wZXJ0eSgncHQnKVxuICAgIGV4cGVjdChzYW1wbGVCdXNpbmVzcz8uZGVzY3JpcHRpb24pLnRvSGF2ZVByb3BlcnR5KCdlbicpXG4gICAgZXhwZWN0KHNhbXBsZUJ1c2luZXNzPy5kZXNjcmlwdGlvbikudG9IYXZlUHJvcGVydHkoJ3B0JylcbiAgICBleHBlY3Qoc2FtcGxlQnVzaW5lc3MpLnRvSGF2ZVByb3BlcnR5KCdpbWFnZScpXG4gICAgZXhwZWN0KHNhbXBsZUJ1c2luZXNzKS50b0hhdmVQcm9wZXJ0eSgnZmxhZ0Vtb2ppJylcbiAgICBleHBlY3Qoc2FtcGxlQnVzaW5lc3MpLnRvSGF2ZVByb3BlcnR5KCdjYXRlZ29yeScpXG4gICAgZXhwZWN0KHNhbXBsZUJ1c2luZXNzKS50b0hhdmVQcm9wZXJ0eSgncHJpb3JpdHknKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcHJvdmlkZSBwcm9wZXIgY2Fyb3VzZWwgY29uZmlndXJhdGlvbiBvcHRpb25zJywgKCkgPT4ge1xuICAgIC8vIENhdGVnb3JpZXMgc2hvdWxkIHdvcmsgd2l0aCBjb21wYWN0IGNhcm91c2VsIGNvbmZpZ1xuICAgIGV4cGVjdChCVVNJTkVTU19ESVJFQ1RPUllfQ0FURUdPUklFUy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigzKSAvLyBHb29kIGZvciBjb21wYWN0IGRpc3BsYXlcbiAgICBleHBlY3QoQlVTSU5FU1NfRElSRUNUT1JZX0NBVEVHT1JJRVMubGVuZ3RoKS50b0JlTGVzc1RoYW4oOCkgLy8gTm90IHRvbyBtYW55IGZvciBjYXJvdXNlbFxuICAgIFxuICAgIC8vIEZlYXR1cmVkIGJ1c2luZXNzZXMgc2hvdWxkIHdvcmsgd2l0aCBzdGFuZGFyZCBjYXJvdXNlbCBjb25maWdcbiAgICBjb25zdCBwcmVtaXVtQ291bnQgPSBnZXRQcmVtaXVtQnVzaW5lc3NlcygpLmxlbmd0aFxuICAgIGV4cGVjdChwcmVtaXVtQ291bnQpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMykgLy8gTWluaW11bSBmb3IgY2Fyb3VzZWxcbiAgICBleHBlY3QocHJlbWl1bUNvdW50KS50b0JlTGVzc1RoYW4oMTIpIC8vIFJlYXNvbmFibGUgZm9yIGF1dG8tYWR2YW5jZVxuICB9KVxufSkiXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJJbWFnZSIsInNyYyIsImFsdCIsInByb3BzIiwiaW1nIiwidXNlTGFuZ3VhZ2UiLCJtb2NrVXNlTGFuZ3VhZ2UiLCJ1c2VNZWRpYVF1ZXJ5IiwibW9ja1VzZU1lZGlhUXVlcnkiLCJ1c2VHZW9sb2NhdGlvbiIsImNvb3JkaW5hdGVzIiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJwb3J0dWd1ZXNlQnVzaW5lc3NTZXJ2aWNlIiwic2VhcmNoQnVzaW5lc3NlcyIsImZuIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJidXNpbmVzc2VzIiwiZmVhdHVyZWRCdXNpbmVzc2VzIiwidG90YWwiLCJsYW5ndWFnZSIsInQiLCJrZXkiLCJkZWZhdWx0VmFsdWUiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJtb2NrUmV0dXJuVmFsdWUiLCJpdCIsImNvdW50cmllcyIsIlNldCIsIkZFQVRVUkVEX1BPUlRVR1VFU0VfQlVTSU5FU1NFUyIsIm1hcCIsImIiLCJvd25lckNvdW50cnkiLCJleHBlY3QiLCJ0b0NvbnRhaW4iLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW5PckVxdWFsIiwiY2l0aWVzIiwibG9jYXRpb24iLCJjaXR5IiwiZm9yRWFjaCIsImJ1c2luZXNzIiwidGl0bGUiLCJ0b0hhdmVQcm9wZXJ0eSIsImRlc2NyaXB0aW9uIiwiZW4iLCJ0b0JlVHJ1dGh5IiwicHQiLCJjdWx0dXJhbENvbm5lY3Rpb24iLCJ0b0JlIiwidG9CZUdyZWF0ZXJUaGFuIiwicmF0aW5nIiwidG9CZUxlc3NUaGFuT3JFcXVhbCIsInJldmlld0NvdW50IiwiQXJyYXkiLCJpc0FycmF5Iiwic3BlY2lhbHRpZXMiLCJzcGVjaWFsdHkiLCJCVVNJTkVTU19ESVJFQ1RPUllfQ0FURUdPUklFUyIsImNhdGVnb3J5SWRzIiwiY2F0IiwiaWQiLCJjYXRlZ29yeSIsIm5hbWUiLCJlbW9qaSIsInRvdGFsQnVzaW5lc3NlcyIsImF2ZXJhZ2VSYXRpbmciLCJwYWxvcENvdW50cmllcyIsIlBBTE9QX0JVU0lORVNTX1NIT1dDQVNFIiwidmFsaWRQYWxvcEZsYWdzIiwiZmxhZ0Vtb2ppIiwiY3VsdHVyYWxLZXl3b3JkcyIsImhhc0N1bHR1cmFsQ29udGVudCIsInNvbWUiLCJrZXl3b3JkIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsIk9iamVjdCIsImtleXMiLCJCVVNJTkVTU19HRU9HUkFQSElDX0RJU1RSSUJVVElPTiIsImVudHJpZXMiLCJkYXRhIiwidG9CZUxlc3NUaGFuIiwiY291bnRyeVN1bSIsInZhbHVlcyIsImJ5Q291bnRyeSIsInJlZHVjZSIsInN1bSIsImNvdW50IiwicmVnaW9ucyIsInBvcnR1Z2FsIiwiYnJhemlsIiwicGFsb3BDb3VudCIsImFuZ29sYSIsImNhcGVfdmVyZGUiLCJtb3phbWJpcXVlIiwicmVzdGF1cmFudHMiLCJnZXRGZWF0dXJlZEJ1c2luZXNzZXNCeUNhdGVnb3J5IiwiY3VsdHVyYWxTZXJ2aWNlcyIsImlzRmVhdHVyZWQiLCJsb25kb25CdXNpbmVzc2VzIiwiZ2V0QnVzaW5lc3Nlc0J5Q2l0eSIsIm1hbmNoZXN0ZXJCdXNpbmVzc2VzIiwicHJlbWl1bUJ1c2luZXNzZXMiLCJnZXRQcmVtaXVtQnVzaW5lc3NlcyIsImlzUHJlbWl1bSIsImkiLCJwcmlvcml0eSIsInN0YXRzIiwiZ2V0QnVzaW5lc3NEaXJlY3RvcnlTdGF0cyIsInRvdGFsRmVhdHVyZWQiLCJ0b3RhbFByZW1pdW0iLCJ0b3RhbFZlcmlmaWVkIiwiY291bnRyaWVzUmVwcmVzZW50ZWQiLCJjaXRpZXNTZXJ2ZWQiLCJ0b3RhbENhdGVnb3JpZXMiLCJoYXNQb3J0dWd1ZXNlQ3VsdHVyZSIsInBvcnR1Z3Vlc2VUZXJtcyIsImhhc1BvcnR1Z3Vlc2VUZXJtcyIsInRlcm0iLCJmbGFnTWFwcGluZyIsImV4cGVjdGVkRmxhZyIsImNvbnRhY3QiLCJwaG9uZSIsInRvTWF0Y2giLCJyZXF1aXJlZEZpZWxkcyIsImZpZWxkIiwiZmlsdGVyIiwibm9uUHJlbWl1bUJ1c2luZXNzZXMiLCJzYW1wbGVCdXNpbmVzcyIsInByZW1pdW1Db3VudCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0M7QUFhRCwrQkFBK0I7QUFDL0JBLEtBQUtDLElBQUksQ0FBQyxjQUFjO0lBQ3RCLE9BQU8sU0FBU0MsTUFBTSxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsRUFBRSxHQUFHQyxPQUFZO1FBQy9DLHFCQUFPLHFCQUFDQztZQUFJSCxLQUFLQTtZQUFLQyxLQUFLQTtZQUFNLEdBQUdDLEtBQUs7O0lBQzNDO0FBQ0Y7QUFLQSx5QkFBeUI7QUFDekJMLEtBQUtDLElBQUksQ0FBQyw2QkFBNkIsSUFBTyxDQUFBO1FBQzVDTSxhQUFhLElBQU1DO0lBQ3JCLENBQUE7QUFFQVIsS0FBS0MsSUFBSSxDQUFDLHlCQUF5QixJQUFPLENBQUE7UUFDeENRLGVBQWUsSUFBTUM7SUFDdkIsQ0FBQTtBQUVBVixLQUFLQyxJQUFJLENBQUMsMEJBQTBCLElBQU8sQ0FBQTtRQUN6Q1UsZ0JBQWdCLElBQU8sQ0FBQTtnQkFDckJDLGFBQWE7Z0JBQ2JDLFdBQVc7Z0JBQ1hDLE9BQU87WUFDVCxDQUFBO0lBQ0YsQ0FBQTtBQUVBLGtDQUFrQztBQUNsQ2QsS0FBS0MsSUFBSSxDQUFDLDJCQUEyQixJQUFPLENBQUE7UUFDMUNjLDJCQUEyQjtZQUN6QkMsa0JBQWtCaEIsS0FBS2lCLEVBQUUsR0FBR0MsaUJBQWlCLENBQUM7Z0JBQzVDQyxZ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