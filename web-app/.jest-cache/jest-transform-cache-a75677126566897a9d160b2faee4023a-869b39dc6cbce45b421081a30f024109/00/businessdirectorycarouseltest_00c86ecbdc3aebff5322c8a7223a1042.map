{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/business-directory-carousel.test.tsx"],"sourcesContent":["/**\n * Business Directory Carousel Tests\n * \n * Comprehensive tests for business directory carousel implementation\n * focusing on Portuguese cultural authenticity and mobile-first design\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { act } from 'react-dom/test-utils'\nimport '@testing-library/jest-dom'\n\n// Mock the useLanguage hook\nconst mockUseLanguage = {\n  language: 'en',\n  t: (key: string, defaultValue?: string) => defaultValue || key\n}\n\n// Mock Next.js Image component\njest.mock('next/image', () => {\n  return function Image({ src, alt, ...props }: any) {\n    return <img src={src} alt={alt} {...props} />\n  }\n})\n\n// Mock useMediaQuery hook\nconst mockUseMediaQuery = jest.fn()\n\n// Mock context and hooks\njest.mock('@/context/LanguageContext', () => ({\n  useLanguage: () => mockUseLanguage\n}))\n\njest.mock('@/hooks/useMediaQuery', () => ({\n  useMediaQuery: () => mockUseMediaQuery()\n}))\n\njest.mock('@/hooks/useGeolocation', () => ({\n  useGeolocation: () => ({\n    coordinates: null,\n    isLoading: false,\n    error: null\n  })\n}))\n\n// Mock business directory service\njest.mock('@/lib/businessDirectory', () => ({\n  portugueseBusinessService: {\n    searchBusinesses: jest.fn().mockResolvedValue({\n      businesses: [],\n      featuredBusinesses: [],\n      total: 0\n    })\n  }\n}))\n\n// Import configuration\nimport {\n  FEATURED_PORTUGUESE_BUSINESSES,\n  BUSINESS_DIRECTORY_CATEGORIES,\n  PALOP_BUSINESS_SHOWCASE,\n  BUSINESS_GEOGRAPHIC_DISTRIBUTION,\n  getFeaturedBusinessesByCategory,\n  getBusinessesByCity,\n  getPremiumBusinesses,\n  getBusinessDirectoryStats\n} from '@/config/business-directory-carousels'\n\ndescribe('Business Directory Configuration', () => {\n  beforeEach(() => {\n    mockUseMediaQuery.mockReturnValue(false) // Desktop by default\n  })\n\n  describe('Featured Portuguese Businesses', () => {\n    it('should include businesses from all lusophone countries', () => {\n      const countries = [...new Set(FEATURED_PORTUGUESE_BUSINESSES.map(b => b.ownerCountry))]\n      \n      expect(countries).toContain('portugal')\n      expect(countries).toContain('brazil')\n      expect(countries).toContain('angola')\n      expect(countries).toContain('cape_verde')\n      \n      // Should have diverse representation\n      expect(countries.length).toBeGreaterThanOrEqual(3)\n    })\n\n    it('should have geographic diversity across UK cities', () => {\n      const cities = [...new Set(FEATURED_PORTUGUESE_BUSINESSES.map(b => b.location.city))]\n      \n      expect(cities).toContain('London')\n      expect(cities).toContain('Manchester')\n      expect(cities).toContain('Birmingham')\n      expect(cities).toContain('Edinburgh')\n      \n      // Should serve multiple UK cities\n      expect(cities.length).toBeGreaterThanOrEqual(4)\n    })\n\n    it('should have bilingual titles and descriptions', () => {\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        expect(business.title).toHaveProperty('en')\n        expect(business.title).toHaveProperty('pt')\n        expect(business.description).toHaveProperty('en')\n        expect(business.description).toHaveProperty('pt')\n        \n        // Both languages should have content\n        expect(business.title.en).toBeTruthy()\n        expect(business.title.pt).toBeTruthy()\n        expect(business.description.en).toBeTruthy()\n        expect(business.description.pt).toBeTruthy()\n      })\n    })\n\n    it('should include cultural connections', () => {\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        expect(business.culturalConnection).toBeTruthy()\n        expect(typeof business.culturalConnection).toBe('string')\n        expect(business.culturalConnection.length).toBeGreaterThan(20)\n      })\n    })\n\n    it('should have proper ratings and review counts', () => {\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        expect(business.rating).toBeGreaterThanOrEqual(0)\n        expect(business.rating).toBeLessThanOrEqual(5)\n        expect(business.reviewCount).toBeGreaterThanOrEqual(0)\n        expect(typeof business.reviewCount).toBe('number')\n      })\n    })\n\n    it('should include authentic Portuguese specialties', () => {\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        expect(Array.isArray(business.specialties)).toBe(true)\n        expect(business.specialties.length).toBeGreaterThan(0)\n        \n        // Specialties should be culturally relevant\n        business.specialties.forEach(specialty => {\n          expect(typeof specialty).toBe('string')\n          expect(specialty.length).toBeGreaterThan(2)\n        })\n      })\n    })\n  })\n\n  describe('Business Directory Categories', () => {\n    it('should have comprehensive category coverage', () => {\n      expect(BUSINESS_DIRECTORY_CATEGORIES.length).toBeGreaterThanOrEqual(5)\n      \n      const categoryIds = BUSINESS_DIRECTORY_CATEGORIES.map(cat => cat.id)\n      expect(categoryIds).toContain('restaurants')\n      expect(categoryIds).toContain('cultural_services')\n      expect(categoryIds).toContain('beauty_wellness')\n      expect(categoryIds).toContain('professional_services')\n      expect(categoryIds).toContain('retail')\n    })\n\n    it('should have bilingual category names and descriptions', () => {\n      BUSINESS_DIRECTORY_CATEGORIES.forEach(category => {\n        expect(category.name).toHaveProperty('en')\n        expect(category.name).toHaveProperty('pt')\n        expect(category.description).toHaveProperty('en')\n        expect(category.description).toHaveProperty('pt')\n        \n        // Content validation\n        expect(category.name.en).toBeTruthy()\n        expect(category.name.pt).toBeTruthy()\n        expect(category.description.en).toBeTruthy()\n        expect(category.description.pt).toBeTruthy()\n      })\n    })\n\n    it('should include cultural emojis', () => {\n      BUSINESS_DIRECTORY_CATEGORIES.forEach(category => {\n        expect(category.emoji).toBeTruthy()\n        expect(typeof category.emoji).toBe('string')\n        expect(category.emoji.length).toBeGreaterThanOrEqual(1)\n      })\n    })\n\n    it('should have realistic business counts and ratings', () => {\n      BUSINESS_DIRECTORY_CATEGORIES.forEach(category => {\n        expect(category.totalBusinesses).toBeGreaterThan(0)\n        expect(category.averageRating).toBeGreaterThanOrEqual(0)\n        expect(category.averageRating).toBeLessThanOrEqual(5)\n        expect(Array.isArray(category.countries)).toBe(true)\n        expect(category.countries.length).toBeGreaterThan(0)\n      })\n    })\n  })\n\n  describe('PALOP Business Showcase', () => {\n    it('should feature businesses from all PALOP countries', () => {\n      const palopCountries = [...new Set(PALOP_BUSINESS_SHOWCASE.map(b => b.ownerCountry))]\n      \n      expect(palopCountries).toContain('angola')\n      expect(palopCountries).toContain('cape_verde')\n      expect(palopCountries).toContain('mozambique')\n      \n      // Should represent multiple PALOP countries\n      expect(palopCountries.length).toBeGreaterThanOrEqual(3)\n    })\n\n    it('should have proper PALOP flag emojis', () => {\n      const validPalopFlags = ['ðŸ‡¦ðŸ‡´', 'ðŸ‡¨ðŸ‡»', 'ðŸ‡¬ðŸ‡¼', 'ðŸ‡²ðŸ‡¿', 'ðŸ‡¸ðŸ‡¹']\n      \n      PALOP_BUSINESS_SHOWCASE.forEach(business => {\n        expect(validPalopFlags).toContain(business.flagEmoji)\n      })\n    })\n\n    it('should have cultural connections for all PALOP businesses', () => {\n      PALOP_BUSINESS_SHOWCASE.forEach(business => {\n        expect(business.culturalConnection).toBeTruthy()\n        expect(typeof business.culturalConnection).toBe('string')\n        \n        // Should mention cultural heritage or traditions\n        const culturalKeywords = ['cultural', 'tradition', 'heritage', 'authentic', 'community']\n        const hasCulturalContent = culturalKeywords.some(keyword => \n          business.culturalConnection.toLowerCase().includes(keyword)\n        )\n        expect(hasCulturalContent).toBe(true)\n      })\n    })\n  })\n\n  describe('Geographic Distribution', () => {\n    it('should cover major UK cities', () => {\n      const cities = Object.keys(BUSINESS_GEOGRAPHIC_DISTRIBUTION)\n      \n      expect(cities).toContain('London')\n      expect(cities).toContain('Manchester')\n      expect(cities).toContain('Birmingham')\n      expect(cities).toContain('Edinburgh')\n      expect(cities).toContain('Glasgow')\n    })\n\n    it('should have realistic business counts per city', () => {\n      Object.entries(BUSINESS_GEOGRAPHIC_DISTRIBUTION).forEach(([city, data]) => {\n        expect(data.total).toBeGreaterThan(0)\n        expect(data.total).toBeLessThan(200) // Realistic upper limit\n        \n        // Total should match sum of countries\n        const countrySum = Object.values(data.byCountry).reduce((sum, count) => sum + count, 0)\n        expect(countrySum).toBe(data.total)\n        \n        // Should have multiple regions for major cities\n        expect(Array.isArray(data.regions)).toBe(true)\n        if (city === 'London') {\n          expect(data.regions.length).toBeGreaterThanOrEqual(5)\n        }\n      })\n    })\n\n    it('should show Portuguese and Brazilian dominance with PALOP representation', () => {\n      Object.entries(BUSINESS_GEOGRAPHIC_DISTRIBUTION).forEach(([city, data]) => {\n        // Portugal should be well represented\n        expect(data.byCountry.portugal).toBeGreaterThan(0)\n        \n        // Brazil should have good representation\n        expect(data.byCountry.brazil).toBeGreaterThan(0)\n        \n        // Should have some PALOP representation\n        const palopCount = ('angola' in data.byCountry ? data.byCountry.angola : 0) + \n                          ('cape_verde' in data.byCountry ? data.byCountry.cape_verde : 0) + \n                          ('mozambique' in data.byCountry ? data.byCountry.mozambique : 0)\n        \n        if (city === 'London') {\n          expect(palopCount).toBeGreaterThan(0)\n        }\n      })\n    })\n  })\n\n  describe('Utility Functions', () => {\n    describe('getFeaturedBusinessesByCategory', () => {\n      it('should return businesses for valid categories', () => {\n        const restaurants = getFeaturedBusinessesByCategory('restaurant')\n        const culturalServices = getFeaturedBusinessesByCategory('cultural_services')\n        \n        expect(Array.isArray(restaurants)).toBe(true)\n        expect(Array.isArray(culturalServices)).toBe(true)\n        \n        if (restaurants.length > 0) {\n          restaurants.forEach(business => {\n            expect(business.category).toBe('restaurant')\n            expect(business.isFeatured).toBe(true)\n          })\n        }\n      })\n    })\n\n    describe('getBusinessesByCity', () => {\n      it('should filter businesses by city correctly', () => {\n        const londonBusinesses = getBusinessesByCity('London')\n        const manchesterBusinesses = getBusinessesByCity('Manchester')\n        \n        expect(Array.isArray(londonBusinesses)).toBe(true)\n        expect(Array.isArray(manchesterBusinesses)).toBe(true)\n        \n        londonBusinesses.forEach(business => {\n          expect(business.location.city).toBe('London')\n        })\n        \n        manchesterBusinesses.forEach(business => {\n          expect(business.location.city).toBe('Manchester')\n        })\n      })\n    })\n\n    describe('getPremiumBusinesses', () => {\n      it('should return only premium businesses sorted by priority', () => {\n        const premiumBusinesses = getPremiumBusinesses()\n        \n        expect(Array.isArray(premiumBusinesses)).toBe(true)\n        \n        premiumBusinesses.forEach(business => {\n          expect(business.isPremium).toBe(true)\n        })\n        \n        // Should be sorted by priority (descending)\n        for (let i = 1; i < premiumBusinesses.length; i++) {\n          expect(premiumBusinesses[i-1]?.priority || 0).toBeGreaterThanOrEqual(premiumBusinesses[i]?.priority || 0)\n        }\n      })\n    })\n\n    describe('getBusinessDirectoryStats', () => {\n      it('should return comprehensive statistics', () => {\n        const stats = getBusinessDirectoryStats()\n        \n        expect(typeof stats.totalBusinesses).toBe('number')\n        expect(typeof stats.totalFeatured).toBe('number')\n        expect(typeof stats.totalPremium).toBe('number')\n        expect(typeof stats.totalVerified).toBe('number')\n        expect(typeof stats.averageRating).toBe('number')\n        expect(Array.isArray(stats.countriesRepresented)).toBe(true)\n        expect(Array.isArray(stats.citiesServed)).toBe(true)\n        expect(typeof stats.totalCategories).toBe('number')\n        \n        // Validation\n        expect(stats.totalBusinesses).toBeGreaterThan(0)\n        expect(stats.averageRating).toBeGreaterThanOrEqual(0)\n        expect(stats.averageRating).toBeLessThanOrEqual(5)\n        expect(stats.countriesRepresented).toContain('Portugal')\n        expect(stats.countriesRepresented).toContain('Brazil')\n        expect(stats.citiesServed).toContain('London')\n        expect(stats.totalCategories).toBeGreaterThanOrEqual(5)\n      })\n    })\n  })\n\n  describe('Cultural Authenticity', () => {\n    it('should maintain Portuguese cultural authenticity in all content', () => {\n      // Check featured businesses for cultural authenticity\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        const culturalKeywords = ['portuguese', 'brazilian', 'angolan', 'authentic', 'traditional', 'cultural', 'heritage']\n        const hasPortugueseCulture = culturalKeywords.some(keyword => \n          business.description.en.toLowerCase().includes(keyword) ||\n          business.culturalConnection.toLowerCase().includes(keyword)\n        )\n        \n        expect(hasPortugueseCulture).toBe(true)\n      })\n    })\n\n    it('should use proper Portuguese terminology', () => {\n      // Check for proper Portuguese terms in Portuguese descriptions\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        if (business.ownerCountry === 'portugal') {\n          const portugueseTerms = ['portuguÃªs', 'portuguesa', 'autÃªntico', 'tradicional', 'cultural']\n          const hasPortugueseTerms = portugueseTerms.some(term => \n            business.description.pt.toLowerCase().includes(term)\n          )\n          \n          // At least some Portuguese businesses should use proper terminology\n          if (business.category === 'restaurant' || business.category === 'cultural_services') {\n            expect(hasPortugueseTerms).toBe(true)\n          }\n        }\n      })\n    })\n\n    it('should include proper flag emojis for each country', () => {\n      const flagMapping = {\n        'portugal': 'ðŸ‡µðŸ‡¹',\n        'brazil': 'ðŸ‡§ðŸ‡·',\n        'angola': 'ðŸ‡¦ðŸ‡´',\n        'cape_verde': 'ðŸ‡¨ðŸ‡»',\n        'mozambique': 'ðŸ‡²ðŸ‡¿',\n        'guinea_bissau': 'ðŸ‡¬ðŸ‡¼',\n        'sao_tome_principe': 'ðŸ‡¸ðŸ‡¹'\n      }\n\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        const expectedFlag = flagMapping[business.ownerCountry as keyof typeof flagMapping]\n        if (expectedFlag) {\n          expect(business.flagEmoji).toBe(expectedFlag)\n        }\n      })\n    })\n  })\n\n  describe('Mobile-First Design Compliance', () => {\n    it('should have proper mobile breakpoint considerations', () => {\n      // All carousel configurations should consider mobile\n      BUSINESS_DIRECTORY_CATEGORIES.forEach(category => {\n        // Categories should be designed for mobile display\n        expect(category.name.en.length).toBeLessThan(25) // Mobile-friendly length\n        expect(category.name.pt.length).toBeLessThan(30) // Portuguese can be longer\n      })\n    })\n\n    it('should have appropriate content length for mobile cards', () => {\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        // Titles should be mobile-friendly\n        expect(business.title.en.length).toBeLessThan(60)\n        expect(business.title.pt.length).toBeLessThan(70)\n        \n        // Descriptions should be readable on mobile but not too long\n        expect(business.description.en.length).toBeGreaterThan(50)\n        expect(business.description.en.length).toBeLessThan(200)\n      })\n    })\n\n    it('should have phone numbers in proper format', () => {\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        // UK phone numbers should start with +44\n        expect(business.contact.phone).toMatch(/^\\+44/)\n        \n        // Should have proper formatting\n        expect(business.contact.phone).toMatch(/^\\+44\\s\\d{2,3}\\s\\d{3,4}\\s\\d{4}$/)\n      })\n    })\n  })\n\n  describe('Performance and Data Quality', () => {\n    it('should have reasonable data sizes for carousel performance', () => {\n      // Featured businesses shouldn't be too many for initial load\n      expect(FEATURED_PORTUGUESE_BUSINESSES.length).toBeLessThan(20)\n      \n      // Categories should be manageable\n      expect(BUSINESS_DIRECTORY_CATEGORIES.length).toBeLessThan(10)\n      \n      // PALOP showcase should be focused\n      expect(PALOP_BUSINESS_SHOWCASE.length).toBeLessThan(15)\n    })\n\n    it('should have consistent data structure across all businesses', () => {\n      const requiredFields = [\n        'id', 'title', 'description', 'image', 'flagEmoji', 'category',\n        'region', 'ownerCountry', 'ownerName', 'location', 'contact',\n        'services', 'servicesPortuguese', 'rating', 'reviewCount',\n        'priceRange', 'culturalConnection', 'isVerified', 'isFeatured',\n        'isPremium', 'establishedYear', 'specialties', 'priority'\n      ]\n\n      FEATURED_PORTUGUESE_BUSINESSES.forEach(business => {\n        requiredFields.forEach(field => {\n          expect(business).toHaveProperty(field)\n        })\n      })\n    })\n\n    it('should have proper priority ordering for featured content', () => {\n      // Premium businesses should have priority 1\n      const premiumBusinesses = FEATURED_PORTUGUESE_BUSINESSES.filter(b => b.isPremium)\n      premiumBusinesses.forEach(business => {\n        expect(business.priority).toBe(1)\n      })\n      \n      // Non-premium should have lower priority\n      const nonPremiumBusinesses = FEATURED_PORTUGUESE_BUSINESSES.filter(b => !b.isPremium)\n      nonPremiumBusinesses.forEach(business => {\n        expect(business.priority).toBeGreaterThan(1)\n      })\n    })\n  })\n})\n\ndescribe('Carousel Integration Requirements', () => {\n  it('should be compatible with LusophoneCarousel component', () => {\n    // Verify that business items have required carousel item structure\n    const sampleBusiness = FEATURED_PORTUGUESE_BUSINESSES[0]\n    \n    expect(sampleBusiness).toHaveProperty('id')\n    expect(sampleBusiness?.title).toHaveProperty('en')\n    expect(sampleBusiness?.title).toHaveProperty('pt')\n    expect(sampleBusiness?.description).toHaveProperty('en')\n    expect(sampleBusiness?.description).toHaveProperty('pt')\n    expect(sampleBusiness).toHaveProperty('image')\n    expect(sampleBusiness).toHaveProperty('flagEmoji')\n    expect(sampleBusiness).toHaveProperty('category')\n    expect(sampleBusiness).toHaveProperty('priority')\n  })\n\n  it('should provide proper carousel configuration options', () => {\n    // Categories should work with compact carousel config\n    expect(BUSINESS_DIRECTORY_CATEGORIES.length).toBeGreaterThan(3) // Good for compact display\n    expect(BUSINESS_DIRECTORY_CATEGORIES.length).toBeLessThan(8) // Not too many for carousel\n    \n    // Featured businesses should work with standard carousel config\n    const premiumCount = getPremiumBusinesses().length\n    expect(premiumCount).toBeGreaterThanOrEqual(3) // Minimum for carousel\n    expect(premiumCount).toBeLessThan(12) // Reasonable for auto-advance\n  })\n})"],"names":["jest","mock","Image","src","alt","props","img","useLanguage","mockUseLanguage","useMediaQuery","mockUseMediaQuery","useGeolocation","coordinates","isLoading","error","portugueseBusinessService","searchBusinesses","fn","mockResolvedValue","businesses","featuredBusinesses","total","language","t","key","defaultValue","describe","beforeEach","mockReturnValue","it","countries","Set","FEATURED_PORTUGUESE_BUSINESSES","map","b","ownerCountry","expect","toContain","length","toBeGreaterThanOrEqual","cities","location","city","forEach","business","title","toHaveProperty","description","en","toBeTruthy","pt","culturalConnection","toBe","toBeGreaterThan","rating","toBeLessThanOrEqual","reviewCount","Array","isArray","specialties","specialty","BUSINESS_DIRECTORY_CATEGORIES","categoryIds","cat","id","category","name","emoji","totalBusinesses","averageRating","palopCountries","PALOP_BUSINESS_SHOWCASE","validPalopFlags","flagEmoji","culturalKeywords","hasCulturalContent","some","keyword","toLowerCase","includes","Object","keys","BUSINESS_GEOGRAPHIC_DISTRIBUTION","entries","data","toBeLessThan","countrySum","values","byCountry","reduce","sum","count","regions","portugal","brazil","palopCount","angola","cape_verde","mozambique","restaurants","getFeaturedBusinessesByCategory","culturalServices","isFeatured","londonBusinesses","getBusinessesByCity","manchesterBusinesses","premiumBusinesses","getPremiumBusinesses","isPremium","i","priority","stats","getBusinessDirectoryStats","totalFeatured","totalPremium","totalVerified","countriesRepresented","citiesServed","totalCategories","hasPortugueseCulture","portugueseTerms","hasPortugueseTerms","term","flagMapping","expectedFlag","contact","phone","toMatch","requiredFields","field","filter","nonPremiumBusinesses","sampleBusiness","premiumCount"],"mappings":"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"}