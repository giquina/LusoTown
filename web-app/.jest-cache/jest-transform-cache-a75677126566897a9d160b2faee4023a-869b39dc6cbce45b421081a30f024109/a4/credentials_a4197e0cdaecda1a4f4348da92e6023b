458c3035ab9a6481ca94930deab0bb59
/**
 * Secure credential configuration for LusoTown platform
 * 
 * SECURITY WARNING: Never commit actual credentials to version control.
 * This file manages environment variable access with secure fallbacks.
 * 
 * Security Features:
 * - Environment variable validation
 * - Secure defaults that fail safe
 * - Runtime security checks
 * - Lusophone community specific validation
 */ // Security validation functions
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ADMIN_CONFIG: function() {
        return ADMIN_CONFIG;
    },
    DEMO_CONFIG: function() {
        return DEMO_CONFIG;
    },
    TEST_DISPLAY_CONFIG: function() {
        return TEST_DISPLAY_CONFIG;
    },
    isAdminEmail: function() {
        return isAdminEmail;
    },
    validateDemoCredentials: function() {
        return validateDemoCredentials;
    }
});
function validateEnvironmentSecurity() {
    if (typeof window === "undefined") {
        // Server-side security validation
        const isBuildPhase = process.env.NEXT_PHASE === "phase-production-build";
        const requiredEnvVars = [
            "DEMO_EMAIL",
            "DEMO_PASSWORD",
            "ADMIN_EMAIL_DOMAIN",
            "NEXT_PUBLIC_SUPABASE_URL",
            "NEXT_PUBLIC_SUPABASE_ANON_KEY"
        ];
        const missingVars = requiredEnvVars.filter((varName)=>!process.env[varName]);
        if (missingVars.length > 0) {
            console.error("SECURITY ERROR: Missing required environment variables:", missingVars);
            // Do not fail the build step; enforce at runtime only
            if (process.env.NODE_ENV === "production" && !isBuildPhase) {
                throw new Error(`Missing critical environment variables: ${missingVars.join(", ")}`);
            }
        }
    }
}
// Run security validation on module load
validateEnvironmentSecurity();
const DEMO_CONFIG = {
    get email () {
        const email = process.env.DEMO_EMAIL;
        if (!email) {
            if (process.env.NODE_ENV === "production") {
                throw new Error("Demo email not configured in production");
            }
            return "";
        }
        return email;
    },
    get password () {
        const password = process.env.DEMO_PASSWORD;
        if (!password) {
            if (process.env.NODE_ENV === "production") {
                throw new Error("Demo password not configured in production");
            }
            return "";
        }
        return password;
    },
    get userId () {
        return process.env.DEMO_USER_ID || "demo-user-secure-id";
    },
    // Security metadata
    get isConfigured () {
        return !!(process.env.DEMO_EMAIL && process.env.DEMO_PASSWORD);
    }
};
const ADMIN_CONFIG = {
    get emailDomain () {
        const domain = process.env.ADMIN_EMAIL_DOMAIN;
        if (!domain && process.env.NODE_ENV === "production") {
            throw new Error("Admin email domain not configured in production");
        }
        return domain || "";
    },
    get isConfigured () {
        return !!process.env.ADMIN_EMAIL_DOMAIN;
    },
    // Additional admin security
    get allowedDomains () {
        const domains = process.env.ADMIN_ALLOWED_DOMAINS;
        return domains ? domains.split(",").map((d)=>d.trim()) : [];
    }
};
const TEST_DISPLAY_CONFIG = {
    email: process.env.NEXT_PUBLIC_TEST_DISPLAY_EMAIL || "demo@example.com",
    password: process.env.NEXT_PUBLIC_TEST_DISPLAY_PASSWORD || "••••••••"
};
const validateDemoCredentials = (email, password)=>{
    // Fallback demo credentials for development
    const fallbackEmail = "demo@lusotown.com";
    const fallbackPassword = "LusoTown2025!";
    // Try environment variables first, fallback to hardcoded for development
    const demoEmail = DEMO_CONFIG.email || fallbackEmail;
    const demoPassword = DEMO_CONFIG.password || fallbackPassword;
    return email.trim().toLowerCase() === demoEmail.toLowerCase() && password === demoPassword;
};
const isAdminEmail = (email)=>{
    if (!ADMIN_CONFIG.emailDomain) {
        console.warn("Admin email domain not configured. Set ADMIN_EMAIL_DOMAIN environment variable.");
        return false;
    }
    return email.includes(ADMIN_CONFIG.emailDomain);
};
// Security checks
if (typeof window === "undefined") {
    // Server-side security validation
    if (!process.env.DEMO_EMAIL || !process.env.DEMO_PASSWORD) {
        console.warn("SECURITY: Demo credentials not set in environment variables");
    }
    if (!process.env.ADMIN_EMAIL_DOMAIN) {
        console.warn("SECURITY: Admin email domain not configured");
    }
}

//# sourceMappingURL=data:application/json;base64,