{"version":3,"sources":["/workspaces/LusoTown/web-app/src/components/MessageTranslator.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport logger from '@/utils/logger'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { \n  Languages, \n  RefreshCw, \n  Volume2, \n  Copy, \n  Check,\n  AlertCircle,\n  Info,\n  Globe,\n  BookOpen,\n  Sparkles\n} from 'lucide-react'\nimport { useLanguage } from '@/context/LanguageContext'\nimport { \n  PORTUGUESE_DIALECTS,\n  TRANSLATION_QUALITY,\n  CULTURAL_CONTEXTS,\n  getDialectInfo,\n  getTranslationQuality,\n  translateIdiom,\n  isPortugueseIdiom\n} from '@/config/portuguese-translation'\nimport { PORTUGUESE_COLORS } from '@/config/brand'\n\ninterface TranslationResult {\n  originalText: string\n  translatedText: string\n  sourceLanguage: string\n  targetLanguage: string\n  dialect?: string\n  confidence: number\n  detectedIdioms?: string[]\n  culturalNotes?: string[]\n  alternativeTranslations?: string[]\n}\n\ninterface MessageTranslatorProps {\n  originalMessage: string\n  sourceLanguage?: string\n  targetLanguage?: string\n  dialect?: string\n  showCulturalContext?: boolean\n  enableVoicePlayback?: boolean\n  onTranslationComplete?: (result: TranslationResult) => void\n  className?: string\n}\n\nexport default function MessageTranslator({\n  originalMessage,\n  sourceLanguage = 'auto',\n  targetLanguage,\n  dialect = 'pt-PT',\n  showCulturalContext = true,\n  enableVoicePlayback = true,\n  onTranslationComplete,\n  className = ''\n}: MessageTranslatorProps) {\n  const { language } = useLanguage()\n  const [translation, setTranslation] = useState<TranslationResult | null>(null)\n  const [isTranslating, setIsTranslating] = useState(false)\n  const [showOriginal, setShowOriginal] = useState(true)\n  const [copiedText, setCopiedText] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [isPlayingOriginal, setIsPlayingOriginal] = useState(false)\n  const [isPlayingTranslated, setIsPlayingTranslated] = useState(false)\n\n  const autoTargetLanguage = targetLanguage || (language === 'pt' ? 'en' : 'pt')\n  const dialectInfo = getDialectInfo(dialect)\n\n  const translations = {\n    en: {\n      translating: 'Translating...',\n      showOriginal: 'Show original',\n      showTranslation: 'Show translation',\n      playOriginal: 'Play original text',\n      playTranslated: 'Play translated text',\n      copyOriginal: 'Copy original',\n      copyTranslation: 'Copy translation',\n      retranslate: 'Retranslate',\n      confidence: 'Translation confidence',\n      dialect: 'Detected dialect',\n      culturalNote: 'Cultural context',\n      idiomDetected: 'Portuguese idiom detected',\n      alternativeTranslations: 'Alternative translations',\n      translationError: 'Translation failed. Please try again.',\n      copied: 'Copied!',\n      excellent: 'Excellent translation quality',\n      good: 'Good translation quality',\n      fair: 'Fair translation quality - may need review',\n      poor: 'Poor translation quality - manual review recommended',\n      autoDetected: 'Auto-detected',\n      formalContext: 'Formal Portuguese context',\n      informalContext: 'Informal Portuguese context',\n      regionalExpression: 'Regional Portuguese expression'\n    },\n    pt: {\n      translating: 'Traduzindo...',\n      showOriginal: 'Mostrar original',\n      showTranslation: 'Mostrar tradução',\n      playOriginal: 'Reproduzir texto original',\n      playTranslated: 'Reproduzir tradução',\n      copyOriginal: 'Copiar original',\n      copyTranslation: 'Copiar tradução',\n      retranslate: 'Traduzir novamente',\n      confidence: 'Confiança da tradução',\n      dialect: 'Dialeto detetado',\n      culturalNote: 'Contexto cultural',\n      idiomDetected: 'Expressão portuguesa detetada',\n      alternativeTranslations: 'Traduções alternativas',\n      translationError: 'Falha na tradução. Tente novamente.',\n      copied: 'Copiado!',\n      excellent: 'Qualidade excelente de tradução',\n      good: 'Boa qualidade de tradução',\n      fair: 'Qualidade razoável - pode precisar de revisão',\n      poor: 'Qualidade fraca - revisão manual recomendada',\n      autoDetected: 'Detetado automaticamente',\n      formalContext: 'Contexto formal português',\n      informalContext: 'Contexto informal português',\n      regionalExpression: 'Expressão regional portuguesa'\n    }\n  }\n\n  const t = translations[language]\n\n  useEffect(() => {\n    if (originalMessage.trim()) {\n      translateMessage()\n    }\n  }, [originalMessage, autoTargetLanguage, dialect])\n\n  const translateMessage = async () => {\n    if (!originalMessage.trim()) return\n\n    setIsTranslating(true)\n    setError(null)\n\n    try {\n      // Simulate API call to translation service\n      const response = await fetch('/api/translate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: originalMessage,\n          source: sourceLanguage,\n          target: autoTargetLanguage,\n          dialect: dialect,\n          includeCulturalContext: showCulturalContext\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error('Translation service unavailable')\n      }\n\n      const result = await response.json()\n      \n      // Enhanced result with cultural analysis\n      const enhancedResult: TranslationResult = {\n        ...result,\n        detectedIdioms: detectIdioms(originalMessage, dialect),\n        culturalNotes: generateCulturalNotes(originalMessage, dialect),\n        alternativeTranslations: result.alternatives || []\n      }\n\n      setTranslation(enhancedResult)\n      onTranslationComplete?.(enhancedResult)\n\n    } catch (error) {\n      logger.error('Translation error:', error)\n      setError(t.translationError)\n      \n      // Fallback: create basic translation result\n      setTranslation({\n        originalText: originalMessage,\n        translatedText: originalMessage, // Fallback to original\n        sourceLanguage: sourceLanguage,\n        targetLanguage: autoTargetLanguage,\n        dialect: dialect,\n        confidence: 0.5,\n        detectedIdioms: detectIdioms(originalMessage, dialect),\n        culturalNotes: generateCulturalNotes(originalMessage, dialect)\n      })\n    } finally {\n      setIsTranslating(false)\n    }\n  }\n\n  const detectIdioms = (text: string, dialect: string): string[] => {\n    const idioms: string[] = []\n    \n    if (isPortugueseIdiom(text, dialect)) {\n      // Extract actual idioms from text\n      const commonIdioms = [\n        'saudade', 'que saudades', 'desenrasca', 'jeitinho', \n        'fixe', 'legal', 'bacano', 'tá ligado'\n      ]\n      \n      commonIdioms.forEach(idiom => {\n        if (text.toLowerCase().includes(idiom)) {\n          idioms.push(idiom)\n        }\n      })\n    }\n    \n    return idioms\n  }\n\n  const generateCulturalNotes = (text: string, dialect: string): string[] => {\n    const notes: string[] = []\n    const culturalContext = CULTURAL_CONTEXTS[dialectInfo.country.toLowerCase()]\n    \n    if (!culturalContext) return notes\n\n    // Check for cultural markers\n    culturalContext.culturalMarkers.forEach(marker => {\n      if (text.toLowerCase().includes(marker)) {\n        notes.push(`\"${marker}\" is a cultural reference from ${culturalContext.country}`)\n      }\n    })\n\n    // Check for formality level\n    const formalWords = ['senhor', 'senhora', 'vossa', 'vossemecê']\n    const informalWords = ['tu', 'você', 'mano', 'cara']\n    \n    if (formalWords.some(word => text.toLowerCase().includes(word))) {\n      notes.push(t.formalContext)\n    } else if (informalWords.some(word => text.toLowerCase().includes(word))) {\n      notes.push(t.informalContext)\n    }\n\n    return notes\n  }\n\n  const copyToClipboard = async (text: string, type: 'original' | 'translation') => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopiedText(type)\n      setTimeout(() => setCopiedText(null), 2000)\n    } catch (error) {\n      logger.error('Copy failed:', error)\n    }\n  }\n\n  const playText = async (text: string, isOriginal: boolean) => {\n    if (!enableVoicePlayback || !('speechSynthesis' in window)) return\n\n    const utterance = new SpeechSynthesisUtterance(text)\n    \n    if (isOriginal) {\n      utterance.lang = dialect\n      setIsPlayingOriginal(true)\n      utterance.onend = () => setIsPlayingOriginal(false)\n    } else {\n      utterance.lang = autoTargetLanguage === 'pt' ? 'pt-PT' : 'en-US'\n      setIsPlayingTranslated(true)\n      utterance.onend = () => setIsPlayingTranslated(false)\n    }\n\n    utterance.rate = 0.9\n    utterance.pitch = 1.0\n    utterance.volume = 1.0\n\n    speechSynthesis.speak(utterance)\n  }\n\n  const getQualityIndicator = (confidence: number) => {\n    const quality = getTranslationQuality(confidence)\n    return (\n      <div className=\"flex items-center space-x-2\">\n        <span style={{ color: quality.color }}>{quality.icon}</span>\n        <span className=\"text-sm text-gray-600\">\n          {confidence > 0 ? `${Math.round(confidence * 100)}%` : t.autoDetected}\n        </span>\n      </div>\n    )\n  }\n\n  if (isTranslating) {\n    return (\n      <div className={`flex items-center justify-center p-4 ${className}`}>\n        <motion.div\n          animate={{ rotate: 360 }}\n          transition={{ duration: 1, repeat: Infinity, ease: 'linear' }}\n          className=\"w-5 h-5 border-2 border-primary-600 border-t-transparent rounded-full mr-3\"\n          style={{ borderColor: PORTUGUESE_COLORS.primary }}\n        />\n        <span className=\"text-sm text-gray-600\">{t.translating}</span>\n      </div>\n    )\n  }\n\n  if (!translation) return null\n\n  return (\n    <div className={`message-translator bg-white border border-gray-200 rounded-lg p-4 space-y-4 ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Languages className=\"w-5 h-5 text-primary-600\" style={{ color: PORTUGUESE_COLORS.primary }} />\n            <span className=\"font-medium text-gray-900\">\n              {dialectInfo.flag} {dialectInfo.name[language]} → {autoTargetLanguage === 'en' ? '🇬🇧 English' : '🇵🇹 Português'}\n            </span>\n          </div>\n          \n          {getQualityIndicator(translation.confidence)}\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => setShowOriginal(!showOriginal)}\n            className=\"px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\"\n          >\n            {showOriginal ? t.showTranslation : t.showOriginal}\n          </motion.button>\n\n          <button\n            onClick={translateMessage}\n            className=\"p-2 text-gray-600 hover:text-primary-600 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-lg\"\n        >\n          <AlertCircle className=\"w-4 h-4 text-red-600 flex-shrink-0\" />\n          <p className=\"text-sm text-red-700\">{error}</p>\n        </motion.div>\n      )}\n\n      {/* Content Toggle */}\n      <AnimatePresence mode=\"wait\">\n        {showOriginal ? (\n          <motion.div\n            key=\"original\"\n            initial={{ opacity: 0, x: -10 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: 10 }}\n            className=\"space-y-3\"\n          >\n            {/* Original Text */}\n            <div className=\"p-3 bg-gray-50 rounded-lg border border-gray-200\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Globe className=\"w-4 h-4 text-gray-600\" />\n                  <span className=\"text-sm font-medium text-gray-700\">Original</span>\n                  <span className=\"text-xs px-2 py-0.5 bg-gray-200 rounded-full\">\n                    {dialectInfo.name[language]}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center space-x-1\">\n                  {enableVoicePlayback && (\n                    <button\n                      onClick={() => playText(translation.originalText, true)}\n                      disabled={isPlayingOriginal}\n                      className={`p-1 text-gray-600 hover:text-primary-600 hover:bg-gray-200 rounded transition-colors ${isPlayingOriginal ? 'animate-pulse' : ''}`}\n                    >\n                      <Volume2 className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                  \n                  <button\n                    onClick={() => copyToClipboard(translation.originalText, 'original')}\n                    className=\"p-1 text-gray-600 hover:text-primary-600 hover:bg-gray-200 rounded transition-colors\"\n                  >\n                    {copiedText === 'original' ? (\n                      <Check className=\"w-4 h-4 text-green-600\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-800 leading-relaxed\">\n                {translation.originalText}\n              </p>\n            </div>\n          </motion.div>\n        ) : (\n          <motion.div\n            key=\"translation\"\n            initial={{ opacity: 0, x: 10 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -10 }}\n            className=\"space-y-3\"\n          >\n            {/* Translated Text */}\n            <div className=\"p-3 bg-blue-50 rounded-lg border border-blue-200\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Sparkles className=\"w-4 h-4 text-blue-600\" />\n                  <span className=\"text-sm font-medium text-blue-700\">Translation</span>\n                  <span className=\"text-xs px-2 py-0.5 bg-blue-200 rounded-full\">\n                    {autoTargetLanguage === 'en' ? 'English' : 'Português'}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center space-x-1\">\n                  {enableVoicePlayback && (\n                    <button\n                      onClick={() => playText(translation.translatedText, false)}\n                      disabled={isPlayingTranslated}\n                      className={`p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-200 rounded transition-colors ${isPlayingTranslated ? 'animate-pulse' : ''}`}\n                    >\n                      <Volume2 className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                  \n                  <button\n                    onClick={() => copyToClipboard(translation.translatedText, 'translation')}\n                    className=\"p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-200 rounded transition-colors\"\n                  >\n                    {copiedText === 'translation' ? (\n                      <Check className=\"w-4 h-4 text-green-600\" />\n                    ) : (\n                      <Copy className=\"w-4 h-4\" />\n                    )}\n                  </button>\n                </div>\n              </div>\n              \n              <p className=\"text-blue-900 leading-relaxed\">\n                {translation.translatedText}\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Cultural Context & Idioms */}\n      {showCulturalContext && (translation.detectedIdioms?.length || translation.culturalNotes?.length) && (\n        <div className=\"space-y-3\">\n          {/* Detected Idioms */}\n          {translation.detectedIdioms && translation.detectedIdioms.length > 0 && (\n            <div className=\"p-3 bg-yellow-50 rounded-lg border border-yellow-200\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <BookOpen className=\"w-4 h-4 text-yellow-700\" />\n                <span className=\"text-sm font-medium text-yellow-800\">{t.idiomDetected}</span>\n              </div>\n              \n              <div className=\"space-y-1\">\n                {translation.detectedIdioms.map((idiom, index) => (\n                  <div key={index} className=\"text-sm\">\n                    <span className=\"font-medium text-yellow-800\">\"{idiom}\"</span>\n                    <span className=\"text-yellow-700\"> - {translateIdiom(idiom, dialect) || 'Regional expression'}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Cultural Notes */}\n          {translation.culturalNotes && translation.culturalNotes.length > 0 && (\n            <div className=\"p-3 bg-green-50 rounded-lg border border-green-200\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Info className=\"w-4 h-4 text-green-700\" />\n                <span className=\"text-sm font-medium text-green-800\">{t.culturalNote}</span>\n              </div>\n              \n              <ul className=\"space-y-1 text-sm text-green-700\">\n                {translation.culturalNotes.map((note, index) => (\n                  <li key={index} className=\"flex items-start space-x-2\">\n                    <span className=\"w-1 h-1 bg-green-600 rounded-full mt-2 flex-shrink-0\" />\n                    <span>{note}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Alternative Translations */}\n      {translation.alternativeTranslations && translation.alternativeTranslations.length > 0 && (\n        <div className=\"p-3 bg-gray-50 rounded-lg border border-gray-200\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <RefreshCw className=\"w-4 h-4 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-700\">{t.alternativeTranslations}</span>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {translation.alternativeTranslations.slice(0, 3).map((alt, index) => (\n              <div key={index} className=\"text-sm text-gray-600 p-2 bg-white rounded border border-gray-100\">\n                {alt}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Copy Confirmation */}\n      <AnimatePresence>\n        {copiedText && (\n          <motion.div\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 10 }}\n            className=\"flex items-center justify-center p-2 bg-green-100 text-green-800 rounded-lg\"\n          >\n            <Check className=\"w-4 h-4 mr-2\" />\n            <span className=\"text-sm font-medium\">{t.copied}</span>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}"],"names":["MessageTranslator","originalMessage","sourceLanguage","targetLanguage","dialect","showCulturalContext","enableVoicePlayback","onTranslationComplete","className","language","useLanguage","translation","setTranslation","useState","isTranslating","setIsTranslating","showOriginal","setShowOriginal","copiedText","setCopiedText","error","setError","isPlayingOriginal","setIsPlayingOriginal","isPlayingTranslated","setIsPlayingTranslated","autoTargetLanguage","dialectInfo","getDialectInfo","translations","en","translating","showTranslation","playOriginal","playTranslated","copyOriginal","copyTranslation","retranslate","confidence","culturalNote","idiomDetected","alternativeTranslations","translationError","copied","excellent","good","fair","poor","autoDetected","formalContext","informalContext","regionalExpression","pt","t","useEffect","trim","translateMessage","response","fetch","method","headers","body","JSON","stringify","text","source","target","includeCulturalContext","ok","Error","result","json","enhancedResult","detectedIdioms","detectIdioms","culturalNotes","generateCulturalNotes","alternatives","logger","originalText","translatedText","idioms","isPortugueseIdiom","commonIdioms","forEach","idiom","toLowerCase","includes","push","notes","culturalContext","CULTURAL_CONTEXTS","country","culturalMarkers","marker","formalWords","informalWords","some","word","copyToClipboard","type","navigator","clipboard","writeText","setTimeout","playText","isOriginal","window","utterance","SpeechSynthesisUtterance","lang","onend","rate","pitch","volume","speechSynthesis","speak","getQualityIndicator","quality","getTranslationQuality","div","span","style","color","icon","Math","round","motion","animate","rotate","transition","duration","repeat","Infinity","ease","borderColor","PORTUGUESE_COLORS","primary","Languages","flag","name","button","whileHover","scale","whileTap","onClick","RefreshCw","initial","opacity","y","AlertCircle","p","AnimatePresence","mode","x","exit","Globe","disabled","Volume2","Check","Copy","Sparkles","length","BookOpen","map","index","translateIdiom","Info","ul","note","li","slice","alt"],"mappings":"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"}