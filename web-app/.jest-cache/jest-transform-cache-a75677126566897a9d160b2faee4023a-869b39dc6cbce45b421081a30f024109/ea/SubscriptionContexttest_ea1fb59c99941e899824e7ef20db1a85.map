{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/contexts/SubscriptionContext.test.tsx"],"sourcesContent":["import React from 'react'\nimport { renderHook, act } from '@testing-library/react'\nimport { SubscriptionProvider, useSubscription } from '@/context/SubscriptionContext'\nimport { LanguageProvider } from '@/context/LanguageContext'\nimport { portugueseTestUtils } from '../utils/test-utils'\n\n// Mock Stripe\njest.mock('@stripe/stripe-js', () => ({\n  loadStripe: jest.fn(() => Promise.resolve({\n    redirectToCheckout: jest.fn(),\n  })),\n}))\n\n// Mock auth service\njest.mock('@/lib/auth', () => ({\n  authService: {\n    getCurrentUser: jest.fn(),\n    isDemoUser: jest.fn(() => false),\n    onAuthStateChange: jest.fn(() => jest.fn()),\n  },\n}))\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(() => Promise.resolve({ data: null, error: null })),\n        })),\n      })),\n      insert: jest.fn(() => Promise.resolve({ data: null, error: null })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => Promise.resolve({ data: null, error: null })),\n      })),\n    })),\n  },\n}))\n\n// Mock fetch for API calls\nglobal.fetch = jest.fn()\n\ndescribe('SubscriptionContext', () => {\n  const mockUser = {\n    id: 'test-user',\n    email: 'test@example.com',\n    name: 'Test User',\n  }\n\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\n    <LanguageProvider>\n      <SubscriptionProvider>{children}</SubscriptionProvider>\n    </LanguageProvider>\n  )\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    const { authService } = require('@/lib/auth')\n    authService.getCurrentUser.mockReturnValue(mockUser)\n    authService.isDemoUser.mockReturnValue(false)\n  })\n\n  describe('Initialization', () => {\n    it('should initialize with loading state', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      expect(result.current.isLoading).toBe(true)\n      expect(result.current.subscription).toBeNull()\n      expect(result.current.hasActiveSubscription).toBe(false)\n    })\n\n    it('should handle demo user correctly', () => {\n      const { authService } = require('@/lib/auth')\n      authService.isDemoUser.mockReturnValue(true)\n      \n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      expect(result.current.subscriptionRequired).toBe(false)\n    })\n  })\n\n  describe('Subscription Management', () => {\n    it('should create subscription with correct tier', async () => {\n      const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({ sessionId: 'test-session-id' }),\n      } as Response)\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      await act(async () => {\n        const sessionId = await result.current.createSubscription('ambassador')\n        expect(sessionId).toBe('test-session-id')\n      })\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/create-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: mockUser.id,\n          userEmail: mockUser.email,\n          userName: mockUser.name,\n          tier: 'ambassador',\n        }),\n      })\n    })\n\n    it('should handle subscription creation failure', async () => {\n      const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n      } as Response)\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      await act(async () => {\n        const sessionId = await result.current.createSubscription('community')\n        expect(sessionId).toBeNull()\n      })\n    })\n\n    it('should upgrade subscription successfully', async () => {\n      const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({}),\n      } as Response)\n\n      // Set up existing subscription\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      // Mock existing subscription\n      act(() => {\n        (result.current as any).subscription = portugueseTestUtils.mockPremiumSubscription\n      })\n\n      await act(async () => {\n        const success = await result.current.upgradeSubscription('ambassador')\n        expect(success).toBe(true)\n      })\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/upgrade-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscriptionId: undefined, // since we mocked the subscription\n          newTier: 'ambassador',\n        }),\n      })\n    })\n\n    it('should cancel subscription successfully', async () => {\n      const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () => Promise.resolve({}),\n      } as Response)\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      // Mock existing subscription\n      act(() => {\n        (result.current as any).subscription = portugueseTestUtils.mockPremiumSubscription\n      })\n\n      await act(async () => {\n        const success = await result.current.cancelSubscription()\n        expect(success).toBe(true)\n      })\n\n      expect(mockFetch).toHaveBeenCalledWith('/api/cancel-subscription', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscriptionId: undefined, // since we mocked the subscription\n        }),\n      })\n    })\n  })\n\n  describe('Membership Tiers and Discounts', () => {\n    it('should calculate correct service discount for each tier', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      // Test different tiers\n      const tiers = [\n        { tier: 'community', expectedDiscount: 10 },\n        { tier: 'silver', expectedDiscount: 15 },\n        { tier: 'gold', expectedDiscount: 20 },\n        { tier: 'ambassador', expectedDiscount: 25 },\n      ]\n\n      tiers.forEach(({ tier, expectedDiscount }) => {\n        act(() => {\n          (result.current as any).subscription = {\n            ...portugueseTestUtils.mockPremiumSubscription,\n            tier,\n            status: 'active',\n            current_period_end: '2025-01-01T00:00:00Z',\n          }\n        })\n\n        expect(result.current.serviceDiscount).toBe(expectedDiscount)\n        expect(result.current.membershipTier).toBe(tier)\n      })\n    })\n\n    it('should return no discount for inactive subscription', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      expect(result.current.serviceDiscount).toBe(0)\n      expect(result.current.membershipTier).toBe('none')\n    })\n  })\n\n  describe('Trial Management', () => {\n    it('should detect active trial period', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      const futureDate = new Date()\n      futureDate.setDate(futureDate.getDate() + 7)\n      \n      act(() => {\n        (result.current as any).trial = {\n          id: 'trial-1',\n          user_id: mockUser.id,\n          trial_start: new Date().toISOString(),\n          trial_end: futureDate.toISOString(),\n          is_used: false,\n          created_at: new Date().toISOString(),\n        }\n      })\n\n      expect(result.current.isInTrial).toBe(true)\n      expect(result.current.trialDaysRemaining).toBeGreaterThan(0)\n      expect(result.current.subscriptionRequired).toBe(false)\n    })\n\n    it('should detect expired trial', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      const pastDate = new Date()\n      pastDate.setDate(pastDate.getDate() - 1)\n      \n      act(() => {\n        (result.current as any).trial = {\n          id: 'trial-1',\n          user_id: mockUser.id,\n          trial_start: new Date().toISOString(),\n          trial_end: pastDate.toISOString(),\n          is_used: false,\n          created_at: new Date().toISOString(),\n        }\n      })\n\n      expect(result.current.isInTrial).toBe(false)\n      expect(result.current.trialDaysRemaining).toBe(0)\n      expect(result.current.subscriptionRequired).toBe(true)\n    })\n\n    it('should mark trial as used', async () => {\n      const { supabase } = require('@/lib/supabase')\n      supabase.from.mockReturnValue({\n        update: jest.fn(() => ({\n          eq: jest.fn(() => Promise.resolve({ error: null })),\n        })),\n      })\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      act(() => {\n        (result.current as any).trial = {\n          id: 'trial-1',\n          user_id: mockUser.id,\n          trial_start: new Date().toISOString(),\n          trial_end: new Date().toISOString(),\n          is_used: false,\n          created_at: new Date().toISOString(),\n        }\n      })\n\n      await act(async () => {\n        await result.current.markTrialAsUsed()\n      })\n\n      expect(supabase.from).toHaveBeenCalledWith('subscription_trials')\n    })\n  })\n\n  describe('Usage Tracking', () => {\n    it('should track membership usage correctly', async () => {\n      const { supabase } = require('@/lib/supabase')\n      supabase.from.mockReturnValue({\n        insert: jest.fn(() => Promise.resolve({ error: null })),\n      })\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      act(() => {\n        (result.current as any).subscription = portugueseTestUtils.mockPremiumSubscription\n      })\n\n      await act(async () => {\n        await result.current.trackMembershipUsage(\n          'transport_discount',\n          'executive_transport',\n          20,\n          15.50\n        )\n      })\n\n      expect(supabase.from).toHaveBeenCalledWith('membership_usage')\n    })\n  })\n\n  describe('Portuguese Context Integration', () => {\n    it('should provide Portuguese error messages', async () => {\n      const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n      } as Response)\n\n      // Mock toast\n      const { toast } = require('react-hot-toast')\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      // Set language to Portuguese\n      const languageContext = require('@/context/LanguageContext')\n      languageContext.language = 'pt'\n\n      await act(async () => {\n        await result.current.createSubscription('community')\n      })\n\n      // Should show Portuguese error message\n      expect(toast.error).toHaveBeenCalledWith(\n        expect.stringContaining('Erro ao criar subscrição')\n      )\n    })\n\n    it('should handle Portuguese subscription tiers', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      const portugueseTiers = ['community', 'silver', 'gold', 'ambassador'] as const\n      \n      portugueseTiers.forEach(tier => {\n        act(() => {\n          (result.current as any).subscription = {\n            ...portugueseTestUtils.mockPremiumSubscription,\n            tier,\n            status: 'active',\n            current_period_end: '2025-01-01T00:00:00Z',\n          }\n        })\n\n        expect(result.current.membershipTier).toBe(tier)\n        expect(result.current.hasActiveSubscription).toBe(true)\n      })\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle network errors gracefully', async () => {\n      const mockFetch = global.fetch as jest.MockedFunction<typeof fetch>\n      mockFetch.mockRejectedValueOnce(new Error('Network error'))\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      await act(async () => {\n        const sessionId = await result.current.createSubscription('community')\n        expect(sessionId).toBeNull()\n      })\n    })\n\n    it('should handle Supabase errors', async () => {\n      const { supabase } = require('@/lib/supabase')\n      supabase.from.mockReturnValue({\n        update: jest.fn(() => ({\n          eq: jest.fn(() => Promise.resolve({ error: { message: 'Database error' } })),\n        })),\n      })\n\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      act(() => {\n        (result.current as any).trial = {\n          id: 'trial-1',\n          user_id: mockUser.id,\n          is_used: false,\n        }\n      })\n\n      await act(async () => {\n        await result.current.markTrialAsUsed()\n      })\n\n      // Should not crash, error should be logged\n      expect(console.error).toHaveBeenCalled()\n    })\n  })\n\n  describe('Subscription Status Detection', () => {\n    it('should correctly identify active subscription', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      const futureDate = new Date()\n      futureDate.setFullYear(futureDate.getFullYear() + 1)\n      \n      act(() => {\n        (result.current as any).subscription = {\n          ...portugueseTestUtils.mockPremiumSubscription,\n          status: 'active',\n          current_period_end: futureDate.toISOString(),\n        }\n      })\n\n      expect(result.current.hasActiveSubscription).toBe(true)\n      expect(result.current.subscriptionRequired).toBe(false)\n    })\n\n    it('should correctly identify expired subscription', () => {\n      const { result } = renderHook(() => useSubscription(), { wrapper })\n      \n      const pastDate = new Date()\n      pastDate.setFullYear(pastDate.getFullYear() - 1)\n      \n      act(() => {\n        (result.current as any).subscription = {\n          ...portugueseTestUtils.mockPremiumSubscription,\n          status: 'active',\n          current_period_end: pastDate.toISOString(),\n        }\n      })\n\n      expect(result.current.hasActiveSubscription).toBe(false)\n      expect(result.current.subscriptionRequired).toBe(true)\n    })\n  })\n})\n"],"names":["jest","mock","loadStripe","fn","Promise","resolve","redirectToCheckout","authService","getCurrentUser","isDemoUser","onAuthStateChange","supabase","from","select","eq","single","data","error","insert","update","global","fetch","describe","mockUser","id","email","name","wrapper","children","LanguageProvider","SubscriptionProvider","beforeEach","clearAllMocks","require","mockReturnValue","it","result","renderHook","useSubscription","expect","current","isLoading","toBe","subscription","toBeNull","hasActiveSubscription","subscriptionRequired","mockFetch","mockResolvedValueOnce","ok","json","sessionId","act","createSubscription","toHaveBeenCalledWith","method","headers","body","JSON","stringify","userId","userEmail","userName","tier","status","portugueseTestUtils","mockPremiumSubscription","success","upgradeSubscription","subscriptionId","undefined","newTier","cancelSubscription","tiers","expectedDiscount","forEach","current_period_end","serviceDiscount","membershipTier","futureDate","Date","setDate","getDate","trial","user_id","trial_start","toISOString","trial_end","is_used","created_at","isInTrial","trialDaysRemaining","toBeGreaterThan","pastDate","markTrialAsUsed","trackMembershipUsage","toast","languageContext","language","stringContaining","portugueseTiers","mockRejectedValueOnce","Error","message","console","toHaveBeenCalled","setFullYear","getFullYear"],"mappings":"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"}