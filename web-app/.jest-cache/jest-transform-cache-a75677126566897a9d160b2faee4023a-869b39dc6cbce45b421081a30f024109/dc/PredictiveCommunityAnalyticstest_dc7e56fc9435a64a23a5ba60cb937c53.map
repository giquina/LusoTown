{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/ai/PredictiveCommunityAnalytics.test.ts"],"sourcesContent":["/**\n * Comprehensive Test Suite for Production-Ready Predictive Community Analytics\n * Tests luxury Portuguese-speaking community analytics with GDPR compliance and performance optimization\n */\n\nimport { PredictiveCommunityAnalytics, predictiveCommunityAnalytics } from '@/lib/ai/PredictiveCommunityAnalytics'\n\ndescribe('PredictiveCommunityAnalytics', () => {\n  let analytics: PredictiveCommunityAnalytics\n\n  beforeEach(() => {\n    analytics = new PredictiveCommunityAnalytics()\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    // Clean up any timers or async operations\n    // jest.runOnlyPendingTimers()\n  })\n\n  describe('GDPR Compliance and Privacy', () => {\n    it('should require analytics consent for personalized predictions', async () => {\n      const privacySettings = {\n        analyticsConsent: false,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      }\n\n      await expect(\n        analytics.predictCommunityTrends('month', 'user123', privacySettings)\n      ).rejects.toThrow('Analytics consent required for personalized predictions')\n    })\n\n    it('should allow anonymous predictions without consent', async () => {\n      const trends = await analytics.predictCommunityTrends('week')\n      \n      expect(trends).toBeDefined()\n      expect(Array.isArray(trends)).toBe(true)\n    })\n\n    it('should cache results with proper GDPR consent tracking', async () => {\n      const privacySettings = {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      }\n\n      // First call - should process and cache\n      const trends1 = await analytics.predictCommunityTrends('week', 'user123', privacySettings)\n      \n      // Second call - should use cache\n      const trends2 = await analytics.predictCommunityTrends('week', 'user123', privacySettings)\n      \n      expect(trends1).toEqual(trends2)\n    })\n\n    it('should reject cached results if consent levels changed', async () => {\n      const initialPrivacy = {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: true\n      }\n\n      const restrictedPrivacy = {\n        analyticsConsent: true,\n        personalizedRecommendations: false,\n        communityInsights: true,\n        marketingAnalytics: false\n      }\n\n      // Cache with full consent\n      await analytics.predictCommunityTrends('week', 'user123', initialPrivacy)\n      \n      // Should not use cache with restricted consent\n      const trends = await analytics.predictCommunityTrends('week', 'user123', restrictedPrivacy)\n      expect(trends).toBeDefined()\n    })\n  })\n\n  describe('Luxury Event Success Prediction', () => {\n    const luxuryEventDetails = {\n      type: 'cultural_gala',\n      date: new Date('2025-06-15'),\n      time: '19:00',\n      location: 'central_london',\n      culturalTheme: 'fado',\n      targetAudience: ['business_leaders', 'cultural_elites'],\n      price: 125,\n      capacity: 150,\n      luxuryLevel: 'luxury' as const,\n      premiumServices: ['private_transport', 'premium_catering', 'cultural_guide'],\n      culturalAuthenticity: 9\n    }\n\n    it('should predict luxury event success with premium factors', async () => {\n      const prediction = await analytics.predictEventSuccess(luxuryEventDetails)\n      \n      expect(prediction.successProbability).toBeGreaterThan(70)\n      expect(prediction.luxuryScore).toBeGreaterThan(80)\n      expect(prediction.authenticityScore).toBeGreaterThan(85)\n      expect(prediction.premiumPositioning.marketPosition).toBe('luxury')\n    })\n\n    it('should validate luxury event requirements', async () => {\n      const invalidLuxuryEvent = {\n        ...luxuryEventDetails,\n        culturalAuthenticity: 5, // Too low for luxury\n        luxuryLevel: 'luxury' as const\n      }\n\n      await expect(\n        analytics.predictEventSuccess(invalidLuxuryEvent)\n      ).rejects.toThrow('Luxury events must maintain high cultural authenticity')\n    })\n\n    it('should provide sophisticated marketing recommendations for luxury events', async () => {\n      const prediction = await analytics.predictEventSuccess(luxuryEventDetails)\n      \n      const marketingText = prediction.recommendedMarketing.join(' ')\n      expect(marketingText).toMatch(/affluent Portuguese professionals/i)\n      expect(marketingText).toMatch(/luxury Portuguese brands/i)\n      expect(marketingText).toMatch(/exclusivity and limited availability/i)\n    })\n\n    it('should calculate premium positioning correctly', async () => {\n      const prediction = await analytics.predictEventSuccess(luxuryEventDetails)\n      \n      expect(prediction.premiumPositioning.marketPosition).toBe('luxury')\n      expect(prediction.premiumPositioning.recommendedPricing.min).toBeGreaterThanOrEqual(75)\n      expect(prediction.premiumPositioning.targetDemographics).toContain('business_leaders')\n    })\n\n    it('should handle ultra-luxury events with special requirements', async () => {\n      const ultraLuxuryEvent = {\n        ...luxuryEventDetails,\n        price: 250,\n        luxuryLevel: 'ultra_luxury' as const,\n        capacity: 50 // Smaller, more exclusive\n      }\n\n      const prediction = await analytics.predictEventSuccess(ultraLuxuryEvent)\n      \n      expect(prediction.premiumPositioning.marketPosition).toBe('ultra_luxury')\n      const ultraMarketingText = prediction.recommendedMarketing.join(' ')\n      expect(ultraMarketingText).toMatch(/private invitation-only/i)\n    })\n  })\n\n  describe('Portuguese Cultural Analysis', () => {\n    it('should accurately assess Portuguese cultural elements', () => {\n      // Test cultural resonance calculation\n      const fadoResonance = (analytics as any).calculateCulturalResonance('fado')\n      const saudadeResonance = (analytics as any).calculateCulturalResonance('saudade')\n      const santosResonance = (analytics as any).calculateCulturalResonance('santos_populares')\n      \n      expect(fadoResonance).toBeGreaterThan(0.9)\n      expect(saudadeResonance).toBeGreaterThan(0.85)\n      expect(santosResonance).toBeGreaterThan(0.9)\n    })\n\n    it('should consider seasonal preferences for Portuguese events', () => {\n      const summerDate = new Date('2025-07-15')\n      const winterDate = new Date('2025-12-15')\n      \n      const summerOutdoor = (analytics as any).calculateSeasonalPreference(summerDate, 'outdoor_festival')\n      const winterFado = (analytics as any).calculateSeasonalPreference(winterDate, 'fado_evening')\n      \n      expect(summerOutdoor).toBeGreaterThan(0.8)\n      expect(winterFado).toBeGreaterThan(0.8)\n    })\n\n    it('should evaluate location accessibility for Portuguese-speaking community', () => {\n      const vauxhallScore = (analytics as any).analyzeLocationAccessibility('vauxhall')\n      const stockwellScore = (analytics as any).analyzeLocationAccessibility('stockwell')\n      const eastLondonScore = (analytics as any).analyzeLocationAccessibility('east_london')\n      \n      expect(vauxhallScore).toBeGreaterThan(90) // High Portuguese concentration\n      expect(stockwellScore).toBeGreaterThan(90) // High Portuguese concentration\n      expect(eastLondonScore).toBeLessThan(80) // Lower Portuguese concentration\n    })\n  })\n\n  describe('User Churn Prediction and Retention', () => {\n    const mockMember = {\n      id: 'user123',\n      profile: {\n        region: 'portugal' as const,\n        generationInUK: 1,\n        saudadeIntensity: 7,\n        culturalMaintenance: 8,\n        adaptationStyle: 'traditional' as const,\n        luxuryServicePreference: 8,\n        heritageConnectionStrength: 9,\n        culturalIdentityEvolution: [],\n        premiumEngagementLevel: 'luxury' as const\n      },\n      engagement: {\n        eventAttendance: 5,\n        messagesSent: 20,\n        connectionsRequested: 8,\n        contentShared: 15,\n        groupsJoined: 3,\n        lastActive: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n        sessionDuration: 1800, // 30 minutes\n        featureUsage: { events: 10, matches: 5 },\n        culturalContentEngagement: 85\n      },\n      behavior: {\n        loginFrequency: 'weekly' as const,\n        peakActivityTimes: ['19:00', '20:00'],\n        contentPreferences: ['cultural_events', 'fado_music'],\n        communicationStyle: 'active' as const,\n        eventBookingPattern: 'planned' as const,\n        culturalInterestEvolution: [],\n        saudadeIntensityTrend: [7, 8, 7, 6],\n        socialConnectivity: 75\n      },\n      preferences: {\n        eventTypes: ['cultural_festivals', 'fado_nights'],\n        languageUsage: { pt: 70, en: 30 },\n        contentFormats: ['video', 'live_events'],\n        communicationChannels: ['email', 'app'],\n        culturalActivities: ['fado', 'traditional_food'],\n        groupSizes: 'medium' as const,\n        timePreferences: ['evening'],\n        locationPreferences: ['central_london', 'south_london']\n      },\n      location: {\n        borough: 'lambeth',\n        coordinates: { lat: 51.5, lon: -0.1 },\n        travelRadius: 15,\n        preferredAreas: ['vauxhall', 'stockwell'],\n        transportPreferences: ['tube', 'bus']\n      },\n      demographics: {\n        age: 35,\n        gender: 'male',\n        profession: 'business_executive',\n        educationLevel: 'masters',\n        familyStatus: 'married',\n        timeInUK: 5,\n        childrenInUK: true,\n        portugueseNetworkSize: 25\n      },\n      privacy: {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      },\n      consentTimestamp: new Date(),\n      dataRetentionExpiry: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),\n      analyticsVersion: '2.0.0'\n    }\n\n    it('should predict user churn with sophisticated analysis', async () => {\n      // Mock the memberData to include our test member\n      ;(analytics as any).memberData.set('user123', mockMember)\n      \n      const prediction = await analytics.predictUserChurn('user123', mockMember.privacy)\n      \n      expect(prediction.userId).toBe('user123')\n      expect(prediction.churnProbability).toBeGreaterThanOrEqual(0)\n      expect(prediction.churnProbability).toBeLessThanOrEqual(100)\n      expect(prediction.riskLevel).toMatch(/^(low|medium|high|critical)$/)\n    })\n\n    it('should provide luxury retention strategies for premium members', async () => {\n      ;(analytics as any).memberData.set('user123', mockMember)\n      \n      const prediction = await analytics.predictUserChurn('user123', mockMember.privacy)\n      \n      const retentionText = prediction.retentionStrategies.join(' ')\n      expect(retentionText).toMatch(/exclusive VIP|premium content|luxury events/i)\n      \n      if (mockMember.profile.premiumEngagementLevel === 'luxury') {\n        const luxuryRetentionText = prediction.retentionStrategies.join(' ')\n        expect(luxuryRetentionText).toMatch(/dedicated luxury account manager/i)\n      }\n    })\n\n    it('should generate sophisticated cultural interventions', async () => {\n      ;(analytics as any).memberData.set('user123', mockMember)\n      \n      const prediction = await analytics.predictUserChurn('user123', mockMember.privacy)\n      \n      const interventionText = prediction.culturalInterventions.join(' ')\n      expect(interventionText).toMatch(/premium fado music therapy/i)\n      expect(interventionText).toMatch(/luxury Portuguese cultural/i)\n    })\n\n    it('should recommend elite community connections', async () => {\n      ;(analytics as any).memberData.set('user123', mockMember)\n      \n      const prediction = await analytics.predictUserChurn('user123', mockMember.privacy)\n      \n      const connectionsText = prediction.communityConnections.join(' ')\n      expect(connectionsText).toMatch(/elite Portuguese professionals/i)\n      expect(connectionsText).toMatch(/business leaders/i)\n    })\n\n    it('should create premium engagement strategies', async () => {\n      ;(analytics as any).memberData.set('user123', mockMember)\n      \n      const prediction = await analytics.predictUserChurn('user123', mockMember.privacy)\n      \n      expect(prediction.premiumEngagementStrategy).toBeDefined()\n      expect(prediction.premiumEngagementStrategy.approach).toMatch(/premium|luxury|exclusive/)\n      expect(prediction.premiumEngagementStrategy.channels).toContain(\n        expect.stringMatching(/account_manager|exclusive|priority/)\n      )\n    })\n  })\n\n  describe('Performance and Optimization', () => {\n    it('should complete predictions within acceptable time limits', async () => {\n      const startTime = Date.now()\n      \n      await analytics.predictCommunityTrends('week')\n      \n      const duration = Date.now() - startTime\n      expect(duration).toBeLessThan(5000) // Should complete within 5 seconds\n    })\n\n    it('should use caching effectively for repeated queries', async () => {\n      const privacySettings = {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      }\n\n      // First call - no cache\n      const start1 = Date.now()\n      await analytics.predictCommunityTrends('month', 'user456', privacySettings)\n      const duration1 = Date.now() - start1\n\n      // Second call - should use cache\n      const start2 = Date.now()\n      await analytics.predictCommunityTrends('month', 'user456', privacySettings)\n      const duration2 = Date.now() - start2\n\n      expect(duration2).toBeLessThan(duration1) // Cache should be faster\n    })\n\n    it('should handle large datasets efficiently', async () => {\n      // Mock large community data\n      const largeMemberData = new Array(1000).fill(null).map((_, index) => ({\n        id: `user${index}`,\n        // ... mock member data\n      }))\n\n      // This should complete without memory issues or excessive time\n      const startTime = Date.now()\n      const health = await analytics.analyzeCommunityHealth()\n      const duration = Date.now() - startTime\n\n      expect(health).toBeDefined()\n      expect(duration).toBeLessThan(10000) // Should complete within 10 seconds\n    })\n  })\n\n  describe('Business Intelligence and Revenue Optimization', () => {\n    const businessEvent = {\n      type: 'networking_premium',\n      date: new Date('2025-09-20'),\n      time: '18:30',\n      location: 'central_london',\n      culturalTheme: 'business_networking',\n      targetAudience: ['entrepreneurs', 'business_executives'],\n      price: 85,\n      capacity: 100,\n      luxuryLevel: 'premium' as const,\n      culturalAuthenticity: 7\n    }\n\n    it('should optimize pricing recommendations for revenue', async () => {\n      const prediction = await analytics.predictEventSuccess(businessEvent)\n      \n      expect(prediction.premiumPositioning.recommendedPricing).toBeDefined()\n      expect(prediction.premiumPositioning.recommendedPricing.min).toBeGreaterThan(0)\n      expect(prediction.premiumPositioning.recommendedPricing.max).toBeGreaterThan(\n        prediction.premiumPositioning.recommendedPricing.min\n      )\n    })\n\n    it('should identify high-value target demographics', async () => {\n      const prediction = await analytics.predictEventSuccess(businessEvent)\n      \n      const demographicsText = prediction.premiumPositioning.targetDemographics.join(' ')\n      expect(demographicsText).toMatch(/professionals|business|entrepreneurs/i)\n    })\n\n    it('should provide revenue optimization insights', async () => {\n      const prediction = await analytics.predictEventSuccess(businessEvent)\n      \n      // Success probability should factor in revenue potential\n      if (prediction.luxuryScore > 70 && prediction.authenticityScore > 70) {\n        expect(prediction.successProbability).toBeGreaterThan(75)\n      }\n    })\n  })\n\n  describe('Community Health Analytics', () => {\n    it('should provide comprehensive community health metrics', async () => {\n      const health = await analytics.analyzeCommunityHealth()\n      \n      expect(health.overallHealth).toBeGreaterThanOrEqual(0)\n      expect(health.overallHealth).toBeLessThanOrEqual(100)\n      \n      expect(health.engagement).toBeDefined()\n      expect(health.cultural).toBeDefined()\n      expect(health.social).toBeDefined()\n      expect(health.growth).toBeDefined()\n      expect(health.wellbeing).toBeDefined()\n    })\n\n    it('should track Portuguese-specific cultural health metrics', async () => {\n      const health = await analytics.analyzeCommunityHealth()\n      \n      expect(health.cultural.authenticity).toBeDefined()\n      expect(health.cultural.preservation).toBeDefined()\n      expect(health.cultural.generationalTransfer).toBeDefined()\n      \n      expect(health.wellbeing.saudadeManagement).toBeDefined()\n      expect(health.wellbeing.culturalComfort).toBeDefined()\n    })\n  })\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle invalid user IDs gracefully', async () => {\n      await expect(\n        analytics.predictUserChurn('nonexistent-user')\n      ).rejects.toThrow('User not found')\n    })\n\n    it('should validate cultural authenticity scores', () => {\n      expect(() => {\n        ;(analytics as any).validateCulturalAuthenticity(-1)\n      }).toThrow('Cultural authenticity must be between 1-10')\n      \n      expect(() => {\n        ;(analytics as any).validateCulturalAuthenticity(11)\n      }).toThrow('Cultural authenticity must be between 1-10')\n    })\n\n    it('should handle network errors gracefully', async () => {\n      // Mock network failure\n      jest.spyOn(console, 'error').mockImplementation(() => {})\n      \n      // Should not crash on network errors\n      const trends = await analytics.predictCommunityTrends('week')\n      expect(trends).toBeDefined()\n    })\n  })\n\n  describe('Data Privacy and GDPR Compliance', () => {\n    it('should respect data retention policies', () => {\n      const retentionDays = (analytics as any).GDPR_DATA_RETENTION_DAYS\n      expect(retentionDays).toBe(1095) // 3 years as per GDPR\n    })\n\n    it('should expire cached data appropriately', async () => {\n      const cacheKey = 'test_cache'\n      const testData = { test: 'data' }\n      \n      ;(analytics as any).setCachedResult(cacheKey, testData, 'user123', {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      })\n      \n      // Should exist immediately\n      let cached = (analytics as any).getCachedResult(cacheKey)\n      expect(cached).toBeDefined()\n      \n      // Mock cache expiry\n      ;(analytics as any).predictionCache.set(cacheKey, {\n        ...cached,\n        timestamp: Date.now() - 400000 // Older than TTL\n      })\n      \n      // Should be expired\n      cached = (analytics as any).getCachedResult(cacheKey)\n      expect(cached).toBeNull()\n    })\n  })\n\n  describe('Production Readiness', () => {\n    it('should handle concurrent requests efficiently', async () => {\n      const promises = Array.from({ length: 10 }, (_, i) => \n        analytics.predictCommunityTrends('week', `user${i}`, {\n          analyticsConsent: true,\n          personalizedRecommendations: true,\n          communityInsights: true,\n          marketingAnalytics: false\n        })\n      )\n      \n      const results = await Promise.all(promises)\n      \n      expect(results).toHaveLength(10)\n      results.forEach(result => {\n        expect(Array.isArray(result)).toBe(true)\n      })\n    })\n\n    it('should maintain model versioning', () => {\n      const version = (analytics as any).MODEL_VERSION\n      expect(version).toBe('2.0.0')\n    })\n\n    it('should track performance metrics', async () => {\n      await analytics.predictCommunityTrends('week')\n      \n      const metrics = (analytics as any).performanceMetrics\n      expect(metrics.processingTimes.length).toBeGreaterThan(0)\n    })\n  })\n})\n\ndescribe('Singleton Instance', () => {\n  it('should provide a singleton instance', () => {\n    expect(predictiveCommunityAnalytics).toBeInstanceOf(PredictiveCommunityAnalytics)\n  })\n\n  it('should maintain state across multiple calls to singleton', async () => {\n    // Make calls to singleton instance\n    await predictiveCommunityAnalytics.predictCommunityTrends('week')\n    const health = await predictiveCommunityAnalytics.analyzeCommunityHealth()\n    \n    expect(health).toBeDefined()\n  })\n})"],"names":["describe","analytics","beforeEach","PredictiveCommunityAnalytics","jest","clearAllMocks","afterEach","it","privacySettings","analyticsConsent","personalizedRecommendations","communityInsights","marketingAnalytics","expect","predictCommunityTrends","rejects","toThrow","trends","toBeDefined","Array","isArray","toBe","trends1","trends2","toEqual","initialPrivacy","restrictedPrivacy","luxuryEventDetails","type","date","Date","time","location","culturalTheme","targetAudience","price","capacity","luxuryLevel","premiumServices","culturalAuthenticity","prediction","predictEventSuccess","successProbability","toBeGreaterThan","luxuryScore","authenticityScore","premiumPositioning","marketPosition","invalidLuxuryEvent","marketingText","recommendedMarketing","join","toMatch","recommendedPricing","min","toBeGreaterThanOrEqual","targetDemographics","toContain","ultraLuxuryEvent","ultraMarketingText","fadoResonance","calculateCulturalResonance","saudadeResonance","santosResonance","summerDate","winterDate","summerOutdoor","calculateSeasonalPreference","winterFado","vauxhallScore","analyzeLocationAccessibility","stockwellScore","eastLondonScore","toBeLessThan","mockMember","id","profile","region","generationInUK","saudadeIntensity","culturalMaintenance","adaptationStyle","luxuryServicePreference","heritageConnectionStrength","culturalIdentityEvolution","premiumEngagementLevel","engagement","eventAttendance","messagesSent","connectionsRequested","contentShared","groupsJoined","lastActive","now","sessionDuration","featureUsage","events","matches","culturalContentEngagement","behavior","loginFrequency","peakActivityTimes","contentPreferences","communicationStyle","eventBookingPattern","culturalInterestEvolution","saudadeIntensityTrend","socialConnectivity","preferences","eventTypes","languageUsage","pt","en","contentFormats","communicationChannels","culturalActivities","groupSizes","timePreferences","locationPreferences","borough","coordinates","lat","lon","travelRadius","preferredAreas","transportPreferences","demographics","age","gender","profession","educationLevel","familyStatus","timeInUK","childrenInUK","portugueseNetworkSize","privacy","consentTimestamp","dataRetentionExpiry","analyticsVersion","memberData","set","predictUserChurn","userId","churnProbability","toBeLessThanOrEqual","riskLevel","retentionText","retentionStrategies","luxuryRetentionText","interventionText","culturalInterventions","connectionsText","communityConnections","premiumEngagementStrategy","approach","channels","stringMatching","startTime","duration","start1","duration1","start2","duration2","largeMemberData","fill","map","_","index","health","analyzeCommunityHealth","businessEvent","max","demographicsText","overallHealth","cultural","social","growth","wellbeing","authenticity","preservation","generationalTransfer","saudadeManagement","culturalComfort","validateCulturalAuthenticity","spyOn","console","mockImplementation","retentionDays","GDPR_DATA_RETENTION_DAYS","cacheKey","testData","test","setCachedResult","cached","getCachedResult","predictionCache","timestamp","toBeNull","promises","from","length","i","results","Promise","all","toHaveLength","forEach","result","version","MODEL_VERSION","metrics","performanceMetrics","processingTimes","predictiveCommunityAnalytics","toBeInstanceOf"],"mappings":"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"}