{"version":3,"sources":["/workspaces/LusoTown/web-app/src/hooks/useCarouselPerformanceOptimization.ts"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useCallback, useRef } from 'react'\nimport { useLanguage } from '@/context/LanguageContext'\nimport { PORTUGUESE_COLORS } from '@/config/brand'\nimport logger from '@/utils/logger'\n\ninterface CarouselPerformanceMetrics {\n  loadTime: number\n  renderTime: number\n  interactionLatency: number\n  memoryUsage: number\n  networkStatus: 'online' | 'offline' | 'slow'\n  frameRate: number\n  bundleSize: number\n  cacheHitRatio: number\n}\n\ninterface MobileOptimizationSettings {\n  enableImageLazyLoading: boolean\n  enableIntersectionObserver: boolean\n  enableVirtualScrolling: boolean\n  enablePreloadOptimization: boolean\n  enableBundleSplitting: boolean\n  enableCriticalPathOptimization: boolean\n  enablePortugueseContentPrioritization: boolean\n}\n\ninterface PortugueseReadingPatterns {\n  averageReadingTime: number\n  scrollVelocity: number\n  interactionFrequency: number\n  contentEngagement: number\n  preferredAutoAdvanceSpeed: number\n}\n\nconst DEFAULT_MOBILE_SETTINGS: MobileOptimizationSettings = {\n  enableImageLazyLoading: true,\n  enableIntersectionObserver: true,\n  enableVirtualScrolling: true,\n  enablePreloadOptimization: true,\n  enableBundleSplitting: true,\n  enableCriticalPathOptimization: true,\n  enablePortugueseContentPrioritization: true\n}\n\nconst PORTUGUESE_READING_SPEEDS = {\n  'pt-pt': 200, // words per minute for European Portuguese\n  'pt-br': 180, // words per minute for Brazilian Portuguese\n  'en-gb': 220  // words per minute for English (UK)\n}\n\nexport function useCarouselPerformanceOptimization(options?: {\n  enableRealTimeMonitoring?: boolean\n  enablePortugueseOptimizations?: boolean\n  optimizationLevel?: 'basic' | 'standard' | 'aggressive'\n}) {\n  const { language } = useLanguage()\n  const [metrics, setMetrics] = useState<CarouselPerformanceMetrics>({\n    loadTime: 0,\n    renderTime: 0,\n    interactionLatency: 0,\n    memoryUsage: 0,\n    networkStatus: 'online',\n    frameRate: 60,\n    bundleSize: 0,\n    cacheHitRatio: 0\n  })\n\n  const [mobileSettings, setMobileSettings] = useState<MobileOptimizationSettings>(DEFAULT_MOBILE_SETTINGS)\n  const [portugueseReadingPatterns, setPortugueseReadingPatterns] = useState<PortugueseReadingPatterns>({\n    averageReadingTime: PORTUGUESE_READING_SPEEDS[language === 'pt' ? 'pt-pt' : 'en-gb'],\n    scrollVelocity: 0,\n    interactionFrequency: 0,\n    contentEngagement: 0,\n    preferredAutoAdvanceSpeed: 5000\n  })\n\n  const performanceObserver = useRef<PerformanceObserver>()\n  const frameRateMonitor = useRef<number>()\n  const memoryMonitor = useRef<NodeJS.Timeout>()\n  const interactionTimer = useRef<number>()\n  const cacheAnalytics = useRef<Map<string, number>>(new Map())\n\n  // Portuguese cultural content optimization\n  const optimizePortugueseContentTiming = useCallback((contentLength: number, language: string) => {\n    const wordsPerMinute = PORTUGUESE_READING_SPEEDS[language as keyof typeof PORTUGUESE_READING_SPEEDS] || 200\n    const estimatedReadingTime = (contentLength / wordsPerMinute) * 60 * 1000 // Convert to milliseconds\n    \n    // Add Portuguese cultural breathing space (Portuguese culture values reflection time)\n    const culturalBuffer = language === 'pt' ? 1500 : 1000\n    \n    return Math.max(3000, estimatedReadingTime + culturalBuffer)\n  }, [])\n\n  // Advanced mobile performance monitoring\n  const startPerformanceMonitoring = useCallback(() => {\n    if (!options?.enableRealTimeMonitoring) return\n\n    // Performance Observer for advanced metrics\n    if ('PerformanceObserver' in window) {\n      performanceObserver.current = new PerformanceObserver((list) => {\n        const entries = list.getEntries()\n        \n        entries.forEach((entry) => {\n          if (entry.entryType === 'measure') {\n            setMetrics(prev => ({\n              ...prev,\n              renderTime: entry.duration\n            }))\n          }\n          \n          if (entry.entryType === 'navigation') {\n            const navEntry = entry as PerformanceNavigationTiming\n            setMetrics(prev => ({\n              ...prev,\n              loadTime: navEntry.loadEventEnd - navEntry.loadEventStart\n            }))\n          }\n        })\n      })\n\n      performanceObserver.current.observe({ \n        entryTypes: ['measure', 'navigation', 'paint', 'largest-contentful-paint'] \n      })\n    }\n\n    // Frame rate monitoring\n    let lastTime = performance.now()\n    let frameCount = 0\n\n    const measureFrameRate = (currentTime: number) => {\n      frameCount++\n      \n      if (currentTime - lastTime >= 1000) {\n        setMetrics(prev => ({\n          ...prev,\n          frameRate: Math.round((frameCount * 1000) / (currentTime - lastTime))\n        }))\n        \n        frameCount = 0\n        lastTime = currentTime\n      }\n      \n      frameRateMonitor.current = requestAnimationFrame(measureFrameRate)\n    }\n    \n    frameRateMonitor.current = requestAnimationFrame(measureFrameRate)\n\n    // Memory monitoring\n    memoryMonitor.current = setInterval(() => {\n      if ('memory' in performance) {\n        const memory = (performance as any).memory\n        setMetrics(prev => ({\n          ...prev,\n          memoryUsage: Math.round(memory.usedJSHeapSize / 1024 / 1024)\n        }))\n      }\n    }, 2000)\n\n    // Network status monitoring\n    const updateNetworkStatus = () => {\n      const connection = (navigator as any).connection\n      let status: 'online' | 'offline' | 'slow' = navigator.onLine ? 'online' : 'offline'\n      \n      if (connection && connection.effectiveType) {\n        if (['slow-2g', '2g'].includes(connection.effectiveType)) {\n          status = 'slow'\n        }\n      }\n      \n      setMetrics(prev => ({ ...prev, networkStatus: status }))\n    }\n\n    updateNetworkStatus()\n    window.addEventListener('online', updateNetworkStatus)\n    window.addEventListener('offline', updateNetworkStatus)\n\n    return () => {\n      window.removeEventListener('online', updateNetworkStatus)\n      window.removeEventListener('offline', updateNetworkStatus)\n    }\n  }, [options?.enableRealTimeMonitoring])\n\n  // Carousel-specific optimizations\n  const optimizeCarouselPerformance = useCallback(() => {\n    const level = options?.optimizationLevel || 'standard'\n    \n    // Adjust settings based on optimization level\n    if (level === 'aggressive') {\n      setMobileSettings(prev => ({\n        ...prev,\n        enableVirtualScrolling: true,\n        enableBundleSplitting: true,\n        enableCriticalPathOptimization: true\n      }))\n    }\n\n    // Portuguese content prioritization\n    if (options?.enablePortugueseOptimizations && language === 'pt') {\n      // Optimize for Portuguese reading patterns\n      const portugueseOptimizations = {\n        preloadDistance: 3, // Preload more content for Portuguese users\n        lazyLoadThreshold: 100, // Larger threshold for Portuguese text\n        cacheStrategy: 'aggressive' as const\n      }\n\n      logger.info('[Carousel Performance] Applied Portuguese cultural optimizations', portugueseOptimizations)\n    }\n  }, [options?.optimizationLevel, options?.enablePortugueseOptimizations, language])\n\n  // Image optimization for Portuguese cultural content\n  const optimizePortugueseImages = useCallback(async (imageUrl: string): Promise<string> => {\n    if (!mobileSettings.enableImageLazyLoading) return imageUrl\n\n    // Portuguese cultural image optimization\n    const isMobile = window.innerWidth <= 768\n    const isSlowConnection = metrics.networkStatus === 'slow'\n    \n    let optimizedUrl = imageUrl\n    \n    // Apply mobile optimizations\n    if (isMobile || isSlowConnection) {\n      // Reduce quality for mobile/slow connections\n      if (imageUrl.includes('cloudinary')) {\n        optimizedUrl = imageUrl.replace(/q_\\d+/, isSlowConnection ? 'q_30' : 'q_60')\n        optimizedUrl = optimizedUrl.replace(/w_\\d+/, isMobile ? 'w_400' : 'w_600')\n      }\n    }\n\n    // Cache optimization analytics\n    const cacheKey = `img_${imageUrl.split('/').pop()}`\n    const cacheHits = cacheAnalytics.current.get(cacheKey) || 0\n    cacheAnalytics.current.set(cacheKey, cacheHits + 1)\n    \n    return optimizedUrl\n  }, [mobileSettings.enableImageLazyLoading, metrics.networkStatus])\n\n  // Portuguese reading pattern analysis\n  const analyzePortugueseReadingPatterns = useCallback((interactionData: {\n    scrollVelocity: number\n    dwellTime: number\n    engagementScore: number\n  }) => {\n    setPortugueseReadingPatterns(prev => ({\n      ...prev,\n      scrollVelocity: interactionData.scrollVelocity,\n      contentEngagement: interactionData.engagementScore,\n      preferredAutoAdvanceSpeed: optimizePortugueseContentTiming(200, language)\n    }))\n\n    // Adjust carousel timing based on Portuguese reading patterns\n    const isPortugueseReader = language === 'pt'\n    const slowReader = interactionData.dwellTime > portugueseReadingPatterns.averageReadingTime * 1.3\n    \n    if (isPortugueseReader && slowReader) {\n      // Provide more time for Portuguese cultural content\n      setPortugueseReadingPatterns(prev => ({\n        ...prev,\n        preferredAutoAdvanceSpeed: prev.preferredAutoAdvanceSpeed * 1.2\n      }))\n    }\n  }, [language, optimizePortugueseContentTiming])\n\n  // Interaction latency measurement\n  const measureInteractionLatency = useCallback(() => {\n    interactionTimer.current = performance.now()\n  }, [])\n\n  const recordInteractionComplete = useCallback(() => {\n    if (interactionTimer.current) {\n      const latency = performance.now() - interactionTimer.current\n      setMetrics(prev => ({\n        ...prev,\n        interactionLatency: latency\n      }))\n    }\n  }, [])\n\n  // Bundle size analysis\n  const analyzeBundleSize = useCallback(async () => {\n    if (!mobileSettings.enableBundleSplitting) return\n\n    try {\n      // Measure loaded bundle size\n      const resources = performance.getEntriesByType('resource')\n      let totalSize = 0\n      \n      resources.forEach((resource: any) => {\n        if (resource.name.includes('carousel') || resource.name.includes('lusophone')) {\n          totalSize += resource.transferSize || 0\n        }\n      })\n      \n      setMetrics(prev => ({\n        ...prev,\n        bundleSize: Math.round(totalSize / 1024) // Convert to KB\n      }))\n\n      // Cache hit ratio calculation\n      const totalCacheRequests = Array.from(cacheAnalytics.current.values()).reduce((a, b) => a + b, 0)\n      const cacheHits = Array.from(cacheAnalytics.current.values()).filter(hits => hits > 1).length\n      const hitRatio = totalCacheRequests > 0 ? (cacheHits / totalCacheRequests) * 100 : 0\n      \n      setMetrics(prev => ({\n        ...prev,\n        cacheHitRatio: Math.round(hitRatio)\n      }))\n\n    } catch (error) {\n      logger.warn('[Carousel Performance] Bundle analysis failed:', error)\n    }\n  }, [mobileSettings.enableBundleSplitting])\n\n  // Auto-advance timing optimization for Portuguese content\n  const getOptimalAutoAdvanceTime = useCallback((contentLength: number) => {\n    const baseTime = optimizePortugueseContentTiming(contentLength, language)\n    const readingPatternAdjustment = portugueseReadingPatterns.preferredAutoAdvanceSpeed\n    const connectionAdjustment = metrics.networkStatus === 'slow' ? 1.5 : 1\n    \n    return Math.round(baseTime * connectionAdjustment)\n  }, [optimizePortugueseContentTiming, language, portugueseReadingPatterns.preferredAutoAdvanceSpeed, metrics.networkStatus])\n\n  // Performance optimization recommendations\n  const getOptimizationRecommendations = useCallback(() => {\n    const recommendations: string[] = []\n\n    if (metrics.frameRate < 55) {\n      recommendations.push('enable-virtual-scrolling')\n    }\n\n    if (metrics.memoryUsage > 100) {\n      recommendations.push('optimize-memory-usage')\n    }\n\n    if (metrics.interactionLatency > 100) {\n      recommendations.push('reduce-animation-complexity')\n    }\n\n    if (metrics.networkStatus === 'slow') {\n      recommendations.push('enable-aggressive-caching')\n    }\n\n    if (metrics.bundleSize > 500) {\n      recommendations.push('enable-code-splitting')\n    }\n\n    if (language === 'pt' && portugueseReadingPatterns.contentEngagement < 70) {\n      recommendations.push('optimize-portuguese-content-timing')\n    }\n\n    return recommendations\n  }, [metrics, language, portugueseReadingPatterns.contentEngagement])\n\n  // Initialize performance monitoring\n  useEffect(() => {\n    const cleanup = startPerformanceMonitoring()\n    optimizeCarouselPerformance()\n    analyzeBundleSize()\n\n    return () => {\n      cleanup?.()\n      \n      if (performanceObserver.current) {\n        performanceObserver.current.disconnect()\n      }\n      \n      if (frameRateMonitor.current) {\n        cancelAnimationFrame(frameRateMonitor.current)\n      }\n      \n      if (memoryMonitor.current) {\n        clearInterval(memoryMonitor.current)\n      }\n    }\n  }, [startPerformanceMonitoring, optimizeCarouselPerformance, analyzeBundleSize])\n\n  return {\n    metrics,\n    mobileSettings,\n    portugueseReadingPatterns,\n    optimizePortugueseImages,\n    analyzePortugueseReadingPatterns,\n    measureInteractionLatency,\n    recordInteractionComplete,\n    getOptimalAutoAdvanceTime,\n    getOptimizationRecommendations,\n    isOptimized: Object.values(mobileSettings).some(setting => setting === true)\n  }\n}\n\n// Portuguese cultural performance utilities\nexport const PortugueseCarouselPerformanceUtils = {\n  // Calculate optimal image sizes for Portuguese cultural content\n  getOptimalImageSize: (viewportWidth: number, isMobile: boolean) => {\n    if (isMobile) {\n      return viewportWidth <= 375 ? 300 : 400\n    }\n    return viewportWidth <= 768 ? 500 : 700\n  },\n\n  // Optimize Portuguese text rendering\n  optimizePortugueseTextRendering: () => {\n    const style = document.createElement('style')\n    style.textContent = `\n      .portuguese-carousel-text {\n        font-feature-settings: \"liga\" 1, \"kern\" 1;\n        text-rendering: optimizeLegibility;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        word-break: break-word;\n        hyphens: auto;\n      }\n      \n      .portuguese-carousel-text[lang=\"pt\"] {\n        line-height: 1.6;\n        letter-spacing: 0.025em;\n      }\n    `\n    document.head.appendChild(style)\n  },\n\n  // Measure Portuguese content readability\n  measurePortugueseReadability: (text: string, language: string) => {\n    const words = text.split(/\\s+/).length\n    const sentences = text.split(/[.!?]+/).length\n    const avgWordsPerSentence = words / sentences\n    \n    // Portuguese typically has longer sentences\n    const isPortugueseOptimal = language === 'pt' ? \n      avgWordsPerSentence <= 18 : // Portuguese\n      avgWordsPerSentence <= 15   // English\n    \n    return {\n      wordCount: words,\n      sentenceCount: sentences,\n      avgWordsPerSentence: Math.round(avgWordsPerSentence),\n      isOptimal: isPortugueseOptimal,\n      estimatedReadingTime: (words / PORTUGUESE_READING_SPEEDS[language as keyof typeof PORTUGUESE_READING_SPEEDS]) * 60\n    }\n  }\n}"],"names":["PortugueseCarouselPerformanceUtils","useCarouselPerformanceOptimization","DEFAULT_MOBILE_SETTINGS","enableImageLazyLoading","enableIntersectionObserver","enableVirtualScrolling","enablePreloadOptimization","enableBundleSplitting","enableCriticalPathOptimization","enablePortugueseContentPrioritization","PORTUGUESE_READING_SPEEDS","options","language","useLanguage","metrics","setMetrics","useState","loadTime","renderTime","interactionLatency","memoryUsage","networkStatus","frameRate","bundleSize","cacheHitRatio","mobileSettings","setMobileSettings","portugueseReadingPatterns","setPortugueseReadingPatterns","averageReadingTime","scrollVelocity","interactionFrequency","contentEngagement","preferredAutoAdvanceSpeed","performanceObserver","useRef","frameRateMonitor","memoryMonitor","interactionTimer","cacheAnalytics","Map","optimizePortugueseContentTiming","useCallback","contentLength","wordsPerMinute","estimatedReadingTime","culturalBuffer","Math","max","startPerformanceMonitoring","enableRealTimeMonitoring","window","current","PerformanceObserver","list","entries","getEntries","forEach","entry","entryType","prev","duration","navEntry","loadEventEnd","loadEventStart","observe","entryTypes","lastTime","performance","now","frameCount","measureFrameRate","currentTime","round","requestAnimationFrame","setInterval","memory","usedJSHeapSize","updateNetworkStatus","connection","navigator","status","onLine","effectiveType","includes","addEventListener","removeEventListener","optimizeCarouselPerformance","level","optimizationLevel","enablePortugueseOptimizations","portugueseOptimizations","preloadDistance","lazyLoadThreshold","cacheStrategy","logger","info","optimizePortugueseImages","imageUrl","isMobile","innerWidth","isSlowConnection","optimizedUrl","replace","cacheKey","split","pop","cacheHits","get","set","analyzePortugueseReadingPatterns","interactionData","engagementScore","isPortugueseReader","slowReader","dwellTime","measureInteractionLatency","recordInteractionComplete","latency","analyzeBundleSize","resources","getEntriesByType","totalSize","resource","name","transferSize","totalCacheRequests","Array","from","values","reduce","a","b","filter","hits","length","hitRatio","error","warn","getOptimalAutoAdvanceTime","baseTime","readingPatternAdjustment","connectionAdjustment","getOptimizationRecommendations","recommendations","push","useEffect","cleanup","disconnect","cancelAnimationFrame","clearInterval","isOptimized","Object","some","setting","getOptimalImageSize","viewportWidth","optimizePortugueseTextRendering","style","document","createElement","textContent","head","appendChild","measurePortugueseReadability","text","words","sentences","avgWordsPerSentence","isPortugueseOptimal","wordCount","sentenceCount","isOptimal"],"mappings":"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"}