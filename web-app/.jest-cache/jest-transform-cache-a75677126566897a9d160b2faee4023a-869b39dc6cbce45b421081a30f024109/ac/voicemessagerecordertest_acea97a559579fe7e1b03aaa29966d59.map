{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/voice-messaging/voice-message-recorder.test.tsx"],"sourcesContent":["/**\n * Voice Message Recorder Component Tests\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { act } from 'react-dom/test-utils'\nimport VoiceMessageRecorder from '@/components/VoiceMessageRecorder'\nimport { LanguageProvider } from '@/context/LanguageContext'\nimport { VOICE_RECORDING_CONFIG } from '@/config/voice-messaging'\n\n// Mock MediaRecorder API\nclass MockMediaRecorder {\n  static isTypeSupported = jest.fn().mockReturnValue(true)\n  \n  ondataavailable: ((event: any) => void) | null = null\n  onstop: (() => void) | null = null\n  onerror: ((event: any) => void) | null = null\n  \n  private chunks: BlobPart[] = []\n  \n  constructor(stream: MediaStream, options?: MediaRecorderOptions) {\n    // Mock constructor\n  }\n  \n  start(timeslice?: number) {\n    // Simulate data available after a short delay\n    setTimeout(() => {\n      const mockBlob = new Blob(['mock audio data'], { type: 'audio/webm' })\n      if (this.ondataavailable) {\n        this.ondataavailable({ data: mockBlob })\n      }\n    }, 100)\n  }\n  \n  stop() {\n    setTimeout(() => {\n      if (this.onstop) {\n        this.onstop()\n      }\n    }, 50)\n  }\n  \n  pause() {\n    // Mock pause\n  }\n  \n  resume() {\n    // Mock resume\n  }\n  \n  state: 'inactive' | 'recording' | 'paused' = 'inactive'\n}\n\n// Mock getUserMedia\nObject.defineProperty(navigator, 'mediaDevices', {\n  value: {\n    getUserMedia: jest.fn().mockResolvedValue({\n      getTracks: () => [{ stop: jest.fn() }]\n    })\n  },\n  writable: true\n})\n\n// Mock speechSynthesis and recognition\nObject.defineProperty(window, 'speechSynthesis', {\n  value: {\n    speak: jest.fn(),\n    cancel: jest.fn(),\n    getVoices: jest.fn().mockReturnValue([])\n  },\n  writable: true\n})\n\nObject.defineProperty(window, 'webkitSpeechRecognition', {\n  value: class MockSpeechRecognition {\n    continuous = false\n    interimResults = false\n    lang = 'pt-PT'\n    maxAlternatives = 1\n    \n    onresult: ((event: any) => void) | null = null\n    onerror: ((event: any) => void) | null = null\n    onend: (() => void) | null = null\n    \n    start() {\n      // Mock transcription result\n      setTimeout(() => {\n        if (this.onresult) {\n          this.onresult({\n            resultIndex: 0,\n            results: [{\n              0: {\n                transcript: 'Olá, como está?',\n                confidence: 0.95\n              },\n              isFinal: true\n            }]\n          })\n        }\n      }, 500)\n    }\n    \n    stop() {\n      if (this.onend) {\n        this.onend()\n      }\n    }\n  },\n  writable: true\n})\n\n// Mock MediaRecorder globally\nglobal.MediaRecorder = MockMediaRecorder as any\n\nconst renderWithLanguage = (component: React.ReactElement, language: 'en' | 'pt' = 'en') => {\n  return render(\n    <LanguageProvider initialLanguage={language}>\n      {component}\n    </LanguageProvider>\n  )\n}\n\ndescribe('VoiceMessageRecorder', () => {\n  const mockOnSendVoiceMessage = jest.fn()\n  \n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockOnSendVoiceMessage.mockClear()\n  })\n\n  describe('Rendering', () => {\n    it('renders the record button', () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      expect(screen.getByRole('button')).toBeInTheDocument()\n    })\n\n    it('renders in Portuguese', () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />,\n        'pt'\n      )\n      \n      expect(screen.getByRole('button')).toHaveAttribute('aria-label', expect.stringContaining('gravar'))\n    })\n\n    it('shows settings button', () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const settingsButton = screen.getByLabelText(/settings/i)\n      expect(settingsButton).toBeInTheDocument()\n    })\n  })\n\n  describe('Recording Functionality', () => {\n    it('starts recording on button press', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText(/recording/i)).toBeInTheDocument()\n      })\n    })\n\n    it('stops recording on button release', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n        fireEvent.mouseUp(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(screen.queryByText(/recording/i)).not.toBeInTheDocument()\n      })\n    })\n\n    it('displays recording duration', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText(/0:00/)).toBeInTheDocument()\n      })\n    })\n\n    it('respects membership tier duration limits', () => {\n      const { rerender } = renderWithLanguage(\n        <VoiceMessageRecorder \n          onSendVoiceMessage={mockOnSendVoiceMessage}\n          membershipTier=\"standard\"\n        />\n      )\n\n      // Standard tier should have 60-second limit\n      expect(screen.getByText(/60/)).toBeInTheDocument()\n\n      rerender(\n        <LanguageProvider initialLanguage=\"en\">\n          <VoiceMessageRecorder \n            onSendVoiceMessage={mockOnSendVoiceMessage}\n            membershipTier=\"ambassador\"\n          />\n        </LanguageProvider>\n      )\n\n      // Ambassador tier should have 300-second limit\n      expect(screen.getByText(/300/)).toBeInTheDocument()\n    })\n  })\n\n  describe('Transcription', () => {\n    it('enables transcription by default', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText(/transcription/i)).toBeInTheDocument()\n      }, { timeout: 1000 })\n    })\n\n    it('displays transcribed text', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n        await new Promise(resolve => setTimeout(resolve, 600)) // Wait for transcription\n        fireEvent.mouseUp(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText(/olá, como está/i)).toBeInTheDocument()\n      })\n    })\n\n    it('shows confidence score', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n        await new Promise(resolve => setTimeout(resolve, 600))\n        fireEvent.mouseUp(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText(/95%/)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Playback Controls', () => {\n    beforeEach(async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n        await new Promise(resolve => setTimeout(resolve, 200))\n        fireEvent.mouseUp(recordButton)\n      })\n      \n      // Wait for recording to complete\n      await waitFor(() => {\n        expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument()\n      })\n    })\n\n    it('shows playback controls after recording', () => {\n      expect(screen.getByRole('button', { name: /play/i })).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /delete/i })).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /send/i })).toBeInTheDocument()\n    })\n\n    it('allows deleting recording', async () => {\n      const deleteButton = screen.getByRole('button', { name: /delete/i })\n      \n      await act(async () => {\n        fireEvent.click(deleteButton)\n      })\n\n      // Should return to recording mode\n      expect(screen.getByRole('button', { name: /record/i })).toBeInTheDocument()\n      expect(screen.queryByRole('button', { name: /play/i })).not.toBeInTheDocument()\n    })\n\n    it('calls onSendVoiceMessage when send button is clicked', async () => {\n      const sendButton = screen.getByRole('button', { name: /send/i })\n      \n      await act(async () => {\n        fireEvent.click(sendButton)\n      })\n\n      expect(mockOnSendVoiceMessage).toHaveBeenCalledWith(\n        expect.any(Blob),\n        'Olá, como está?',\n        expect.any(Number)\n      )\n    })\n  })\n\n  describe('Settings Panel', () => {\n    beforeEach(() => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n    })\n\n    it('toggles settings panel', async () => {\n      const settingsButton = screen.getByLabelText(/settings/i)\n      \n      await act(async () => {\n        fireEvent.click(settingsButton)\n      })\n\n      expect(screen.getByText(/voice settings/i)).toBeInTheDocument()\n    })\n\n    it('allows selecting message category', async () => {\n      const settingsButton = screen.getByLabelText(/settings/i)\n      \n      await act(async () => {\n        fireEvent.click(settingsButton)\n      })\n\n      const categorySelect = screen.getByLabelText(/category/i)\n      \n      await act(async () => {\n        fireEvent.change(categorySelect, { target: { value: 'cultural' } })\n      })\n\n      expect(categorySelect).toHaveValue('cultural')\n    })\n\n    it('allows toggling transcription', async () => {\n      const settingsButton = screen.getByLabelText(/settings/i)\n      \n      await act(async () => {\n        fireEvent.click(settingsButton)\n      })\n\n      const transcriptionToggle = screen.getByLabelText(/enable transcription/i)\n      \n      await act(async () => {\n        fireEvent.click(transcriptionToggle)\n      })\n\n      // Should toggle transcription setting\n      expect(transcriptionToggle).not.toBeChecked()\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('shows error when microphone permission is denied', async () => {\n      // Mock getUserMedia to reject\n      navigator.mediaDevices.getUserMedia = jest.fn().mockRejectedValue(\n        new Error('Permission denied')\n      )\n\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText(/microphone permission/i)).toBeInTheDocument()\n      })\n    })\n\n    it('disables recording when disabled prop is true', () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder \n          onSendVoiceMessage={mockOnSendVoiceMessage}\n          disabled={true}\n        />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      expect(recordButton).toBeDisabled()\n    })\n  })\n\n  describe('Portuguese Dialect Support', () => {\n    it('configures speech recognition for Portugal Portuguese', () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder \n          onSendVoiceMessage={mockOnSendVoiceMessage}\n          preferredDialect=\"pt-PT\"\n        />\n      )\n      \n      // Component should be configured for Portuguese dialect\n      expect(screen.getByRole('button')).toBeInTheDocument()\n    })\n\n    it('configures speech recognition for Brazilian Portuguese', () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder \n          onSendVoiceMessage={mockOnSendVoiceMessage}\n          preferredDialect=\"pt-BR\"\n        />\n      )\n      \n      // Component should be configured for Brazilian dialect\n      expect(screen.getByRole('button')).toBeInTheDocument()\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('provides proper ARIA labels', () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button')\n      expect(recordButton).toHaveAccessibleName()\n    })\n\n    it('supports keyboard navigation', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const settingsButton = screen.getByLabelText(/settings/i)\n      \n      await act(async () => {\n        settingsButton.focus()\n        fireEvent.keyDown(settingsButton, { key: 'Enter' })\n      })\n\n      expect(screen.getByText(/voice settings/i)).toBeInTheDocument()\n    })\n\n    it('provides visual feedback for recording state', async () => {\n      renderWithLanguage(\n        <VoiceMessageRecorder onSendVoiceMessage={mockOnSendVoiceMessage} />\n      )\n      \n      const recordButton = screen.getByRole('button', { name: /record/i })\n      \n      await act(async () => {\n        fireEvent.mouseDown(recordButton)\n      })\n\n      await waitFor(() => {\n        expect(recordButton).toHaveClass('animate-pulse')\n      })\n    })\n  })\n})\n\n// Mock data for configuration tests\ndescribe('Voice Recording Configuration', () => {\n  it('provides different configurations for membership tiers', () => {\n    expect(VOICE_RECORDING_CONFIG.standard.maxDuration).toBe(60)\n    expect(VOICE_RECORDING_CONFIG.premium.maxDuration).toBe(180)\n    expect(VOICE_RECORDING_CONFIG.ambassador.maxDuration).toBe(300)\n  })\n\n  it('uses appropriate audio quality settings', () => {\n    expect(VOICE_RECORDING_CONFIG.standard.bitRate).toBe(128000)\n    expect(VOICE_RECORDING_CONFIG.premium.bitRate).toBe(256000)\n    expect(VOICE_RECORDING_CONFIG.ambassador.bitRate).toBe(320000)\n  })\n\n  it('supports Portuguese audio formats', () => {\n    Object.values(VOICE_RECORDING_CONFIG).forEach(config => {\n      expect(config.mimeType).toContain('webm')\n      expect(config.fileFormat).toBe('webm')\n    })\n  })\n})"],"names":["MockMediaRecorder","isTypeSupported","jest","fn","mockReturnValue","constructor","stream","options","ondataavailable","onstop","onerror","chunks","state","start","timeslice","setTimeout","mockBlob","Blob","type","data","stop","pause","resume","Object","defineProperty","navigator","value","getUserMedia","mockResolvedValue","getTracks","writable","window","speak","cancel","getVoices","MockSpeechRecognition","onresult","resultIndex","results","transcript","confidence","isFinal","onend","continuous","interimResults","lang","maxAlternatives","global","MediaRecorder","renderWithLanguage","component","language","render","LanguageProvider","initialLanguage","describe","mockOnSendVoiceMessage","beforeEach","clearAllMocks","mockClear","it","VoiceMessageRecorder","onSendVoiceMessage","expect","screen","getByRole","toBeInTheDocument","toHaveAttribute","stringContaining","settingsButton","getByLabelText","recordButton","name","act","fireEvent","mouseDown","waitFor","getByText","mouseUp","queryByText","not","rerender","membershipTier","timeout","Promise","resolve","deleteButton","click","queryByRole","sendButton","toHaveBeenCalledWith","any","Number","categorySelect","change","target","toHaveValue","transcriptionToggle","toBeChecked","mediaDevices","mockRejectedValue","Error","disabled","toBeDisabled","preferredDialect","toHaveAccessibleName","focus","keyDown","key","toHaveClass","VOICE_RECORDING_CONFIG","standard","maxDuration","toBe","premium","ambassador","bitRate","values","forEach","config","mimeType","toContain","fileFormat"],"mappings":"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"}