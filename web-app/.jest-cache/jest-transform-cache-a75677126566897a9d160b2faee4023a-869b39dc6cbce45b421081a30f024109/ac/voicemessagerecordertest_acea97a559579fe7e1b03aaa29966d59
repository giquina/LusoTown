25dbcaabc823d61f04d247d0caf5475a
/**
 * Voice Message Recorder Component Tests
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _testutils = require("react-dom/test-utils");
const _VoiceMessageRecorder = /*#__PURE__*/ _interop_require_default(require("../../src/components/VoiceMessageRecorder"));
const _LanguageContext = require("../../src/context/LanguageContext");
const _voicemessaging = require("../../src/config/voice-messaging");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock MediaRecorder API
class MockMediaRecorder {
    static{
        this.isTypeSupported = jest.fn().mockReturnValue(true);
    }
    constructor(stream, options){
        this.ondataavailable = null;
        this.onstop = null;
        this.onerror = null;
        this.chunks = [];
        this.state = "inactive";
    // Mock constructor
    }
    start(timeslice) {
        // Simulate data available after a short delay
        setTimeout(()=>{
            const mockBlob = new Blob([
                "mock audio data"
            ], {
                type: "audio/webm"
            });
            if (this.ondataavailable) {
                this.ondataavailable({
                    data: mockBlob
                });
            }
        }, 100);
    }
    stop() {
        setTimeout(()=>{
            if (this.onstop) {
                this.onstop();
            }
        }, 50);
    }
    pause() {
    // Mock pause
    }
    resume() {
    // Mock resume
    }
}
// Mock getUserMedia
Object.defineProperty(navigator, "mediaDevices", {
    value: {
        getUserMedia: jest.fn().mockResolvedValue({
            getTracks: ()=>[
                    {
                        stop: jest.fn()
                    }
                ]
        })
    },
    writable: true
});
// Mock speechSynthesis and recognition
Object.defineProperty(window, "speechSynthesis", {
    value: {
        speak: jest.fn(),
        cancel: jest.fn(),
        getVoices: jest.fn().mockReturnValue([])
    },
    writable: true
});
Object.defineProperty(window, "webkitSpeechRecognition", {
    value: class MockSpeechRecognition {
        start() {
            // Mock transcription result
            setTimeout(()=>{
                if (this.onresult) {
                    this.onresult({
                        resultIndex: 0,
                        results: [
                            {
                                0: {
                                    transcript: "Ol\xe1, como est\xe1?",
                                    confidence: 0.95
                                },
                                isFinal: true
                            }
                        ]
                    });
                }
            }, 500);
        }
        stop() {
            if (this.onend) {
                this.onend();
            }
        }
        constructor(){
            this.continuous = false;
            this.interimResults = false;
            this.lang = "pt-PT";
            this.maxAlternatives = 1;
            this.onresult = null;
            this.onerror = null;
            this.onend = null;
        }
    },
    writable: true
});
// Mock MediaRecorder globally
global.MediaRecorder = MockMediaRecorder;
const renderWithLanguage = (component, language = "en")=>{
    return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
        initialLanguage: language,
        children: component
    }));
};
describe("VoiceMessageRecorder", ()=>{
    const mockOnSendVoiceMessage = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
        mockOnSendVoiceMessage.mockClear();
    });
    describe("Rendering", ()=>{
        it("renders the record button", ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            expect(_react.screen.getByRole("button")).toBeInTheDocument();
        });
        it("renders in Portuguese", ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }), "pt");
            expect(_react.screen.getByRole("button")).toHaveAttribute("aria-label", expect.stringContaining("gravar"));
        });
        it("shows settings button", ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            expect(settingsButton).toBeInTheDocument();
        });
    });
    describe("Recording Functionality", ()=>{
        it("starts recording on button press", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/recording/i)).toBeInTheDocument();
            });
        });
        it("stops recording on button release", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
                _react.fireEvent.mouseUp(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.queryByText(/recording/i)).not.toBeInTheDocument();
            });
        });
        it("displays recording duration", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/0:00/)).toBeInTheDocument();
            });
        });
        it("respects membership tier duration limits", ()=>{
            const { rerender } = renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage,
                membershipTier: "standard"
            }));
            // Standard tier should have 60-second limit
            expect(_react.screen.getByText(/60/)).toBeInTheDocument();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
                initialLanguage: "en",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                    onSendVoiceMessage: mockOnSendVoiceMessage,
                    membershipTier: "ambassador"
                })
            }));
            // Ambassador tier should have 300-second limit
            expect(_react.screen.getByText(/300/)).toBeInTheDocument();
        });
    });
    describe("Transcription", ()=>{
        it("enables transcription by default", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/transcription/i)).toBeInTheDocument();
            }, {
                timeout: 1000
            });
        });
        it("displays transcribed text", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
                await new Promise((resolve)=>setTimeout(resolve, 600)) // Wait for transcription
                ;
                _react.fireEvent.mouseUp(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/olá, como está/i)).toBeInTheDocument();
            });
        });
        it("shows confidence score", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
                await new Promise((resolve)=>setTimeout(resolve, 600));
                _react.fireEvent.mouseUp(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/95%/)).toBeInTheDocument();
            });
        });
    });
    describe("Playback Controls", ()=>{
        beforeEach(async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
                await new Promise((resolve)=>setTimeout(resolve, 200));
                _react.fireEvent.mouseUp(recordButton);
            });
            // Wait for recording to complete
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByRole("button", {
                    name: /play/i
                })).toBeInTheDocument();
            });
        });
        it("shows playback controls after recording", ()=>{
            expect(_react.screen.getByRole("button", {
                name: /play/i
            })).toBeInTheDocument();
            expect(_react.screen.getByRole("button", {
                name: /delete/i
            })).toBeInTheDocument();
            expect(_react.screen.getByRole("button", {
                name: /send/i
            })).toBeInTheDocument();
        });
        it("allows deleting recording", async ()=>{
            const deleteButton = _react.screen.getByRole("button", {
                name: /delete/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(deleteButton);
            });
            // Should return to recording mode
            expect(_react.screen.getByRole("button", {
                name: /record/i
            })).toBeInTheDocument();
            expect(_react.screen.queryByRole("button", {
                name: /play/i
            })).not.toBeInTheDocument();
        });
        it("calls onSendVoiceMessage when send button is clicked", async ()=>{
            const sendButton = _react.screen.getByRole("button", {
                name: /send/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(sendButton);
            });
            expect(mockOnSendVoiceMessage).toHaveBeenCalledWith(expect.any(Blob), "Ol\xe1, como est\xe1?", expect.any(Number));
        });
    });
    describe("Settings Panel", ()=>{
        beforeEach(()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
        });
        it("toggles settings panel", async ()=>{
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(settingsButton);
            });
            expect(_react.screen.getByText(/voice settings/i)).toBeInTheDocument();
        });
        it("allows selecting message category", async ()=>{
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(settingsButton);
            });
            const categorySelect = _react.screen.getByLabelText(/category/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(categorySelect, {
                    target: {
                        value: "cultural"
                    }
                });
            });
            expect(categorySelect).toHaveValue("cultural");
        });
        it("allows toggling transcription", async ()=>{
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(settingsButton);
            });
            const transcriptionToggle = _react.screen.getByLabelText(/enable transcription/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(transcriptionToggle);
            });
            // Should toggle transcription setting
            expect(transcriptionToggle).not.toBeChecked();
        });
    });
    describe("Error Handling", ()=>{
        it("shows error when microphone permission is denied", async ()=>{
            // Mock getUserMedia to reject
            navigator.mediaDevices.getUserMedia = jest.fn().mockRejectedValue(new Error("Permission denied"));
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/microphone permission/i)).toBeInTheDocument();
            });
        });
        it("disables recording when disabled prop is true", ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage,
                disabled: true
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            expect(recordButton).toBeDisabled();
        });
    });
    describe("Portuguese Dialect Support", ()=>{
        it("configures speech recognition for Portugal Portuguese", ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage,
                preferredDialect: "pt-PT"
            }));
            // Component should be configured for Portuguese dialect
            expect(_react.screen.getByRole("button")).toBeInTheDocument();
        });
        it("configures speech recognition for Brazilian Portuguese", ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage,
                preferredDialect: "pt-BR"
            }));
            // Component should be configured for Brazilian dialect
            expect(_react.screen.getByRole("button")).toBeInTheDocument();
        });
    });
    describe("Accessibility", ()=>{
        it("provides proper ARIA labels", ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button");
            expect(recordButton).toHaveAccessibleName();
        });
        it("supports keyboard navigation", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            await (0, _testutils.act)(async ()=>{
                settingsButton.focus();
                _react.fireEvent.keyDown(settingsButton, {
                    key: "Enter"
                });
            });
            expect(_react.screen.getByText(/voice settings/i)).toBeInTheDocument();
        });
        it("provides visual feedback for recording state", async ()=>{
            renderWithLanguage(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VoiceMessageRecorder.default, {
                onSendVoiceMessage: mockOnSendVoiceMessage
            }));
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(recordButton).toHaveClass("animate-pulse");
            });
        });
    });
});
// Mock data for configuration tests
describe("Voice Recording Configuration", ()=>{
    it("provides different configurations for membership tiers", ()=>{
        expect(_voicemessaging.VOICE_RECORDING_CONFIG.standard.maxDuration).toBe(60);
        expect(_voicemessaging.VOICE_RECORDING_CONFIG.premium.maxDuration).toBe(180);
        expect(_voicemessaging.VOICE_RECORDING_CONFIG.ambassador.maxDuration).toBe(300);
    });
    it("uses appropriate audio quality settings", ()=>{
        expect(_voicemessaging.VOICE_RECORDING_CONFIG.standard.bitRate).toBe(128000);
        expect(_voicemessaging.VOICE_RECORDING_CONFIG.premium.bitRate).toBe(256000);
        expect(_voicemessaging.VOICE_RECORDING_CONFIG.ambassador.bitRate).toBe(320000);
    });
    it("supports Portuguese audio formats", ()=>{
        Object.values(_voicemessaging.VOICE_RECORDING_CONFIG).forEach((config)=>{
            expect(config.mimeType).toContain("webm");
            expect(config.fileFormat).toBe("webm");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0x1c29Ub3duL3dlYi1hcHAvX190ZXN0c19fL3ZvaWNlLW1lc3NhZ2luZy92b2ljZS1tZXNzYWdlLXJlY29yZGVyLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVm9pY2UgTWVzc2FnZSBSZWNvcmRlciBDb21wb25lbnQgVGVzdHNcbiAqL1xuXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiwgZmlyZUV2ZW50LCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCdcbmltcG9ydCB7IGFjdCB9IGZyb20gJ3JlYWN0LWRvbS90ZXN0LXV0aWxzJ1xuaW1wb3J0IFZvaWNlTWVzc2FnZVJlY29yZGVyIGZyb20gJ0AvY29tcG9uZW50cy9Wb2ljZU1lc3NhZ2VSZWNvcmRlcidcbmltcG9ydCB7IExhbmd1YWdlUHJvdmlkZXIgfSBmcm9tICdAL2NvbnRleHQvTGFuZ3VhZ2VDb250ZXh0J1xuaW1wb3J0IHsgVk9JQ0VfUkVDT1JESU5HX0NPTkZJRyB9IGZyb20gJ0AvY29uZmlnL3ZvaWNlLW1lc3NhZ2luZydcblxuLy8gTW9jayBNZWRpYVJlY29yZGVyIEFQSVxuY2xhc3MgTW9ja01lZGlhUmVjb3JkZXIge1xuICBzdGF0aWMgaXNUeXBlU3VwcG9ydGVkID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh0cnVlKVxuICBcbiAgb25kYXRhYXZhaWxhYmxlOiAoKGV2ZW50OiBhbnkpID0+IHZvaWQpIHwgbnVsbCA9IG51bGxcbiAgb25zdG9wOiAoKCkgPT4gdm9pZCkgfCBudWxsID0gbnVsbFxuICBvbmVycm9yOiAoKGV2ZW50OiBhbnkpID0+IHZvaWQpIHwgbnVsbCA9IG51bGxcbiAgXG4gIHByaXZhdGUgY2h1bmtzOiBCbG9iUGFydFtdID0gW11cbiAgXG4gIGNvbnN0cnVjdG9yKHN0cmVhbTogTWVkaWFTdHJlYW0sIG9wdGlvbnM/OiBNZWRpYVJlY29yZGVyT3B0aW9ucykge1xuICAgIC8vIE1vY2sgY29uc3RydWN0b3JcbiAgfVxuICBcbiAgc3RhcnQodGltZXNsaWNlPzogbnVtYmVyKSB7XG4gICAgLy8gU2ltdWxhdGUgZGF0YSBhdmFpbGFibGUgYWZ0ZXIgYSBzaG9ydCBkZWxheVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0Jsb2IgPSBuZXcgQmxvYihbJ21vY2sgYXVkaW8gZGF0YSddLCB7IHR5cGU6ICdhdWRpby93ZWJtJyB9KVxuICAgICAgaWYgKHRoaXMub25kYXRhYXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMub25kYXRhYXZhaWxhYmxlKHsgZGF0YTogbW9ja0Jsb2IgfSlcbiAgICAgIH1cbiAgICB9LCAxMDApXG4gIH1cbiAgXG4gIHN0b3AoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vbnN0b3ApIHtcbiAgICAgICAgdGhpcy5vbnN0b3AoKVxuICAgICAgfVxuICAgIH0sIDUwKVxuICB9XG4gIFxuICBwYXVzZSgpIHtcbiAgICAvLyBNb2NrIHBhdXNlXG4gIH1cbiAgXG4gIHJlc3VtZSgpIHtcbiAgICAvLyBNb2NrIHJlc3VtZVxuICB9XG4gIFxuICBzdGF0ZTogJ2luYWN0aXZlJyB8ICdyZWNvcmRpbmcnIHwgJ3BhdXNlZCcgPSAnaW5hY3RpdmUnXG59XG5cbi8vIE1vY2sgZ2V0VXNlck1lZGlhXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobmF2aWdhdG9yLCAnbWVkaWFEZXZpY2VzJywge1xuICB2YWx1ZToge1xuICAgIGdldFVzZXJNZWRpYTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGdldFRyYWNrczogKCkgPT4gW3sgc3RvcDogamVzdC5mbigpIH1dXG4gICAgfSlcbiAgfSxcbiAgd3JpdGFibGU6IHRydWVcbn0pXG5cbi8vIE1vY2sgc3BlZWNoU3ludGhlc2lzIGFuZCByZWNvZ25pdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ3NwZWVjaFN5bnRoZXNpcycsIHtcbiAgdmFsdWU6IHtcbiAgICBzcGVhazogamVzdC5mbigpLFxuICAgIGNhbmNlbDogamVzdC5mbigpLFxuICAgIGdldFZvaWNlczogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShbXSlcbiAgfSxcbiAgd3JpdGFibGU6IHRydWVcbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICd3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbicsIHtcbiAgdmFsdWU6IGNsYXNzIE1vY2tTcGVlY2hSZWNvZ25pdGlvbiB7XG4gICAgY29udGludW91cyA9IGZhbHNlXG4gICAgaW50ZXJpbVJlc3VsdHMgPSBmYWxzZVxuICAgIGxhbmcgPSAncHQtUFQnXG4gICAgbWF4QWx0ZXJuYXRpdmVzID0gMVxuICAgIFxuICAgIG9ucmVzdWx0OiAoKGV2ZW50OiBhbnkpID0+IHZvaWQpIHwgbnVsbCA9IG51bGxcbiAgICBvbmVycm9yOiAoKGV2ZW50OiBhbnkpID0+IHZvaWQpIHwgbnVsbCA9IG51bGxcbiAgICBvbmVuZDogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGxcbiAgICBcbiAgICBzdGFydCgpIHtcbiAgICAgIC8vIE1vY2sgdHJhbnNjcmlwdGlvbiByZXN1bHRcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5vbnJlc3VsdCkge1xuICAgICAgICAgIHRoaXMub25yZXN1bHQoe1xuICAgICAgICAgICAgcmVzdWx0SW5kZXg6IDAsXG4gICAgICAgICAgICByZXN1bHRzOiBbe1xuICAgICAgICAgICAgICAwOiB7XG4gICAgICAgICAgICAgICAgdHJhbnNjcmlwdDogJ09sw6EsIGNvbW8gZXN0w6E/JyxcbiAgICAgICAgICAgICAgICBjb25maWRlbmNlOiAwLjk1XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGlzRmluYWw6IHRydWVcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSwgNTAwKVxuICAgIH1cbiAgICBcbiAgICBzdG9wKCkge1xuICAgICAgaWYgKHRoaXMub25lbmQpIHtcbiAgICAgICAgdGhpcy5vbmVuZCgpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB3cml0YWJsZTogdHJ1ZVxufSlcblxuLy8gTW9jayBNZWRpYVJlY29yZGVyIGdsb2JhbGx5XG5nbG9iYWwuTWVkaWFSZWNvcmRlciA9IE1vY2tNZWRpYVJlY29yZGVyIGFzIGFueVxuXG5jb25zdCByZW5kZXJXaXRoTGFuZ3VhZ2UgPSAoY29tcG9uZW50OiBSZWFjdC5SZWFjdEVsZW1lbnQsIGxhbmd1YWdlOiAnZW4nIHwgJ3B0JyA9ICdlbicpID0+IHtcbiAgcmV0dXJuIHJlbmRlcihcbiAgICA8TGFuZ3VhZ2VQcm92aWRlciBpbml0aWFsTGFuZ3VhZ2U9e2xhbmd1YWdlfT5cbiAgICAgIHtjb21wb25lbnR9XG4gICAgPC9MYW5ndWFnZVByb3ZpZGVyPlxuICApXG59XG5cbmRlc2NyaWJlKCdWb2ljZU1lc3NhZ2VSZWNvcmRlcicsICgpID0+IHtcbiAgY29uc3QgbW9ja09uU2VuZFZvaWNlTWVzc2FnZSA9IGplc3QuZm4oKVxuICBcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKClcbiAgICBtb2NrT25TZW5kVm9pY2VNZXNzYWdlLm1vY2tDbGVhcigpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1JlbmRlcmluZycsICgpID0+IHtcbiAgICBpdCgncmVuZGVycyB0aGUgcmVjb3JkIGJ1dHRvbicsICgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhMYW5ndWFnZShcbiAgICAgICAgPFZvaWNlTWVzc2FnZVJlY29yZGVyIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX0gLz5cbiAgICAgIClcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcblxuICAgIGl0KCdyZW5kZXJzIGluIFBvcnR1Z3Vlc2UnLCAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoTGFuZ3VhZ2UoXG4gICAgICAgIDxWb2ljZU1lc3NhZ2VSZWNvcmRlciBvblNlbmRWb2ljZU1lc3NhZ2U9e21vY2tPblNlbmRWb2ljZU1lc3NhZ2V9IC8+LFxuICAgICAgICAncHQnXG4gICAgICApXG4gICAgICBcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nKSkudG9IYXZlQXR0cmlidXRlKCdhcmlhLWxhYmVsJywgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ2dyYXZhcicpKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvd3Mgc2V0dGluZ3MgYnV0dG9uJywgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aExhbmd1YWdlKFxuICAgICAgICA8Vm9pY2VNZXNzYWdlUmVjb3JkZXIgb25TZW5kVm9pY2VNZXNzYWdlPXttb2NrT25TZW5kVm9pY2VNZXNzYWdlfSAvPlxuICAgICAgKVxuICAgICAgXG4gICAgICBjb25zdCBzZXR0aW5nc0J1dHRvbiA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgvc2V0dGluZ3MvaSlcbiAgICAgIGV4cGVjdChzZXR0aW5nc0J1dHRvbikudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1JlY29yZGluZyBGdW5jdGlvbmFsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzdGFydHMgcmVjb3JkaW5nIG9uIGJ1dHRvbiBwcmVzcycsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhMYW5ndWFnZShcbiAgICAgICAgPFZvaWNlTWVzc2FnZVJlY29yZGVyIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX0gLz5cbiAgICAgIClcbiAgICAgIFxuICAgICAgY29uc3QgcmVjb3JkQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvcmVjb3JkL2kgfSlcbiAgICAgIFxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50Lm1vdXNlRG93bihyZWNvcmRCdXR0b24pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3JlY29yZGluZy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ3N0b3BzIHJlY29yZGluZyBvbiBidXR0b24gcmVsZWFzZScsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhMYW5ndWFnZShcbiAgICAgICAgPFZvaWNlTWVzc2FnZVJlY29yZGVyIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX0gLz5cbiAgICAgIClcbiAgICAgIFxuICAgICAgY29uc3QgcmVjb3JkQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvcmVjb3JkL2kgfSlcbiAgICAgIFxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50Lm1vdXNlRG93bihyZWNvcmRCdXR0b24pXG4gICAgICAgIGZpcmVFdmVudC5tb3VzZVVwKHJlY29yZEJ1dHRvbilcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KC9yZWNvcmRpbmcvaSkpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnZGlzcGxheXMgcmVjb3JkaW5nIGR1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aExhbmd1YWdlKFxuICAgICAgICA8Vm9pY2VNZXNzYWdlUmVjb3JkZXIgb25TZW5kVm9pY2VNZXNzYWdlPXttb2NrT25TZW5kVm9pY2VNZXNzYWdlfSAvPlxuICAgICAgKVxuICAgICAgXG4gICAgICBjb25zdCByZWNvcmRCdXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9yZWNvcmQvaSB9KVxuICAgICAgXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQubW91c2VEb3duKHJlY29yZEJ1dHRvbilcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvMDowMC8pKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgncmVzcGVjdHMgbWVtYmVyc2hpcCB0aWVyIGR1cmF0aW9uIGxpbWl0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcldpdGhMYW5ndWFnZShcbiAgICAgICAgPFZvaWNlTWVzc2FnZVJlY29yZGVyIFxuICAgICAgICAgIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX1cbiAgICAgICAgICBtZW1iZXJzaGlwVGllcj1cInN0YW5kYXJkXCJcbiAgICAgICAgLz5cbiAgICAgIClcblxuICAgICAgLy8gU3RhbmRhcmQgdGllciBzaG91bGQgaGF2ZSA2MC1zZWNvbmQgbGltaXRcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC82MC8pKS50b0JlSW5UaGVEb2N1bWVudCgpXG5cbiAgICAgIHJlcmVuZGVyKFxuICAgICAgICA8TGFuZ3VhZ2VQcm92aWRlciBpbml0aWFsTGFuZ3VhZ2U9XCJlblwiPlxuICAgICAgICAgIDxWb2ljZU1lc3NhZ2VSZWNvcmRlciBcbiAgICAgICAgICAgIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX1cbiAgICAgICAgICAgIG1lbWJlcnNoaXBUaWVyPVwiYW1iYXNzYWRvclwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9MYW5ndWFnZVByb3ZpZGVyPlxuICAgICAgKVxuXG4gICAgICAvLyBBbWJhc3NhZG9yIHRpZXIgc2hvdWxkIGhhdmUgMzAwLXNlY29uZCBsaW1pdFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoLzMwMC8pKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnVHJhbnNjcmlwdGlvbicsICgpID0+IHtcbiAgICBpdCgnZW5hYmxlcyB0cmFuc2NyaXB0aW9uIGJ5IGRlZmF1bHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoTGFuZ3VhZ2UoXG4gICAgICAgIDxWb2ljZU1lc3NhZ2VSZWNvcmRlciBvblNlbmRWb2ljZU1lc3NhZ2U9e21vY2tPblNlbmRWb2ljZU1lc3NhZ2V9IC8+XG4gICAgICApXG4gICAgICBcbiAgICAgIGNvbnN0IHJlY29yZEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3JlY29yZC9pIH0pXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5tb3VzZURvd24ocmVjb3JkQnV0dG9uKVxuICAgICAgfSlcblxuICAgICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC90cmFuc2NyaXB0aW9uL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICB9LCB7IHRpbWVvdXQ6IDEwMDAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ2Rpc3BsYXlzIHRyYW5zY3JpYmVkIHRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoTGFuZ3VhZ2UoXG4gICAgICAgIDxWb2ljZU1lc3NhZ2VSZWNvcmRlciBvblNlbmRWb2ljZU1lc3NhZ2U9e21vY2tPblNlbmRWb2ljZU1lc3NhZ2V9IC8+XG4gICAgICApXG4gICAgICBcbiAgICAgIGNvbnN0IHJlY29yZEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3JlY29yZC9pIH0pXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5tb3VzZURvd24ocmVjb3JkQnV0dG9uKVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNjAwKSkgLy8gV2FpdCBmb3IgdHJhbnNjcmlwdGlvblxuICAgICAgICBmaXJlRXZlbnQubW91c2VVcChyZWNvcmRCdXR0b24pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL29sw6EsIGNvbW8gZXN0w6EvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGl0KCdzaG93cyBjb25maWRlbmNlIHNjb3JlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aExhbmd1YWdlKFxuICAgICAgICA8Vm9pY2VNZXNzYWdlUmVjb3JkZXIgb25TZW5kVm9pY2VNZXNzYWdlPXttb2NrT25TZW5kVm9pY2VNZXNzYWdlfSAvPlxuICAgICAgKVxuICAgICAgXG4gICAgICBjb25zdCByZWNvcmRCdXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9yZWNvcmQvaSB9KVxuICAgICAgXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQubW91c2VEb3duKHJlY29yZEJ1dHRvbilcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDYwMCkpXG4gICAgICAgIGZpcmVFdmVudC5tb3VzZVVwKHJlY29yZEJ1dHRvbilcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvOTUlLykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIH0pXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnUGxheWJhY2sgQ29udHJvbHMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoTGFuZ3VhZ2UoXG4gICAgICAgIDxWb2ljZU1lc3NhZ2VSZWNvcmRlciBvblNlbmRWb2ljZU1lc3NhZ2U9e21vY2tPblNlbmRWb2ljZU1lc3NhZ2V9IC8+XG4gICAgICApXG4gICAgICBcbiAgICAgIGNvbnN0IHJlY29yZEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3JlY29yZC9pIH0pXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5tb3VzZURvd24ocmVjb3JkQnV0dG9uKVxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwKSlcbiAgICAgICAgZmlyZUV2ZW50Lm1vdXNlVXAocmVjb3JkQnV0dG9uKVxuICAgICAgfSlcbiAgICAgIFxuICAgICAgLy8gV2FpdCBmb3IgcmVjb3JkaW5nIHRvIGNvbXBsZXRlXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3BsYXkvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3dzIHBsYXliYWNrIGNvbnRyb2xzIGFmdGVyIHJlY29yZGluZycsICgpID0+IHtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9wbGF5L2kgfSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9kZWxldGUvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3NlbmQvaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG5cbiAgICBpdCgnYWxsb3dzIGRlbGV0aW5nIHJlY29yZGluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL2RlbGV0ZS9pIH0pXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5jbGljayhkZWxldGVCdXR0b24pXG4gICAgICB9KVxuXG4gICAgICAvLyBTaG91bGQgcmV0dXJuIHRvIHJlY29yZGluZyBtb2RlXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvcmVjb3JkL2kgfSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3BsYXkvaSB9KSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuXG4gICAgaXQoJ2NhbGxzIG9uU2VuZFZvaWNlTWVzc2FnZSB3aGVuIHNlbmQgYnV0dG9uIGlzIGNsaWNrZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzZW5kQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvc2VuZC9pIH0pXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5jbGljayhzZW5kQnV0dG9uKVxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KG1vY2tPblNlbmRWb2ljZU1lc3NhZ2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3QuYW55KEJsb2IpLFxuICAgICAgICAnT2zDoSwgY29tbyBlc3TDoT8nLFxuICAgICAgICBleHBlY3QuYW55KE51bWJlcilcbiAgICAgIClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdTZXR0aW5ncyBQYW5lbCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhMYW5ndWFnZShcbiAgICAgICAgPFZvaWNlTWVzc2FnZVJlY29yZGVyIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX0gLz5cbiAgICAgIClcbiAgICB9KVxuXG4gICAgaXQoJ3RvZ2dsZXMgc2V0dGluZ3MgcGFuZWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzZXR0aW5nc0J1dHRvbiA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgvc2V0dGluZ3MvaSlcbiAgICAgIFxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKHNldHRpbmdzQnV0dG9uKVxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3ZvaWNlIHNldHRpbmdzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcblxuICAgIGl0KCdhbGxvd3Mgc2VsZWN0aW5nIG1lc3NhZ2UgY2F0ZWdvcnknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzZXR0aW5nc0J1dHRvbiA9IHNjcmVlbi5nZXRCeUxhYmVsVGV4dCgvc2V0dGluZ3MvaSlcbiAgICAgIFxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50LmNsaWNrKHNldHRpbmdzQnV0dG9uKVxuICAgICAgfSlcblxuICAgICAgY29uc3QgY2F0ZWdvcnlTZWxlY3QgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoL2NhdGVnb3J5L2kpXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2UoY2F0ZWdvcnlTZWxlY3QsIHsgdGFyZ2V0OiB7IHZhbHVlOiAnY3VsdHVyYWwnIH0gfSlcbiAgICAgIH0pXG5cbiAgICAgIGV4cGVjdChjYXRlZ29yeVNlbGVjdCkudG9IYXZlVmFsdWUoJ2N1bHR1cmFsJylcbiAgICB9KVxuXG4gICAgaXQoJ2FsbG93cyB0b2dnbGluZyB0cmFuc2NyaXB0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc2V0dGluZ3NCdXR0b24gPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoL3NldHRpbmdzL2kpXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5jbGljayhzZXR0aW5nc0J1dHRvbilcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHRyYW5zY3JpcHRpb25Ub2dnbGUgPSBzY3JlZW4uZ2V0QnlMYWJlbFRleHQoL2VuYWJsZSB0cmFuc2NyaXB0aW9uL2kpXG4gICAgICBcbiAgICAgIGF3YWl0IGFjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGZpcmVFdmVudC5jbGljayh0cmFuc2NyaXB0aW9uVG9nZ2xlKVxuICAgICAgfSlcblxuICAgICAgLy8gU2hvdWxkIHRvZ2dsZSB0cmFuc2NyaXB0aW9uIHNldHRpbmdcbiAgICAgIGV4cGVjdCh0cmFuc2NyaXB0aW9uVG9nZ2xlKS5ub3QudG9CZUNoZWNrZWQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG93cyBlcnJvciB3aGVuIG1pY3JvcGhvbmUgcGVybWlzc2lvbiBpcyBkZW5pZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGdldFVzZXJNZWRpYSB0byByZWplY3RcbiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgICBuZXcgRXJyb3IoJ1Blcm1pc3Npb24gZGVuaWVkJylcbiAgICAgIClcblxuICAgICAgcmVuZGVyV2l0aExhbmd1YWdlKFxuICAgICAgICA8Vm9pY2VNZXNzYWdlUmVjb3JkZXIgb25TZW5kVm9pY2VNZXNzYWdlPXttb2NrT25TZW5kVm9pY2VNZXNzYWdlfSAvPlxuICAgICAgKVxuICAgICAgXG4gICAgICBjb25zdCByZWNvcmRCdXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9yZWNvcmQvaSB9KVxuICAgICAgXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBmaXJlRXZlbnQubW91c2VEb3duKHJlY29yZEJ1dHRvbilcbiAgICAgIH0pXG5cbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvbWljcm9waG9uZSBwZXJtaXNzaW9uL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBpdCgnZGlzYWJsZXMgcmVjb3JkaW5nIHdoZW4gZGlzYWJsZWQgcHJvcCBpcyB0cnVlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aExhbmd1YWdlKFxuICAgICAgICA8Vm9pY2VNZXNzYWdlUmVjb3JkZXIgXG4gICAgICAgICAgb25TZW5kVm9pY2VNZXNzYWdlPXttb2NrT25TZW5kVm9pY2VNZXNzYWdlfVxuICAgICAgICAgIGRpc2FibGVkPXt0cnVlfVxuICAgICAgICAvPlxuICAgICAgKVxuICAgICAgXG4gICAgICBjb25zdCByZWNvcmRCdXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC9yZWNvcmQvaSB9KVxuICAgICAgZXhwZWN0KHJlY29yZEJ1dHRvbikudG9CZURpc2FibGVkKClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdQb3J0dWd1ZXNlIERpYWxlY3QgU3VwcG9ydCcsICgpID0+IHtcbiAgICBpdCgnY29uZmlndXJlcyBzcGVlY2ggcmVjb2duaXRpb24gZm9yIFBvcnR1Z2FsIFBvcnR1Z3Vlc2UnLCAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoTGFuZ3VhZ2UoXG4gICAgICAgIDxWb2ljZU1lc3NhZ2VSZWNvcmRlciBcbiAgICAgICAgICBvblNlbmRWb2ljZU1lc3NhZ2U9e21vY2tPblNlbmRWb2ljZU1lc3NhZ2V9XG4gICAgICAgICAgcHJlZmVycmVkRGlhbGVjdD1cInB0LVBUXCJcbiAgICAgICAgLz5cbiAgICAgIClcbiAgICAgIFxuICAgICAgLy8gQ29tcG9uZW50IHNob3VsZCBiZSBjb25maWd1cmVkIGZvciBQb3J0dWd1ZXNlIGRpYWxlY3RcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG5cbiAgICBpdCgnY29uZmlndXJlcyBzcGVlY2ggcmVjb2duaXRpb24gZm9yIEJyYXppbGlhbiBQb3J0dWd1ZXNlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aExhbmd1YWdlKFxuICAgICAgICA8Vm9pY2VNZXNzYWdlUmVjb3JkZXIgXG4gICAgICAgICAgb25TZW5kVm9pY2VNZXNzYWdlPXttb2NrT25TZW5kVm9pY2VNZXNzYWdlfVxuICAgICAgICAgIHByZWZlcnJlZERpYWxlY3Q9XCJwdC1CUlwiXG4gICAgICAgIC8+XG4gICAgICApXG4gICAgICBcbiAgICAgIC8vIENvbXBvbmVudCBzaG91bGQgYmUgY29uZmlndXJlZCBmb3IgQnJhemlsaWFuIGRpYWxlY3RcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ0FjY2Vzc2liaWxpdHknLCAoKSA9PiB7XG4gICAgaXQoJ3Byb3ZpZGVzIHByb3BlciBBUklBIGxhYmVscycsICgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhMYW5ndWFnZShcbiAgICAgICAgPFZvaWNlTWVzc2FnZVJlY29yZGVyIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX0gLz5cbiAgICAgIClcbiAgICAgIFxuICAgICAgY29uc3QgcmVjb3JkQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJylcbiAgICAgIGV4cGVjdChyZWNvcmRCdXR0b24pLnRvSGF2ZUFjY2Vzc2libGVOYW1lKClcbiAgICB9KVxuXG4gICAgaXQoJ3N1cHBvcnRzIGtleWJvYXJkIG5hdmlnYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoTGFuZ3VhZ2UoXG4gICAgICAgIDxWb2ljZU1lc3NhZ2VSZWNvcmRlciBvblNlbmRWb2ljZU1lc3NhZ2U9e21vY2tPblNlbmRWb2ljZU1lc3NhZ2V9IC8+XG4gICAgICApXG4gICAgICBcbiAgICAgIGNvbnN0IHNldHRpbmdzQnV0dG9uID0gc2NyZWVuLmdldEJ5TGFiZWxUZXh0KC9zZXR0aW5ncy9pKVxuICAgICAgXG4gICAgICBhd2FpdCBhY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBzZXR0aW5nc0J1dHRvbi5mb2N1cygpXG4gICAgICAgIGZpcmVFdmVudC5rZXlEb3duKHNldHRpbmdzQnV0dG9uLCB7IGtleTogJ0VudGVyJyB9KVxuICAgICAgfSlcblxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3ZvaWNlIHNldHRpbmdzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcblxuICAgIGl0KCdwcm92aWRlcyB2aXN1YWwgZmVlZGJhY2sgZm9yIHJlY29yZGluZyBzdGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhMYW5ndWFnZShcbiAgICAgICAgPFZvaWNlTWVzc2FnZVJlY29yZGVyIG9uU2VuZFZvaWNlTWVzc2FnZT17bW9ja09uU2VuZFZvaWNlTWVzc2FnZX0gLz5cbiAgICAgIClcbiAgICAgIFxuICAgICAgY29uc3QgcmVjb3JkQnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvcmVjb3JkL2kgfSlcbiAgICAgIFxuICAgICAgYXdhaXQgYWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgZmlyZUV2ZW50Lm1vdXNlRG93bihyZWNvcmRCdXR0b24pXG4gICAgICB9KVxuXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHJlY29yZEJ1dHRvbikudG9IYXZlQ2xhc3MoJ2FuaW1hdGUtcHVsc2UnKVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcblxuLy8gTW9jayBkYXRhIGZvciBjb25maWd1cmF0aW9uIHRlc3RzXG5kZXNjcmliZSgnVm9pY2UgUmVjb3JkaW5nIENvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gIGl0KCdwcm92aWRlcyBkaWZmZXJlbnQgY29uZmlndXJhdGlvbnMgZm9yIG1lbWJlcnNoaXAgdGllcnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KFZPSUNFX1JFQ09SRElOR19DT05GSUcuc3RhbmRhcmQubWF4RHVyYXRpb24pLnRvQmUoNjApXG4gICAgZXhwZWN0KFZPSUNFX1JFQ09SRElOR19DT05GSUcucHJlbWl1bS5tYXhEdXJhdGlvbikudG9CZSgxODApXG4gICAgZXhwZWN0KFZPSUNFX1JFQ09SRElOR19DT05GSUcuYW1iYXNzYWRvci5tYXhEdXJhdGlvbikudG9CZSgzMDApXG4gIH0pXG5cbiAgaXQoJ3VzZXMgYXBwcm9wcmlhdGUgYXVkaW8gcXVhbGl0eSBzZXR0aW5ncycsICgpID0+IHtcbiAgICBleHBlY3QoVk9JQ0VfUkVDT1JESU5HX0NPTkZJRy5zdGFuZGFyZC5iaXRSYXRlKS50b0JlKDEyODAwMClcbiAgICBleHBlY3QoVk9JQ0VfUkVDT1JESU5HX0NPTkZJRy5wcmVtaXVtLmJpdFJhdGUpLnRvQmUoMjU2MDAwKVxuICAgIGV4cGVjdChWT0lDRV9SRUNPUkRJTkdfQ09ORklHLmFtYmFzc2Fkb3IuYml0UmF0ZSkudG9CZSgzMjAwMDApXG4gIH0pXG5cbiAgaXQoJ3N1cHBvcnRzIFBvcnR1Z3Vlc2UgYXVkaW8gZm9ybWF0cycsICgpID0+IHtcbiAgICBPYmplY3QudmFsdWVzKFZPSUNFX1JFQ09SRElOR19DT05GSUcpLmZvckVhY2goY29uZmlnID0+IHtcbiAgICAgIGV4cGVjdChjb25maWcubWltZVR5cGUpLnRvQ29udGFpbignd2VibScpXG4gICAgICBleHBlY3QoY29uZmlnLmZpbGVGb3JtYXQpLnRvQmUoJ3dlYm0nKVxuICAgIH0pXG4gIH0pXG59KSJdLCJuYW1lcyI6WyJNb2NrTWVkaWFSZWNvcmRlciIsImlzVHlwZVN1cHBvcnRlZCIsImplc3QiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsImNvbnN0cnVjdG9yIiwic3RyZWFtIiwib3B0aW9ucyIsIm9uZGF0YWF2YWlsYWJsZSIsIm9uc3RvcCIsIm9uZXJyb3IiLCJjaHVua3MiLCJzdGF0ZSIsInN0YXJ0IiwidGltZXNsaWNlIiwic2V0VGltZW91dCIsIm1vY2tCbG9iIiwiQmxvYiIsInR5cGUiLCJkYXRhIiwic3RvcCIsInBhdXNlIiwicmVzdW1lIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJuYXZpZ2F0b3IiLCJ2YWx1ZSIsImdldFVzZXJNZWRpYSIsIm1vY2tSZXNvbHZlZFZhbHVlIiwiZ2V0VHJhY2tzIiwid3JpdGFibGUiLCJ3aW5kb3ciLCJzcGVhayIsImNhbmNlbCIsImdldFZvaWNlcyIsIk1vY2tTcGVlY2hSZWNvZ25pdGlvbiIsIm9ucmVzdWx0IiwicmVzdWx0SW5kZXgiLCJyZXN1bHRzIiwidHJhbnNjcmlwdCIsImNvbmZpZGVuY2UiLCJpc0ZpbmFsIiwib25lbmQiLCJjb250aW51b3VzIiwiaW50ZXJpbVJlc3VsdHMiLCJsYW5nIiwibWF4QWx0ZXJuYXRpdmVzIiwiZ2xvYmFsIiwiTWVkaWFSZWNvcmRlciIsInJlbmRlcldpdGhMYW5ndWFnZSIsImNvbXBvbmVudCIsImxhbmd1YWdlIiwicmVuZGVyIiwiTGFuZ3VhZ2VQcm92aWRlciIsImluaXRpYWxMYW5ndWFnZSIsImRlc2NyaWJlIiwibW9ja09uU2VuZFZvaWNlTWVzc2FnZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja0NsZWFyIiwiaXQiLCJWb2ljZU1lc3NhZ2VSZWNvcmRlciIsIm9uU2VuZFZvaWNlTWVzc2FnZSIsImV4cGVjdCIsInNjcmVlbiIsImdldEJ5Um9sZSIsInRvQmVJblRoZURvY3VtZW50IiwidG9IYXZlQXR0cmlidXRlIiwic3RyaW5nQ29udGFpbmluZyIsInNldHRpbmdzQnV0dG9uIiwiZ2V0QnlMYWJlbFRleHQiLCJyZWNvcmRCdXR0b24iLCJuYW1lIiwiYWN0IiwiZmlyZUV2ZW50IiwibW91c2VEb3duIiwid2FpdEZvciIsImdldEJ5VGV4dCIsIm1vdXNlVXAiLCJxdWVyeUJ5VGV4dCIsIm5vdCIsInJlcmVuZGVyIiwibWVtYmVyc2hpcFRpZXIiLCJ0aW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJkZWxldGVCdXR0b24iLCJjbGljayIsInF1ZXJ5QnlSb2xlIiwic2VuZEJ1dHRvbiIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiYW55IiwiTnVtYmVyIiwiY2F0ZWdvcnlTZWxlY3QiLCJjaGFuZ2UiLCJ0YXJnZXQiLCJ0b0hhdmVWYWx1ZSIsInRyYW5zY3JpcHRpb25Ub2dnbGUiLCJ0b0JlQ2hlY2tlZCIsIm1lZGlhRGV2aWNlcyIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiLCJkaXNhYmxlZCIsInRvQmVEaXNhYmxlZCIsInByZWZlcnJlZERpYWxlY3QiLCJ0b0hhdmVBY2Nlc3NpYmxlTmFtZSIsImZvY3VzIiwia2V5RG93biIsImtleSIsInRvSGF2ZUNsYXNzIiwiVk9JQ0VfUkVDT1JESU5HX0NPTkZJRyIsInN0YW5kYXJkIiwibWF4RHVyYXRpb24iLCJ0b0JlIiwicHJlbWl1bSIsImFtYmFzc2Fkb3IiLCJiaXRSYXRlIiwidmFsdWVzIiwiZm9yRWFjaCIsImNvbmZpZyIsIm1pbWVUeXBlIiwidG9Db250YWluIiwiZmlsZUZvcm1hdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7Ozs7O3VCQUVrRDsyQkFDL0I7NkVBQ2E7aUNBQ0E7Z0NBQ007Ozs7OztBQUV2Qyx5QkFBeUI7QUFDekIsTUFBTUE7O2FBQ0dDLGtCQUFrQkMsS0FBS0MsRUFBRSxHQUFHQyxlQUFlLENBQUM7O0lBUW5EQyxZQUFZQyxNQUFtQixFQUFFQyxPQUE4QixDQUFFO2FBTmpFQyxrQkFBaUQ7YUFD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