188ea12468a53c8792a75fa1d619fdab
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _NetworkingContext = require("../../src/context/NetworkingContext");
const _testutils = require("../utils/test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock localStorage with proper Jest mock types
const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
    length: 0,
    key: jest.fn()
};
global.localStorage = localStorageMock;
describe("NetworkingContext", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        localStorageMock.getItem.mockReturnValue(null);
    });
    const wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_NetworkingContext.NetworkingProvider, {
            children: children
        });
    it("should provide networking context", ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        expect(result.current).toBeDefined();
        expect(result.current.connections).toBeDefined();
        expect(result.current.isLoading).toBe(false);
    });
    it("should handle mock connections data", ()=>{
        localStorageMock.getItem.mockImplementation((key)=>{
            if (key === "lusotown-connections") {
                return JSON.stringify(_testutils.portugueseTestUtils.mockPortugueseConnections);
            }
            return null;
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        expect(result.current).toBeDefined();
        expect(Array.isArray(result.current.connections)).toBe(true);
    });
    it("should handle connection filtering", ()=>{
        localStorageMock.getItem.mockImplementation((key)=>{
            if (key === "lusotown-connections") {
                return JSON.stringify(_testutils.portugueseTestUtils.mockPortugueseConnections);
            }
            return null;
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        (0, _react1.act)(()=>{
            // Test filtering functionality if available
            if (typeof result.current.filterConnections === "function") {
                result.current.filterConnections("premium");
            }
        });
        expect(result.current).toBeDefined();
    });
    it("should handle connection strength updates", ()=>{
        localStorageMock.getItem.mockImplementation((key)=>{
            if (key === "lusotown-connections") {
                return JSON.stringify(_testutils.portugueseTestUtils.mockPortugueseConnections);
            }
            return null;
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        (0, _react1.act)(()=>{
            // Test connection updates if available
            if (typeof result.current.updateConnectionStrength === "function") {
                result.current.updateConnectionStrength("conn-1", 9.0);
            }
        });
        expect(result.current).toBeDefined();
    });
    it("should handle privacy settings", ()=>{
        localStorageMock.getItem.mockImplementation((key)=>{
            if (key === "lusotown-privacy-settings") {
                return JSON.stringify({
                    level: "normal"
                });
            }
            return null;
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        expect(result.current).toBeDefined();
    });
    // Portuguese community specific tests
    it("should support Portuguese-speaking community connections", ()=>{
        const mockConnection = _testutils.portugueseTestUtils.mockPortugueseConnections[0];
        expect(mockConnection.connectedUser?.firstName).toBe("Maria");
        expect(mockConnection.connectedUser?.lastName).toBe("Santos");
        expect(mockConnection.connectionStrength).toBeGreaterThan(8);
    });
    it("should handle cultural events integration", ()=>{
        localStorageMock.getItem.mockImplementation((key)=>{
            if (key === "lusotown-cultural-events") {
                return JSON.stringify(_testutils.portugueseTestUtils.mockCulturalEvents);
            }
            return null;
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        expect(result.current).toBeDefined();
    });
    // Test error handling
    it("should handle localStorage errors gracefully", ()=>{
        localStorageMock.getItem.mockImplementation(()=>{
            throw new Error("localStorage error");
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        expect(result.current).toBeDefined();
        expect(result.current.isLoading).toBe(false);
    });
    // Test subscription integration
    it("should integrate with premium subscriptions", ()=>{
        localStorageMock.getItem.mockImplementation((key)=>{
            if (key === "lusotown-subscription") {
                return JSON.stringify(_testutils.portugueseTestUtils.mockPremiumSubscription);
            }
            return null;
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        expect(result.current).toBeDefined();
    });
    // Test connection management
    it("should handle connection requests", ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        (0, _react1.act)(()=>{
            if (typeof result.current.sendConnectionRequest === "function") {
                result.current.sendConnectionRequest("user-123");
            }
        });
        expect(result.current).toBeDefined();
    });
    it("should handle connection acceptance", ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        (0, _react1.act)(()=>{
            if (typeof result.current.acceptConnection === "function") {
                result.current.acceptConnection("request-123");
            }
        });
        expect(result.current).toBeDefined();
    });
    it("should handle connection removal", ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _NetworkingContext.useNetworking)(), {
            wrapper
        });
        (0, _react1.act)(()=>{
            if (typeof result.current.removeConnection === "function") {
                result.current.removeConnection("conn-1");
            }
        });
        expect(result.current).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,