37cedebe99b77f7fce0ecdceba106e31
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthService: function() {
        return AuthService;
    },
    authService: function() {
        return authService;
    },
    getCurrentUser: function() {
        return getCurrentUser;
    },
    isAdmin: function() {
        return isAdmin;
    },
    isAuthenticated: function() {
        return isAuthenticated;
    },
    isDemoUser: function() {
        return isDemoUser;
    },
    logout: function() {
        return logout;
    },
    useAuthState: function() {
        return useAuthState;
    }
});
const _supabase = require("./supabase");
const _profileImages = require("./profileImages");
const _errorHandling = require("./errorHandling");
const _credentials = require("../config/credentials");
// Map Supabase profile to User interface
function mapProfileToUser(profile, supabaseUser) {
    return {
        id: profile.id,
        email: profile.email,
        name: profile.first_name + (profile.last_name ? ` ${profile.last_name}` : ""),
        role: (0, _credentials.isAdminEmail)(profile.email) ? "admin" : "user",
        membershipTier: profile.membership_tier,
        profileImage: profile.profile_picture_url || (0, _profileImages.getImageWithFallback)("default-user"),
        joinedDate: new Date(profile.created_at).toISOString().split("T")[0],
        interests: [],
        favoriteEvents: [],
        location: profile.location || ""
    };
}
class AuthService {
    static getInstance() {
        if (!AuthService.instance) {
            AuthService.instance = new AuthService();
            AuthService.instance.initializeAuthListener();
        }
        return AuthService.instance;
    }
    initializeAuthListener() {
        // Check for existing demo session on initialization
        this.loadDemoSessionIfExists();
        // Listen for auth state changes from Supabase
        _supabase.supabase.auth.onAuthStateChange(async (event, session)=>{
            if (event === "SIGNED_IN" && session?.user) {
                await this.loadUserProfile(session.user);
            } else if (event === "SIGNED_OUT") {
                this.currentUser = null;
                this.notifyAuthStateChange(null);
            }
        });
        // Try to load current session on initialization
        this.loadCurrentSession();
    }
    async loadCurrentSession() {
        try {
            const { data: { session }, error } = await _supabase.supabase.auth.getSession();
            if (error) throw error;
            if (session?.user) {
                await this.loadUserProfile(session.user);
            }
        } catch (error) {
            console.error("Error loading current session:", error);
        }
    }
    // Demo authentication methods
    isDemoLogin(email, password) {
        return (0, _credentials.validateDemoCredentials)(email, password);
    }
    createDemoUser() {
        return {
            id: _credentials.DEMO_CONFIG.userId,
            email: _credentials.DEMO_CONFIG.email,
            name: "Maria Silva",
            role: "user",
            membershipTier: "premium",
            profileImage: "/profiles/default-avatar.svg",
            joinedDate: "2024-01-15",
            interests: [
                "Cultural Events",
                "Lusophone Food",
                "Language Exchange",
                "Fado Music",
                "Lusophone Literature"
            ],
            favoriteEvents: [
                "event-1",
                "event-3",
                "event-5"
            ],
            location: "Camden, London"
        };
    }
    async handleDemoLogin() {
        try {
            // Simulate loading delay for realistic experience
            await new Promise((resolve)=>setTimeout(resolve, 1500));
            const demoUser = this.createDemoUser();
            // Store demo session in localStorage for persistence
            if (typeof window !== "undefined") {
                _errorHandling.safeLocalStorage.setJSON("lusotown_demo_session", {
                    user: demoUser,
                    timestamp: Date.now()
                });
            }
            this.currentUser = demoUser;
            this.notifyAuthStateChange(demoUser);
            return {
                success: true,
                user: demoUser
            };
        } catch (error) {
            console.error("Demo login error:", error);
            return {
                success: false,
                error: "Demo login failed"
            };
        }
    }
    loadDemoSessionIfExists() {
        if (typeof window === "undefined") return;
        const sessionData = _errorHandling.safeLocalStorage.getJSON("lusotown_demo_session");
        if (sessionData) {
            // Check if session is still valid (24 hours)
            const twentyFourHours = 24 * 60 * 60 * 1000;
            if (Date.now() - sessionData.timestamp < twentyFourHours) {
                this.currentUser = sessionData.user;
                this.notifyAuthStateChange(sessionData.user);
            } else {
                // Clear expired session
                _errorHandling.safeLocalStorage.removeItem("lusotown_demo_session");
            }
        }
    }
    clearDemoSession() {
        if (typeof window !== "undefined") {
            _errorHandling.safeLocalStorage.removeItem("lusotown_demo_session");
        }
    }
    async loadUserProfile(supabaseUser) {
        try {
            // Get the user's profile from the profiles table
            const { data: profile, error } = await _supabase.supabase.from("profiles").select("*").eq("id", supabaseUser.id).single();
            if (error) {
                console.error("Error loading user profile:", error);
                return null;
            }
            if (profile) {
                const user = mapProfileToUser(profile, supabaseUser);
                this.currentUser = user;
                this.notifyAuthStateChange(user);
                return user;
            }
        } catch (error) {
            console.error("Error in loadUserProfile:", error);
        }
        return null;
    }
    notifyAuthStateChange(user) {
        this.authStateListeners.forEach((listener)=>listener(user));
    }
    onAuthStateChange(handler) {
        this.authStateListeners.push(handler);
        // Return unsubscribe function
        return ()=>{
            this.authStateListeners = this.authStateListeners.filter((listener)=>listener !== handler);
        };
    }
    async login(email, password) {
        try {
            // Check if this is demo login
            if (this.isDemoLogin(email, password)) {
                return await this.handleDemoLogin();
            }
            // Regular Supabase authentication
            const { data, error } = await _supabase.supabase.auth.signInWithPassword({
                email: email.trim(),
                password: password
            });
            if (error) {
                return {
                    success: false,
                    error: error.message
                };
            }
            if (data.user) {
                const user = await this.loadUserProfile(data.user);
                if (user) {
                    return {
                        success: true,
                        user
                    };
                } else {
                    return {
                        success: false,
                        error: "Failed to load user profile"
                    };
                }
            }
            return {
                success: false,
                error: "Unknown authentication error"
            };
        } catch (error) {
            console.error("Login error:", error);
            return {
                success: false,
                error: "An unexpected error occurred"
            };
        }
    }
    async signup(email, password, userData) {
        try {
            const { data, error } = await _supabase.supabase.auth.signUp({
                email: email.trim(),
                password: password,
                options: {
                    data: {
                        first_name: userData.firstName,
                        last_name: userData.lastName || ""
                    }
                }
            });
            if (error) {
                return {
                    success: false,
                    error: error.message
                };
            }
            if (data.user) {
                // The profile will be created automatically by the database trigger
                // We'll wait a moment for it to be created, then load it
                await new Promise((resolve)=>setTimeout(resolve, 1000));
                const user = await this.loadUserProfile(data.user);
                if (user) {
                    return {
                        success: true,
                        user
                    };
                } else {
                    return {
                        success: true,
                        error: "Account created. Please check your email to verify your account."
                    };
                }
            }
            return {
                success: false,
                error: "Unknown signup error"
            };
        } catch (error) {
            console.error("Signup error:", error);
            return {
                success: false,
                error: "An unexpected error occurred"
            };
        }
    }
    async logout() {
        try {
            // Handle demo session logout
            if (this.currentUser?.id === _credentials.DEMO_CONFIG.userId) {
                this.clearDemoSession();
                this.currentUser = null;
                this.notifyAuthStateChange(null);
                return;
            }
            // Regular Supabase logout
            const { error } = await _supabase.supabase.auth.signOut();
            if (error) throw error;
            this.currentUser = null;
            this.notifyAuthStateChange(null);
        } catch (error) {
            console.error("Logout error:", error);
            throw error;
        }
    }
    getCurrentUser() {
        return this.currentUser;
    }
    isAuthenticated() {
        return this.currentUser !== null;
    }
    isDemoUser() {
        return this.currentUser?.id === _credentials.DEMO_CONFIG.userId;
    }
    isAdmin() {
        const user = this.getCurrentUser();
        return user?.role === "admin";
    }
    async updateFavorites(eventId, action) {
        const user = this.getCurrentUser();
        if (!user) return;
        // Update local state
        if (action === "add" && !user.favoriteEvents.includes(eventId)) {
            user.favoriteEvents.push(eventId);
        } else if (action === "remove") {
            user.favoriteEvents = user.favoriteEvents.filter((id)=>id !== eventId);
        }
        // Implement database update for favorite events
        try {
            // Update localStorage for immediate UI feedback
            localStorage.setItem("lusotown-user", JSON.stringify(user));
            // Update database (would require Supabase integration)
            // await supabase
            //   .from('user_favorite_events')
            //   .upsert({ user_id: user.id, event_id: eventId, is_favorite: action === 'add' })
            console.log(`${action} favorite event ${eventId} for user ${user.id}`);
        } catch (error) {
            console.error("Error updating favorites:", error);
        }
    }
    async updateProfile(updates) {
        const user = this.getCurrentUser();
        if (!user) throw new Error("No user logged in");
        try {
            // Map User interface updates to Profile table updates
            const profileUpdates = {};
            if (updates.name) {
                const nameParts = updates.name.split(" ");
                profileUpdates.first_name = nameParts[0];
                if (nameParts.length > 1) {
                    profileUpdates.last_name = nameParts.slice(1).join(" ");
                }
            }
            if (updates.location) profileUpdates.location = updates.location;
            if (updates.membershipTier) profileUpdates.membership_tier = updates.membershipTier;
            if (updates.profileImage) profileUpdates.profile_picture_url = updates.profileImage;
            // Update the profile in Supabase
            const { error } = await _supabase.supabase.from("profiles").update({
                ...profileUpdates,
                updated_at: new Date().toISOString()
            }).eq("id", user.id);
            if (error) throw error;
            // Update local user state
            Object.assign(user, updates);
            this.notifyAuthStateChange(user);
        } catch (error) {
            console.error("Error updating profile:", error);
            throw error;
        }
    }
    async resetPassword(email) {
        try {
            const { error } = await _supabase.supabase.auth.resetPasswordForEmail(email);
            if (error) {
                return {
                    success: false,
                    error: error.message
                };
            }
            return {
                success: true
            };
        } catch (error) {
            console.error("Password reset error:", error);
            return {
                success: false,
                error: "An unexpected error occurred"
            };
        }
    }
    constructor(){
        this.currentUser = null;
        this.authStateListeners = [];
    }
}
const authService = AuthService.getInstance();
const getCurrentUser = ()=>authService.getCurrentUser();
const isAuthenticated = ()=>authService.isAuthenticated();
const isDemoUser = ()=>authService.isDemoUser();
const isAdmin = ()=>authService.isAdmin();
const logout = ()=>authService.logout();
const useAuthState = (callback)=>{
    return authService.onAuthStateChange(callback);
};

//# sourceMappingURL=data:application/json;base64,