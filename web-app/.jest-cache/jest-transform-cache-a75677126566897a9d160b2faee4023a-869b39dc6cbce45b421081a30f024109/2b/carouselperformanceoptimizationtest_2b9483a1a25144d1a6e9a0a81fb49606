16e53e24ff8b45e31eb97da37ce011f9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _useCarouselPerformanceOptimization = require("../../src/hooks/useCarouselPerformanceOptimization");
const _usePortuguesePWAFeatures = require("../../src/hooks/usePortuguesePWAFeatures");
const _OptimizedPortugueseCarousel = /*#__PURE__*/ _interop_require_default(require("../../src/components/carousels/OptimizedPortugueseCarousel"));
const _LanguageContext = require("../../src/context/LanguageContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
_globals.jest.mock("@/hooks/useCarouselPerformanceOptimization");
_globals.jest.mock("@/hooks/usePortuguesePWAFeatures");
_globals.jest.mock("@/utils/logger");
const mockPerformanceOptimization = _useCarouselPerformanceOptimization.useCarouselPerformanceOptimization;
const mockPWAFeatures = _usePortuguesePWAFeatures.usePortuguesePWAFeatures;
// Mock performance APIs
const mockPerformance = {
    now: _globals.jest.fn(()=>Date.now()),
    getEntriesByType: _globals.jest.fn(()=>[]),
    memory: {
        usedJSHeapSize: 50 * 1024 * 1024,
        totalJSHeapSize: 100 * 1024 * 1024 // 100MB
    }
};
const mockNavigator = {
    onLine: true,
    connection: {
        effectiveType: "4g"
    }
};
// Test data
const mockCarouselItems = [
    {
        id: "event-1",
        title: {
            en: "Fado Night at Portuguese Cultural Centre",
            pt: "Noite de Fado no Centro Cultural Portugu\xeas"
        },
        description: {
            en: "Traditional Fado music evening",
            pt: "Noite de m\xfasica tradicional de Fado"
        },
        image: "https://example.com/fado-night.jpg",
        category: "cultural-event"
    },
    {
        id: "event-2",
        title: {
            en: "Portuguese Wine Tasting",
            pt: "Prova de Vinhos Portugueses"
        },
        description: {
            en: "Discover the finest Portuguese wines",
            pt: "Descubra os melhores vinhos portugueses"
        },
        image: "https://example.com/wine-tasting.jpg",
        category: "cultural-event"
    },
    {
        id: "event-3",
        title: {
            en: "Festa Junina Celebration",
            pt: "Celebra\xe7\xe3o da Festa Junina"
        },
        description: {
            en: "Brazilian cultural celebration",
            pt: "Celebra\xe7\xe3o cultural brasileira"
        },
        image: "https://example.com/festa-junina.jpg",
        category: "festa"
    }
];
// Helper component
const TestWrapper = ({ children, language = "en" })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
        children: children
    });
describe("Carousel Performance Optimization", ()=>{
    beforeEach(()=>{
        // Reset mocks
        _globals.jest.clearAllMocks();
        // Mock global APIs
        global.performance = mockPerformance;
        global.navigator = mockNavigator;
        global.IntersectionObserver = _globals.jest.fn().mockImplementation(()=>({
                observe: _globals.jest.fn(),
                disconnect: _globals.jest.fn(),
                unobserve: _globals.jest.fn()
            }));
        global.requestAnimationFrame = _globals.jest.fn((cb)=>setTimeout(cb, 16));
        global.cancelAnimationFrame = _globals.jest.fn();
        // Default mock implementations
        mockPerformanceOptimization.mockReturnValue({
            metrics: {
                loadTime: 150,
                renderTime: 25,
                interactionLatency: 8,
                memoryUsage: 45,
                networkStatus: "online",
                frameRate: 58,
                bundleSize: 250,
                cacheHitRatio: 85
            },
            mobileSettings: {
                enableImageLazyLoading: true,
                enableIntersectionObserver: true,
                enableVirtualScrolling: true,
                enablePreloadOptimization: true,
                enableBundleSplitting: true,
                enableCriticalPathOptimization: true,
                enablePortugueseContentPrioritization: true
            },
            portugueseReadingPatterns: {
                averageReadingTime: 200,
                scrollVelocity: 1.2,
                interactionFrequency: 3.5,
                contentEngagement: 78,
                preferredAutoAdvanceSpeed: 6500
            },
            optimizePortugueseImages: _globals.jest.fn().mockResolvedValue("https://example.com/optimized-image.jpg"),
            analyzePortugueseReadingPatterns: _globals.jest.fn(),
            measureInteractionLatency: _globals.jest.fn(),
            recordInteractionComplete: _globals.jest.fn(),
            getOptimalAutoAdvanceTime: _globals.jest.fn().mockReturnValue(6500),
            getOptimizationRecommendations: _globals.jest.fn().mockReturnValue([
                "enable-virtual-scrolling"
            ]),
            isOptimized: true
        });
        mockPWAFeatures.mockReturnValue({
            installationState: {
                canInstall: true,
                isInstalled: false,
                installPromptEvent: null,
                hasShownPrompt: false,
                installationSource: null
            },
            offlineCapabilities: {
                isOffline: false,
                hasOfflineContent: true,
                cachedPagesCount: 15,
                offlineEventsCount: 8,
                offlineBusinessesCount: 12,
                lastSyncTime: new Date(),
                pendingActions: []
            },
            notificationSettings: {
                enabled: true,
                culturalEvents: true,
                businessUpdates: true,
                communityMessages: true,
                festivalReminders: true,
                fadoNights: true,
                portugalDay: true,
                brazilianEvents: true,
                capeVerdeanEvents: true,
                quietHoursStart: "22:00",
                quietHoursEnd: "08:00",
                language: "en"
            },
            backgroundSyncData: {
                culturalEvents: [],
                featuredBusinesses: [],
                communityUpdates: [],
                userPreferences: {},
                lastSyncTimestamp: new Date()
            },
            getPortugueseInstallMessage: _globals.jest.fn().mockReturnValue({
                title: "Install LusoTown App",
                subtitle: "Get instant access to Portuguese cultural events",
                description: "Never miss Fado nights, festivals, or community gatherings.",
                install: "Install App",
                later: "Maybe Later",
                benefits: [
                    "Offline access",
                    "Push notifications",
                    "Faster loading"
                ]
            }),
            handleInstallPrompt: _globals.jest.fn().mockResolvedValue(true),
            requestPortugueseNotifications: _globals.jest.fn().mockResolvedValue(true),
            enableOfflineMode: _globals.jest.fn(),
            syncPortugueseContent: _globals.jest.fn(),
            queueOfflineAction: _globals.jest.fn(),
            processOfflineActions: _globals.jest.fn(),
            setNotificationSettings: _globals.jest.fn(),
            isFullyOfflineCapable: true
        });
    });
    describe("Performance Monitoring", ()=>{
        it("should initialize performance monitoring on mount", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enablePerformanceOptimization: true
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(mockPerformanceOptimization).toHaveBeenCalledWith({
                    enableRealTimeMonitoring: true,
                    enablePortugueseOptimizations: true,
                    optimizationLevel: "standard"
                });
            });
        });
        it("should measure interaction latency on carousel navigation", async ()=>{
            const { measureInteractionLatency, recordInteractionComplete } = mockPerformanceOptimization();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    showControls: true
                })
            }));
            const nextButton = _react1.screen.getByLabelText(/next portuguese cultural items/i);
            (0, _react1.act)(()=>{
                _react1.fireEvent.click(nextButton);
            });
            expect(measureInteractionLatency).toHaveBeenCalled();
            expect(recordInteractionComplete).toHaveBeenCalled();
        });
        it("should optimize Portuguese reading patterns", async ()=>{
            const { analyzePortugueseReadingPatterns } = mockPerformanceOptimization();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                language: "pt",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.pt
                        }),
                    enablePortugueseCulturalOptimization: true
                })
            }));
            const nextButton = _react1.screen.getByLabelText(/próximos itens culturais portugueses/i);
            (0, _react1.act)(()=>{
                _react1.fireEvent.click(nextButton);
            });
            await (0, _react1.waitFor)(()=>{
                expect(analyzePortugueseReadingPatterns).toHaveBeenCalledWith({
                    scrollVelocity: expect.any(Number),
                    dwellTime: expect.any(Number),
                    engagementScore: expect.any(Number)
                });
            });
        });
        it("should display performance metrics in development mode", ()=>{
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = "development";
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enablePerformanceOptimization: true,
                    title: {
                        en: "Portuguese Events",
                        pt: "Eventos Portugueses"
                    }
                })
            }));
            expect(_react1.screen.getByText(/load: \d+ms/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/memory: \d+mb/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/fps: \d+/i)).toBeInTheDocument();
            process.env.NODE_ENV = originalEnv;
        });
    });
    describe("PWA Features", ()=>{
        it("should initialize PWA features", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enableOfflineMode: true
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(mockPWAFeatures).toHaveBeenCalled();
            });
        });
        it("should show offline status when offline", ()=>{
            mockPWAFeatures.mockReturnValue({
                ...mockPWAFeatures(),
                offlineCapabilities: {
                    ...mockPWAFeatures().offlineCapabilities,
                    isOffline: true
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enablePerformanceOptimization: true
                })
            }));
            expect(_react1.screen.getByText(/offline mode/i)).toBeInTheDocument();
        });
        it("should queue actions when offline", async ()=>{
            const { queueOfflineAction } = mockPWAFeatures();
            mockPWAFeatures.mockReturnValue({
                ...mockPWAFeatures(),
                offlineCapabilities: {
                    ...mockPWAFeatures().offlineCapabilities,
                    isOffline: true
                }
            });
            const handleItemClick = _globals.jest.fn();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    onItemClick: handleItemClick
                })
            }));
            const firstItem = _react1.screen.getByTestId("item-event-1");
            (0, _react1.act)(()=>{
                _react1.fireEvent.click(firstItem);
            });
            expect(queueOfflineAction).toHaveBeenCalledWith({
                type: "favorite-event",
                data: {
                    itemId: "event-1",
                    index: 0
                }
            });
            expect(handleItemClick).toHaveBeenCalledWith(mockCarouselItems[0], 0);
        });
    });
    describe("Portuguese Cultural Optimizations", ()=>{
        it("should apply Portuguese auto-advance timing", async ()=>{
            const { getOptimalAutoAdvanceTime } = mockPerformanceOptimization();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                language: "pt",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.pt
                        }),
                    autoAdvance: true,
                    enablePortugueseCulturalOptimization: true
                })
            }));
            expect(getOptimalAutoAdvanceTime).toHaveBeenCalled();
        });
        it("should optimize images for Portuguese cultural content", async ()=>{
            const { optimizePortugueseImages } = mockPerformanceOptimization();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enablePerformanceOptimization: true
                })
            }));
            // Image optimization would be called during rendering process
            await (0, _react1.waitFor)(()=>{
                expect(optimizePortugueseImages).toBeDefined();
            });
        });
        it("should display Portuguese cultural content correctly", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                language: "pt",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.pt
                        }),
                    title: {
                        en: "Cultural Events",
                        pt: "Eventos Culturais"
                    },
                    subtitle: {
                        en: "Portuguese community events",
                        pt: "Eventos da comunidade portuguesa"
                    }
                })
            }));
            expect(_react1.screen.getByText("Eventos Culturais")).toBeInTheDocument();
            expect(_react1.screen.getByText("Eventos da comunidade portuguesa")).toBeInTheDocument();
            expect(_react1.screen.getByText("Noite de Fado no Centro Cultural Portugu\xeas")).toBeInTheDocument();
        });
    });
    describe("Mobile Optimizations", ()=>{
        beforeEach(()=>{
            // Mock mobile viewport
            Object.defineProperty(window, "innerWidth", {
                writable: true,
                configurable: true,
                value: 375
            });
        });
        it("should use mobile-optimized settings", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enablePerformanceOptimization: true
                })
            }));
            expect(_react1.screen.getByText(/mobile/i)).toBeInTheDocument();
        });
        it("should display mobile swipe hint", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        })
                })
            }));
            // Mobile swipe hints are displayed as dots
            const swipeHints = document.querySelectorAll(".w-1.h-1.bg-gray-400, .w-1.h-1.bg-primary-500");
            expect(swipeHints.length).toBeGreaterThan(0);
        });
    });
    describe("Performance Score Calculation", ()=>{
        it("should calculate and display performance score", async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enablePerformanceOptimization: true,
                    title: {
                        en: "Events",
                        pt: "Eventos"
                    }
                })
            }));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/score: \d+%/i)).toBeInTheDocument();
            });
        });
        it("should show optimization recommendations", ()=>{
            mockPerformanceOptimization.mockReturnValue({
                ...mockPerformanceOptimization(),
                getOptimizationRecommendations: _globals.jest.fn().mockReturnValue([
                    "enable-virtual-scrolling",
                    "optimize-memory-usage"
                ])
            });
            const originalEnv = process.env.NODE_ENV;
            process.env.NODE_ENV = "development";
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    enablePerformanceOptimization: true,
                    title: {
                        en: "Events",
                        pt: "Eventos"
                    }
                })
            }));
            expect(_react1.screen.getByText(/2 optimizations available/i)).toBeInTheDocument();
            process.env.NODE_ENV = originalEnv;
        });
    });
    describe("Loading States", ()=>{
        it("should show loading skeleton", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    loading: true
                })
            }));
            expect(document.querySelector(".animate-pulse")).toBeInTheDocument();
        });
        it("should show empty state when no items", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: [],
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        })
                })
            }));
            expect(_react1.screen.getByText(/no portuguese cultural content available/i)).toBeInTheDocument();
        });
        it("should show offline message in empty state when offline", ()=>{
            mockPWAFeatures.mockReturnValue({
                ...mockPWAFeatures(),
                offlineCapabilities: {
                    ...mockPWAFeatures().offlineCapabilities,
                    isOffline: true
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: [],
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        })
                })
            }));
            expect(_react1.screen.getByText(/you are offline/i)).toBeInTheDocument();
        });
    });
    describe("Accessibility", ()=>{
        it("should have proper ARIA labels", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        }),
                    title: {
                        en: "Cultural Events",
                        pt: "Eventos Culturais"
                    },
                    showControls: true
                })
            }));
            expect(_react1.screen.getByRole("region", {
                name: "Cultural Events"
            })).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/previous portuguese cultural items/i)).toBeInTheDocument();
            expect(_react1.screen.getByLabelText(/next portuguese cultural items/i)).toBeInTheDocument();
        });
        it("should provide status updates for screen readers", ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OptimizedPortugueseCarousel.default, {
                    items: mockCarouselItems,
                    renderItem: (item)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": `item-${item.id}`,
                            children: item.title.en
                        })
                })
            }));
            expect(_react1.screen.getByRole("status")).toBeInTheDocument();
            expect(_react1.screen.getByText(/showing portuguese cultural items/i)).toBeInTheDocument();
        });
    });
});
describe("Performance Hooks", ()=>{
    describe("useCarouselPerformanceOptimization", ()=>{
        it("should return performance metrics", ()=>{
            const { result } = renderHook(()=>(0, _useCarouselPerformanceOptimization.useCarouselPerformanceOptimization)({
                    enableRealTimeMonitoring: true
                }));
            expect(result.current.metrics).toBeDefined();
            expect(result.current.isOptimized).toBe(true);
        });
    });
    describe("usePortuguesePWAFeatures", ()=>{
        it("should return PWA capabilities", ()=>{
            const { result } = renderHook(()=>(0, _usePortuguesePWAFeatures.usePortuguesePWAFeatures)());
            expect(result.current.installationState).toBeDefined();
            expect(result.current.offlineCapabilities).toBeDefined();
            expect(result.current.isFullyOfflineCapable).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,