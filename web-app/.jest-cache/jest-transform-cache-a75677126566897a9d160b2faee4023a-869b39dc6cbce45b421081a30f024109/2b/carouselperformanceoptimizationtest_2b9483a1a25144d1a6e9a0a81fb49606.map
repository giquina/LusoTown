{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/performance/carousel-performance-optimization.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor, act } from '@testing-library/react'\nimport { jest } from '@jest/globals'\nimport { useCarouselPerformanceOptimization } from '@/hooks/useCarouselPerformanceOptimization'\nimport { usePortuguesePWAFeatures } from '@/hooks/usePortuguesePWAFeatures'\nimport OptimizedPortugueseCarousel from '@/components/carousels/OptimizedPortugueseCarousel'\nimport { LanguageProvider } from '@/context/LanguageContext'\n\n// Mock dependencies\njest.mock('@/hooks/useCarouselPerformanceOptimization')\njest.mock('@/hooks/usePortuguesePWAFeatures')\njest.mock('@/utils/logger')\n\nconst mockPerformanceOptimization = useCarouselPerformanceOptimization as jest.MockedFunction<typeof useCarouselPerformanceOptimization>\nconst mockPWAFeatures = usePortuguesePWAFeatures as jest.MockedFunction<typeof usePortuguesePWAFeatures>\n\n// Mock performance APIs\nconst mockPerformance = {\n  now: jest.fn(() => Date.now()),\n  getEntriesByType: jest.fn(() => []),\n  memory: {\n    usedJSHeapSize: 50 * 1024 * 1024, // 50MB\n    totalJSHeapSize: 100 * 1024 * 1024 // 100MB\n  }\n}\n\nconst mockNavigator = {\n  onLine: true,\n  connection: {\n    effectiveType: '4g'\n  }\n}\n\n// Test data\nconst mockCarouselItems = [\n  {\n    id: 'event-1',\n    title: { en: 'Fado Night at Portuguese Cultural Centre', pt: 'Noite de Fado no Centro Cultural Português' },\n    description: { en: 'Traditional Fado music evening', pt: 'Noite de música tradicional de Fado' },\n    image: 'https://example.com/fado-night.jpg',\n    category: 'cultural-event'\n  },\n  {\n    id: 'event-2',\n    title: { en: 'Portuguese Wine Tasting', pt: 'Prova de Vinhos Portugueses' },\n    description: { en: 'Discover the finest Portuguese wines', pt: 'Descubra os melhores vinhos portugueses' },\n    image: 'https://example.com/wine-tasting.jpg',\n    category: 'cultural-event'\n  },\n  {\n    id: 'event-3',\n    title: { en: 'Festa Junina Celebration', pt: 'Celebração da Festa Junina' },\n    description: { en: 'Brazilian cultural celebration', pt: 'Celebração cultural brasileira' },\n    image: 'https://example.com/festa-junina.jpg',\n    category: 'festa'\n  }\n]\n\n// Helper component\nconst TestWrapper: React.FC<{ children: React.ReactNode; language?: 'en' | 'pt' }> = ({ \n  children, \n  language = 'en' \n}) => (\n  <LanguageProvider>\n    {children}\n  </LanguageProvider>\n)\n\ndescribe('Carousel Performance Optimization', () => {\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks()\n    \n    // Mock global APIs\n    global.performance = mockPerformance as any\n    global.navigator = mockNavigator as any\n    global.IntersectionObserver = jest.fn().mockImplementation(() => ({\n      observe: jest.fn(),\n      disconnect: jest.fn(),\n      unobserve: jest.fn()\n    }))\n    global.requestAnimationFrame = jest.fn((cb) => setTimeout(cb, 16))\n    global.cancelAnimationFrame = jest.fn()\n    \n    // Default mock implementations\n    mockPerformanceOptimization.mockReturnValue({\n      metrics: {\n        loadTime: 150,\n        renderTime: 25,\n        interactionLatency: 8,\n        memoryUsage: 45,\n        networkStatus: 'online',\n        frameRate: 58,\n        bundleSize: 250,\n        cacheHitRatio: 85\n      },\n      mobileSettings: {\n        enableImageLazyLoading: true,\n        enableIntersectionObserver: true,\n        enableVirtualScrolling: true,\n        enablePreloadOptimization: true,\n        enableBundleSplitting: true,\n        enableCriticalPathOptimization: true,\n        enablePortugueseContentPrioritization: true\n      },\n      portugueseReadingPatterns: {\n        averageReadingTime: 200,\n        scrollVelocity: 1.2,\n        interactionFrequency: 3.5,\n        contentEngagement: 78,\n        preferredAutoAdvanceSpeed: 6500\n      },\n      optimizePortugueseImages: jest.fn().mockResolvedValue('https://example.com/optimized-image.jpg'),\n      analyzePortugueseReadingPatterns: jest.fn(),\n      measureInteractionLatency: jest.fn(),\n      recordInteractionComplete: jest.fn(),\n      getOptimalAutoAdvanceTime: jest.fn().mockReturnValue(6500),\n      getOptimizationRecommendations: jest.fn().mockReturnValue(['enable-virtual-scrolling']),\n      isOptimized: true\n    })\n\n    mockPWAFeatures.mockReturnValue({\n      installationState: {\n        canInstall: true,\n        isInstalled: false,\n        installPromptEvent: null,\n        hasShownPrompt: false,\n        installationSource: null\n      },\n      offlineCapabilities: {\n        isOffline: false,\n        hasOfflineContent: true,\n        cachedPagesCount: 15,\n        offlineEventsCount: 8,\n        offlineBusinessesCount: 12,\n        lastSyncTime: new Date(),\n        pendingActions: []\n      },\n      notificationSettings: {\n        enabled: true,\n        culturalEvents: true,\n        businessUpdates: true,\n        communityMessages: true,\n        festivalReminders: true,\n        fadoNights: true,\n        portugalDay: true,\n        brazilianEvents: true,\n        capeVerdeanEvents: true,\n        quietHoursStart: '22:00',\n        quietHoursEnd: '08:00',\n        language: 'en' as const\n      },\n      backgroundSyncData: {\n        culturalEvents: [],\n        featuredBusinesses: [],\n        communityUpdates: [],\n        userPreferences: {},\n        lastSyncTimestamp: new Date()\n      },\n      getPortugueseInstallMessage: jest.fn().mockReturnValue({\n        title: 'Install LusoTown App',\n        subtitle: 'Get instant access to Portuguese cultural events',\n        description: 'Never miss Fado nights, festivals, or community gatherings.',\n        install: 'Install App',\n        later: 'Maybe Later',\n        benefits: ['Offline access', 'Push notifications', 'Faster loading']\n      }),\n      handleInstallPrompt: jest.fn().mockResolvedValue(true),\n      requestPortugueseNotifications: jest.fn().mockResolvedValue(true),\n      enableOfflineMode: jest.fn(),\n      syncPortugueseContent: jest.fn(),\n      queueOfflineAction: jest.fn(),\n      processOfflineActions: jest.fn(),\n      setNotificationSettings: jest.fn(),\n      isFullyOfflineCapable: true\n    })\n  })\n\n  describe('Performance Monitoring', () => {\n    it('should initialize performance monitoring on mount', async () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enablePerformanceOptimization={true}\n          />\n        </TestWrapper>\n      )\n\n      await waitFor(() => {\n        expect(mockPerformanceOptimization).toHaveBeenCalledWith({\n          enableRealTimeMonitoring: true,\n          enablePortugueseOptimizations: true,\n          optimizationLevel: 'standard'\n        })\n      })\n    })\n\n    it('should measure interaction latency on carousel navigation', async () => {\n      const { measureInteractionLatency, recordInteractionComplete } = mockPerformanceOptimization()\n\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            showControls={true}\n          />\n        </TestWrapper>\n      )\n\n      const nextButton = screen.getByLabelText(/next portuguese cultural items/i)\n      \n      act(() => {\n        fireEvent.click(nextButton)\n      })\n\n      expect(measureInteractionLatency).toHaveBeenCalled()\n      expect(recordInteractionComplete).toHaveBeenCalled()\n    })\n\n    it('should optimize Portuguese reading patterns', async () => {\n      const { analyzePortugueseReadingPatterns } = mockPerformanceOptimization()\n\n      render(\n        <TestWrapper language=\"pt\">\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.pt}</div>}\n            enablePortugueseCulturalOptimization={true}\n          />\n        </TestWrapper>\n      )\n\n      const nextButton = screen.getByLabelText(/próximos itens culturais portugueses/i)\n      \n      act(() => {\n        fireEvent.click(nextButton)\n      })\n\n      await waitFor(() => {\n        expect(analyzePortugueseReadingPatterns).toHaveBeenCalledWith({\n          scrollVelocity: expect.any(Number),\n          dwellTime: expect.any(Number),\n          engagementScore: expect.any(Number)\n        })\n      })\n    })\n\n    it('should display performance metrics in development mode', () => {\n      const originalEnv = process.env.NODE_ENV\n      process.env.NODE_ENV = 'development'\n\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enablePerformanceOptimization={true}\n            title={{ en: 'Portuguese Events', pt: 'Eventos Portugueses' }}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByText(/load: \\d+ms/i)).toBeInTheDocument()\n      expect(screen.getByText(/memory: \\d+mb/i)).toBeInTheDocument()\n      expect(screen.getByText(/fps: \\d+/i)).toBeInTheDocument()\n\n      process.env.NODE_ENV = originalEnv\n    })\n  })\n\n  describe('PWA Features', () => {\n    it('should initialize PWA features', async () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enableOfflineMode={true}\n          />\n        </TestWrapper>\n      )\n\n      await waitFor(() => {\n        expect(mockPWAFeatures).toHaveBeenCalled()\n      })\n    })\n\n    it('should show offline status when offline', () => {\n      mockPWAFeatures.mockReturnValue({\n        ...mockPWAFeatures(),\n        offlineCapabilities: {\n          ...mockPWAFeatures().offlineCapabilities,\n          isOffline: true\n        }\n      })\n\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enablePerformanceOptimization={true}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByText(/offline mode/i)).toBeInTheDocument()\n    })\n\n    it('should queue actions when offline', async () => {\n      const { queueOfflineAction } = mockPWAFeatures()\n      \n      mockPWAFeatures.mockReturnValue({\n        ...mockPWAFeatures(),\n        offlineCapabilities: {\n          ...mockPWAFeatures().offlineCapabilities,\n          isOffline: true\n        }\n      })\n\n      const handleItemClick = jest.fn()\n\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            onItemClick={handleItemClick}\n          />\n        </TestWrapper>\n      )\n\n      const firstItem = screen.getByTestId('item-event-1')\n      \n      act(() => {\n        fireEvent.click(firstItem)\n      })\n\n      expect(queueOfflineAction).toHaveBeenCalledWith({\n        type: 'favorite-event',\n        data: { itemId: 'event-1', index: 0 }\n      })\n      expect(handleItemClick).toHaveBeenCalledWith(mockCarouselItems[0], 0)\n    })\n  })\n\n  describe('Portuguese Cultural Optimizations', () => {\n    it('should apply Portuguese auto-advance timing', async () => {\n      const { getOptimalAutoAdvanceTime } = mockPerformanceOptimization()\n\n      render(\n        <TestWrapper language=\"pt\">\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.pt}</div>}\n            autoAdvance={true}\n            enablePortugueseCulturalOptimization={true}\n          />\n        </TestWrapper>\n      )\n\n      expect(getOptimalAutoAdvanceTime).toHaveBeenCalled()\n    })\n\n    it('should optimize images for Portuguese cultural content', async () => {\n      const { optimizePortugueseImages } = mockPerformanceOptimization()\n\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enablePerformanceOptimization={true}\n          />\n        </TestWrapper>\n      )\n\n      // Image optimization would be called during rendering process\n      await waitFor(() => {\n        expect(optimizePortugueseImages).toBeDefined()\n      })\n    })\n\n    it('should display Portuguese cultural content correctly', () => {\n      render(\n        <TestWrapper language=\"pt\">\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.pt}</div>}\n            title={{ en: 'Cultural Events', pt: 'Eventos Culturais' }}\n            subtitle={{ en: 'Portuguese community events', pt: 'Eventos da comunidade portuguesa' }}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByText('Eventos Culturais')).toBeInTheDocument()\n      expect(screen.getByText('Eventos da comunidade portuguesa')).toBeInTheDocument()\n      expect(screen.getByText('Noite de Fado no Centro Cultural Português')).toBeInTheDocument()\n    })\n  })\n\n  describe('Mobile Optimizations', () => {\n    beforeEach(() => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n    })\n\n    it('should use mobile-optimized settings', () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enablePerformanceOptimization={true}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByText(/mobile/i)).toBeInTheDocument()\n    })\n\n    it('should display mobile swipe hint', () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n          />\n        </TestWrapper>\n      )\n\n      // Mobile swipe hints are displayed as dots\n      const swipeHints = document.querySelectorAll('.w-1.h-1.bg-gray-400, .w-1.h-1.bg-primary-500')\n      expect(swipeHints.length).toBeGreaterThan(0)\n    })\n  })\n\n  describe('Performance Score Calculation', () => {\n    it('should calculate and display performance score', async () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enablePerformanceOptimization={true}\n            title={{ en: 'Events', pt: 'Eventos' }}\n          />\n        </TestWrapper>\n      )\n\n      await waitFor(() => {\n        expect(screen.getByText(/score: \\d+%/i)).toBeInTheDocument()\n      })\n    })\n\n    it('should show optimization recommendations', () => {\n      mockPerformanceOptimization.mockReturnValue({\n        ...mockPerformanceOptimization(),\n        getOptimizationRecommendations: jest.fn().mockReturnValue([\n          'enable-virtual-scrolling',\n          'optimize-memory-usage'\n        ])\n      })\n\n      const originalEnv = process.env.NODE_ENV\n      process.env.NODE_ENV = 'development'\n\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            enablePerformanceOptimization={true}\n            title={{ en: 'Events', pt: 'Eventos' }}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByText(/2 optimizations available/i)).toBeInTheDocument()\n\n      process.env.NODE_ENV = originalEnv\n    })\n  })\n\n  describe('Loading States', () => {\n    it('should show loading skeleton', () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            loading={true}\n          />\n        </TestWrapper>\n      )\n\n      expect(document.querySelector('.animate-pulse')).toBeInTheDocument()\n    })\n\n    it('should show empty state when no items', () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={[]}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByText(/no portuguese cultural content available/i)).toBeInTheDocument()\n    })\n\n    it('should show offline message in empty state when offline', () => {\n      mockPWAFeatures.mockReturnValue({\n        ...mockPWAFeatures(),\n        offlineCapabilities: {\n          ...mockPWAFeatures().offlineCapabilities,\n          isOffline: true\n        }\n      })\n\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={[]}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByText(/you are offline/i)).toBeInTheDocument()\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n            title={{ en: 'Cultural Events', pt: 'Eventos Culturais' }}\n            showControls={true}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByRole('region', { name: 'Cultural Events' })).toBeInTheDocument()\n      expect(screen.getByLabelText(/previous portuguese cultural items/i)).toBeInTheDocument()\n      expect(screen.getByLabelText(/next portuguese cultural items/i)).toBeInTheDocument()\n    })\n\n    it('should provide status updates for screen readers', () => {\n      render(\n        <TestWrapper>\n          <OptimizedPortugueseCarousel\n            items={mockCarouselItems}\n            renderItem={(item) => <div data-testid={`item-${item.id}`}>{item.title.en}</div>}\n          />\n        </TestWrapper>\n      )\n\n      expect(screen.getByRole('status')).toBeInTheDocument()\n      expect(screen.getByText(/showing portuguese cultural items/i)).toBeInTheDocument()\n    })\n  })\n})\n\ndescribe('Performance Hooks', () => {\n  describe('useCarouselPerformanceOptimization', () => {\n    it('should return performance metrics', () => {\n      const { result } = renderHook(() => \n        useCarouselPerformanceOptimization({ enableRealTimeMonitoring: true })\n      )\n\n      expect(result.current.metrics).toBeDefined()\n      expect(result.current.isOptimized).toBe(true)\n    })\n  })\n\n  describe('usePortuguesePWAFeatures', () => {\n    it('should return PWA capabilities', () => {\n      const { result } = renderHook(() => usePortuguesePWAFeatures())\n\n      expect(result.current.installationState).toBeDefined()\n      expect(result.current.offlineCapabilities).toBeDefined()\n      expect(result.current.isFullyOfflineCapable).toBe(true)\n    })\n  })\n})"],"names":["jest","mock","mockPerformanceOptimization","useCarouselPerformanceOptimization","mockPWAFeatures","usePortuguesePWAFeatures","mockPerformance","now","fn","Date","getEntriesByType","memory","usedJSHeapSize","totalJSHeapSize","mockNavigator","onLine","connection","effectiveType","mockCarouselItems","id","title","en","pt","description","image","category","TestWrapper","children","language","LanguageProvider","describe","beforeEach","clearAllMocks","global","performance","navigator","IntersectionObserver","mockImplementation","observe","disconnect","unobserve","requestAnimationFrame","cb","setTimeout","cancelAnimationFrame","mockReturnValue","metrics","loadTime","renderTime","interactionLatency","memoryUsage","networkStatus","frameRate","bundleSize","cacheHitRatio","mobileSettings","enableImageLazyLoading","enableIntersectionObserver","enableVirtualScrolling","enablePreloadOptimization","enableBundleSplitting","enableCriticalPathOptimization","enablePortugueseContentPrioritization","portugueseReadingPatterns","averageReadingTime","scrollVelocity","interactionFrequency","contentEngagement","preferredAutoAdvanceSpeed","optimizePortugueseImages","mockResolvedValue","analyzePortugueseReadingPatterns","measureInteractionLatency","recordInteractionComplete","getOptimalAutoAdvanceTime","getOptimizationRecommendations","isOptimized","installationState","canInstall","isInstalled","installPromptEvent","hasShownPrompt","installationSource","offlineCapabilities","isOffline","hasOfflineContent","cachedPagesCount","offlineEventsCount","offlineBusinessesCount","lastSyncTime","pendingActions","notificationSettings","enabled","culturalEvents","businessUpdates","communityMessages","festivalReminders","fadoNights","portugalDay","brazilianEvents","capeVerdeanEvents","quietHoursStart","quietHoursEnd","backgroundSyncData","featuredBusinesses","communityUpdates","userPreferences","lastSyncTimestamp","getPortugueseInstallMessage","subtitle","install","later","benefits","handleInstallPrompt","requestPortugueseNotifications","enableOfflineMode","syncPortugueseContent","queueOfflineAction","processOfflineActions","setNotificationSettings","isFullyOfflineCapable","it","render","OptimizedPortugueseCarousel","items","renderItem","item","div","data-testid","enablePerformanceOptimization","waitFor","expect","toHaveBeenCalledWith","enableRealTimeMonitoring","enablePortugueseOptimizations","optimizationLevel","showControls","nextButton","screen","getByLabelText","act","fireEvent","click","toHaveBeenCalled","enablePortugueseCulturalOptimization","any","Number","dwellTime","engagementScore","originalEnv","process","env","NODE_ENV","getByText","toBeInTheDocument","handleItemClick","onItemClick","firstItem","getByTestId","type","data","itemId","index","autoAdvance","toBeDefined","Object","defineProperty","window","writable","configurable","value","swipeHints","document","querySelectorAll","length","toBeGreaterThan","loading","querySelector","getByRole","name","result","renderHook","current","toBe"],"mappings":"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"}