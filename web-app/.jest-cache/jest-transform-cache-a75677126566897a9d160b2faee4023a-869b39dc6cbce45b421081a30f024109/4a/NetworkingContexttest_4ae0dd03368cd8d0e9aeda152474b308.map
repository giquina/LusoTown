{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/contexts/NetworkingContext.test.tsx"],"sourcesContent":["import React from 'react'\nimport { renderHook, act } from '@testing-library/react'\nimport { NetworkingProvider, useNetworking } from '@/context/NetworkingContext'\nimport { portugueseTestUtils } from '../utils/test-utils'\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n  clear: jest.fn(),\n  length: 0,\n  key: jest.fn()\n} as Storage\nglobal.localStorage = localStorageMock\n\ndescribe('NetworkingContext', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    localStorageMock.getItem.mockReturnValue(null)\n  })\n\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\n    <NetworkingProvider>{children}</NetworkingProvider>\n  )\n\n  describe('Initialization', () => {\n    it('should initialize with empty state when no saved data', () => {\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      expect(result.current.connections).toEqual([])\n      expect(result.current.stats.totalConnections).toBe(0)\n      expect(result.current.loading).toBe(false)\n    })\n\n    it('should load saved connections from localStorage', () => {\n      const mockConnections = portugueseTestUtils.mockPortugueseConnections\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return JSON.stringify(mockConnections)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      expect(result.current.connections).toHaveLength(1)\n      expect(result.current.connections[0].connectedUser.firstName).toBe('Maria')\n    })\n  })\n\n  describe('Connection Management', () => {\n    it('should sort connections by recent activity', () => {\n      const mockConnections = [\n        {\n          ...portugueseTestUtils.mockPortugueseConnections[0],\n          lastInteractionAt: '2024-01-10T10:00:00Z'\n        },\n        {\n          ...portugueseTestUtils.mockPortugueseConnections[0],\n          id: 'conn-2',\n          connectedUserId: 'user-carlos',\n          connectedUser: {\n            ...portugueseTestUtils.mockPortugueseConnections[0].connectedUser,\n            id: 'user-carlos',\n            firstName: 'Carlos'\n          },\n          lastInteractionAt: '2024-01-20T10:00:00Z'\n        }\n      ]\n\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return JSON.stringify(mockConnections)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      const sortedConnections = result.current.getConnections('recent')\n      expect(sortedConnections[0].connectedUser.firstName).toBe('Carlos')\n      expect(sortedConnections[1].connectedUser.firstName).toBe('Maria')\n    })\n\n    it('should filter connections by search query', () => {\n      const mockConnections = portugueseTestUtils.mockPortugueseConnections\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return JSON.stringify(mockConnections)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      const filteredConnections = result.current.searchConnections('Maria')\n      expect(filteredConnections).toHaveLength(1)\n      expect(filteredConnections[0].connectedUser.firstName).toBe('Maria')\n    })\n\n    it('should filter connections by location', () => {\n      const mockConnections = portugueseTestUtils.mockPortugueseConnections\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return JSON.stringify(mockConnections)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      const filteredConnections = result.current.filterConnections({\n        location: 'Camberwell'\n      })\n      expect(filteredConnections).toHaveLength(1)\n      expect(filteredConnections[0].connectedUser.location).toContain('Camberwell')\n    })\n\n    it('should filter connections by membership tier', () => {\n      const mockConnections = portugueseTestUtils.mockPortugueseConnections\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return JSON.stringify(mockConnections)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      const filteredConnections = result.current.filterConnections({\n        membershipTier: 'premium'\n      })\n      expect(filteredConnections).toHaveLength(1)\n      expect(filteredConnections[0].connectedUser.membershipTier).toBe('premium')\n    })\n  })\n\n  describe('Portuguese Cultural Features', () => {\n    it('should provide Portuguese conversation starters', () => {\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      const culturalStarters = result.current.getConversationStarters('cultural')\n      expect(culturalStarters.length).toBeGreaterThan(0)\n      \n      const fadoStarter = culturalStarters.find(starter => \n        starter.text_pt.includes('Fado')\n      )\n      expect(fadoStarter).toBeDefined()\n      expect(fadoStarter?.text_en).toContain('Fado')\n    })\n\n    it('should include Portuguese cultural context in conversation starters', () => {\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      const allStarters = result.current.getConversationStarters()\n      const portugueseTerms = ['Fado', 'Santos Populares', 'tradição portuguesa']\n      \n      const hasPortugueseContent = allStarters.some(starter =>\n        portugueseTerms.some(term => \n          starter.text_pt.includes(term) || starter.context?.includes(term)\n        )\n      )\n      \n      expect(hasPortugueseContent).toBe(true)\n    })\n  })\n\n  describe('Notifications', () => {\n    it('should track unread notifications count', () => {\n      const mockNotifications = [\n        {\n          id: 'notif-1',\n          type: 'new_connection' as const,\n          title: 'New Connection!',\n          message: 'You connected with Maria',\n          isRead: false,\n          createdAt: '2024-01-08T19:45:00Z'\n        },\n        {\n          id: 'notif-2',\n          type: 'milestone' as const,\n          title: 'Achievement Unlocked!',\n          message: 'Cultural Enthusiast badge earned',\n          isRead: true,\n          createdAt: '2024-01-20T18:00:00Z'\n        }\n      ]\n\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-network-notifications') {\n          return JSON.stringify(mockNotifications)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      expect(result.current.getUnreadNotificationsCount()).toBe(1)\n    })\n\n    it('should mark notifications as read', () => {\n      const mockNotifications = [\n        {\n          id: 'notif-1',\n          type: 'new_connection' as const,\n          title: 'New Connection!',\n          message: 'You connected with Maria',\n          isRead: false,\n          createdAt: '2024-01-08T19:45:00Z'\n        }\n      ]\n\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-network-notifications') {\n          return JSON.stringify(mockNotifications)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      act(() => {\n        result.current.markNotificationAsRead('notif-1')\n      })\n\n      expect(localStorageMock.setItem).toHaveBeenCalledWith(\n        'lusotown-network-notifications',\n        expect.stringContaining('\"isRead\":true')\n      )\n    })\n  })\n\n  describe('Network Analytics', () => {\n    it('should calculate network analytics correctly', () => {\n      const mockConnections = [\n        {\n          ...portugueseTestUtils.mockPortugueseConnections[0],\n          connectionStrength: 8.5,\n          firstMetEvent: {\n            id: 'event-fado',\n            title: 'Fado Night',\n            date: '2024-01-15'\n          }\n        },\n        {\n          ...portugueseTestUtils.mockPortugueseConnections[0],\n          id: 'conn-2',\n          connectionStrength: 6.2,\n          firstMetEvent: {\n            id: 'event-food',\n            title: 'Food Tour',\n            date: '2024-01-20'\n          }\n        }\n      ]\n\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return JSON.stringify(mockConnections)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      const analytics = result.current.getNetworkAnalytics()\n      \n      expect(analytics.averageConnectionStrength).toBeCloseTo(7.4, 1)\n      expect(analytics.strongConnectionsPercent).toBe(50) // 1 out of 2 connections >= 7\n    })\n  })\n\n  describe('Data Export', () => {\n    it('should export connections as CSV', () => {\n      const mockCreateObjectURL = jest.fn(() => 'mock-url')\n      const mockClick = jest.fn()\n      \n      global.URL.createObjectURL = mockCreateObjectURL\n      global.Blob = jest.fn(() => ({})) as any\n      \n      // Mock createElement and appendChild\n      const mockAnchor = {\n        setAttribute: jest.fn(),\n        click: mockClick,\n      }\n      jest.spyOn(document, 'createElement').mockReturnValue(mockAnchor as any)\n      jest.spyOn(document.body, 'appendChild').mockImplementation(() => mockAnchor as any)\n      jest.spyOn(document.body, 'removeChild').mockImplementation(() => mockAnchor as any)\n\n      const mockConnections = portugueseTestUtils.mockPortugueseConnections\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return JSON.stringify(mockConnections)\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      act(() => {\n        result.current.exportConnections('csv')\n      })\n\n      expect(mockClick).toHaveBeenCalled()\n      expect(mockAnchor.setAttribute).toHaveBeenCalledWith('download', 'lusotown-connections.csv')\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle localStorage errors gracefully', () => {\n      localStorageMock.getItem.mockImplementation(() => {\n        throw new Error('LocalStorage error')\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      // Should not crash and should initialize with empty data\n      expect(result.current.connections).toEqual([])\n      expect(result.current.loading).toBe(false)\n    })\n\n    it('should handle malformed JSON in localStorage', () => {\n      localStorageMock.getItem.mockImplementation((key) => {\n        if (key === 'lusotown-connections') {\n          return 'invalid-json'\n        }\n        return null\n      })\n\n      const { result } = renderHook(() => useNetworking(), { wrapper })\n      \n      // Should not crash and should initialize with empty data\n      expect(result.current.connections).toEqual([])\n    })\n  })\n})\n"],"names":["localStorageMock","getItem","jest","fn","setItem","removeItem","clear","length","key","global","localStorage","describe","beforeEach","clearAllMocks","mockReturnValue","wrapper","children","NetworkingProvider","it","result","renderHook","useNetworking","expect","current","connections","toEqual","stats","totalConnections","toBe","loading","mockConnections","portugueseTestUtils","mockPortugueseConnections","mockImplementation","JSON","stringify","toHaveLength","connectedUser","firstName","lastInteractionAt","id","connectedUserId","sortedConnections","getConnections","filteredConnections","searchConnections","filterConnections","location","toContain","membershipTier","culturalStarters","getConversationStarters","toBeGreaterThan","fadoStarter","find","starter","text_pt","includes","toBeDefined","text_en","allStarters","portugueseTerms","hasPortugueseContent","some","term","context","mockNotifications","type","title","message","isRead","createdAt","getUnreadNotificationsCount","act","markNotificationAsRead","toHaveBeenCalledWith","stringContaining","connectionStrength","firstMetEvent","date","analytics","getNetworkAnalytics","averageConnectionStrength","toBeCloseTo","strongConnectionsPercent","mockCreateObjectURL","mockClick","URL","createObjectURL","Blob","mockAnchor","setAttribute","click","spyOn","document","body","exportConnections","toHaveBeenCalled","Error"],"mappings":"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"}