{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/utils/test-utils.tsx"],"sourcesContent":["import React, { ReactElement } from 'react'\nimport { render, RenderOptions } from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport { LanguageProvider } from '@/context/LanguageContext'\nimport { NetworkingProvider } from '@/context/NetworkingContext'\nimport { SubscriptionProvider } from '@/context/SubscriptionContext'\nimport { CartProvider } from '@/context/CartContext'\nimport { FavoritesProvider } from '@/context/FavoritesContext'\nimport { HeritageProvider } from '@/context/HeritageContext'\n\ninterface AllTheProvidersProps {\n  children: React.ReactNode\n  initialLanguage?: 'en' | 'pt'\n  mockUser?: any\n}\n\n// Custom render function that includes all LusoTown providers\nconst AllTheProviders: React.FC<AllTheProvidersProps> = ({ \n  children, \n  initialLanguage = 'en',\n  mockUser \n}) => {\n  // Mock localStorage for initial language\n  if (initialLanguage) {\n    global.localStorage.getItem = jest.fn((key) => {\n      if (key === 'lusotown-language') return initialLanguage\n      if (key === 'lusotown-user' && mockUser) return JSON.stringify(mockUser)\n      return null\n    })\n  }\n\n  return (\n    <LanguageProvider>\n      <HeritageProvider>\n        <CartProvider>\n          <FavoritesProvider>\n            <SubscriptionProvider>\n              <NetworkingProvider>\n                {children}\n              </NetworkingProvider>\n            </SubscriptionProvider>\n          </FavoritesProvider>\n        </CartProvider>\n      </HeritageProvider>\n    </LanguageProvider>\n  )\n}\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'> & {\n    initialLanguage?: 'en' | 'pt'\n    mockUser?: any\n  }\n) => {\n  const { initialLanguage, mockUser, ...renderOptions } = options || {}\n  \n  return render(ui, {\n    wrapper: (props) => (\n      <AllTheProviders \n        {...props} \n        initialLanguage={initialLanguage}\n        mockUser={mockUser}\n      />\n    ),\n    ...renderOptions,\n  })\n}\n\n// Portuguese-specific test utilities\nexport const portugueseTestUtils = {\n  // Mock Portuguese user\n  mockPortugueseUser: (global as any).testUtils?.mockPortugueseUser,\n  \n  // Mock English user living in London\n  mockEnglishUser: (global as any).testUtils?.mockEnglishUser,\n  \n  // Mock Portuguese event\n  mockPortugueseEvent: (global as any).testUtils?.mockPortugueseEvent,\n  \n  // Verify Portuguese text content\n  expectPortugueseText: (element: HTMLElement, expectedText: string) => {\n    expect(element).toHaveTextContent(expectedText)\n  },\n  \n  // Verify bilingual content\n  expectBilingualContent: (container: HTMLElement, textEn: string, textPt: string) => {\n    const hasEnglish = container.textContent?.includes(textEn)\n    const hasPortuguese = container.textContent?.includes(textPt)\n    expect(hasEnglish || hasPortuguese).toBe(true)\n  },\n  \n  // Mock networking connections for Portuguese-speaking community\n  mockPortugueseConnections: [\n    {\n      id: 'conn-1',\n      userId: 'current-user',\n      connectedUserId: 'user-maria',\n      connectedUser: {\n        id: 'user-maria',\n        firstName: 'Maria',\n        lastName: 'Santos',\n        profilePictureUrl: 'https://example.com/maria.jpg',\n        location: 'Camberwell, London',\n        membershipTier: 'premium' as const,\n        isVerified: true\n      },\n      connectionSource: 'event_based' as const,\n      sharedEventsCount: 3,\n      connectionStrength: 8.5,\n      lastInteractionAt: '2024-01-20T18:00:00Z',\n      isActive: true,\n      privacyLevel: 'normal' as const,\n      createdAt: '2024-01-15T20:30:00Z'\n    }\n  ],\n  \n  // Mock subscription data\n  mockPremiumSubscription: {\n    id: 'sub-1',\n    user_id: 'test-user',\n    status: 'active' as const,\n    plan_type: 'yearly' as const,\n    tier: 'platinum' as const,\n    current_period_end: '2025-01-01T00:00:00Z',\n    amount: 25,\n    currency: 'GBP',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z'\n  },\n  \n  // Mock cultural events\n  mockCulturalEvents: [\n    {\n      id: 'event-fado',\n      title: 'Noite de Fado',\n      title_en: 'Fado Night',\n      description: 'Uma noite especial de música tradicional portuguesa',\n      description_en: 'A special night of traditional Portuguese music',\n      date: '2024-02-15T20:00:00Z',\n      location: 'Portuguese Cultural Centre, London',\n      price: 25,\n      currency: 'GBP',\n      category: 'cultural',\n      image_url: 'https://example.com/fado.jpg'\n    },\n    {\n      id: 'event-food-tour',\n      title: 'Tour Gastronómico Português',\n      title_en: 'Portuguese Food Tour',\n      description: 'Explore os sabores de Portugal em Londres',\n      description_en: 'Explore the flavors of Portugal in London',\n      date: '2024-02-20T14:00:00Z',\n      location: 'Little Portugal, London',\n      price: 35,\n      currency: 'GBP',\n      category: 'food',\n      image_url: 'https://example.com/food-tour.jpg'\n    }\n  ]\n}\n\n// Mobile testing utilities\nexport const mobileTestUtils = {\n  // Set viewport to mobile size\n  setMobileViewport: () => {\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 375,\n    })\n    Object.defineProperty(window, 'innerHeight', {\n      writable: true,\n      configurable: true,\n      value: 667,\n    })\n    window.dispatchEvent(new Event('resize'))\n  },\n  \n  // Set viewport to tablet size\n  setTabletViewport: () => {\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 768,\n    })\n    Object.defineProperty(window, 'innerHeight', {\n      writable: true,\n      configurable: true,\n      value: 1024,\n    })\n    window.dispatchEvent(new Event('resize'))\n  },\n  \n  // Set viewport to desktop size\n  setDesktopViewport: () => {\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 1024,\n    })\n    Object.defineProperty(window, 'innerHeight', {\n      writable: true,\n      configurable: true,\n      value: 768,\n    })\n    window.dispatchEvent(new Event('resize'))\n  },\n  \n  // Mock touch events\n  mockTouchStart: (element: HTMLElement, x: number = 0, y: number = 0) => {\n    const touch = {\n      clientX: x,\n      clientY: y,\n      identifier: 0,\n      pageX: x,\n      pageY: y,\n      screenX: x,\n      screenY: y,\n      target: element,\n      force: 1,\n      radiusX: 1,\n      radiusY: 1,\n      rotationAngle: 0\n    } as unknown as Touch\n\n    const event = new TouchEvent('touchstart', {\n      touches: [touch]\n    })\n    element.dispatchEvent(event)\n  }\n}\n\n// Performance testing utilities\nexport const performanceTestUtils = {\n  // Mock performance API\n  mockPerformanceNow: () => {\n    const startTime = Date.now()\n    jest.spyOn(performance, 'now').mockImplementation(() => Date.now() - startTime)\n  },\n  \n  // Measure component render time\n  measureRenderTime: async (renderFn: () => void) => {\n    const start = performance.now()\n    await renderFn()\n    const end = performance.now()\n    return end - start\n  },\n  \n  // Mock slow network conditions\n  mockSlowNetwork: () => {\n    jest.spyOn(window, 'fetch').mockImplementation(\n      () => new Promise(resolve => setTimeout(() => resolve(new Response()), 2000))\n    )\n  }\n}\n\n// Security testing utilities\nexport const securityTestUtils = {\n  // Test for XSS vulnerabilities\n  createXSSPayload: (elementType: string = 'script') => {\n    return `<${elementType}>alert('XSS')</${elementType}>`\n  },\n  \n  // Test for SQL injection patterns\n  createSQLInjectionPayload: () => {\n    return \"'; DROP TABLE users; --\"\n  },\n  \n  // Verify content sanitization\n  expectSanitizedContent: (element: HTMLElement, dangerousContent: string) => {\n    expect(element.innerHTML).not.toContain('<script')\n    expect(element.innerHTML).not.toContain('javascript:')\n    expect(element.innerHTML).not.toContain('DROP TABLE')\n  }\n}\n\n// Cultural sensitivity testing utilities\nexport const culturalTestUtils = {\n  // Portuguese cultural terms that should be preserved\n  portugueseCulturalTerms: [\n    'Fado',\n    'Saudade',\n    'Bacalhau',\n    'Pastéis de Nata',\n    'Santos Populares',\n    'Lusófono',\n    'Saldo',\n    'Obrigado',\n    'Obrigada'\n  ],\n  \n  // Verify cultural term preservation\n  expectCulturalTermPreservation: (element: HTMLElement, terms: string[]) => {\n    terms.forEach(term => {\n      if (element.textContent?.includes(term)) {\n        // Ensure the term is not translated or altered\n        expect(element.textContent).toContain(term)\n      }\n    })\n  },\n  \n  // United Kingdom-specific location terms\n  ukLocationTerms: [\n    'London',\n    'Greater London',\n    'Camden',\n    'Vauxhall',\n    'Kennington',\n    'United Kingdom',\n    'United Kingdom'\n  ],\n  \n  // Verify United Kingdom focus in content\n  expectUKLocationFocus: (element: HTMLElement) => {\n    const hasUKReference = culturalTestUtils.ukLocationTerms.some(term => \n      element.textContent?.includes(term)\n    )\n    expect(hasUKReference).toBe(true)\n  }\n}\n\n// Re-export everything from testing-library\nexport * from '@testing-library/react'\n// Custom render for LusoTown components\nexport { customRender as render }\n\n// Additional missing exports for test compatibility\nexport { screen, fireEvent, waitFor } from '@testing-library/react'\n"],"names":["culturalTestUtils","fireEvent","mobileTestUtils","performanceTestUtils","portugueseTestUtils","render","customRender","screen","securityTestUtils","waitFor","AllTheProviders","children","initialLanguage","mockUser","global","localStorage","getItem","jest","fn","key","JSON","stringify","LanguageProvider","HeritageProvider","CartProvider","FavoritesProvider","SubscriptionProvider","NetworkingProvider","ui","options","renderOptions","wrapper","props","mockPortugueseUser","testUtils","mockEnglishUser","mockPortugueseEvent","expectPortugueseText","element","expectedText","expect","toHaveTextContent","expectBilingualContent","container","textEn","textPt","hasEnglish","textContent","includes","hasPortuguese","toBe","mockPortugueseConnections","id","userId","connectedUserId","connectedUser","firstName","lastName","profilePictureUrl","location","membershipTier","isVerified","connectionSource","sharedEventsCount","connectionStrength","lastInteractionAt","isActive","privacyLevel","createdAt","mockPremiumSubscription","user_id","status","plan_type","tier","current_period_end","amount","currency","created_at","updated_at","mockCulturalEvents","title","title_en","description","description_en","date","price","category","image_url","setMobileViewport","Object","defineProperty","window","writable","configurable","value","dispatchEvent","Event","setTabletViewport","setDesktopViewport","mockTouchStart","x","y","touch","clientX","clientY","identifier","pageX","pageY","screenX","screenY","target","force","radiusX","radiusY","rotationAngle","event","TouchEvent","touches","mockPerformanceNow","startTime","Date","now","spyOn","performance","mockImplementation","measureRenderTime","renderFn","start","end","mockSlowNetwork","Promise","resolve","setTimeout","Response","createXSSPayload","elementType","createSQLInjectionPayload","expectSanitizedContent","dangerousContent","innerHTML","not","toContain","portugueseCulturalTerms","expectCulturalTermPreservation","terms","forEach","term","ukLocationTerms","expectUKLocationFocus","hasUKReference","some"],"mappings":"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"}