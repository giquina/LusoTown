d360839c645a2ae35677cccd5de1ade3
"use strict";
// Mock next/router
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                back: jest.fn()
            }),
        useParams: ()=>({
                id: "4"
            }),
        usePathname: ()=>"/events"
    }));
// Mock auth service
jest.mock("@/lib/auth", ()=>({
        authService: {
            getCurrentUser: jest.fn(()=>({
                    id: "test-user",
                    email: "test@example.com",
                    name: "Test User",
                    membershipTier: "free"
                }))
        },
        getCurrentUser: jest.fn(()=>({
                id: "test-user",
                email: "test@example.com",
                name: "Test User",
                membershipTier: "free"
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactrouterdom = require("react-router-dom");
const _page = /*#__PURE__*/ _interop_require_default(require("../../src/app/events/page"));
const _page1 = /*#__PURE__*/ _interop_require_default(require("../../src/app/events/[id]/page"));
const _page2 = /*#__PURE__*/ _interop_require_default(require("../../src/app/events/[id]/book/page"));
const _LanguageContext = require("../../src/context/LanguageContext");
const _CartContext = require("../../src/context/CartContext");
const _NetworkingContext = require("../../src/context/NetworkingContext");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const TestWrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactrouterdom.BrowserRouter, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CartContext.CartProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NetworkingContext.NetworkingProvider, {
                    children: children
                })
            })
        })
    });
describe("Events Booking System Integration", ()=>{
    describe("Events Page", ()=>{
        it("renders events list with proper accessibility", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
            // Check main search input has proper label
            const searchInput = _react.screen.getByLabelText(/search events/i);
            expect(searchInput).toBeInTheDocument();
            expect(searchInput).toHaveAttribute("id", "event-search");
            // Check sort dropdown has proper label
            const sortSelect = _react.screen.getByLabelText(/sort events/i);
            expect(sortSelect).toBeInTheDocument();
            expect(sortSelect).toHaveAttribute("id", "sort-events");
            // Wait for events to load
            await (0, _react.waitFor)(()=>{
                const eventCards = _react.screen.getAllByRole("button", {
                    name: /view more details about/i
                });
                expect(eventCards.length).toBeGreaterThan(0);
            }, {
                timeout: 5000
            });
        });
        it("allows filtering events by category", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
            // Wait for events to load
            await (0, _react.waitFor)(()=>{
                const eventCards = _react.screen.getAllByRole("button", {
                    name: /view more details about/i
                });
                expect(eventCards.length).toBeGreaterThan(0);
            });
            // Check filter functionality
            const techFilter = _react.screen.getByText(/tech\/innovation/i);
            expect(techFilter).toBeInTheDocument();
            _react.fireEvent.click(techFilter);
            // Should filter events by technology category
            await (0, _react.waitFor)(()=>{
                expect(techFilter.closest("button")).toHaveClass("scale-105");
            });
        });
        it("has accessible event cards with proper ARIA labels", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
            await (0, _react.waitFor)(()=>{
                const eventCards = _react.screen.getAllByRole("button", {
                    name: /view more details about/i
                });
                expect(eventCards.length).toBeGreaterThan(0);
                // Check each event card has proper accessibility
                eventCards.forEach((card)=>{
                    expect(card).toHaveAttribute("aria-label");
                    expect(card).toHaveAttribute("tabIndex", "0");
                });
            });
        });
    });
    describe("Event Details Page", ()=>{
        it("renders event details with booking button", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page1.default, {})
            }));
            // Wait for event to load
            await (0, _react.waitFor)(()=>{
                const eventTitle = _react.screen.getByRole("heading", {
                    level: 1
                });
                expect(eventTitle).toBeInTheDocument();
            });
            // Check RSVP button exists and is accessible
            const rsvpButton = _react.screen.getByRole("button", {
                name: /rsvp to/i
            });
            expect(rsvpButton).toBeInTheDocument();
            expect(rsvpButton).toHaveClass("focus:ring-2");
        });
        it("opens RSVP modal with accessible form fields", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page1.default, {})
            }));
            await (0, _react.waitFor)(()=>{
                const rsvpButton = _react.screen.getByRole("button", {
                    name: /rsvp to/i
                });
                _react.fireEvent.click(rsvpButton);
            });
            // Check modal opened
            await (0, _react.waitFor)(()=>{
                const modal = _react.screen.getByRole("dialog", {
                    hidden: true
                });
                expect(modal).toBeInTheDocument();
            });
            // Check form fields have proper labels
            const notesField = _react.screen.getByLabelText(/notes \(optional\)/i);
            expect(notesField).toBeInTheDocument();
            expect(notesField).toHaveAttribute("id", "rsvp-notes");
            const dietaryField = _react.screen.getByLabelText(/dietary requirements/i);
            expect(dietaryField).toBeInTheDocument();
            expect(dietaryField).toHaveAttribute("id", "dietary-requirements");
        });
    });
    describe("Event Booking Page", ()=>{
        it("renders multi-step booking form with accessibility", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page2.default, {})
            }));
            // Check form step 1 fields have proper labels
            await (0, _react.waitFor)(()=>{
                const firstNameField = _react.screen.getByLabelText(/first name/i);
                expect(firstNameField).toBeInTheDocument();
                expect(firstNameField).toHaveAttribute("id", "firstName");
                expect(firstNameField).toHaveAttribute("required");
                const lastNameField = _react.screen.getByLabelText(/last name/i);
                expect(lastNameField).toBeInTheDocument();
                expect(lastNameField).toHaveAttribute("id", "lastName");
                const emailField = _react.screen.getByLabelText(/email address/i);
                expect(emailField).toBeInTheDocument();
                expect(emailField).toHaveAttribute("id", "email");
                expect(emailField).toHaveAttribute("autoComplete", "email");
            });
        });
        it("progresses through booking steps correctly", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page2.default, {})
            }));
            // Fill out step 1
            const firstNameField = _react.screen.getByLabelText(/first name/i);
            const lastNameField = _react.screen.getByLabelText(/last name/i);
            const emailField = _react.screen.getByLabelText(/email address/i);
            _react.fireEvent.change(firstNameField, {
                target: {
                    value: "Jo\xe3o"
                }
            });
            _react.fireEvent.change(lastNameField, {
                target: {
                    value: "Silva"
                }
            });
            _react.fireEvent.change(emailField, {
                target: {
                    value: "joao@example.com"
                }
            });
            const continueButton = _react.screen.getByText(/continue/i);
            _react.fireEvent.click(continueButton);
            // Should progress to step 2
            await (0, _react.waitFor)(()=>{
                const step2Title = _react.screen.getByText(/workshop details/i);
                expect(step2Title).toBeInTheDocument();
            });
            // Continue to step 3
            const continueButton2 = _react.screen.getByText(/continue/i);
            _react.fireEvent.click(continueButton2);
            await (0, _react.waitFor)(()=>{
                const step3Title = _react.screen.getByText(/payment & confirmation/i);
                expect(step3Title).toBeInTheDocument();
            });
            // Check terms checkbox
            const termsCheckbox = _react.screen.getByRole("checkbox", {
                name: /i agree to the terms/i
            });
            expect(termsCheckbox).toBeInTheDocument();
            expect(termsCheckbox).toHaveAttribute("required");
        });
        it("validates required fields and shows errors", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page2.default, {})
            }));
            // Try to continue without filling required fields
            const continueButton = _react.screen.getByText(/continue/i);
            expect(continueButton).toBeDisabled();
            // Fill one field
            const firstNameField = _react.screen.getByLabelText(/first name/i);
            _react.fireEvent.change(firstNameField, {
                target: {
                    value: "Jo\xe3o"
                }
            });
            // Button should still be disabled
            expect(continueButton).toBeDisabled();
            // Fill all required fields
            const lastNameField = _react.screen.getByLabelText(/last name/i);
            const emailField = _react.screen.getByLabelText(/email address/i);
            _react.fireEvent.change(lastNameField, {
                target: {
                    value: "Silva"
                }
            });
            _react.fireEvent.change(emailField, {
                target: {
                    value: "joao@example.com"
                }
            });
            // Button should now be enabled
            expect(continueButton).toBeEnabled();
        });
        it("supports keyboard navigation", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page2.default, {})
            }));
            const firstNameField = _react.screen.getByLabelText(/first name/i);
            const lastNameField = _react.screen.getByLabelText(/last name/i);
            const emailField = _react.screen.getByLabelText(/email address/i);
            // Tab navigation should work
            firstNameField.focus();
            expect(document.activeElement).toBe(firstNameField);
            _react.fireEvent.keyDown(firstNameField, {
                key: "Tab"
            });
            // Note: Actual tab navigation would require a more sophisticated test setup
            // This tests that the fields are properly focusable
            expect(lastNameField).toHaveAttribute("tabIndex", undefined);
        });
    });
    describe("Portuguese Cultural Events", ()=>{
        it("displays Portuguese cultural elements correctly", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
            // Look for Portuguese flag and cultural indicators
            await (0, _react.waitFor)(()=>{
                const portugueseFlag = _react.screen.getByText("\uD83C\uDDF5\uD83C\uDDF9");
                expect(portugueseFlag).toBeInTheDocument();
            });
            // Check for Portuguese language toggle or content
            const culturalElements = _react.screen.getAllByText(/portuguese/i);
            expect(culturalElements.length).toBeGreaterThan(0);
        });
        it("filters events for Portuguese community", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
            // Look for cultural filter
            await (0, _react.waitFor)(()=>{
                const culturalFilter = _react.screen.getByText(/🎭 cultural/i);
                expect(culturalFilter).toBeInTheDocument();
            });
            _react.fireEvent.click(_react.screen.getByText(/🎭 cultural/i));
            // Should show Portuguese cultural events
            await (0, _react.waitFor)(()=>{
                const culturalEvents = _react.screen.queryAllByText(/cultural/i);
                expect(culturalEvents.length).toBeGreaterThan(0);
            });
        });
    });
    describe("Mobile Accessibility", ()=>{
        it("has minimum touch target sizes", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
            await (0, _react.waitFor)(()=>{
                // Check buttons meet 44px minimum touch target
                const buttons = _react.screen.getAllByRole("button");
                buttons.forEach((button)=>{
                    const styles = window.getComputedStyle(button);
                    const minHeight = parseInt(styles.minHeight) || parseInt(styles.height);
                    // Note: In jsdom, actual pixel measurements aren't available
                    // In a real browser test, we would check minHeight >= 44
                    expect(button).toBeInTheDocument();
                });
            });
        });
        it("supports screen readers with proper labels", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestWrapper, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {})
            }));
            // Check all interactive elements have accessible names
            await (0, _react.waitFor)(()=>{
                const buttons = _react.screen.getAllByRole("button");
                buttons.forEach((button)=>{
                    const accessibleName = button.getAttribute("aria-label") || button.textContent || button.getAttribute("title");
                    expect(accessibleName).toBeTruthy();
                });
                const inputs = _react.screen.getAllByRole("textbox");
                inputs.forEach((input)=>{
                    const label = _react.screen.getByLabelText(new RegExp(input.getAttribute("placeholder") || "", "i"), {
                        exact: false
                    });
                    expect(label).toBeInTheDocument();
                });
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,