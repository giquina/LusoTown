{"version":3,"sources":["/workspaces/LusoTown/web-app/src/context/NetworkingContext.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useState, ReactNode, useEffect } from 'react'\n\n// Networking types\nexport interface Connection {\n  id: string\n  userId: string\n  connectedUserId: string\n  connectedUser: {\n    id: string\n    firstName: string\n    lastName?: string\n    profilePictureUrl?: string\n    location?: string\n    membershipTier: 'free' | 'core' | 'premium'\n    isVerified?: boolean\n  }\n  connectionSource: 'event_based' | 'mutual_friends' | 'manual'\n  sharedEventsCount: number\n  firstMetEventId?: string\n  firstMetEvent?: {\n    id: string\n    title: string\n    date: string\n  }\n  connectionStrength: number\n  lastInteractionAt: string\n  isActive: boolean\n  privacyLevel: 'public' | 'normal' | 'private'\n  createdAt: string\n}\n\nexport interface NetworkStats {\n  totalConnections: number\n  eventsAttended: number\n  newConnectionsThisMonth: number\n  connectionStrength: number\n  achievements: NetworkAchievement[]\n}\n\nexport interface NetworkAchievement {\n  id: string\n  type: 'connector' | 'regular_attendee' | 'event_starter' | 'culture_preserver' | 'community_builder'\n  name: string\n  description: string\n  icon: string\n  earnedAt: string\n  isActive: boolean\n}\n\nexport interface ConnectionNotification {\n  id: string\n  type: 'new_connection' | 'milestone' | 'upcoming_event_with_connections' | 'connection_activity'\n  title: string\n  message: string\n  data?: any\n  isRead: boolean\n  createdAt: string\n  expiresAt?: string\n}\n\nexport interface ConversationStarter {\n  id: string\n  category: 'cultural' | 'events' | 'professional' | 'personal'\n  text_en: string\n  text_pt: string\n  context?: string\n}\n\nexport interface ConnectionFilters {\n  membershipTier?: 'free' | 'core' | 'premium' | 'business' | 'student'\n  location?: string\n  minSharedEvents?: number\n  connectionStrength?: 'weak' | 'medium' | 'strong'\n  isVerified?: boolean\n  lastInteractionDays?: number\n  // Premium filtering options\n  ageRange?: [number, number]\n  interests?: string[]\n  professionalBackground?: string[]\n  languagePreference?: 'portuguese' | 'english' | 'both'\n  culturalBackground?: 'portugal' | 'brazil' | 'other_lusophone' | 'any'\n  relationshipGoal?: 'friendship' | 'professional' | 'cultural_exchange' | 'any'\n  familyStatus?: 'single' | 'family' | 'any'\n}\n\nexport interface PremiumMatch {\n  id: string\n  userId: string\n  matchedUserId: string\n  matchedUser: {\n    id: string\n    firstName: string\n    lastName?: string\n    profilePictureUrl?: string\n    location?: string\n    membershipTier: 'free' | 'core' | 'premium' | 'business' | 'student'\n    isVerified?: boolean\n    culturalBackground?: string\n    interests?: string[]\n    professionalBackground?: string\n    bio?: string\n    age?: number\n    languagePreference?: string\n  }\n  compatibilityScore: number\n  sharedInterests: string[]\n  culturalCompatibility: number\n  professionalCompatibility: number\n  locationCompatibility: number\n  matchReason: string\n  isLiked: boolean\n  isMatched: boolean\n  createdAt: string\n  expiresAt?: string\n}\n\nexport interface SecureMessage {\n  id: string\n  conversationId: string\n  senderId: string\n  receiverId: string\n  content: string\n  messageType: 'text' | 'photo' | 'voice' | 'system'\n  isRead: boolean\n  isReported: boolean\n  safetyScore: number\n  createdAt: string\n  editedAt?: string\n}\n\nexport interface Conversation {\n  id: string\n  participantIds: string[]\n  participants: PremiumMatch['matchedUser'][]\n  lastMessage?: SecureMessage\n  unreadCount: number\n  isActive: boolean\n  connectionType: 'mutual_match' | 'event_based' | 'professional'\n  safetyStatus: 'safe' | 'flagged' | 'blocked'\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface NetworkAnalytics {\n  averageConnectionStrength: number\n  topEventForConnections: { eventTitle: string; connectionCount: number }\n  mostActiveMonth: { month: string; newConnections: number }\n  connectionGrowthRate: number\n  strongConnectionsPercent: number\n}\n\ninterface NetworkingContextType {\n  connections: Connection[]\n  stats: NetworkStats\n  notifications: ConnectionNotification[]\n  conversationStarters: ConversationStarter[]\n  loading: boolean\n  \n  // Connection management\n  getConnections: (sortBy?: 'recent' | 'most_events' | 'alphabetical' | 'strongest') => Connection[]\n  searchConnections: (query: string) => Connection[]\n  filterConnections: (filters: ConnectionFilters) => Connection[]\n  getConnectionsByEvent: (eventId: string) => Connection[]\n  exportConnections: (format: 'csv' | 'json') => void\n  \n  // Event attendance\n  checkInToEvent: (eventId: string) => Promise<void>\n  markEventAttended: (eventId: string) => Promise<void>\n  \n  // Notifications\n  markNotificationAsRead: (notificationId: string) => void\n  getUnreadNotificationsCount: () => number\n  \n  // Stats and achievements\n  refreshStats: () => Promise<void>\n  getNetworkAnalytics: () => NetworkAnalytics\n  \n  // Conversation helpers\n  getConversationStarters: (category?: string) => ConversationStarter[]\n}\n\n// Helper function to calculate connection strength based on multiple factors\nfunction calculateConnectionStrength({\n  sharedEventsCount,\n  daysSinceFirstMet,\n  daysSinceLastInteraction,\n  isVerified,\n  membershipTier\n}: {\n  sharedEventsCount: number\n  daysSinceFirstMet: number\n  daysSinceLastInteraction: number\n  isVerified: boolean\n  membershipTier: 'free' | 'core' | 'premium'\n}): number {\n  let strength = 0\n  \n  // Base score from shared events (0-5 points)\n  strength += Math.min(sharedEventsCount * 1.5, 5)\n  \n  // Recency bonus for recent interactions (0-2 points)\n  if (daysSinceLastInteraction <= 7) {\n    strength += 2\n  } else if (daysSinceLastInteraction <= 30) {\n    strength += 1\n  } else if (daysSinceLastInteraction <= 90) {\n    strength += 0.5\n  }\n  \n  // Longevity bonus for long-term connections (0-1.5 points)\n  if (daysSinceFirstMet >= 90) {\n    strength += 1.5\n  } else if (daysSinceFirstMet >= 30) {\n    strength += 1\n  } else if (daysSinceFirstMet >= 7) {\n    strength += 0.5\n  }\n  \n  // Verification bonus (0-1 point)\n  if (isVerified) {\n    strength += 1\n  }\n  \n  // Membership tier bonus (0-0.5 points)\n  if (membershipTier === 'premium') {\n    strength += 0.5\n  } else if (membershipTier === 'core') {\n    strength += 0.25\n  }\n  \n  // Ensure score is between 0-10\n  return Math.min(Math.max(strength, 0), 10)\n}\n\nconst NetworkingContext = createContext<NetworkingContextType | undefined>(undefined)\n\nexport function NetworkingProvider({ children }: { children: ReactNode }) {\n  const [connections, setConnections] = useState<Connection[]>([])\n  const [stats, setStats] = useState<NetworkStats>({\n    totalConnections: 0,\n    eventsAttended: 0,\n    newConnectionsThisMonth: 0,\n    connectionStrength: 0,\n    achievements: []\n  })\n  const [notifications, setNotifications] = useState<ConnectionNotification[]>([])\n  const [loading, setLoading] = useState(true)\n\n  // Mock conversation starters with Lusophone cultural context\n  const conversationStarters: ConversationStarter[] = [\n    {\n      id: 'cultural-1',\n      category: 'cultural',\n      text_en: \"What's your favorite Portuguese tradition to celebrate in London?\",\n      text_pt: \"Qual é a sua tradição portuguesa favorita para celebrar em Londres?\",\n      context: 'Tradições culturais lusófonas'\n    },\n    {\n      id: 'cultural-2',\n      category: 'cultural',\n      text_en: \"Have you been to any good Fado nights recently?\",\n      text_pt: \"Andou por alguma boa noite de Fado ultimamente?\",\n      context: 'Música e cultura portuguesa'\n    },\n    {\n      id: 'cultural-5',\n      category: 'cultural',\n      text_en: \"Which Lusophone pastry do you miss the most from home?\",\n      text_pt: \"Que doce português tem mais saudades de casa?\",\n      context: 'Gastronomia e memórias afetivas'\n    },\n    {\n      id: 'cultural-6',\n      category: 'cultural',\n      text_en: \"How do you celebrate Santos Populares in London?\",\n      text_pt: \"Como celebra os Santos Populares em Londres?\",\n      context: 'Festividades tradicionais portuguesas'\n    },\n    {\n      id: 'cultural-7',\n      category: 'cultural',\n      text_en: \"What Lusophone words do you find yourself using in English conversations?\",\n      text_pt: \"Que palavras portuguesas se apanha a usar nas conversas em inglês?\",\n      context: 'Língua e identidade cultural'\n    },\n    {\n      id: 'events-1',\n      category: 'events',\n      text_en: \"Which LusoTown event would you recommend for first-timers?\",\n      text_pt: \"Que evento do LusoTown recomendarias para principiantes?\",\n      context: 'Event recommendations'\n    },\n    {\n      id: 'events-2',\n      category: 'events',\n      text_en: \"Are you planning to attend any Lusophone cultural festivals this year?\",\n      text_pt: \"Estás a planear assistir a alguns festivais culturais portugueses este ano?\",\n      context: 'Cultural events and festivals'\n    },\n    {\n      id: 'professional-1',\n      category: 'professional',\n      text_en: \"How has being part of the Portuguese-speaking community helped your career in London?\",\n      text_pt: \"Como é que fazer parte da comunidade de falantes de português ajudou a tua carreira em Londres?\",\n      context: 'Professional networking'\n    },\n    {\n      id: 'personal-1',\n      category: 'personal',\n      text_en: \"What do you miss most about Portuguese culture living in the United Kingdom?\",\n      text_pt: \"Do que sente mais saudades da cultura portuguesa vivendo no Reino Unido?\",\n      context: 'Experiências pessoais e saudade'\n    },\n    {\n      id: 'personal-2',\n      category: 'personal',\n      text_en: \"How do you keep your children connected to Portuguese culture?\",\n      text_pt: \"Como mantém os seus filhos ligados à cultura portuguesa?\",\n      context: 'Família e preservação cultural'\n    },\n    {\n      id: 'personal-4',\n      category: 'personal',\n      text_en: \"What Lusophone expression best describes your experience in London?\",\n      text_pt: \"Que expressão portuguesa melhor descreve a sua experiência em Londres?\",\n      context: 'Expressões idiomáticas portuguesas'\n    },\n    {\n      id: 'personal-5',\n      category: 'personal',\n      text_en: \"How has living in London changed your perspective on being Lusophone?\",\n      text_pt: \"Como é que viver em Londres mudou a sua perspetiva de ser português?\",\n      context: 'Identidade cultural na diáspora'\n    },\n    {\n      id: 'cultural-3',\n      category: 'cultural',\n      text_en: \"What's your favorite Lusophone recipe to cook in London?\",\n      text_pt: \"Qual é a tua receita portuguesa favorita para cozinhar em Londres?\",\n      context: 'Food and cooking traditions'\n    },\n    {\n      id: 'professional-2',\n      category: 'professional',\n      text_en: \"Have you found good Portuguese business networking opportunities here?\",\n      text_pt: \"Encontrou boas oportunidades de networking empresarial português aqui?\",\n      context: 'Networking empresarial lusófono'\n    },\n    {\n      id: 'professional-4',\n      category: 'professional',\n      text_en: \"Do you work with Lusophone clients or suppliers from your role in London?\",\n      text_pt: \"Trabalha com clientes ou fornecedores portugueses no seu papel em Londres?\",\n      context: 'Negócios transnacionais lusófonos'\n    },\n    {\n      id: 'professional-5',\n      category: 'professional',\n      text_en: \"How has your Lusophone background influenced your career path?\",\n      text_pt: \"Como é que as suas origens portuguesas influenciaram o seu percurso profissional?\",\n      context: 'Vantagens culturais no trabalho'\n    },\n    {\n      id: 'cultural-4',\n      category: 'cultural',\n      text_en: \"Do you celebrate any Lusophone holidays or festivals in London?\",\n      text_pt: \"Celebras algum feriado ou festival português em Londres?\",\n      context: 'Holiday celebrations'\n    },\n    {\n      id: 'events-3',\n      category: 'events',\n      text_en: \"Which London areas remind you most of Portugal?\",\n      text_pt: \"Que áreas de Londres te lembram mais de Portugal?\",\n      context: 'London areas and Portuguese culture'\n    },\n    {\n      id: 'personal-3',\n      category: 'personal',\n      text_en: \"What's the biggest challenge you've faced living in the United Kingdom?\",\n      text_pt: \"Qual foi o maior desafio que enfrentaste vivendo no Reino Unido?\",\n      context: 'Immigration challenges'\n    },\n    {\n      id: 'professional-3',\n      category: 'professional',\n      text_en: \"Are there Portuguese business communities you'd recommend?\",\n      text_pt: \"Há comunidades empresariais portuguesas que recomendarias?\",\n      context: 'Business communities'\n    }\n  ]\n\n  // Load data from localStorage and initialize mock data\n  useEffect(() => {\n    loadNetworkingData()\n  }, [])\n\n  const loadNetworkingData = async () => {\n    setLoading(true)\n    \n    try {\n      // Load from localStorage first\n      const savedConnections = localStorage.getItem('lusotown-connections')\n      const savedStats = localStorage.getItem('lusotown-network-stats')\n      const savedNotifications = localStorage.getItem('lusotown-network-notifications')\n      \n      if (savedConnections) {\n        setConnections(JSON.parse(savedConnections))\n      } else {\n        // Initialize with mock data\n        initializeMockConnections()\n      }\n      \n      if (savedStats) {\n        setStats(JSON.parse(savedStats))\n      } else {\n        initializeMockStats()\n      }\n      \n      if (savedNotifications) {\n        setNotifications(JSON.parse(savedNotifications))\n      } else {\n        initializeMockNotifications()\n      }\n    } catch (error) {\n      console.error('Error loading networking data:', error)\n      initializeMockConnections()\n      initializeMockStats()\n      initializeMockNotifications()\n    }\n    \n    setLoading(false)\n  }\n\n  const initializeMockConnections = () => {\n    const mockConnections: Connection[] = [\n      {\n        id: 'conn-1',\n        userId: 'current-user',\n        connectedUserId: 'user-maria',\n        connectedUser: {\n          id: 'user-maria',\n          firstName: 'Maria',\n          lastName: 'Santos',\n          profilePictureUrl: 'https://images.unsplash.com/photo-1494790108755-2616b612b1ac?w=150&h=150&fit=crop&crop=face&auto=format',\n          location: 'Camberwell, London',\n          membershipTier: 'premium',\n          isVerified: true\n        },\n        connectionSource: 'event_based',\n        sharedEventsCount: 3,\n        firstMetEventId: 'event-fado-night',\n        firstMetEvent: {\n          id: 'event-fado-night',\n          title: 'Fado Night at Lusophone Cultural Centre',\n          date: '2024-01-15'\n        },\n        connectionStrength: calculateConnectionStrength({\n          sharedEventsCount: 3,\n          daysSinceFirstMet: Math.floor((new Date().getTime() - new Date('2024-01-15').getTime()) / (1000 * 60 * 60 * 24)),\n          daysSinceLastInteraction: Math.floor((new Date().getTime() - new Date('2024-01-20T18:00:00Z').getTime()) / (1000 * 60 * 60 * 24)),\n          isVerified: true,\n          membershipTier: 'premium'\n        }),\n        lastInteractionAt: '2024-01-20T18:00:00Z',\n        isActive: true,\n        privacyLevel: 'normal',\n        createdAt: '2024-01-15T20:30:00Z'\n      },\n      {\n        id: 'conn-2',\n        userId: 'current-user',\n        connectedUserId: 'user-carlos',\n        connectedUser: {\n          id: 'user-carlos',\n          firstName: 'Carlos',\n          lastName: 'Oliveira',\n          profilePictureUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face&auto=format',\n          location: 'Kennington, London',\n          membershipTier: 'core',\n          isVerified: false\n        },\n        connectionSource: 'event_based',\n        sharedEventsCount: 2,\n        firstMetEventId: 'event-portuguese-food-tour',\n        firstMetEvent: {\n          id: 'event-portuguese-food-tour',\n          title: 'Lusophone Food Tour in Little Portugal',\n          date: '2024-01-10'\n        },\n        connectionStrength: calculateConnectionStrength({\n          sharedEventsCount: 2,\n          daysSinceFirstMet: Math.floor((new Date().getTime() - new Date('2024-01-10').getTime()) / (1000 * 60 * 60 * 24)),\n          daysSinceLastInteraction: Math.floor((new Date().getTime() - new Date('2024-01-18T15:30:00Z').getTime()) / (1000 * 60 * 60 * 24)),\n          isVerified: false,\n          membershipTier: 'core'\n        }),\n        lastInteractionAt: '2024-01-18T15:30:00Z',\n        isActive: true,\n        privacyLevel: 'normal',\n        createdAt: '2024-01-10T14:15:00Z'\n      },\n      {\n        id: 'conn-3',\n        userId: 'current-user',\n        connectedUserId: 'user-ana',\n        connectedUser: {\n          id: 'user-ana',\n          firstName: 'Ana',\n          lastName: 'Pereira',\n          profilePictureUrl: 'https://images.unsplash.com/photo-1580489944761-15a19d654956?w=150&h=150&fit=crop&crop=face&auto=format',\n          location: 'Vauxhall, London',\n          membershipTier: 'core',\n          isVerified: true\n        },\n        connectionSource: 'event_based',\n        sharedEventsCount: 1,\n        firstMetEventId: 'event-book-club',\n        firstMetEvent: {\n          id: 'event-book-club',\n          title: 'Lusophone Literature Book Club',\n          date: '2024-01-08'\n        },\n        connectionStrength: calculateConnectionStrength({\n          sharedEventsCount: 1,\n          daysSinceFirstMet: Math.floor((new Date().getTime() - new Date('2024-01-08').getTime()) / (1000 * 60 * 60 * 24)),\n          daysSinceLastInteraction: Math.floor((new Date().getTime() - new Date('2024-01-22T11:00:00Z').getTime()) / (1000 * 60 * 60 * 24)),\n          isVerified: true,\n          membershipTier: 'core'\n        }),\n        lastInteractionAt: '2024-01-22T11:00:00Z',\n        isActive: true,\n        privacyLevel: 'normal',\n        createdAt: '2024-01-08T19:45:00Z'\n      }\n    ]\n    \n    setConnections(mockConnections)\n    localStorage.setItem('lusotown-connections', JSON.stringify(mockConnections))\n  }\n\n  const initializeMockStats = () => {\n    const mockStats: NetworkStats = {\n      totalConnections: 3,\n      eventsAttended: 8,\n      newConnectionsThisMonth: 2,\n      connectionStrength: 6.8,\n      achievements: [\n        {\n          id: 'ach-1',\n          type: 'connector',\n          name: 'Community Connector',\n          description: 'Connected with 3+ Lusophone Portuguese speakers',\n          icon: '🤝',\n          earnedAt: '2024-01-15T20:30:00Z',\n          isActive: true\n        },\n        {\n          id: 'ach-2',\n          type: 'regular_attendee',\n          name: 'Cultural Enthusiast',\n          description: 'Attended 5+ Lusophone cultural events',\n          icon: '🎭',\n          earnedAt: '2024-01-20T18:00:00Z',\n          isActive: true\n        },\n        {\n          id: 'ach-3',\n          type: 'heritage_preserver',\n          name: 'Heritage Guardian',\n          description: 'Actively preserving and sharing Portuguese culture',\n          icon: '🏛️',\n          earnedAt: '2024-01-25T16:00:00Z',\n          isActive: true\n        },\n        {\n          id: 'ach-4',\n          type: 'community_bridge',\n          name: 'Community Bridge Builder',\n          description: 'Connecting Portuguese speakers across different backgrounds',\n          icon: '🌉',\n          earnedAt: '2024-01-22T14:30:00Z',\n          isActive: true\n        }\n      ]\n    }\n    \n    setStats(mockStats)\n    localStorage.setItem('lusotown-network-stats', JSON.stringify(mockStats))\n  }\n\n  const initializeMockNotifications = () => {\n    const mockNotifications: ConnectionNotification[] = [\n      {\n        id: 'notif-1',\n        type: 'new_connection',\n        title: 'New Connection!',\n        message: 'You connected with Ana Pereira at Lusophone Literature Book Club',\n        data: { connectionId: 'conn-3', eventId: 'event-book-club' },\n        isRead: false,\n        createdAt: '2024-01-08T19:45:00Z'\n      },\n      {\n        id: 'notif-2',\n        type: 'milestone',\n        title: 'Achievement Unlocked!',\n        message: 'You\\'ve earned the \"Cultural Enthusiast\" badge for attending 5+ events',\n        data: { achievementId: 'ach-2' },\n        isRead: false,\n        createdAt: '2024-01-20T18:00:00Z'\n      }\n    ]\n    \n    setNotifications(mockNotifications)\n    localStorage.setItem('lusotown-network-notifications', JSON.stringify(mockNotifications))\n  }\n\n  // Helper functions\n  const getConnections = (sortBy: 'recent' | 'most_events' | 'alphabetical' | 'strongest' = 'recent') => {\n    let sorted = [...connections]\n    \n    switch (sortBy) {\n      case 'recent':\n        sorted.sort((a, b) => new Date(b.lastInteractionAt).getTime() - new Date(a.lastInteractionAt).getTime())\n        break\n      case 'most_events':\n        sorted.sort((a, b) => b.sharedEventsCount - a.sharedEventsCount)\n        break\n      case 'alphabetical':\n        sorted.sort((a, b) => a.connectedUser.firstName.localeCompare(b.connectedUser.firstName))\n        break\n      case 'strongest':\n        sorted.sort((a, b) => b.connectionStrength - a.connectionStrength)\n        break\n    }\n    \n    return sorted\n  }\n\n  const searchConnections = (query: string) => {\n    if (!query.trim()) return connections\n    \n    const searchTerm = query.toLowerCase()\n    return connections.filter(conn => \n      conn.connectedUser.firstName.toLowerCase().includes(searchTerm) ||\n      conn.connectedUser.lastName?.toLowerCase().includes(searchTerm) ||\n      conn.connectedUser.location?.toLowerCase().includes(searchTerm) ||\n      conn.firstMetEvent?.title.toLowerCase().includes(searchTerm)\n    )\n  }\n\n  const filterConnections = (filters: ConnectionFilters) => {\n    return connections.filter(conn => {\n      // Membership tier filter\n      if (filters.membershipTier && conn.connectedUser.membershipTier !== filters.membershipTier) {\n        return false\n      }\n      \n      // Location filter\n      if (filters.location && !conn.connectedUser.location?.toLowerCase().includes(filters.location.toLowerCase())) {\n        return false\n      }\n      \n      // Minimum shared events filter\n      if (filters.minSharedEvents && conn.sharedEventsCount < filters.minSharedEvents) {\n        return false\n      }\n      \n      // Connection strength filter\n      if (filters.connectionStrength) {\n        const strength = conn.connectionStrength\n        const isWeak = strength < 4\n        const isMedium = strength >= 4 && strength < 7\n        const isStrong = strength >= 7\n        \n        if (filters.connectionStrength === 'weak' && !isWeak) return false\n        if (filters.connectionStrength === 'medium' && !isMedium) return false\n        if (filters.connectionStrength === 'strong' && !isStrong) return false\n      }\n      \n      // Verified filter\n      if (filters.isVerified !== undefined && conn.connectedUser.isVerified !== filters.isVerified) {\n        return false\n      }\n      \n      // Last interaction filter\n      if (filters.lastInteractionDays) {\n        const daysSinceInteraction = Math.floor(\n          (new Date().getTime() - new Date(conn.lastInteractionAt).getTime()) / (1000 * 60 * 60 * 24)\n        )\n        if (daysSinceInteraction > filters.lastInteractionDays) {\n          return false\n        }\n      }\n      \n      return true\n    })\n  }\n\n  const getConnectionsByEvent = (eventId: string) => {\n    return connections.filter(conn => conn.firstMetEventId === eventId)\n  }\n\n  const checkInToEvent = async (eventId: string) => {\n    // Mock implementation - in real app would call API\n    console.log('Checking in to event:', eventId)\n    // This would create potential connections with other attendees\n  }\n\n  const markEventAttended = async (eventId: string) => {\n    // Mock implementation - in real app would call API\n    console.log('Marking event as attended:', eventId)\n    // This would trigger connection creation logic\n  }\n\n  const markNotificationAsRead = (notificationId: string) => {\n    const updated = notifications.map(notif => \n      notif.id === notificationId ? { ...notif, isRead: true } : notif\n    )\n    setNotifications(updated)\n    localStorage.setItem('lusotown-network-notifications', JSON.stringify(updated))\n  }\n\n  const getUnreadNotificationsCount = () => {\n    return notifications.filter(notif => !notif.isRead).length\n  }\n\n  const refreshStats = async () => {\n    // Mock implementation - in real app would call API\n    console.log('Refreshing network stats')\n  }\n\n  const getConversationStarters = (category?: string) => {\n    if (!category) return conversationStarters\n    return conversationStarters.filter(starter => starter.category === category)\n  }\n\n  const exportConnections = (format: 'csv' | 'json') => {\n    const data = connections.map(conn => ({\n      name: `${conn.connectedUser.firstName} ${conn.connectedUser.lastName || ''}`,\n      location: conn.connectedUser.location || '',\n      membershipTier: conn.connectedUser.membershipTier,\n      sharedEvents: conn.sharedEventsCount,\n      connectionStrength: conn.connectionStrength,\n      firstMetEvent: conn.firstMetEvent?.title || '',\n      firstMetDate: conn.firstMetEvent?.date || '',\n      lastInteraction: conn.lastInteractionAt,\n      isVerified: conn.connectedUser.isVerified ? 'Yes' : 'No'\n    }))\n\n    if (format === 'csv') {\n      const headers = ['Name', 'Location', 'Membership', 'Shared Events', 'Connection Strength', 'First Met Event', 'First Met Date', 'Last Interaction', 'Verified']\n      const csvContent = [headers.join(','), ...data.map(row => Object.values(row).join(','))].join('\\n')\n      \n      const blob = new Blob([csvContent], { type: 'text/csv' })\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.setAttribute('hidden', '')\n      a.setAttribute('href', url)\n      a.setAttribute('download', 'lusotown-connections.csv')\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n    } else {\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.setAttribute('hidden', '')\n      a.setAttribute('href', url)\n      a.setAttribute('download', 'lusotown-connections.json')\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n    }\n  }\n\n  const getNetworkAnalytics = (): NetworkAnalytics => {\n    if (connections.length === 0) {\n      return {\n        averageConnectionStrength: 0,\n        topEventForConnections: { eventTitle: 'No events yet', connectionCount: 0 },\n        mostActiveMonth: { month: 'No activity yet', newConnections: 0 },\n        connectionGrowthRate: 0,\n        strongConnectionsPercent: 0\n      }\n    }\n\n    // Average connection strength\n    const averageConnectionStrength = connections.reduce((sum, conn) => sum + conn.connectionStrength, 0) / connections.length\n\n    // Top event for connections\n    const eventConnections: Record<string, number> = {}\n    connections.forEach(conn => {\n      if (conn.firstMetEvent) {\n        eventConnections[conn.firstMetEvent.title] = (eventConnections[conn.firstMetEvent.title] || 0) + 1\n      }\n    })\n    \n    const topEvent = Object.entries(eventConnections).reduce(\n      (max, [event, count]) => count > max.connectionCount ? { eventTitle: event, connectionCount: count } : max,\n      { eventTitle: 'No events yet', connectionCount: 0 }\n    )\n\n    // Most active month (mock data for now)\n    const mostActiveMonth = { month: 'January 2024', newConnections: connections.length }\n\n    // Connection growth rate (mock calculation)\n    const connectionGrowthRate = Math.round((connections.length / 30) * 100) / 100 // connections per month\n\n    // Strong connections percentage\n    const strongConnections = connections.filter(conn => conn.connectionStrength >= 7).length\n    const strongConnectionsPercent = Math.round((strongConnections / connections.length) * 100)\n\n    return {\n      averageConnectionStrength: Math.round(averageConnectionStrength * 10) / 10,\n      topEventForConnections: topEvent,\n      mostActiveMonth,\n      connectionGrowthRate,\n      strongConnectionsPercent\n    }\n  }\n\n  return (\n    <NetworkingContext.Provider value={{\n      connections,\n      stats,\n      notifications,\n      conversationStarters,\n      loading,\n      getConnections,\n      searchConnections,\n      filterConnections,\n      getConnectionsByEvent,\n      exportConnections,\n      checkInToEvent,\n      markEventAttended,\n      markNotificationAsRead,\n      getUnreadNotificationsCount,\n      refreshStats,\n      getNetworkAnalytics,\n      getConversationStarters\n    }}>\n      {children}\n    </NetworkingContext.Provider>\n  )\n}\n\nexport function useNetworking() {\n  const context = useContext(NetworkingContext)\n  if (context === undefined) {\n    throw new Error('useNetworking must be used within a NetworkingProvider')\n  }\n  return context\n}"],"names":["NetworkingProvider","useNetworking","calculateConnectionStrength","sharedEventsCount","daysSinceFirstMet","daysSinceLastInteraction","isVerified","membershipTier","strength","Math","min","max","NetworkingContext","createContext","undefined","children","connections","setConnections","useState","stats","setStats","totalConnections","eventsAttended","newConnectionsThisMonth","connectionStrength","achievements","notifications","setNotifications","loading","setLoading","conversationStarters","id","category","text_en","text_pt","context","useEffect","loadNetworkingData","savedConnections","localStorage","getItem","savedStats","savedNotifications","JSON","parse","initializeMockConnections","initializeMockStats","initializeMockNotifications","error","console","mockConnections","userId","connectedUserId","connectedUser","firstName","lastName","profilePictureUrl","location","connectionSource","firstMetEventId","firstMetEvent","title","date","floor","Date","getTime","lastInteractionAt","isActive","privacyLevel","createdAt","setItem","stringify","mockStats","type","name","description","icon","earnedAt","mockNotifications","message","data","connectionId","eventId","isRead","achievementId","getConnections","sortBy","sorted","sort","a","b","localeCompare","searchConnections","query","trim","searchTerm","toLowerCase","filter","conn","includes","filterConnections","filters","minSharedEvents","isWeak","isMedium","isStrong","lastInteractionDays","daysSinceInteraction","getConnectionsByEvent","checkInToEvent","log","markEventAttended","markNotificationAsRead","notificationId","updated","map","notif","getUnreadNotificationsCount","length","refreshStats","getConversationStarters","starter","exportConnections","format","sharedEvents","firstMetDate","lastInteraction","headers","csvContent","join","row","Object","values","blob","Blob","url","window","URL","createObjectURL","document","createElement","setAttribute","body","appendChild","click","removeChild","getNetworkAnalytics","averageConnectionStrength","topEventForConnections","eventTitle","connectionCount","mostActiveMonth","month","newConnections","connectionGrowthRate","strongConnectionsPercent","reduce","sum","eventConnections","forEach","topEvent","entries","event","count","round","strongConnections","Provider","value","useContext","Error"],"mappings":"AAAA;;;;;;;;;;;;IA8OgBA,kBAAkB;eAAlBA;;IAmmBAC,aAAa;eAAbA;;;;uBA/0B0D;AAqL1E,6EAA6E;AAC7E,SAASC,4BAA4B,EACnCC,iBAAiB,EACjBC,iBAAiB,EACjBC,wBAAwB,EACxBC,UAAU,EACVC,cAAc,EAOf;IACC,IAAIC,WAAW;IAEf,6CAA6C;IAC7CA,YAAYC,KAAKC,GAAG,CAACP,oBAAoB,KAAK;IAE9C,qDAAqD;IACrD,IAAIE,4BAA4B,GAAG;QACjCG,YAAY;IACd,OAAO,IAAIH,4BAA4B,IAAI;QACzCG,YAAY;IACd,OAAO,IAAIH,4BAA4B,IAAI;QACzCG,YAAY;IACd;IAEA,2DAA2D;IAC3D,IAAIJ,qBAAqB,IAAI;QAC3BI,YAAY;IACd,OAAO,IAAIJ,qBAAqB,IAAI;QAClCI,YAAY;IACd,OAAO,IAAIJ,qBAAqB,GAAG;QACjCI,YAAY;IACd;IAEA,iCAAiC;IACjC,IAAIF,YAAY;QACdE,YAAY;IACd;IAEA,uCAAuC;IACvC,IAAID,mBAAmB,WAAW;QAChCC,YAAY;IACd,OAAO,IAAID,mBAAmB,QAAQ;QACpCC,YAAY;IACd;IAEA,+BAA+B;IAC/B,OAAOC,KAAKC,GAAG,CAACD,KAAKE,GAAG,CAACH,UAAU,IAAI;AACzC;AAEA,MAAMI,kCAAoBC,IAAAA,oBAAa,EAAoCC;AAEpE,SAASd,mBAAmB,EAAEe,QAAQ,EAA2B;IACtE,MAAM,CAACC,aAAaC,eAAe,GAAGC,IAAAA,eAAQ,EAAe,EAAE;IAC/D,MAAM,CAACC,OAAOC,SAAS,GAAGF,IAAAA,eAAQ,EAAe;QAC/CG,kBAAkB;QAClBC,gBAAgB;QAChBC,yBAAyB;QACzBC,oBAAoB;QACpBC,cAAc,EAAE;IAClB;IACA,MAAM,CAACC,eAAeC,iBAAiB,GAAGT,IAAAA,eAAQ,EAA2B,EAAE;IAC/E,MAAM,CAACU,SAASC,WAAW,GAAGX,IAAAA,eAAQ,EAAC;IAEvC,6DAA6D;IAC7D,MAAMY,uBAA8C;QAClD;YACEC,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,SAAS;YACTC,SAAS;QACX;QACA;YACEJ,IAAI;YACJC,UAAU;YACVC,SAAS;YACTC,S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"}