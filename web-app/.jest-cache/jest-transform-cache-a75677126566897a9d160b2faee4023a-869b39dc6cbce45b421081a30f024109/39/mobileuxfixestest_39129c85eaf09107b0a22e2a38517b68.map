{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/mobile-ux-fixes.test.tsx"],"sourcesContent":["/**\n * Mobile UX Fixes Verification Tests\n * \n * These tests verify the critical mobile UX fixes implemented:\n * 1. AppDownloadBar positioning and z-index\n * 2. Homepage CTA button text wrapping prevention\n * 3. Portuguese-speaking community cultural accuracy\n * 4. Mobile responsiveness at key breakpoints\n * 5. Touch target accessibility compliance\n */\n\nimport React from 'react';\nimport { render, screen, within, act, waitFor } from '@testing-library/react';\nimport { LanguageProvider } from '@/context/LanguageContext';\nimport { HeritageProvider } from '@/context/HeritageContext';\nimport AppDownloadBar from '@/components/AppDownloadBar';\nimport CTA from '@/components/CTA';\nimport Header from '@/components/Header';\n\n// Mock window dimensions for responsive testing\nconst mockWindowDimensions = (width: number, height: number) => {\n  Object.defineProperty(window, 'innerWidth', {\n    writable: true,\n    configurable: true,\n    value: width,\n  });\n  \n  Object.defineProperty(window, 'innerHeight', {\n    writable: true,\n    configurable: true,\n    value: height,\n  });\n  \n  window.dispatchEvent(new Event('resize'));\n};\n\n// Test wrapper component\nconst TestWrapper = ({ children, language = 'en' }: { children: React.ReactNode; language?: 'en' | 'pt' }) => (\n  <LanguageProvider initialLanguage={language}>\n    <HeritageProvider>\n      {children}\n    </HeritageProvider>\n  </LanguageProvider>\n);\n\ndescribe('Mobile UX Fixes Verification', () => {\n  beforeEach(() => {\n    // Reset window dimensions before each test\n    mockWindowDimensions(1024, 768);\n    \n    // Mock localStorage and sessionStorage\n    const mockStorage = {\n      getItem: jest.fn(),\n      setItem: jest.fn(),\n      removeItem: jest.fn(),\n      clear: jest.fn(),\n    };\n    \n    Object.defineProperty(window, 'localStorage', {\n      value: mockStorage,\n      writable: true,\n    });\n    \n    Object.defineProperty(window, 'sessionStorage', {\n      value: mockStorage,\n      writable: true,\n    });\n    \n    // Mock navigator\n    Object.defineProperty(navigator, 'userAgent', {\n      value: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',\n      writable: true,\n    });\n  });\n\n  describe('AppDownloadBar Mobile Fixes', () => {\n    it('should have proper positioning and z-index on mobile', async () => {\n      mockWindowDimensions(375, 667); // iPhone SE dimensions\n      \n      render(\n        <TestWrapper>\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        const downloadBar = screen.getByRole('banner');\n        expect(downloadBar).toBeInTheDocument();\n        \n        // Check positioning classes for mobile\n        expect(downloadBar).toHaveClass('fixed', 'bottom-0', 'left-2', 'right-2');\n        expect(downloadBar).toHaveClass('max-w-sm');\n        \n        // Verify z-index is properly applied\n        const styles = window.getComputedStyle(downloadBar);\n        expect(styles.zIndex).toBe('50'); // From COMPONENT_Z_INDEX.appDownloadBar\n      });\n    });\n\n    it('should display culturally accurate Portuguese-speaking community description', async () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper language=\"pt\">\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        const description = screen.getByText(/comunidade lusÃ³fona no Reino Unido/i);\n        expect(description).toBeInTheDocument();\n        \n        // Verify it includes UK-wide context, not just Portugal\n        expect(description.textContent).toContain('Reino Unido');\n        expect(description.textContent).toContain('eventos culturais');\n      });\n    });\n\n    it('should display accurate English community description', async () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper language=\"en\">\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        const description = screen.getByText(/Portuguese-speaking community across the UK/i);\n        expect(description).toBeInTheDocument();\n        \n        // Verify cultural accuracy - Portuguese-speaking, not just Portuguese\n        expect(description.textContent).toContain('Portuguese-speaking community');\n        expect(description.textContent).toContain('across the UK');\n      });\n    });\n\n    it('should have optimized button text for mobile', async () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper>\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        // Check download button has shorter text on mobile\n        const downloadButton = screen.getByRole('link', { name: /download.*app/i });\n        expect(downloadButton).toHaveTextContent('Get');\n        expect(downloadButton).toHaveClass('whitespace-nowrap');\n        \n        // Check skip button has shorter text\n        const skipButton = screen.getByRole('button', { name: /skip/i });\n        expect(skipButton).toHaveTextContent('Later');\n        expect(skipButton).toHaveClass('whitespace-nowrap');\n      });\n    });\n\n    it('should meet touch target accessibility requirements', async () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper>\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        const downloadButton = screen.getByRole('link', { name: /download.*app/i });\n        const skipButton = screen.getByRole('button', { name: /skip/i });\n        const closeButton = screen.getByRole('button', { name: /close/i });\n        \n        // All buttons should have minimum 44px touch targets\n        [downloadButton, skipButton, closeButton].forEach(button => {\n          expect(button).toHaveClass('min-h-[44px]');\n          expect(button).toHaveClass('min-w-[44px]', 'min-w-[60px]'); // Either class should be present\n        });\n      });\n    });\n  });\n\n  describe('Header CTA Button Mobile Fixes', () => {\n    it('should prevent text wrapping on mobile', () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const joinButton = screen.getByRole('link', { name: /join/i });\n      expect(joinButton).toHaveClass('whitespace-nowrap');\n      \n      // On mobile, should show shortened text\n      expect(joinButton).toHaveTextContent('Join');\n      \n      // Should not contain the full text that could wrap\n      expect(joinButton).not.toHaveTextContent('Join LusoTown');\n    });\n\n    it('should show full text on larger screens', () => {\n      mockWindowDimensions(768, 1024); // Tablet size\n      \n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const joinButton = screen.getByRole('link', { name: /join/i });\n      expect(joinButton).toHaveClass('whitespace-nowrap');\n      \n      // On larger screens, should show full text\n      within(joinButton).getByText('Join LusoTown');\n    });\n\n    it('should have proper responsive font sizes', () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper>\n          <Header />\n        </TestWrapper>\n      );\n\n      const joinButton = screen.getByRole('link', { name: /join/i });\n      expect(joinButton).toHaveClass('text-xs');\n      expect(joinButton).toHaveClass('sm:text-sm');\n    });\n  });\n\n  describe('CTA Component Mobile Fixes', () => {\n    it('should prevent button text wrapping on mobile', () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper>\n          <CTA />\n        </TestWrapper>\n      );\n\n      const joinButton = screen.getByRole('link', { name: /join/i });\n      expect(joinButton).toHaveClass('whitespace-nowrap');\n      expect(joinButton).toHaveClass('min-h-[56px]');\n      \n      // Should show shorter text on mobile\n      expect(joinButton).toHaveTextContent('Join');\n    });\n\n    it('should show full text on larger screens', () => {\n      mockWindowDimensions(768, 1024);\n      \n      render(\n        <TestWrapper>\n          <CTA />\n        </TestWrapper>\n      );\n\n      const joinButton = screen.getByRole('link', { name: /join/i });\n      \n      // Should show full text on larger screens\n      expect(joinButton).toHaveTextContent('Join Now');\n    });\n\n    it('should have proper responsive spacing and sizing', () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper>\n          <CTA />\n        </TestWrapper>\n      );\n\n      const joinButton = screen.getByRole('link', { name: /join/i });\n      \n      // Mobile spacing classes\n      expect(joinButton).toHaveClass('px-8');\n      expect(joinButton).toHaveClass('sm:px-12');\n      expect(joinButton).toHaveClass('py-4');\n      expect(joinButton).toHaveClass('sm:py-6');\n      \n      // Mobile text size\n      expect(joinButton).toHaveClass('text-lg');\n      expect(joinButton).toHaveClass('sm:text-xl');\n    });\n  });\n\n  describe('Responsive Breakpoint Testing', () => {\n    const breakpoints = [\n      { width: 375, height: 667, name: 'Mobile Small (iPhone SE)' },\n      { width: 414, height: 896, name: 'Mobile Standard (iPhone 11)' },\n      { width: 768, height: 1024, name: 'Tablet Portrait (iPad)' },\n      { width: 1024, height: 768, name: 'Desktop Small' },\n    ];\n\n    breakpoints.forEach(({ width, height, name }) => {\n      it(`should work correctly at ${name} (${width}x${height})`, async () => {\n        mockWindowDimensions(width, height);\n        \n        render(\n          <TestWrapper>\n            <AppDownloadBar autoShow={true} showDelay={0} />\n            <Header />\n            <CTA />\n          </TestWrapper>\n        );\n\n        await waitFor(() => {\n          // App download bar should be present on mobile\n          if (width < 768) {\n            const downloadBar = screen.getByRole('banner');\n            expect(downloadBar).toBeInTheDocument();\n            \n            // Should have proper mobile classes\n            expect(downloadBar).toHaveClass(width < 414 ? 'max-w-sm' : 'max-w-sm', 'sm:max-w-md');\n          }\n          \n          // All interactive elements should have proper touch targets\n          const buttons = screen.getAllByRole('button');\n          const links = screen.getAllByRole('link');\n          \n          [...buttons, ...links].forEach(element => {\n            if (element.classList.contains('min-h-')) {\n              expect(element).toHaveClass('min-h-[44px]', 'min-h-[56px]'); // Either should be present\n            }\n          });\n        });\n      });\n    });\n  });\n\n  describe('Cultural Authenticity Verification', () => {\n    it('should use Portuguese-speaking community terminology consistently', async () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper language=\"en\">\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        // Should say \"Portuguese-speaking community\" not just \"Portuguese community\"\n        const description = screen.getByText(/Portuguese-speaking community/i);\n        expect(description).toBeInTheDocument();\n        \n        // Should include UK-wide context\n        expect(description.textContent).toContain('across the UK');\n        expect(description.textContent).not.toContain('in London only');\n      });\n    });\n\n    it('should use inclusive Portuguese terminology', async () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper language=\"pt\">\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        const description = screen.getByText(/comunidade lusÃ³fona/i);\n        expect(description).toBeInTheDocument();\n        \n        // Should use inclusive lusÃ³fona terminology\n        expect(description.textContent).toContain('comunidade lusÃ³fona');\n        expect(description.textContent).toContain('Reino Unido');\n      });\n    });\n  });\n\n  describe('Performance and Optimization', () => {\n    it('should not cause layout shifts on mobile', async () => {\n      mockWindowDimensions(375, 667);\n      \n      const { rerender } = render(\n        <TestWrapper>\n          <AppDownloadBar autoShow={false} showDelay={0} />\n        </TestWrapper>\n      );\n\n      // Initially no download bar\n      expect(screen.queryByRole('banner')).not.toBeInTheDocument();\n      \n      // Show download bar\n      rerender(\n        <TestWrapper>\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        const downloadBar = screen.getByRole('banner');\n        expect(downloadBar).toBeInTheDocument();\n        \n        // Should be positioned fixed to avoid layout shift\n        expect(downloadBar).toHaveClass('fixed');\n      });\n    });\n\n    it('should have proper loading states and transitions', async () => {\n      mockWindowDimensions(375, 667);\n      \n      render(\n        <TestWrapper>\n          <AppDownloadBar autoShow={true} showDelay={0} />\n        </TestWrapper>\n      );\n\n      await waitFor(() => {\n        const downloadBar = screen.getByRole('banner');\n        \n        // Should have transition classes for smooth animations\n        const content = downloadBar.querySelector('[class*=\"transition\"]');\n        expect(content).toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["mockWindowDimensions","width","height","Object","defineProperty","window","writable","configurable","value","dispatchEvent","Event","TestWrapper","children","language","LanguageProvider","initialLanguage","HeritageProvider","describe","beforeEach","mockStorage","getItem","jest","fn","setItem","removeItem","clear","navigator","it","render","AppDownloadBar","autoShow","showDelay","waitFor","downloadBar","screen","getByRole","expect","toBeInTheDocument","toHaveClass","styles","getComputedStyle","zIndex","toBe","description","getByText","textContent","toContain","downloadButton","name","toHaveTextContent","skipButton","closeButton","forEach","button","Header","joinButton","not","within","CTA","breakpoints","buttons","getAllByRole","links","element","classList","contains","rerender","queryByRole","content","querySelector"],"mappings":"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"}