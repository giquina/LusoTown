{"version":3,"sources":["/workspaces/LusoTown/web-app/src/components/AuthPopupProvider.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useState, ReactNode, useCallback, useMemo } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { isAuthenticated } from '@/lib/auth'\n\nexport type AuthPopupType = 'add-to-cart' | 'view-details' | null\n\ninterface AuthPopupContextType {\n  showPopup: (type: AuthPopupType, intent?: AuthIntent) => void\n  hidePopup: () => void\n  currentPopup: AuthPopupType\n  authIntent: AuthIntent | null\n}\n\nexport interface AuthIntent {\n  type: 'add-to-cart' | 'view-details'\n  eventId?: string\n  eventTitle?: string\n  redirectPath?: string\n  data?: any\n}\n\nconst AuthPopupContext = createContext<AuthPopupContextType | undefined>(undefined)\n\nexport function AuthPopupProvider({ children }: { children: ReactNode }) {\n  const [currentPopup, setCurrentPopup] = useState<AuthPopupType>(null)\n  const [authIntent, setAuthIntent] = useState<AuthIntent | null>(null)\n  \n  const showPopup = useCallback((type: AuthPopupType, intent?: AuthIntent) => {\n    // Don't show popup if user is already authenticated\n    if (isAuthenticated()) {\n      return\n    }\n    \n    setCurrentPopup(type)\n    setAuthIntent(intent || null)\n  }, [])\n  \n  const hidePopup = useCallback(() => {\n    setCurrentPopup(null)\n    setAuthIntent(null)\n  }, [])\n  \n  const contextValue = useMemo(() => ({\n    showPopup,\n    hidePopup,\n    currentPopup,\n    authIntent\n  }), [showPopup, hidePopup, currentPopup, authIntent])\n  \n  return (\n    <AuthPopupContext.Provider value={contextValue}>\n      {children}\n    </AuthPopupContext.Provider>\n  )\n}\n\nexport function useAuthPopup() {\n  const context = useContext(AuthPopupContext)\n  if (context === undefined) {\n    // Return safe fallback for SSR\n    if (typeof window === 'undefined') {\n      return {\n        showPopup: () => {},\n        hidePopup: () => {},\n        currentPopup: null,\n        authIntent: null\n      }\n    }\n    throw new Error('useAuthPopup must be used within an AuthPopupProvider')\n  }\n  return context\n}"],"names":["AuthPopupProvider","useAuthPopup","AuthPopupContext","createContext","undefined","children","currentPopup","setCurrentPopup","useState","authIntent","setAuthIntent","showPopup","useCallback","type","intent","isAuthenticated","hidePopup","contextValue","useMemo","Provider","value","context","useContext","window","Error"],"mappings":"AAAA;;;;;;;;;;;;IAyBgBA,iBAAiB;eAAjBA;;IAiCAC,YAAY;eAAZA;;;;uBAxDqE;sBAErD;AAmBhC,MAAMC,iCAAmBC,IAAAA,oBAAa,EAAmCC;AAElE,SAASJ,kBAAkB,EAAEK,QAAQ,EAA2B;IACrE,MAAM,CAACC,cAAcC,gBAAgB,GAAGC,IAAAA,eAAQ,EAAgB;IAChE,MAAM,CAACC,YAAYC,cAAc,GAAGF,IAAAA,eAAQ,EAAoB;IAEhE,MAAMG,YAAYC,IAAAA,kBAAW,EAAC,CAACC,MAAqBC;QAClD,oDAAoD;QACpD,IAAIC,IAAAA,qBAAe,KAAI;YACrB;QACF;QAEAR,gBAAgBM;QAChBH,cAAcI,UAAU;IAC1B,GAAG,EAAE;IAEL,MAAME,YAAYJ,IAAAA,kBAAW,EAAC;QAC5BL,gBAAgB;QAChBG,cAAc;IAChB,GAAG,EAAE;IAEL,MAAMO,eAAeC,IAAAA,cAAO,EAAC,IAAO,CAAA;YAClCP;YACAK;YACAV;YACAG;QACF,CAAA,GAAI;QAACE;QAAWK;QAAWV;QAAcG;KAAW;IAEpD,qBACE,qBAACP,iBAAiBiB,QAAQ;QAACC,OAAOH;kBAC/BZ;;AAGP;AAEO,SAASJ;IACd,MAAMoB,UAAUC,IAAAA,iBAAU,EAACpB;IAC3B,IAAImB,YAAYjB,WAAW;QACzB,+BAA+B;QAC/B,IAAI,OAAOmB,WAAW,aAAa;YACjC,OAAO;gBACLZ,WAAW,KAAO;gBAClBK,WAAW,KAAO;gBAClBV,cAAc;gBACdG,YAAY;YACd;QACF;QACA,MAAM,IAAIe,MAAM;IAClB;IACA,OAAOH;AACT"}