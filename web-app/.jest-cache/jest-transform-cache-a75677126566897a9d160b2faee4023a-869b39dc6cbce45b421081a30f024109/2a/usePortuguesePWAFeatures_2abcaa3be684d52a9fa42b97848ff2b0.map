{"version":3,"sources":["/workspaces/LusoTown/web-app/src/hooks/usePortuguesePWAFeatures.ts"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useCallback, useRef } from 'react'\nimport { useLanguage } from '@/context/LanguageContext'\nimport logger from '@/utils/logger'\n\ninterface PWAInstallationState {\n  canInstall: boolean\n  isInstalled: boolean\n  installPromptEvent: any\n  hasShownPrompt: boolean\n  installationSource: 'banner' | 'button' | 'automatic' | null\n}\n\ninterface OfflineCapabilities {\n  isOffline: boolean\n  hasOfflineContent: boolean\n  cachedPagesCount: number\n  offlineEventsCount: number\n  offlineBusinessesCount: number\n  lastSyncTime: Date | null\n  pendingActions: OfflineAction[]\n}\n\ninterface OfflineAction {\n  id: string\n  type: 'favorite-event' | 'save-business' | 'send-message' | 'rsvp-event'\n  data: any\n  timestamp: Date\n  retryCount: number\n}\n\ninterface PushNotificationSettings {\n  enabled: boolean\n  culturalEvents: boolean\n  businessUpdates: boolean\n  communityMessages: boolean\n  festivalReminders: boolean\n  fadoNights: boolean\n  portugalDay: boolean\n  brazilianEvents: boolean\n  capeVerdeanEvents: boolean\n  quietHoursStart: string\n  quietHoursEnd: string\n  language: 'en' | 'pt'\n}\n\ninterface BackgroundSyncData {\n  culturalEvents: any[]\n  featuredBusinesses: any[]\n  communityUpdates: any[]\n  userPreferences: any\n  lastSyncTimestamp: Date\n}\n\nconst DEFAULT_NOTIFICATION_SETTINGS: PushNotificationSettings = {\n  enabled: true,\n  culturalEvents: true,\n  businessUpdates: true,\n  communityMessages: true,\n  festivalReminders: true,\n  fadoNights: true,\n  portugalDay: true,\n  brazilianEvents: true,\n  capeVerdeanEvents: true,\n  quietHoursStart: '22:00',\n  quietHoursEnd: '08:00',\n  language: 'en'\n}\n\nexport function usePortuguesePWAFeatures() {\n  const { language, t } = useLanguage()\n  const [installationState, setInstallationState] = useState<PWAInstallationState>({\n    canInstall: false,\n    isInstalled: false,\n    installPromptEvent: null,\n    hasShownPrompt: false,\n    installationSource: null\n  })\n\n  const [offlineCapabilities, setOfflineCapabilities] = useState<OfflineCapabilities>({\n    isOffline: !navigator.onLine,\n    hasOfflineContent: false,\n    cachedPagesCount: 0,\n    offlineEventsCount: 0,\n    offlineBusinessesCount: 0,\n    lastSyncTime: null,\n    pendingActions: []\n  })\n\n  const [notificationSettings, setNotificationSettings] = useState<PushNotificationSettings>({\n    ...DEFAULT_NOTIFICATION_SETTINGS,\n    language: language as 'en' | 'pt'\n  })\n\n  const [backgroundSyncData, setBackgroundSyncData] = useState<BackgroundSyncData>({\n    culturalEvents: [],\n    featuredBusinesses: [],\n    communityUpdates: [],\n    userPreferences: {},\n    lastSyncTimestamp: new Date()\n  })\n\n  const syncInterval = useRef<NodeJS.Timeout>()\n  const installPromptTimeout = useRef<NodeJS.Timeout>()\n\n  // Portuguese cultural PWA install prompts\n  const getPortugueseInstallMessage = useCallback(() => {\n    const messages = {\n      en: {\n        title: 'Install LusoTown App',\n        subtitle: 'Get instant access to Portuguese cultural events',\n        description: 'Never miss Fado nights, festivals, or community gatherings. Install LusoTown for the best Portuguese-speaking community experience.',\n        install: 'Install App',\n        later: 'Maybe Later',\n        benefits: [\n          'Offline access to Portuguese events',\n          'Push notifications for cultural celebrations',\n          'Faster loading of business directory',\n          'Portuguese flag homescreen icon'\n        ]\n      },\n      pt: {\n        title: 'Instalar App LusoTown',\n        subtitle: 'Acesso instantâneo a eventos culturais portugueses',\n        description: 'Nunca percas noites de Fado, festivais ou encontros comunitários. Instala LusoTown para a melhor experiência da comunidade lusófona.',\n        install: 'Instalar App',\n        later: 'Talvez Mais Tarde',\n        benefits: [\n          'Acesso offline a eventos portugueses',\n          'Notificações de celebrações culturais',\n          'Carregamento mais rápido do diretório',\n          'Ícone da bandeira portuguesa no ecrã inicial'\n        ]\n      }\n    }\n    \n    return messages[language as keyof typeof messages] || messages.en\n  }, [language])\n\n  // PWA installation management\n  const handleInstallPrompt = useCallback(async (source: 'banner' | 'button' | 'automatic' = 'button') => {\n    if (!installationState.canInstall || !installationState.installPromptEvent) {\n      logger.warn('[PWA] No install prompt available')\n      return false\n    }\n\n    try {\n      setInstallationState(prev => ({ ...prev, installationSource: source }))\n      \n      // Show the install prompt\n      installationState.installPromptEvent.prompt()\n      \n      // Wait for user choice\n      const result = await installationState.installPromptEvent.userChoice\n      \n      if (result.outcome === 'accepted') {\n        setInstallationState(prev => ({\n          ...prev,\n          isInstalled: true,\n          canInstall: false,\n          installPromptEvent: null\n        }))\n        \n        // Track installation for Portuguese community analytics\n        if ('gtag' in window) {\n          (window as any).gtag('event', 'pwa_install', {\n            event_category: 'pwa',\n            event_label: `portuguese_community_${source}`,\n            language: language\n          })\n        }\n        \n        logger.info('[PWA] Portuguese community app installed successfully', { source, language })\n        return true\n      } else {\n        setInstallationState(prev => ({ ...prev, hasShownPrompt: true }))\n        return false\n      }\n    } catch (error) {\n      logger.error('[PWA] Installation failed:', error)\n      return false\n    }\n  }, [installationState, language])\n\n  // Portuguese cultural push notifications\n  const requestPortugueseNotifications = useCallback(async () => {\n    if (!('Notification' in window) || !('serviceWorker' in navigator)) {\n      return false\n    }\n\n    try {\n      const permission = await Notification.requestPermission()\n      \n      if (permission === 'granted') {\n        setNotificationSettings(prev => ({ ...prev, enabled: true }))\n        \n        // Register for Portuguese cultural event categories\n        const registration = await navigator.serviceWorker.ready\n        \n        if ('pushManager' in registration) {\n          const subscription = await registration.pushManager.subscribe({\n            userVisibleOnly: true,\n            applicationServerKey: process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY\n          })\n          \n          // Send subscription to server with Portuguese preferences\n          await fetch('/api/notifications/subscribe', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              subscription,\n              preferences: notificationSettings,\n              language,\n              culturalInterests: [\n                'fado-nights',\n                'portuguese-festivals', \n                'brazilian-events',\n                'cape-verdean-music',\n                'lusophone-networking'\n              ]\n            })\n          })\n          \n          logger.info('[PWA] Portuguese community notifications enabled')\n          return true\n        }\n      }\n      \n      return false\n    } catch (error) {\n      logger.error('[PWA] Notification setup failed:', error)\n      return false\n    }\n  }, [notificationSettings, language])\n\n  // Enhanced offline functionality for Portuguese content\n  const enableOfflineMode = useCallback(async () => {\n    try {\n      if ('serviceWorker' in navigator) {\n        const registration = await navigator.serviceWorker.ready\n        \n        // Trigger background sync for Portuguese cultural content\n        if ('sync' in registration) {\n          await registration.sync.register('portuguese-community-sync')\n          await registration.sync.register('cultural-events-sync')\n          await registration.sync.register('business-directory-sync')\n        }\n        \n        // Cache Portuguese cultural content\n        const cache = await caches.open('portuguese-cultural-v3.0.1')\n        \n        const culturalResources = [\n          '/api/events?category=fado-nights&limit=10',\n          '/api/events?category=portuguese-festivals&limit=10',\n          '/api/events?category=brazilian-events&limit=10',\n          '/api/businesses?type=restaurants&portuguese=true&limit=20',\n          '/api/businesses?type=cultural&portuguese=true&limit=10',\n          '/events',\n          '/business-directory',\n          '/community'\n        ]\n        \n        const cachePromises = culturalResources.map(async (url) => {\n          try {\n            const response = await fetch(url)\n            if (response.ok) {\n              await cache.put(url, response)\n            }\n          } catch (error) {\n            logger.warn(`[PWA] Failed to cache ${url}:`, error)\n          }\n        })\n        \n        await Promise.allSettled(cachePromises)\n        \n        // Update offline capabilities\n        const cachedRequests = await cache.keys()\n        setOfflineCapabilities(prev => ({\n          ...prev,\n          hasOfflineContent: true,\n          cachedPagesCount: cachedRequests.length,\n          lastSyncTime: new Date()\n        }))\n        \n        logger.info('[PWA] Portuguese cultural content cached for offline use')\n      }\n    } catch (error) {\n      logger.error('[PWA] Offline mode setup failed:', error)\n    }\n  }, [])\n\n  // Background sync for Portuguese community data\n  const syncPortugueseContent = useCallback(async () => {\n    try {\n      if (!navigator.onLine) {\n        logger.info('[PWA] Device offline, skipping sync')\n        return\n      }\n\n      const syncPromises = [\n        // Portuguese cultural events\n        fetch('/api/events?featured=true&lang=pt&limit=20').then(r => r.json()),\n        // Featured Portuguese businesses\n        fetch('/api/businesses?featured=true&portuguese=true&limit=15').then(r => r.json()),\n        // Community updates\n        fetch('/api/community/updates?lang=pt&limit=10').then(r => r.json())\n      ]\n\n      const [events, businesses, updates] = await Promise.allSettled(syncPromises)\n\n      setBackgroundSyncData({\n        culturalEvents: events.status === 'fulfilled' ? events.value : [],\n        featuredBusinesses: businesses.status === 'fulfilled' ? businesses.value : [],\n        communityUpdates: updates.status === 'fulfilled' ? updates.value : [],\n        userPreferences: notificationSettings,\n        lastSyncTimestamp: new Date()\n      })\n\n      setOfflineCapabilities(prev => ({\n        ...prev,\n        offlineEventsCount: events.status === 'fulfilled' ? events.value.length : 0,\n        offlineBusinessesCount: businesses.status === 'fulfilled' ? businesses.value.length : 0,\n        lastSyncTime: new Date()\n      }))\n\n      logger.info('[PWA] Portuguese community content synced successfully')\n    } catch (error) {\n      logger.error('[PWA] Background sync failed:', error)\n    }\n  }, [notificationSettings])\n\n  // Handle offline actions\n  const queueOfflineAction = useCallback((action: Omit<OfflineAction, 'id' | 'timestamp' | 'retryCount'>) => {\n    const offlineAction: OfflineAction = {\n      ...action,\n      id: `offline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      retryCount: 0\n    }\n\n    setOfflineCapabilities(prev => ({\n      ...prev,\n      pendingActions: [...prev.pendingActions, offlineAction]\n    }))\n\n    // Store in IndexedDB for persistence\n    if ('indexedDB' in window) {\n      const request = indexedDB.open('LusoTownOffline', 1)\n      request.onsuccess = (event) => {\n        const db = (event.target as any).result\n        const transaction = db.transaction(['offlineActions'], 'readwrite')\n        const store = transaction.objectStore('offlineActions')\n        store.add(offlineAction)\n      }\n    }\n\n    logger.info('[PWA] Offline action queued:', offlineAction.type)\n  }, [])\n\n  // Process offline actions when back online\n  const processOfflineActions = useCallback(async () => {\n    if (!navigator.onLine || offlineCapabilities.pendingActions.length === 0) {\n      return\n    }\n\n    const actionsToProcess = [...offlineCapabilities.pendingActions]\n    const processedActions: string[] = []\n\n    for (const action of actionsToProcess) {\n      try {\n        let success = false\n\n        switch (action.type) {\n          case 'favorite-event':\n            await fetch('/api/events/favorite', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(action.data)\n            })\n            success = true\n            break\n\n          case 'save-business':\n            await fetch('/api/businesses/save', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(action.data)\n            })\n            success = true\n            break\n\n          case 'rsvp-event':\n            await fetch('/api/events/rsvp', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(action.data)\n            })\n            success = true\n            break\n        }\n\n        if (success) {\n          processedActions.push(action.id)\n        } else {\n          // Increment retry count\n          action.retryCount++\n          if (action.retryCount >= 3) {\n            processedActions.push(action.id) // Remove after 3 failed attempts\n          }\n        }\n      } catch (error) {\n        logger.warn(`[PWA] Failed to process offline action ${action.type}:`, error)\n        action.retryCount++\n        if (action.retryCount >= 3) {\n          processedActions.push(action.id)\n        }\n      }\n    }\n\n    // Remove processed actions\n    setOfflineCapabilities(prev => ({\n      ...prev,\n      pendingActions: prev.pendingActions.filter(action => !processedActions.includes(action.id))\n    }))\n\n    if (processedActions.length > 0) {\n      logger.info(`[PWA] Processed ${processedActions.length} offline actions`)\n    }\n  }, [offlineCapabilities.pendingActions])\n\n  // Smart install prompt timing for Portuguese users\n  const schedulePortugueseInstallPrompt = useCallback(() => {\n    if (installationState.hasShownPrompt || !installationState.canInstall) {\n      return\n    }\n\n    // Show install prompt after user has engaged with Portuguese cultural content\n    const engagementThreshold = 3 // 3 interactions with cultural content\n    let engagementCount = 0\n\n    const trackEngagement = () => {\n      engagementCount++\n      if (engagementCount >= engagementThreshold) {\n        installPromptTimeout.current = setTimeout(() => {\n          handleInstallPrompt('automatic')\n        }, 2000) // Small delay for better UX\n      }\n    }\n\n    // Track Portuguese cultural content interactions\n    document.addEventListener('click', (e) => {\n      const target = e.target as HTMLElement\n      if (target.closest('[data-portuguese-content]') || \n          target.closest('.cultural-event') ||\n          target.closest('.portuguese-business')) {\n        trackEngagement()\n      }\n    })\n  }, [installationState.hasShownPrompt, installationState.canInstall, handleInstallPrompt])\n\n  // Initialize PWA features\n  useEffect(() => {\n    const initializePWAFeatures = async () => {\n      // Check if already installed\n      if (window.matchMedia('(display-mode: standalone)').matches) {\n        setInstallationState(prev => ({ ...prev, isInstalled: true }))\n      }\n\n      // Listen for install prompt\n      const handleBeforeInstallPrompt = (e: Event) => {\n        e.preventDefault()\n        setInstallationState(prev => ({\n          ...prev,\n          canInstall: true,\n          installPromptEvent: e\n        }))\n        schedulePortugueseInstallPrompt()\n      }\n\n      window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n\n      // Online/offline status\n      const handleOnline = () => {\n        setOfflineCapabilities(prev => ({ ...prev, isOffline: false }))\n        processOfflineActions()\n        syncPortugueseContent()\n      }\n\n      const handleOffline = () => {\n        setOfflineCapabilities(prev => ({ ...prev, isOffline: true }))\n      }\n\n      window.addEventListener('online', handleOnline)\n      window.addEventListener('offline', handleOffline)\n\n      // Initial content sync\n      if (navigator.onLine) {\n        await enableOfflineMode()\n        await syncPortugueseContent()\n      }\n\n      // Set up periodic sync\n      syncInterval.current = setInterval(() => {\n        if (navigator.onLine) {\n          syncPortugueseContent()\n        }\n      }, 5 * 60 * 1000) // Sync every 5 minutes\n\n      return () => {\n        window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n        window.removeEventListener('online', handleOnline)\n        window.removeEventListener('offline', handleOffline)\n        \n        if (syncInterval.current) {\n          clearInterval(syncInterval.current)\n        }\n        \n        if (installPromptTimeout.current) {\n          clearTimeout(installPromptTimeout.current)\n        }\n      }\n    }\n\n    initializePWAFeatures()\n  }, [enableOfflineMode, syncPortugueseContent, processOfflineActions, schedulePortugueseInstallPrompt])\n\n  // Update notification settings language\n  useEffect(() => {\n    setNotificationSettings(prev => ({\n      ...prev,\n      language: language as 'en' | 'pt'\n    }))\n  }, [language])\n\n  return {\n    installationState,\n    offlineCapabilities,\n    notificationSettings,\n    backgroundSyncData,\n    getPortugueseInstallMessage,\n    handleInstallPrompt,\n    requestPortugueseNotifications,\n    enableOfflineMode,\n    syncPortugueseContent,\n    queueOfflineAction,\n    processOfflineActions,\n    setNotificationSettings,\n    isFullyOfflineCapable: offlineCapabilities.hasOfflineContent && offlineCapabilities.cachedPagesCount > 0\n  }\n}"],"names":["usePortuguesePWAFeatures","DEFAULT_NOTIFICATION_SETTINGS","enabled","culturalEvents","businessUpdates","communityMessages","festivalReminders","fadoNights","portugalDay","brazilianEvents","capeVerdeanEvents","quietHoursStart","quietHoursEnd","language","t","useLanguage","installationState","setInstallationState","useState","canInstall","isInstalled","installPromptEvent","hasShownPrompt","installationSource","offlineCapabilities","setOfflineCapabilities","isOffline","navigator","onLine","hasOfflineContent","cachedPagesCount","offlineEventsCount","offlineBusinessesCount","lastSyncTime","pendingActions","notificationSettings","setNotificationSettings","backgroundSyncData","setBackgroundSyncData","featuredBusinesses","communityUpdates","userPreferences","lastSyncTimestamp","Date","syncInterval","useRef","installPromptTimeout","getPortugueseInstallMessage","useCallback","messages","en","title","subtitle","description","install","later","benefits","pt","handleInstallPrompt","source","logger","warn","prev","prompt","result","userChoice","outcome","window","gtag","event_category","event_label","info","error","requestPortugueseNotifications","permission","Notification","requestPermission","registration","serviceWorker","ready","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","process","env","NEXT_PUBLIC_VAPID_PUBLIC_KEY","fetch","method","headers","body","JSON","stringify","preferences","culturalInterests","enableOfflineMode","sync","register","cache","caches","open","culturalResources","cachePromises","map","url","response","ok","put","Promise","allSettled","cachedRequests","keys","length","syncPortugueseContent","syncPromises","then","r","json","events","businesses","updates","status","value","queueOfflineAction","action","offlineAction","id","now","Math","random","toString","substr","timestamp","retryCount","request","indexedDB","onsuccess","event","db","target","transaction","store","objectStore","add","type","processOfflineActions","actionsToProcess","processedActions","success","data","push","filter","includes","schedulePortugueseInstallPrompt","engagementThreshold","engagementCount","trackEngagement","current","setTimeout","document","addEventListener","e","closest","useEffect","initializePWAFeatures","matchMedia","matches","handleBeforeInstallPrompt","preventDefault","handleOnline","handleOffline","setInterval","removeEventListener","clearInterval","clearTimeout","isFullyOfflineCapable"],"mappings":"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"}