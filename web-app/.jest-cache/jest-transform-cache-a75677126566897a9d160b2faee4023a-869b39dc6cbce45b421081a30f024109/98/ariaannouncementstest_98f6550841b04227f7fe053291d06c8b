6f1bdc5fdda8360046df2b83748ea475
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _useAriaAnnouncements = require("../../src/hooks/useAriaAnnouncements");
const _useFocusManagement = require("../../src/hooks/useFocusManagement");
const _LanguageContext = require("../../src/context/LanguageContext");
const _react1 = /*#__PURE__*/ _interop_require_wildcard(require("react"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock component to test the ARIA hooks
const TestComponent = ({ testAnnouncement = false, testFocus = false, language = "en" })=>{
    const { announce, announcePolite, announceAssertive, clear } = (0, _useAriaAnnouncements.useAriaAnnouncements)();
    const containerRef = (0, _react1.useRef)(null);
    const { focusFirst, focusLast } = (0, _useFocusManagement.useFocusManagement)(containerRef, testFocus);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            ref: containerRef,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>announce(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.opened),
                    "data-testid": "announce-button",
                    children: "Announce"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>announcePolite(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.minimized),
                    "data-testid": "announce-polite-button",
                    children: "Announce Polite"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>announceAssertive(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.shown),
                    "data-testid": "announce-assertive-button",
                    children: "Announce Assertive"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>clear(),
                    "data-testid": "clear-button",
                    children: "Clear"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    onClick: ()=>focusFirst(),
                    "data-testid": "focus-first-button",
                    children: "Focus First"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    "data-testid": "first-input"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                    "data-testid": "second-input"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    "data-testid": "focusable-button",
                    children: "Focusable"
                })
            ]
        })
    });
};
describe("ARIA Announcements System", ()=>{
    beforeEach(()=>{
        // Clean up any existing live regions
        const existingLiveRegion = document.getElementById("lusotown-aria-live-region");
        if (existingLiveRegion) {
            existingLiveRegion.remove();
        }
    });
    describe("useAriaAnnouncements hook", ()=>{
        it("creates a live region when initialized", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            await (0, _react.waitFor)(()=>{
                const liveRegion = document.getElementById("lusotown-aria-live-region");
                expect(liveRegion).toBeInTheDocument();
                expect(liveRegion).toHaveAttribute("aria-live", "polite");
                expect(liveRegion).toHaveAttribute("aria-atomic", "true");
                expect(liveRegion).toHaveClass("sr-only");
            });
        });
        it("announces messages to screen readers", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            const announceButton = _react.screen.getByTestId("announce-button");
            await user.click(announceButton);
            await (0, _react.waitFor)(()=>{
                const liveRegion = document.getElementById("lusotown-aria-live-region");
                expect(liveRegion?.textContent).toContain("LusoBot chat assistant opened");
            });
        });
        it("handles polite announcements", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            const announceButton = _react.screen.getByTestId("announce-polite-button");
            await user.click(announceButton);
            await (0, _react.waitFor)(()=>{
                const liveRegion = document.getElementById("lusotown-aria-live-region");
                expect(liveRegion).toHaveAttribute("aria-live", "polite");
                expect(liveRegion?.textContent).toContain("LusoBot chat minimized");
            });
        });
        it("handles assertive announcements", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            const announceButton = _react.screen.getByTestId("announce-assertive-button");
            await user.click(announceButton);
            await (0, _react.waitFor)(()=>{
                const liveRegion = document.getElementById("lusotown-aria-live-region");
                expect(liveRegion).toHaveAttribute("aria-live", "assertive");
                expect(liveRegion?.textContent).toContain("App download banner appeared");
            });
        });
        it("clears announcements", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            // First make an announcement
            const announceButton = _react.screen.getByTestId("announce-button");
            await user.click(announceButton);
            await (0, _react.waitFor)(()=>{
                const liveRegion = document.getElementById("lusotown-aria-live-region");
                expect(liveRegion?.textContent).toContain("LusoBot");
            });
            // Then clear it
            const clearButton = _react.screen.getByTestId("clear-button");
            await user.click(clearButton);
            await (0, _react.waitFor)(()=>{
                const liveRegion = document.getElementById("lusotown-aria-live-region");
                expect(liveRegion?.textContent).toBe("");
            });
        });
        it("handles Portuguese language announcements", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
                language: "pt"
            }));
            const announceButton = _react.screen.getByTestId("announce-button");
            await user.click(announceButton);
            await (0, _react.waitFor)(()=>{
                const liveRegion = document.getElementById("lusotown-aria-live-region");
                expect(liveRegion?.textContent).toContain("Assistente de chat LusoBot aberto");
            });
        });
    });
    describe("Focus Management System", ()=>{
        it("manages focus correctly", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
                testFocus: true
            }));
            const focusButton = _react.screen.getByTestId("focus-first-button");
            await user.click(focusButton);
            await (0, _react.waitFor)(()=>{
                const firstInput = _react.screen.getByTestId("first-input");
                expect(firstInput).toHaveFocus();
            });
        });
        it("finds focusable elements correctly", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
                testFocus: true
            }));
            const inputs = _react.screen.getAllByRole("textbox");
            const buttons = _react.screen.getAllByRole("button");
            expect(inputs.length).toBeGreaterThan(0);
            expect(buttons.length).toBeGreaterThan(0);
        });
    });
    describe("ARIA Messages Constants", ()=>{
        it("contains all required widget messages", ()=>{
            expect(_useAriaAnnouncements.ARIA_MESSAGES.widget.opened).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.widget.closed).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.widget.minimized).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.widget.maximized).toBeDefined();
        });
        it("contains all required LusoBot messages", ()=>{
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.opened).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.closed).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.minimized).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.messageSent).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.messageReceived).toBeDefined();
        });
        it("contains all required app download messages", ()=>{
            expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.shown).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.dismissed).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.downloadStarted).toBeDefined();
        });
        it("contains all required cultural events messages", ()=>{
            expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.eventFocused).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.eventSelected).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.favoriteAdded).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.favoriteRemoved).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.reminderSet).toBeDefined();
        });
        it("contains bilingual messages", ()=>{
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.opened.en).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.opened.pt).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.shown.en).toBeDefined();
            expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.shown.pt).toBeDefined();
        });
    });
    describe("Portuguese Heritage Focus Styles", ()=>{
        it("adds Portuguese cultural focus classes", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
                testFocus: true
            }));
            // The focus styles should be added to the document head
            await (0, _react.waitFor)(()=>{
                const styleElement = document.getElementById("lusotown-focus-styles");
                expect(styleElement).toBeInTheDocument();
                expect(styleElement?.textContent).toContain("--focus-ring-color: rgb(34 197 94)");
            });
        });
        it("supports high contrast mode", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
                testFocus: true
            }));
            await (0, _react.waitFor)(()=>{
                const styleElement = document.getElementById("lusotown-focus-styles");
                expect(styleElement?.textContent).toContain("@media (prefers-contrast: high)");
                expect(styleElement?.textContent).toContain("--focus-ring-color: #000000");
            });
        });
        it("supports reduced motion", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
                testFocus: true
            }));
            await (0, _react.waitFor)(()=>{
                const styleElement = document.getElementById("lusotown-focus-styles");
                expect(styleElement?.textContent).toContain("@media (prefers-reduced-motion: reduce)");
                expect(styleElement?.textContent).toContain("transition: none !important");
            });
        });
    });
    describe("Screen Reader Compatibility", ()=>{
        it("provides proper semantic structure", async ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            const liveRegion = await (0, _react.waitFor)(()=>document.getElementById("lusotown-aria-live-region"));
            expect(liveRegion).toHaveAttribute("aria-live");
            expect(liveRegion).toHaveAttribute("aria-atomic");
            // Check that the live region is hidden from visual display but available to screen readers
            const styles = window.getComputedStyle(liveRegion);
            expect(liveRegion).toHaveClass("sr-only");
        });
        it("ensures proper timing for screen reader announcements", async ()=>{
            const user = _userevent.default.setup();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
            const announceButton = _react.screen.getByTestId("announce-button");
            // Announcement should be delayed to ensure screen readers catch it
            await user.click(announceButton);
            // Use a short delay to test timing
            setTimeout(async ()=>{
                await (0, _react.waitFor)(()=>{
                    const liveRegion = document.getElementById("lusotown-aria-live-region");
                    expect(liveRegion?.textContent).toContain("LusoBot");
                });
            }, 150);
        });
    });
    describe("Portuguese-speaking Community Context", ()=>{
        it("provides culturally appropriate announcements", ()=>{
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.opened.en).toContain("Portuguese cultural assistant");
            expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.opened.pt).toContain("Assistente cultural portugu\xeas");
            expect(_useAriaAnnouncements.ARIA_MESSAGES.palop.cardFocused.en).toContain("Portuguese-speaking nations");
            expect(_useAriaAnnouncements.ARIA_MESSAGES.palop.cardFocused.pt).toContain("na\xe7\xf5es lus\xf3fonas");
        });
        it("maintains cultural authenticity in announcements", ()=>{
            expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.shown.en).toContain("LusoTown mobile app");
            expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.shown.pt).toContain("App m\xf3vel LusoTown");
            expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.eventFocused.en).toContain("Cultural event focused");
            expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.eventFocused.pt).toContain("Evento cultural focado");
        });
    });
});
describe("Integration with LusoTown Components", ()=>{
    it("works with widget components", ()=>{
        // Test that the ARIA system integrates properly with actual LusoTown widgets
        expect(_useAriaAnnouncements.ARIA_MESSAGES.widget.opened).toBeDefined();
        expect(_useAriaAnnouncements.ARIA_MESSAGES.lusobot.opened).toBeDefined();
        expect(_useAriaAnnouncements.ARIA_MESSAGES.appDownloadBar.shown).toBeDefined();
    });
    it("supports Portuguese cultural events", ()=>{
        expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.eventFocused).toBeDefined();
        expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.favoriteAdded).toBeDefined();
        expect(_useAriaAnnouncements.ARIA_MESSAGES.culturalEvents.reminderSet).toBeDefined();
    });
    it("supports PALOP heritage components", ()=>{
        expect(_useAriaAnnouncements.ARIA_MESSAGES.palop.cardFocused).toBeDefined();
        expect(_useAriaAnnouncements.ARIA_MESSAGES.palop.ctaAvailable).toBeDefined();
    });
});

//# sourceMappingURL=data:application/json;base64,