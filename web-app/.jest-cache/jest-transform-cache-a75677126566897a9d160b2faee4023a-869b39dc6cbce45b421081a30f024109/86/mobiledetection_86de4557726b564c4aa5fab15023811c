6269c4f547b29793da7e56f512720737
/**
 * Mobile Device Detection and App Installation Detection
 * 
 * Comprehensive mobile device detection system for LusoTown's Portuguese-speaking community,
 * including app installation detection, deep link testing, and analytics tracking.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MobileDeviceDetector: function() {
        return MobileDeviceDetector;
    },
    checkAppInstallation: function() {
        return checkAppInstallation;
    },
    default: function() {
        return _default;
    },
    getAppStoreUrl: function() {
        return getAppStoreUrl;
    },
    getDeviceInfo: function() {
        return getDeviceInfo;
    },
    mobileDetector: function() {
        return mobileDetector;
    },
    shouldShowDownloadPrompt: function() {
        return shouldShowDownloadPrompt;
    },
    trackDownloadChoice: function() {
        return trackDownloadChoice;
    }
});
const _mobileapp = require("../config/mobile-app");
class MobileDeviceDetector {
    constructor(){
        this.deviceInfo = null;
        this.installationStatus = null;
    }
    static getInstance() {
        if (!MobileDeviceDetector.instance) {
            MobileDeviceDetector.instance = new MobileDeviceDetector();
        }
        return MobileDeviceDetector.instance;
    }
    /**
   * Get comprehensive device information
   */ getDeviceInfo() {
        if (typeof window === "undefined") {
            // Server-side rendering fallback
            return {
                isMobile: false,
                isTablet: false,
                isDesktop: true,
                isIOS: false,
                isAndroid: false,
                userAgent: "",
                viewport: {
                    width: 1024,
                    height: 768
                },
                touchSupport: false
            };
        }
        if (this.deviceInfo) {
            return this.deviceInfo;
        }
        const userAgent = navigator.userAgent;
        const viewport = {
            width: window.innerWidth,
            height: window.innerHeight
        };
        // Detect device types using user agent patterns
        const isIOS = this.matchesAnyPattern(userAgent, _mobileapp.DEVICE_DETECTION_CONFIG.userAgentPatterns.ios);
        const isAndroid = this.matchesAnyPattern(userAgent, _mobileapp.DEVICE_DETECTION_CONFIG.userAgentPatterns.android);
        const isMobileUA = this.matchesAnyPattern(userAgent, _mobileapp.DEVICE_DETECTION_CONFIG.userAgentPatterns.mobile);
        const isTabletUA = this.matchesAnyPattern(userAgent, _mobileapp.DEVICE_DETECTION_CONFIG.userAgentPatterns.tablet);
        // Viewport-based detection for more accuracy
        const isMobileViewport = viewport.width < _mobileapp.DEVICE_DETECTION_CONFIG.viewportBreakpoints.mobile;
        const isTabletViewport = viewport.width >= _mobileapp.DEVICE_DETECTION_CONFIG.viewportBreakpoints.mobile && viewport.width < _mobileapp.DEVICE_DETECTION_CONFIG.viewportBreakpoints.desktop;
        // Combine user agent and viewport detection
        const isMobile = (isMobileUA || isMobileViewport) && !isTabletUA;
        const isTablet = isTabletUA || isTabletViewport && !isMobileUA;
        const isDesktop = !isMobile && !isTablet;
        // Touch support detection
        const touchSupport = "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
        this.deviceInfo = {
            isMobile,
            isTablet,
            isDesktop,
            isIOS,
            isAndroid,
            userAgent,
            viewport,
            touchSupport
        };
        return this.deviceInfo;
    }
    /**
   * Check if native app is installed using deep link testing
   */ async checkAppInstallation() {
        if (typeof window === "undefined") {
            return {
                isInstalled: false,
                platform: "unknown",
                canInstallPWA: false,
                installPromptAvailable: false,
                lastChecked: Date.now()
            };
        }
        const deviceInfo = this.getDeviceInfo();
        const platform = deviceInfo.isIOS ? "ios" : deviceInfo.isAndroid ? "android" : "unknown";
        // Check if we've recently tested (cache for 5 minutes)
        if (this.installationStatus && Date.now() - this.installationStatus.lastChecked < 300000) {
            return this.installationStatus;
        }
        let isInstalled = false;
        try {
            // Test deep link support
            if (platform === "ios") {
                isInstalled = await this.testIOSDeepLink();
            } else if (platform === "android") {
                isInstalled = await this.testAndroidDeepLink();
            }
        } catch (error) {
            console.log("Deep link test failed:", error);
            isInstalled = false;
        }
        // Check PWA installation capability
        const canInstallPWA = this.canInstallPWA();
        const installPromptAvailable = window.deferredPrompt !== undefined;
        this.installationStatus = {
            isInstalled,
            platform,
            canInstallPWA,
            installPromptAvailable,
            lastChecked: Date.now()
        };
        return this.installationStatus;
    }
    /**
   * Test iOS deep link support
   */ async testIOSDeepLink() {
        return new Promise((resolve)=>{
            const timeout = setTimeout(()=>resolve(false), 2000);
            const deepLinkUrl = `${_mobileapp.MOBILE_APP_CONFIG.deepLink.scheme}://open?utm_source=web_app_detection`;
            // Try to open the deep link
            window.location.href = deepLinkUrl;
            // If we can navigate back quickly, the app likely isn't installed
            const startTime = Date.now();
            const checkFocus = ()=>{
                if (Date.now() - startTime > 1500) {
                    clearTimeout(timeout);
                    resolve(true); // App likely opened
                } else {
                    setTimeout(checkFocus, 500);
                }
            };
            document.addEventListener("visibilitychange", ()=>{
                if (document.hidden) {
                    clearTimeout(timeout);
                    resolve(true); // App opened, page became hidden
                }
            });
            checkFocus();
        });
    }
    /**
   * Test Android deep link support
   */ async testAndroidDeepLink() {
        return new Promise((resolve)=>{
            const timeout = setTimeout(()=>resolve(false), 2000);
            const intentUrl = `intent://${_mobileapp.MOBILE_APP_CONFIG.deepLink.scheme}://open#Intent;scheme=${_mobileapp.MOBILE_APP_CONFIG.deepLink.scheme};package=${_mobileapp.MOBILE_APP_CONFIG.stores.android.id};end`;
            try {
                window.location.href = intentUrl;
                // Android intent URLs will fail if app isn't installed
                setTimeout(()=>{
                    clearTimeout(timeout);
                    resolve(true);
                }, 1000);
            } catch (error) {
                clearTimeout(timeout);
                resolve(false);
            }
        });
    }
    /**
   * Check if PWA can be installed
   */ canInstallPWA() {
        if (typeof window === "undefined") return false;
        // Check for beforeinstallprompt event support
        if ("serviceWorker" in navigator && window.beforeinstallprompt !== undefined) {
            return true;
        }
        // Check for iOS Safari PWA support
        const deviceInfo = this.getDeviceInfo();
        if (deviceInfo.isIOS && "standalone" in navigator) {
            return true;
        }
        return false;
    }
    /**
   * Track user's choice for app download
   */ trackDownloadChoice(choice, platform) {
        const deviceInfo = this.getDeviceInfo();
        // Store choice in localStorage for returning user logic
        const choiceData = {
            choice,
            platform: platform || (deviceInfo.isIOS ? "ios" : deviceInfo.isAndroid ? "android" : "web"),
            timestamp: Date.now(),
            userAgent: deviceInfo.userAgent,
            viewport: deviceInfo.viewport
        };
        try {
            localStorage.setItem("lusotown_app_choice", JSON.stringify(choiceData));
            // Send analytics event (if analytics is configured)
            this.sendAnalyticsEvent("app_download_choice", choiceData);
        } catch (error) {
            console.warn("Could not store app choice:", error);
        }
    }
    /**
   * Check if user has previously made a download choice
   */ getPreviousDownloadChoice() {
        try {
            const stored = localStorage.getItem("lusotown_app_choice");
            if (stored) {
                const choice = JSON.parse(stored);
                // Check if choice is less than 7 days old
                if (Date.now() - choice.timestamp < 7 * 24 * 60 * 60 * 1000) {
                    return choice;
                }
            }
        } catch (error) {
            console.warn("Could not retrieve app choice:", error);
        }
        return null;
    }
    /**
   * Should show app download prompt
   */ shouldShowDownloadPrompt() {
        const deviceInfo = this.getDeviceInfo();
        const previousChoice = this.getPreviousDownloadChoice();
        // Don't show on desktop
        if (deviceInfo.isDesktop) return false;
        // Don't show if user recently declined
        if (previousChoice && previousChoice.choice === "continue_web") {
            return false;
        }
        // Don't show if user recently downloaded
        if (previousChoice && previousChoice.choice === "download_app") {
            return false;
        }
        return true;
    }
    /**
   * Get appropriate app store URL for the device
   */ getAppStoreUrl() {
        const deviceInfo = this.getDeviceInfo();
        if (deviceInfo.isIOS) {
            return _mobileapp.MOBILE_APP_CONFIG.stores.ios.url;
        } else if (deviceInfo.isAndroid) {
            return _mobileapp.MOBILE_APP_CONFIG.stores.android.url;
        }
        // Default to Play Store for unknown mobile devices
        return _mobileapp.MOBILE_APP_CONFIG.stores.android.url;
    }
    /**
   * Get appropriate app store scheme URL for native opening
   */ getAppStoreSchemeUrl() {
        const deviceInfo = this.getDeviceInfo();
        if (deviceInfo.isIOS) {
            return _mobileapp.MOBILE_APP_CONFIG.stores.ios.scheme;
        } else if (deviceInfo.isAndroid) {
            return _mobileapp.MOBILE_APP_CONFIG.stores.android.scheme;
        }
        return _mobileapp.MOBILE_APP_CONFIG.stores.android.scheme;
    }
    /**
   * Send analytics event for mobile app interactions
   */ sendAnalyticsEvent(eventName, data) {
        // Placeholder for analytics implementation
        // This would integrate with your analytics service (Google Analytics, Mixpanel, etc.)
        if (typeof window !== "undefined" && window.gtag) {
            window.gtag("event", eventName, {
                event_category: "mobile_app",
                event_label: "portuguese_community",
                custom_parameters: data
            });
        }
        console.log(`Analytics: ${eventName}`, data);
    }
    /**
   * Helper method to test user agent patterns
   */ matchesAnyPattern(userAgent, patterns) {
        return patterns.some((pattern)=>pattern.test(userAgent));
    }
    /**
   * Reset cached data (useful for testing)
   */ resetCache() {
        this.deviceInfo = null;
        this.installationStatus = null;
    }
}
const mobileDetector = MobileDeviceDetector.getInstance();
const getDeviceInfo = ()=>{
    return mobileDetector.getDeviceInfo();
};
const checkAppInstallation = async ()=>{
    return await mobileDetector.checkAppInstallation();
};
const shouldShowDownloadPrompt = ()=>{
    return mobileDetector.shouldShowDownloadPrompt();
};
const getAppStoreUrl = ()=>{
    return mobileDetector.getAppStoreUrl();
};
const trackDownloadChoice = (choice, platform)=>{
    return mobileDetector.trackDownloadChoice(choice, platform);
};
const _default = MobileDeviceDetector;

//# sourceMappingURL=data:application/json;base64,