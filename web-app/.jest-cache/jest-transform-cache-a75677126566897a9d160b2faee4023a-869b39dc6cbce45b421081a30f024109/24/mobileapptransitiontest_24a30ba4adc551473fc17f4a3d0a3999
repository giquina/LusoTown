59120d473263de69df1dd16b40848a70
/**
 * Mobile App Transition Tests
 * 
 * Tests for Phase 1 implementation of mobile app transition strategy,
 * including device detection, app download prompts, and PWA functionality
 * for the Portuguese-speaking community.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _globals = require("@jest/globals");
const _mobiledetection = require("../src/lib/mobile-detection");
const _MobileRedirectProvider = /*#__PURE__*/ _interop_require_wildcard(require("../src/components/MobileRedirectProvider"));
const _AppDownloadLanding = /*#__PURE__*/ _interop_require_default(require("../src/components/AppDownloadLanding"));
const _LanguageContext = require("../src/context/LanguageContext");
const _mobileapp = require("../src/config/mobile-app");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock Next.js dynamic imports
_globals.jest.mock("next/dynamic", ()=>(fn)=>fn());
// Mock user agent for different devices
const mockUserAgent = (userAgent)=>{
    Object.defineProperty(navigator, "userAgent", {
        value: userAgent,
        configurable: true
    });
};
// Mock localStorage
const mockLocalStorage = ()=>{
    const storage = {};
    return {
        getItem: (key)=>storage[key] || null,
        setItem: (key, value)=>{
            storage[key] = value;
        },
        removeItem: (key)=>{
            delete storage[key];
        },
        clear: ()=>{
            Object.keys(storage).forEach((key)=>delete storage[key]);
        }
    };
};
Object.defineProperty(window, "localStorage", {
    value: mockLocalStorage()
});
// Mock window properties
Object.defineProperty(window, "innerWidth", {
    value: 375,
    configurable: true
});
Object.defineProperty(window, "innerHeight", {
    value: 667,
    configurable: true
});
// Test component for using mobile redirect context
function TestComponent() {
    const { deviceInfo, showDownloadPrompt, showLandingPage, triggerAppDownload, dismissPrompt } = (0, _MobileRedirectProvider.useMobileRedirect)();
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "device-type",
                children: deviceInfo?.isMobile ? "mobile" : deviceInfo?.isTablet ? "tablet" : "desktop"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "show-prompt",
                children: showDownloadPrompt ? "true" : "false"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "show-landing",
                children: showLandingPage ? "true" : "false"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: ()=>triggerAppDownload(),
                "data-testid": "download-btn",
                children: "Download App"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: dismissPrompt,
                "data-testid": "dismiss-btn",
                children: "Dismiss"
            })
        ]
    });
}
describe("MobileDeviceDetector", ()=>{
    let detector;
    beforeEach(()=>{
        detector = _mobiledetection.MobileDeviceDetector.getInstance();
        detector.resetCache();
    });
    afterEach(()=>{
        _globals.jest.clearAllMocks();
    });
    describe("Device Detection", ()=>{
        test("detects iOS mobile devices", ()=>{
            mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15");
            const deviceInfo = detector.getDeviceInfo();
            expect(deviceInfo.isMobile).toBe(true);
            expect(deviceInfo.isIOS).toBe(true);
            expect(deviceInfo.isAndroid).toBe(false);
            expect(deviceInfo.isDesktop).toBe(false);
        });
        test("detects Android mobile devices", ()=>{
            mockUserAgent("Mozilla/5.0 (Linux; Android 11; SM-G991B) AppleWebKit/537.36");
            const deviceInfo = detector.getDeviceInfo();
            expect(deviceInfo.isMobile).toBe(true);
            expect(deviceInfo.isAndroid).toBe(true);
            expect(deviceInfo.isIOS).toBe(false);
            expect(deviceInfo.isDesktop).toBe(false);
        });
        test("detects desktop devices", ()=>{
            mockUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            Object.defineProperty(window, "innerWidth", {
                value: 1024
            });
            const deviceInfo = detector.getDeviceInfo();
            expect(deviceInfo.isDesktop).toBe(true);
            expect(deviceInfo.isMobile).toBe(false);
            expect(deviceInfo.isTablet).toBe(false);
        });
        test("detects tablet devices", ()=>{
            mockUserAgent("Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X) AppleWebKit/605.1.15");
            Object.defineProperty(window, "innerWidth", {
                value: 768
            });
            const deviceInfo = detector.getDeviceInfo();
            expect(deviceInfo.isTablet).toBe(true);
            expect(deviceInfo.isMobile).toBe(false);
            expect(deviceInfo.isDesktop).toBe(false);
        });
    });
    describe("App Store URLs", ()=>{
        test("returns iOS App Store URL for iOS devices", ()=>{
            mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)");
            const url = detector.getAppStoreUrl();
            expect(url).toBe(_mobileapp.MOBILE_APP_CONFIG.stores.ios.url);
        });
        test("returns Google Play Store URL for Android devices", ()=>{
            mockUserAgent("Mozilla/5.0 (Linux; Android 11; SM-G991B)");
            const url = detector.getAppStoreUrl();
            expect(url).toBe(_mobileapp.MOBILE_APP_CONFIG.stores.android.url);
        });
    });
    describe("Download Choice Tracking", ()=>{
        test("tracks user download choice", ()=>{
            mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)");
            detector.trackDownloadChoice("download_app", "ios");
            const choice = detector.getPreviousDownloadChoice();
            expect(choice).toBeTruthy();
            expect(choice?.choice).toBe("download_app");
            expect(choice?.platform).toBe("ios");
        });
        test("respects user choice to continue with web", ()=>{
            detector.trackDownloadChoice("continue_web");
            const shouldShow = detector.shouldShowDownloadPrompt();
            expect(shouldShow).toBe(false);
        });
        test("does not show prompt on desktop", ()=>{
            mockUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64)");
            Object.defineProperty(window, "innerWidth", {
                value: 1024
            });
            const shouldShow = detector.shouldShowDownloadPrompt();
            expect(shouldShow).toBe(false);
        });
    });
});
describe("MobileRedirectProvider", ()=>{
    const renderWithLanguageProvider = (component)=>{
        return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MobileRedirectProvider.default, {
                children: component
            })
        }));
    };
    beforeEach(()=>{
        mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)");
        Object.defineProperty(window, "innerWidth", {
            value: 375
        });
        localStorage.clear();
    });
    test("provides mobile redirect context", async ()=>{
        renderWithLanguageProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByTestId("device-type")).toHaveTextContent("mobile");
        });
    });
    test("tracks download attempts", async ()=>{
        const mockOpen = _globals.jest.spyOn(window, "open").mockImplementation(()=>null);
        renderWithLanguageProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        await (0, _react.waitFor)(()=>{
            _react.fireEvent.click(_react.screen.getByTestId("download-btn"));
        });
        expect(mockOpen).toHaveBeenCalledWith(_mobileapp.MOBILE_APP_CONFIG.stores.ios.url, "_blank");
        mockOpen.mockRestore();
    });
    test("dismisses prompts correctly", async ()=>{
        renderWithLanguageProvider(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        await (0, _react.waitFor)(()=>{
            _react.fireEvent.click(_react.screen.getByTestId("dismiss-btn"));
        });
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByTestId("show-prompt")).toHaveTextContent("false");
            expect(_react.screen.getByTestId("show-landing")).toHaveTextContent("false");
        });
    });
});
describe("MobileDownloadPrompt", ()=>{
    const renderPrompt = (forceShow = true)=>{
        return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MobileRedirectProvider.default, {
                forceShow: forceShow,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MobileRedirectProvider.MobileDownloadPrompt, {})
            })
        }));
    };
    beforeEach(()=>{
        mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)");
        Object.defineProperty(window, "innerWidth", {
            value: 375
        });
    });
    test("renders download prompt for mobile users", async ()=>{
        renderPrompt();
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Get the LusoTown App")).toBeInTheDocument();
            expect(_react.screen.getByText("Better experience for Portuguese community")).toBeInTheDocument();
        });
    });
    test("shows appropriate download button", async ()=>{
        renderPrompt();
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Get App")).toBeInTheDocument();
        });
    });
    test("includes dismiss option", async ()=>{
        renderPrompt();
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Not now")).toBeInTheDocument();
        });
    });
});
describe("AppDownloadLanding", ()=>{
    const renderLanding = ()=>{
        return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MobileRedirectProvider.default, {
                forceShow: true,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppDownloadLanding.default, {})
            })
        }));
    };
    beforeEach(()=>{
        mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)");
        Object.defineProperty(window, "innerWidth", {
            value: 375
        });
    });
    test("renders full landing page content", async ()=>{
        renderLanding();
        await (0, _react.waitFor)(()=>{
            // Check hero content
            expect(_react.screen.getByText(/Get the LusoTown App/)).toBeInTheDocument();
            expect(_react.screen.getByText(/Join 2,750\+ Portuguese speakers/)).toBeInTheDocument();
        });
    });
    test("displays community statistics", async ()=>{
        renderLanding();
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("2,750+")).toBeInTheDocument();
            expect(_react.screen.getByText("Portuguese Speakers")).toBeInTheDocument();
            expect(_react.screen.getByText("450+")).toBeInTheDocument();
            expect(_react.screen.getByText("Cultural Events")).toBeInTheDocument();
        });
    });
    test("shows Portuguese cultural elements", async ()=>{
        renderLanding();
        await (0, _react.waitFor)(()=>{
            // Check for Portuguese cultural flags/emojis in the background
            const culturalElements = document.querySelectorAll('[style*="\uD83C\uDDF5\uD83C\uDDF9"], [style*="\uD83C\uDDE7\uD83C\uDDF7"]');
            expect(culturalElements.length).toBeGreaterThan(0);
        });
    });
    test("includes app store download buttons", async ()=>{
        renderLanding();
        await (0, _react.waitFor)(()=>{
            // Should show iOS App Store button for iPhone
            expect(_react.screen.getByText("App Store")).toBeInTheDocument();
        });
    });
    test("displays testimonials from Portuguese community", async ()=>{
        renderLanding();
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("What Our Community Says")).toBeInTheDocument();
            // Should have testimonial content
            const testimonials = _react.screen.getByText(/Manchester|London|Edinburgh/);
            expect(testimonials).toBeInTheDocument();
        });
    });
    test("shows trust signals", async ()=>{
        renderLanding();
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Trusted by the Portuguese Community")).toBeInTheDocument();
            expect(_react.screen.getByText("8 University Partnerships")).toBeInTheDocument();
            expect(_react.screen.getByText("180+ Portuguese Business Partners")).toBeInTheDocument();
        });
    });
});
describe("Portuguese Language Support", ()=>{
    const renderWithPortuguese = ()=>{
        return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
            defaultLanguage: "pt",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_MobileRedirectProvider.default, {
                forceShow: true,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppDownloadLanding.default, {})
            })
        }));
    };
    test("displays Portuguese text when language is set to Portuguese", async ()=>{
        renderWithPortuguese();
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText(/Baixe o App LusoTown/)).toBeInTheDocument();
            expect(_react.screen.getByText(/Falantes de Português/)).toBeInTheDocument();
        });
    });
});
describe("Mobile App Configuration", ()=>{
    test("has correct app store URLs", ()=>{
        expect(_mobileapp.MOBILE_APP_CONFIG.stores.ios.url).toBe("https://apps.apple.com/app/lusotown/id123456789");
        expect(_mobileapp.MOBILE_APP_CONFIG.stores.android.url).toBe("https://play.google.com/store/apps/details?id=com.lusotown.android");
    });
    test("includes Portuguese cultural features", ()=>{
        expect(_mobileapp.MOBILE_APP_CONFIG.features).toHaveLength(6);
        const eventsFeature = _mobileapp.MOBILE_APP_CONFIG.features.find((f)=>f.id === "events_discovery");
        expect(eventsFeature).toBeDefined();
        expect(eventsFeature?.title.en).toBe("Discover Portuguese Events");
        expect(eventsFeature?.title.pt).toBe("Descubra Eventos Portugueses");
    });
    test("includes community statistics", ()=>{
        expect(_mobileapp.MOBILE_APP_CONFIG.stats.totalMembers).toBe(2750);
        expect(_mobileapp.MOBILE_APP_CONFIG.stats.portugueseEvents).toBe(450);
        expect(_mobileapp.MOBILE_APP_CONFIG.stats.universityPartners).toBe(8);
    });
    test("has A/B testing configuration", ()=>{
        expect(_mobileapp.MOBILE_APP_CONFIG.testing.enabled).toBe(true);
        expect(_mobileapp.MOBILE_APP_CONFIG.testing.variants).toHaveLength(2);
    });
});
describe("Integration Tests", ()=>{
    test("full mobile app transition flow", async ()=>{
        // Mock iPhone user agent
        mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)");
        // Start with no previous choice
        localStorage.clear();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_MobileRedirectProvider.default, {
                forceShow: true,
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_MobileRedirectProvider.MobileDownloadPrompt, {}),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_AppDownloadLanding.default, {})
                ]
            })
        }));
        // Should detect mobile device
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByTestId("device-type")).toHaveTextContent("mobile");
        });
        // Should show prompts for new users
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Get the LusoTown App")).toBeInTheDocument();
        });
    });
});
// Mock analytics tracking
describe("Analytics Tracking", ()=>{
    beforeEach(()=>{
        window.gtag = _globals.jest.fn();
    });
    test("tracks download attempts", ()=>{
        mockUserAgent("Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)");
        const detector = _mobiledetection.MobileDeviceDetector.getInstance();
        detector.trackDownloadChoice("download_app", "ios");
        // Should have stored the choice
        const choice = detector.getPreviousDownloadChoice();
        expect(choice?.choice).toBe("download_app");
        expect(choice?.platform).toBe("ios");
    });
});

//# sourceMappingURL=data:application/json;base64,