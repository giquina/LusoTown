{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/performance/platform-performance.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react';\nimport { PerformanceTester, performanceThresholds } from '../utils/performance-utils';\nimport { LanguageProvider } from '@/context/LanguageContext';\nimport { portugueseBundleOptimizer } from '@/utils/portuguese-bundle-optimizer';\n\n// Mock Next.js router\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    prefetch: jest.fn(),\n  }),\n  useSearchParams: () => ({\n    get: jest.fn(),\n  }),\n}));\n\n// Mock components for performance testing\nconst MockPortugueseComponent = () => <div data-testid=\"portuguese-content\">Portuguese Content</div>;\nconst MockEventCard = () => <div data-testid=\"event-card\">Event Card</div>;\nconst MockCulturalGallery = () => <div data-testid=\"cultural-gallery\">Cultural Gallery</div>;\n\ndescribe('Platform Performance Tests', () => {\n  let performanceTester: PerformanceTester;\n\n  beforeEach(() => {\n    performanceTester = new PerformanceTester();\n    // Reset any global state\n    document.documentElement.className = '';\n  });\n\n  afterEach(() => {\n    performanceTester = null as any;\n  });\n\n  describe('Component Rendering Performance', () => {\n    test('Portuguese content components render within performance thresholds', () => {\n      performanceTester.startTiming();\n\n      const component = () => {\n        render(\n          <LanguageProvider>\n            <MockPortugueseComponent />\n            <MockEventCard />\n            <MockCulturalGallery />\n          </LanguageProvider>\n        );\n      };\n\n      const renderTime = performanceTester.measureRenderTime(component);\n      expect(renderTime).toBeLessThan(performanceThresholds.renderTime.acceptable);\n\n      // Verify content is rendered\n      expect(screen.getByTestId('portuguese-content')).toBeInTheDocument();\n      expect(screen.getByTestId('event-card')).toBeInTheDocument();\n      expect(screen.getByTestId('cultural-gallery')).toBeInTheDocument();\n    });\n\n    test('Large component trees maintain good performance', () => {\n      const startTime = performance.now();\n\n      // Simulate rendering multiple Portuguese components\n      const components = Array.from({ length: 50 }, (_, i) => (\n        <div key={i} data-testid={`portuguese-item-${i}`}>\n          Portuguese Item {i}\n        </div>\n      ));\n\n      render(\n        <LanguageProvider>\n          <div>{components}</div>\n        </LanguageProvider>\n      );\n\n      const renderTime = performance.now() - startTime;\n      expect(renderTime).toBeLessThan(performanceThresholds.renderTime.poor);\n\n      // Verify all components rendered\n      expect(screen.getAllByText(/Portuguese Item/)).toHaveLength(50);\n    });\n  });\n\n  describe('Bundle Optimization Performance', () => {\n    test('Portuguese bundle optimizer initializes quickly', () => {\n      const startTime = performance.now();\n      \n      // Simulate optimizer initialization\n      const stats = portugueseBundleOptimizer.getOptimizationStats();\n      \n      const initTime = performance.now() - startTime;\n      expect(initTime).toBeLessThan(100); // Should initialize in < 100ms\n\n      expect(stats).toHaveProperty('loadedBundles');\n      expect(stats).toHaveProperty('preloadedResources');\n      expect(stats).toHaveProperty('deviceContext');\n    });\n\n    test('Critical Portuguese content loading is fast', async () => {\n      const startTime = performance.now();\n      \n      // Mock Portuguese bundle loading\n      await portugueseBundleOptimizer.loadPortugueseContentBundle('critical');\n      \n      const loadTime = performance.now() - startTime;\n      expect(loadTime).toBeLessThan(performanceThresholds.loadTime.good);\n    });\n\n    test('Non-critical content loading is properly deferred', async () => {\n      const startTime = performance.now();\n      \n      // Test that low priority content doesn't block critical loading\n      const criticalPromise = portugueseBundleOptimizer.loadPortugueseContentBundle('critical');\n      const lowPriorityPromise = portugueseBundleOptimizer.loadPortugueseContentBundle('low');\n      \n      // Critical should complete first\n      await criticalPromise;\n      const criticalTime = performance.now() - startTime;\n      \n      await lowPriorityPromise;\n      const totalTime = performance.now() - startTime;\n      \n      expect(criticalTime).toBeLessThan(performanceThresholds.loadTime.good);\n      expect(totalTime).toBeGreaterThan(criticalTime); // Low priority takes longer\n    });\n  });\n\n  describe('Mobile Performance Optimization', () => {\n    beforeEach(() => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      });\n      \n      // Mock mobile connection\n      Object.defineProperty(navigator, 'connection', {\n        writable: true,\n        configurable: true,\n        value: {\n          effectiveType: '3g',\n          saveData: false,\n        },\n      });\n    });\n\n    test('Mobile optimizations apply within performance budget', () => {\n      const startTime = performance.now();\n      \n      portugueseBundleOptimizer.optimizeForMobile();\n      \n      const optimizationTime = performance.now() - startTime;\n      expect(optimizationTime).toBeLessThan(50); // Should be very fast\n      \n      // Check mobile optimizations were applied\n      const stats = portugueseBundleOptimizer.getOptimizationStats();\n      expect(stats.optimizationsApplied).toContain('mobile-optimized');\n    });\n\n    test('Touch targets meet minimum size requirements', () => {\n      render(\n        <div>\n          <button data-testid=\"touch-button\">Portuguese Button</button>\n          <a href=\"#\" role=\"button\" data-testid=\"touch-link\">Portuguese Link</a>\n        </div>\n      );\n\n      portugueseBundleOptimizer.optimizeForMobile();\n\n      const button = screen.getByTestId('touch-button');\n      const link = screen.getByTestId('touch-link');\n\n      // Check computed styles would have minimum dimensions\n      // (In real environment, this would check actual computed styles)\n      expect(button).toBeInTheDocument();\n      expect(link).toBeInTheDocument();\n    });\n  });\n\n  describe('Portuguese Content Loading Performance', () => {\n    test('Portuguese text rendering is optimized', () => {\n      const portugueseText = 'Bem-vindos � comunidade portuguesa do Reino Unido! Aqui voc� encontrar� eventos culturais aut�nticos.';\n      \n      const startTime = performance.now();\n      \n      render(\n        <LanguageProvider>\n          <div>\n            <h1>{portugueseText}</h1>\n            <p>Comunidade \" Cultura \" Tradi��o</p>\n            <span>S�o Jo�o \" Fado \" Bacalhau</span>\n          </div>\n        </LanguageProvider>\n      );\n      \n      const renderTime = performance.now() - startTime;\n      expect(renderTime).toBeLessThan(performanceThresholds.renderTime.good);\n\n      // Verify Portuguese content is rendered\n      expect(screen.getByText(portugueseText)).toBeInTheDocument();\n      expect(screen.getByText('Comunidade \" Cultura \" Tradi��o')).toBeInTheDocument();\n    });\n\n    test('Cultural categories load with appropriate priorities', async () => {\n      const categories = ['events', 'cultural', 'business', 'community', 'heritage'];\n      const loadTimes: Record<string, number> = {};\n\n      for (const category of categories) {\n        const startTime = performance.now();\n        \n        // Simulate loading content for each category\n        await new Promise(resolve => setTimeout(resolve, Math.random() * 10));\n        \n        loadTimes[category] = performance.now() - startTime;\n      }\n\n      // All categories should load within acceptable time\n      Object.values(loadTimes).forEach(time => {\n        expect(time).toBeLessThan(50); // Very fast mock loading\n      });\n\n      // Verify all categories processed\n      expect(Object.keys(loadTimes)).toHaveLength(5);\n    });\n  });\n\n  describe('Memory Performance', () => {\n    test('Component cleanup prevents memory leaks', () => {\n      const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;\n      \n      // Render and unmount many components\n      for (let i = 0; i < 100; i++) {\n        const { unmount } = render(\n          <LanguageProvider>\n            <MockPortugueseComponent />\n          </LanguageProvider>\n        );\n        unmount();\n      }\n\n      const finalMemory = (performance as any).memory?.usedJSHeapSize || 0;\n      const memoryIncrease = finalMemory - initialMemory;\n\n      // Memory increase should be reasonable (less than 5MB)\n      expect(memoryIncrease).toBeLessThan(5 * 1024 * 1024);\n    });\n\n    test('Large Portuguese content sets handle memory efficiently', () => {\n      const largeDataSet = Array.from({ length: 1000 }, (_, i) => ({\n        id: i,\n        title: `Evento Portugu�s ${i}`,\n        description: 'Descri��o do evento cultural portugu�s na comunidade',\n        category: 'cultural',\n      }));\n\n      const startTime = performance.now();\n      const initialMemory = (performance as any).memory?.usedJSHeapSize || 0;\n\n      render(\n        <LanguageProvider>\n          <div>\n            {largeDataSet.slice(0, 50).map(item => (\n              <div key={item.id} data-testid={`event-${item.id}`}>\n                <h3>{item.title}</h3>\n                <p>{item.description}</p>\n              </div>\n            ))}\n          </div>\n        </LanguageProvider>\n      );\n\n      const renderTime = performance.now() - startTime;\n      const finalMemory = (performance as any).memory?.usedJSHeapSize || 0;\n\n      expect(renderTime).toBeLessThan(performanceThresholds.renderTime.acceptable);\n      expect(finalMemory - initialMemory).toBeLessThan(2 * 1024 * 1024); // Less than 2MB\n      \n      // Verify content rendered\n      expect(screen.getByTestId('event-0')).toBeInTheDocument();\n      expect(screen.getByTestId('event-49')).toBeInTheDocument();\n    });\n  });\n\n  describe('Network-Aware Performance', () => {\n    test('Slow connection triggers appropriate optimizations', () => {\n      // Mock slow connection\n      Object.defineProperty(navigator, 'connection', {\n        writable: true,\n        configurable: true,\n        value: {\n          effectiveType: '2g',\n          saveData: true,\n        },\n      });\n\n      const startTime = performance.now();\n      portugueseBundleOptimizer.optimizeForMobile();\n      const optimizationTime = performance.now() - startTime;\n\n      expect(optimizationTime).toBeLessThan(100);\n\n      const stats = portugueseBundleOptimizer.getOptimizationStats();\n      expect(stats.optimizationsApplied).toContain('data-saver');\n    });\n\n    test('Fast connection allows full feature loading', () => {\n      // Mock fast connection\n      Object.defineProperty(navigator, 'connection', {\n        writable: true,\n        configurable: true,\n        value: {\n          effectiveType: '4g',\n          saveData: false,\n        },\n      });\n\n      const stats = portugueseBundleOptimizer.getOptimizationStats();\n      \n      // Fast connections should not have data-saver optimizations\n      expect(stats.optimizationsApplied).not.toContain('data-saver');\n    });\n  });\n\n  describe('Performance Metrics Collection', () => {\n    test('Performance metrics are collected efficiently', () => {\n      const metrics = performanceTester.getMetrics();\n      \n      expect(metrics).toHaveProperty('loadTime');\n      expect(metrics).toHaveProperty('renderTime');\n      expect(metrics).toHaveProperty('interactionTime');\n      expect(metrics).toHaveProperty('memoryUsage');\n      expect(metrics).toHaveProperty('networkRequests');\n      expect(metrics).toHaveProperty('cacheHitRate');\n      \n      // All metrics should be numbers\n      Object.values(metrics).forEach(value => {\n        expect(typeof value).toBe('number');\n      });\n    });\n\n    test('Performance thresholds are within acceptable ranges', () => {\n      expect(performanceThresholds.loadTime.excellent).toBeLessThan(performanceThresholds.loadTime.good);\n      expect(performanceThresholds.loadTime.good).toBeLessThan(performanceThresholds.loadTime.acceptable);\n      expect(performanceThresholds.loadTime.acceptable).toBeLessThan(performanceThresholds.loadTime.poor);\n      \n      expect(performanceThresholds.renderTime.excellent).toBeLessThan(performanceThresholds.renderTime.good);\n      expect(performanceThresholds.renderTime.good).toBeLessThan(performanceThresholds.renderTime.acceptable);\n      \n      // Mobile thresholds should be reasonable\n      expect(performanceThresholds.mobile.touchResponseTime.excellent).toBeLessThan(50);\n    });\n  });\n});\n\ndescribe('Portuguese-Specific Performance Tests', () => {\n  test('Portuguese diacritics render without performance penalty', () => {\n    const textWithDiacritics = [\n      'A��o', 'Cora��o', 'Jo�o', 'S�o Paulo', 'Tradi��o',\n      'Informa��o', 'Organiza��o', 'Na��o', 'Educa��o', 'Constru��o'\n    ];\n\n    const startTime = performance.now();\n\n    render(\n      <LanguageProvider>\n        <div>\n          {textWithDiacritics.map((text, i) => (\n            <span key={i} data-testid={`diacritic-${i}`}>{text}</span>\n          ))}\n        </div>\n      </LanguageProvider>\n    );\n\n    const renderTime = performance.now() - startTime;\n    expect(renderTime).toBeLessThan(performanceThresholds.renderTime.good);\n\n    // Verify all diacritics rendered correctly\n    textWithDiacritics.forEach((text, i) => {\n      expect(screen.getByTestId(`diacritic-${i}`)).toHaveTextContent(text);\n    });\n  });\n\n  test('Portuguese flag colors render efficiently', () => {\n    const portugalColors = ['#006600', '#FF0000', '#FFD700']; // Green, Red, Gold\n\n    const startTime = performance.now();\n\n    render(\n      <div>\n        {portugalColors.map((color, i) => (\n          <div\n            key={i}\n            data-testid={`color-${i}`}\n            style={{ backgroundColor: color, width: 100, height: 50 }}\n          >\n            Portuguese Color {i + 1}\n          </div>\n        ))}\n      </div>\n    );\n\n    const renderTime = performance.now() - startTime;\n    expect(renderTime).toBeLessThan(performanceThresholds.renderTime.good);\n\n    // Verify all colors rendered\n    portugalColors.forEach((_, i) => {\n      expect(screen.getByTestId(`color-${i}`)).toBeInTheDocument();\n    });\n  });\n});"],"names":["jest","mock","useRouter","push","fn","prefetch","useSearchParams","get","MockPortugueseComponent","div","data-testid","MockEventCard","MockCulturalGallery","describe","performanceTester","beforeEach","PerformanceTester","document","documentElement","className","afterEach","test","startTiming","component","render","LanguageProvider","renderTime","measureRenderTime","expect","toBeLessThan","performanceThresholds","acceptable","screen","getByTestId","toBeInTheDocument","startTime","performance","now","components","Array","from","length","_","i","poor","getAllByText","toHaveLength","stats","portugueseBundleOptimizer","getOptimizationStats","initTime","toHaveProperty","loadPortugueseContentBundle","loadTime","good","criticalPromise","lowPriorityPromise","criticalTime","totalTime","toBeGreaterThan","Object","defineProperty","window","writable","configurable","value","navigator","effectiveType","saveData","optimizeForMobile","optimizationTime","optimizationsApplied","toContain","button","a","href","role","link","portugueseText","h1","p","span","getByText","categories","loadTimes","category","Promise","resolve","setTimeout","Math","random","values","forEach","time","keys","initialMemory","memory","usedJSHeapSize","unmount","finalMemory","memoryIncrease","largeDataSet","id","title","description","slice","map","item","h3","not","metrics","getMetrics","toBe","excellent","mobile","touchResponseTime","textWithDiacritics","text","toHaveTextContent","portugalColors","color","style","backgroundColor","width","height"],"mappings":"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"}