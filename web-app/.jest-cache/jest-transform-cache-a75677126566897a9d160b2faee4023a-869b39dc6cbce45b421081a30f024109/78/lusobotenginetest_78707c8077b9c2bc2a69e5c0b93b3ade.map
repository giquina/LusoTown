{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/lusobot/lusobot-engine.test.ts"],"sourcesContent":["/**\n * LusoBot AI Engine Production Tests\n * \n * Comprehensive test suite for the Portuguese cultural AI assistant\n * focusing on production readiness, bilingual support, and cultural accuracy.\n */\n\nimport { \n  LusoBotEngine, \n  SaudadeEngine, \n  LusoBotSession,\n  PORTUGUESE_CULTURAL_KNOWLEDGE,\n  type LusoBotMessage,\n  type MessageMetadata,\n  type EmotionalTone,\n  type CulturalContext\n} from '@/lib/lusobot-engine'\n\ndescribe('LusoBot Engine Production Tests', () => {\n  \n  // Test Data Setup\n  const mockUserContext: MessageMetadata = {\n    userRegion: 'diaspora_uk',\n    communityLevel: 'active',\n    languageProficiency: 'native',\n    interests: ['culture', 'food', 'community'],\n    mood: 'curious'\n  }\n\n  describe('Portuguese Cultural Knowledge Base', () => {\n    test('should have comprehensive Portuguese cultural data', () => {\n      expect(PORTUGUESE_CULTURAL_KNOWLEDGE).toBeDefined()\n      expect(PORTUGUESE_CULTURAL_KNOWLEDGE.regions).toBeDefined()\n      expect(PORTUGUESE_CULTURAL_KNOWLEDGE.cuisine).toBeDefined()\n      expect(PORTUGUESE_CULTURAL_KNOWLEDGE.music.fado).toBeDefined()\n      expect(PORTUGUESE_CULTURAL_KNOWLEDGE.language.saudade).toBeDefined()\n    })\n\n    test('should include all Portuguese regions', () => {\n      const regions = PORTUGUESE_CULTURAL_KNOWLEDGE.regions\n      expect(regions.north).toBeDefined()\n      expect(regions.center).toBeDefined()\n      expect(regions.south).toBeDefined()\n      expect(regions.lisbon).toBeDefined()\n      expect(regions.azores).toBeDefined()\n      expect(regions.madeira).toBeDefined()\n    })\n\n    test('should have authentic Portuguese cultural content', () => {\n      // Test cuisine knowledge\n      const cuisine = PORTUGUESE_CULTURAL_KNOWLEDGE.cuisine\n      expect(cuisine.staples.bacalhau).toBeDefined()\n      expect(cuisine.traditional_dishes.francesinha).toContain('Porto')\n      \n      // Test fado knowledge\n      const fado = PORTUGUESE_CULTURAL_KNOWLEDGE.music.fado\n      expect(fado.legendary_figures).toContain('Amália Rodrigues')\n      expect(fado.types).toContain('Fado de Lisboa')\n      \n      // Test saudade understanding\n      const saudade = PORTUGUESE_CULTURAL_KNOWLEDGE.language.saudade\n      expect(saudade.definition).toContain('Untranslatable')\n      expect(saudade.cultural_importance).toContain('Portuguese character')\n    })\n  })\n\n  describe('Saudade Detection Engine', () => {\n    test('should accurately detect saudade in Portuguese messages', () => {\n      const message = \"Tenho tanta saudade de casa, da minha família em Portugal\"\n      const emotionalTone = SaudadeEngine.detectSaudade(message, 'pt')\n      \n      expect(emotionalTone.saudade).toBeGreaterThan(0.5)\n      expect(emotionalTone.nostalgia).toBeGreaterThan(0)\n      expect(emotionalTone.heritage).toBeGreaterThan(0)\n    })\n\n    test('should detect saudade in English messages', () => {\n      const message = \"I really miss home, feeling quite homesick for Portugal\"\n      const emotionalTone = SaudadeEngine.detectSaudade(message, 'en')\n      \n      expect(emotionalTone.saudade).toBeGreaterThan(0.3)\n      expect(emotionalTone.nostalgia).toBeGreaterThan(0.2)\n    })\n\n    test('should detect community longing', () => {\n      const message = \"Preciso de encontrar a comunidade de falantes de português em Londres\"\n      const emotionalTone = SaudadeEngine.detectSaudade(message, 'pt')\n      \n      expect(emotionalTone.community).toBeGreaterThan(0.4)\n      expect(emotionalTone.hope).toBeGreaterThan(0.1)\n    })\n\n    test('should generate appropriate saudade responses in Portuguese', () => {\n      const highSaudade: EmotionalTone = {\n        saudade: 0.8,\n        nostalgia: 0.6,\n        hope: 0.3,\n        community: 0.5,\n        heritage: 0.7\n      }\n      \n      const response = SaudadeEngine.generateSaudadeResponse(highSaudade, 'pt')\n      expect(response).toContain('saudade')\n      expect(response).toContain('comunidade')\n      expect(response.length).toBeGreaterThan(50)\n    })\n\n    test('should generate appropriate saudade responses in English', () => {\n      const mediumNostalgia: EmotionalTone = {\n        saudade: 0.3,\n        nostalgia: 0.6,\n        hope: 0.4,\n        community: 0.3,\n        heritage: 0.5\n      }\n      \n      const response = SaudadeEngine.generateSaudadeResponse(mediumNostalgia, 'en')\n      expect(response).toContain('nostalgia')\n      expect(response).toContain('home')\n      expect(response.length).toBeGreaterThan(50)\n    })\n  })\n\n  describe('Cultural Context Identification', () => {\n    test('should identify regional references correctly', () => {\n      const message = \"Sou do Norte, da região do Minho\"\n      const culturalContext = (LusoBotEngine as any).identifyCulturalContext(message, 'pt')\n      \n      expect(culturalContext.region).toBe('north')\n      expect(culturalContext.confidence).toBeGreaterThan(0.5)\n    })\n\n    test('should identify food-related topics', () => {\n      const message = \"Where can I find good bacalhau in London?\"\n      const culturalContext = (LusoBotEngine as any).identifyCulturalContext(message, 'en')\n      \n      expect(culturalContext.topic).toBe('cuisine')\n      expect(culturalContext.expertise).toContain('portuguese_cuisine')\n      expect(culturalContext.confidence).toBeGreaterThan(0.6)\n    })\n\n    test('should identify fado music references', () => {\n      const message = \"Quero ouvir fado, conheces alguma casa de fado em Londres?\"\n      const culturalContext = (LusoBotEngine as any).identifyCulturalContext(message, 'pt')\n      \n      expect(culturalContext.topic).toBe('fado')\n      expect(culturalContext.expertise).toContain('fado_music')\n    })\n\n    test('should identify business-related queries', () => {\n      const message = \"How is Portuguese business culture different from British?\"\n      const culturalContext = (LusoBotEngine as any).identifyCulturalContext(message, 'en')\n      \n      expect(culturalContext.topic).toBe('business')\n      expect(culturalContext.expertise).toContain('business_culture')\n    })\n  })\n\n  describe('AI Response Generation', () => {\n    test('should generate contextual cuisine responses in Portuguese', async () => {\n      const message = \"Onde posso encontrar pastéis de nata em Londres?\"\n      const response = await LusoBotEngine.generateResponse(message, mockUserContext, 'pt')\n      \n      expect(response.content).toContain('pastéis de nata')\n      expect(response.content).toContain('Londres')\n      expect(response.language).toBe('pt')\n      expect(response.culturalContext?.topic).toBe('cuisine')\n      expect(response.suggestions).toBeDefined()\n      expect(response.suggestions!.length).toBeGreaterThan(0)\n    })\n\n    test('should generate contextual fado responses in English', async () => {\n      const message = \"Tell me about fado music and where to hear it\"\n      const response = await LusoBotEngine.generateResponse(message, mockUserContext, 'en')\n      \n      expect(response.content).toContain('fado')\n      expect(response.content).toContain('soul')\n      expect(response.language).toBe('en')\n      expect(response.culturalContext?.topic).toBe('fado')\n    })\n\n    test('should handle high saudade with emotional support', async () => {\n      const message = \"I miss Portugal so much, feeling very lonely here\"\n      const response = await LusoBotEngine.generateResponse(message, mockUserContext, 'en')\n      \n      expect(response.emotionalTone?.saudade).toBeGreaterThan(0.5)\n      expect(response.content).toContain('understand')\n      expect(response.content).toContain('community')\n      expect(response.suggestions).toBeDefined()\n      expect(response.suggestions?.some(s => s.type === 'community')).toBe(true)\n    })\n\n    test('should generate appropriate suggestions based on context', async () => {\n      const message = \"Quero aprender mais sobre a cultura portuguesa\"\n      const response = await LusoBotEngine.generateResponse(message, mockUserContext, 'pt')\n      \n      expect(response.suggestions).toBeDefined()\n      expect(response.suggestions!.length).toBeGreaterThan(0)\n      \n      const hasRelevantSuggestions = response.suggestions!.some(\n        s => s.type === 'event' || s.type === 'resource' || s.type === 'community'\n      )\n      expect(hasRelevantSuggestions).toBe(true)\n    })\n\n    test('should prioritize suggestions by cultural relevance', async () => {\n      const message = \"Feeling homesick, need community connection\"\n      const response = await LusoBotEngine.generateResponse(message, mockUserContext, 'en')\n      \n      expect(response.suggestions).toBeDefined()\n      \n      if (response.suggestions!.length > 1) {\n        const suggestions = response.suggestions!\n        const sortedByRelevance = [...suggestions].sort((a, b) => b.culturalRelevance - a.culturalRelevance)\n        expect(suggestions[0].culturalRelevance).toEqual(sortedByRelevance[0].culturalRelevance)\n      }\n    })\n\n    test('should maintain conversation context', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"Tell me about Portuguese festivals\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(response.id).toBeDefined()\n      expect(response.role).toBe('assistant')\n      expect(response.timestamp).toBeDefined()\n      expect(response.metadata).toEqual(mockUserContext)\n    })\n  })\n\n  describe('Bilingual Support', () => {\n    test('should maintain language consistency', async () => {\n      const ptMessage = \"Como está o tempo hoje?\"\n      const ptResponse = await LusoBotEngine.generateResponse(ptMessage, mockUserContext, 'pt')\n      expect(ptResponse.language).toBe('pt')\n      \n      const enMessage = \"How is the weather today?\"\n      const enResponse = await LusoBotEngine.generateResponse(enMessage, mockUserContext, 'en')\n      expect(enResponse.language).toBe('en')\n    })\n\n    test('should provide culturally appropriate responses in both languages', async () => {\n      const foodQueryPT = \"Receitas tradicionais portuguesas\"\n      const responsePT = await LusoBotEngine.generateResponse(foodQueryPT, mockUserContext, 'pt')\n      \n      const foodQueryEN = \"Traditional Portuguese recipes\"\n      const responseEN = await LusoBotEngine.generateResponse(foodQueryEN, mockUserContext, 'en')\n      \n      // Both should identify cuisine topic\n      expect(responsePT.culturalContext?.topic).toBe('cuisine')\n      expect(responseEN.culturalContext?.topic).toBe('cuisine')\n      \n      // Both should contain relevant cultural information\n      expect(responsePT.content.length).toBeGreaterThan(50)\n      expect(responseEN.content.length).toBeGreaterThan(50)\n    })\n  })\n\n  describe('Session Management', () => {\n    test('should initialize session with welcome message', () => {\n      const session = new LusoBotSession(mockUserContext, 'en')\n      const messages = session.getMessages()\n      \n      expect(messages.length).toBe(1)\n      expect(messages[0].role).toBe('assistant')\n      expect(messages[0].content).toContain('LusoBot')\n    })\n\n    test('should handle conversation flow correctly', async () => {\n      const session = new LusoBotSession(mockUserContext, 'pt')\n      \n      const response = await session.sendMessage(\"Olá, como estás?\")\n      const messages = session.getMessages()\n      \n      expect(messages.length).toBe(3) // Welcome + user + assistant\n      expect(messages[1].role).toBe('user')\n      expect(messages[2].role).toBe('assistant')\n      expect(response.role).toBe('assistant')\n    })\n\n    test('should maintain user context throughout session', async () => {\n      const session = new LusoBotSession(mockUserContext, 'en')\n      \n      await session.sendMessage(\"I love Portuguese food\")\n      await session.sendMessage(\"What about fado music?\")\n      \n      const messages = session.getMessages()\n      messages.forEach(message => {\n        if (message.metadata) {\n          expect(message.metadata.userRegion).toBe(mockUserContext.userRegion)\n          expect(message.metadata.communityLevel).toBe(mockUserContext.communityLevel)\n        }\n      })\n    })\n\n    test('should update user context when needed', () => {\n      const session = new LusoBotSession(mockUserContext, 'en')\n      \n      session.updateUserContext({ mood: 'homesick' })\n      \n      // Verify context update (would be tested in next message)\n      expect(true).toBe(true) // Context update is internal\n    })\n\n    test('should export conversation properly', async () => {\n      const session = new LusoBotSession(mockUserContext, 'pt')\n      await session.sendMessage(\"Teste de conversa\")\n      \n      const exported = session.exportConversation()\n      const parsed = JSON.parse(exported)\n      \n      expect(parsed.language).toBe('pt')\n      expect(parsed.userContext).toEqual(mockUserContext)\n      expect(parsed.messages).toBeDefined()\n      expect(parsed.timestamp).toBeDefined()\n    })\n  })\n\n  describe('Performance and Quality', () => {\n    test('should respond within acceptable time limits', async () => {\n      const startTime = Date.now()\n      \n      await LusoBotEngine.generateResponse(\n        \"Quick response test\",\n        mockUserContext,\n        'en'\n      )\n      \n      const responseTime = Date.now() - startTime\n      expect(responseTime).toBeLessThan(2000) // Should respond within 2 seconds\n    })\n\n    test('should handle empty or invalid messages gracefully', async () => {\n      const emptyResponse = await LusoBotEngine.generateResponse(\n        \"\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(emptyResponse.content).toBeDefined()\n      expect(emptyResponse.content.length).toBeGreaterThan(0)\n    })\n\n    test('should generate meaningful suggestions for cultural queries', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"I want to connect with Portuguese culture\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(response.suggestions).toBeDefined()\n      expect(response.suggestions!.length).toBeGreaterThan(0)\n      \n      // Check suggestion quality\n      response.suggestions!.forEach(suggestion => {\n        expect(suggestion.title).toBeDefined()\n        expect(suggestion.description).toBeDefined()\n        expect(suggestion.culturalRelevance).toBeGreaterThan(0)\n        expect(['high', 'medium', 'low']).toContain(suggestion.priority)\n      })\n    })\n\n    test('should maintain cultural authenticity in responses', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"Tell me about Portuguese traditions\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(response.culturalContext?.confidence).toBeGreaterThan(0.5)\n      expect(response.content).not.toContain('Spain') // Should not confuse with Spanish culture\n      expect(response.content).toMatch(/Portugu(al|ese)/i) // Should reference Portugal/Portuguese\n    })\n  })\n\n  describe('Error Handling', () => {\n    test('should handle invalid cultural context gracefully', async () => {\n      const invalidContext: MessageMetadata = {\n        userRegion: 'invalid_region' as any,\n        communityLevel: 'invalid_level' as any,\n        languageProficiency: 'invalid_proficiency' as any,\n        interests: [],\n        mood: 'invalid_mood' as any\n      }\n      \n      const response = await LusoBotEngine.generateResponse(\n        \"Test message\",\n        invalidContext,\n        'en'\n      )\n      \n      expect(response).toBeDefined()\n      expect(response.content.length).toBeGreaterThan(0)\n    })\n\n    test('should provide fallback responses for unrecognized topics', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"Tell me about quantum physics in Portuguese culture\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(response.content).toBeDefined()\n      expect(response.culturalContext?.topic).toBe('community') // Should fallback to community topic\n    })\n  })\n\n  describe('Cultural Sensitivity', () => {\n    test('should respect Portuguese cultural values', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"Tell me about Portuguese family values\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(response.content).toContain('family')\n      expect(response.emotionalTone?.heritage).toBeGreaterThan(0.3)\n    })\n\n    test('should handle religious topics respectfully', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"Portuguese Catholic traditions\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(response.content).toBeDefined()\n      expect(response.content).not.toContain('superstition') // Should be respectful\n    })\n\n    test('should avoid regional stereotypes', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"Tell me about people from northern Portugal\",\n        mockUserContext,\n        'en'\n      )\n      \n      expect(response.content).toBeDefined()\n      expect(response.culturalContext?.region).toBe('north')\n      // Should provide balanced, respectful information\n      expect(response.content.length).toBeGreaterThan(100)\n    })\n  })\n\n  describe('Production Readiness', () => {\n    test('should have consistent response structure', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        \"Test message\",\n        mockUserContext,\n        'en'\n      )\n      \n      // Verify all required fields\n      expect(response.id).toBeDefined()\n      expect(response.role).toBe('assistant')\n      expect(response.content).toBeDefined()\n      expect(response.timestamp).toBeInstanceOf(Date)\n      expect(response.language).toBeDefined()\n      expect(response.culturalContext).toBeDefined()\n      expect(response.emotionalTone).toBeDefined()\n      expect(response.suggestions).toBeDefined()\n      expect(response.metadata).toBeDefined()\n    })\n\n    test('should generate unique message IDs', async () => {\n      const response1 = await LusoBotEngine.generateResponse(\"Test 1\", mockUserContext, 'en')\n      const response2 = await LusoBotEngine.generateResponse(\"Test 2\", mockUserContext, 'en')\n      \n      expect(response1.id).not.toBe(response2.id)\n      expect(response1.id).toMatch(/^lusobot_\\d+_[a-z0-9]+$/)\n      expect(response2.id).toMatch(/^lusobot_\\d+_[a-z0-9]+$/)\n    })\n  })\n})"],"names":["describe","mockUserContext","userRegion","communityLevel","languageProficiency","interests","mood","test","expect","PORTUGUESE_CULTURAL_KNOWLEDGE","toBeDefined","regions","cuisine","music","fado","language","saudade","north","center","south","lisbon","azores","madeira","staples","bacalhau","traditional_dishes","francesinha","toContain","legendary_figures","types","definition","cultural_importance","message","emotionalTone","SaudadeEngine","detectSaudade","toBeGreaterThan","nostalgia","heritage","community","hope","highSaudade","response","generateSaudadeResponse","length","mediumNostalgia","culturalContext","LusoBotEngine","identifyCulturalContext","region","toBe","confidence","topic","expertise","generateResponse","content","suggestions","some","s","type","hasRelevantSuggestions","sortedByRelevance","sort","a","b","culturalRelevance","toEqual","id","role","timestamp","metadata","ptMessage","ptResponse","enMessage","enResponse","foodQueryPT","responsePT","foodQueryEN","responseEN","session","LusoBotSession","messages","getMessages","sendMessage","forEach","updateUserContext","exported","exportConversation","parsed","JSON","parse","userContext","startTime","Date","now","responseTime","toBeLessThan","emptyResponse","suggestion","title","description","priority","not","toMatch","invalidContext","toBeInstanceOf","response1","response2"],"mappings":"AAAA;;;;;CAKC;;;;+BAWM;AAEPA,SAAS,mCAAmC;IAE1C,kBAAkB;IAClB,MAAMC,kBAAmC;QACvCC,YAAY;QACZC,gBAAgB;QAChBC,qBAAqB;QACrBC,WAAW;YAAC;YAAW;YAAQ;SAAY;QAC3CC,MAAM;IACR;IAEAN,SAAS,sCAAsC;QAC7CO,KAAK,sDAAsD;YACzDC,OAAOC,4CAA6B,EAAEC,WAAW;YACjDF,OAAOC,4CAA6B,CAACE,OAAO,EAAED,WAAW;YACzDF,OAAOC,4CAA6B,CAACG,OAAO,EAAEF,WAAW;YACzDF,OAAOC,4CAA6B,CAACI,KAAK,CAACC,IAAI,EAAEJ,WAAW;YAC5DF,OAAOC,4CAA6B,CAACM,QAAQ,CAACC,OAAO,EAAEN,WAAW;QACpE;QAEAH,KAAK,yCAAyC;YAC5C,MAAMI,UAAUF,4CAA6B,CAACE,OAAO;YACrDH,OAAOG,QAAQM,KAAK,EAAEP,WAAW;YACjCF,OAAOG,QAAQO,MAAM,EAAER,WAAW;YAClCF,OAAOG,QAAQQ,KAAK,EAAET,WAAW;YACjCF,OAAOG,QAAQS,MAAM,EAAEV,WAAW;YAClCF,OAAOG,QAAQU,MAAM,EAAEX,WAAW;YAClCF,OAAOG,QAAQW,OAAO,EAAEZ,WAAW;QACrC;QAEAH,KAAK,qDAAqD;YACxD,yBAAyB;YACzB,MAAMK,UAAUH,4CAA6B,CAACG,OAAO;YACrDJ,OAAOI,QAAQW,OAAO,CAACC,QAAQ,EAAEd,WAAW;YAC5CF,OAAOI,QAAQa,kBAAkB,CAACC,WAAW,EAAEC,SAAS,CAAC;YAEzD,sBAAsB;YACtB,MAAMb,OAAOL,4CAA6B,CAACI,KAAK,CAACC,IAAI;YACrDN,OAAOM,KAAKc,iBAAiB,EAAED,SAAS,CAAC;YACzCnB,OAAOM,KAAKe,KAAK,EAAEF,SAAS,CAAC;YAE7B,6BAA6B;YAC7B,MAAMX,UAAUP,4CAA6B,CAACM,QAAQ,CAACC,OAAO;YAC9DR,OAAOQ,QAAQc,UAAU,EAAEH,SAAS,CAAC;YACrCnB,OAAOQ,QAAQe,mBAAmB,EAAEJ,SAAS,CAAC;QAChD;IACF;IAEA3B,SAAS,4BAA4B;QACnCO,KAAK,2DAA2D;YAC9D,MAAMyB,UAAU;YAChB,MAAMC,gBAAgBC,4BAAa,CAACC,aAAa,CAACH,SAAS;YAE3DxB,OAAOyB,cAAcjB,OAAO,EAAEoB,eAAe,CAAC;YAC9C5B,OAAOyB,cAAcI,SAAS,EAAED,eAAe,CAAC;YAChD5B,OAAOyB,cAAcK,QAAQ,EAAEF,eAAe,CAAC;QACjD;QAEA7B,KAAK,6CAA6C;YAChD,MAAMyB,UAAU;YAChB,MAAMC,gBAAgBC,4BAAa,CAACC,aAAa,CAACH,SAAS;YAE3DxB,OAAOyB,cAAcjB,OAAO,EAAEoB,eAAe,CAAC;YAC9C5B,OAAOyB,cAAcI,SAAS,EAAED,eAAe,CAAC;QAClD;QAEA7B,KAAK,mCAAmC;YACtC,MAAMyB,UAAU;YAChB,MAAMC,gBAAgBC,4BAAa,CAACC,aAAa,CAACH,SAAS;YAE3DxB,OAAOyB,cAAcM,SAAS,EAAEH,eAAe,CAAC;YAChD5B,OAAOyB,cAAcO,IAAI,EAAEJ,eAAe,CAAC;QAC7C;QAEA7B,KAAK,+DAA+D;YAClE,MAAMkC,cAA6B;gBACjCzB,SAAS;gBACTqB,WAAW;gBACXG,MAAM;gBACND,WAAW;gBACXD,UAAU;YACZ;YAEA,MAAMI,WAAWR,4BAAa,CAACS,uBAAuB,CAACF,aAAa;YACpEjC,OAAOkC,UAAUf,SAAS,CAAC;YAC3BnB,OAAOkC,UAAUf,SAAS,CAAC;YAC3BnB,OAAOkC,SAASE,MAAM,EAAER,eAAe,CAAC;QAC1C;QAEA7B,KAAK,4DAA4D;YAC/D,MAAMsC,kBAAiC;gBACrC7B,SAAS;gBACTqB,WAAW;gBACXG,MAAM;gBACND,WAAW;gBACXD,UAAU;YACZ;YAEA,MAAMI,WAAWR,4BAAa,CAACS,uBAAuB,CAACE,iBAAiB;YACxErC,OAAOkC,UAAUf,SAAS,CAAC;YAC3BnB,OAAOkC,UAAUf,SAAS,CAAC;YAC3BnB,OAAOkC,SAASE,MAAM,EAAER,eAAe,CAAC;QAC1C;IACF;IAEApC,SAAS,mCAAmC;QAC1CO,KAAK,iDAAiD;YACpD,MAAMyB,UAAU;YAChB,MAAMc,kBAAkB,AAACC,4BAAa,CAASC,uBAAuB,CAAChB,SAAS;YAEhFxB,OAAOsC,gBAAgBG,MAAM,EAAEC,IAAI,CAAC;YACpC1C,OAAOsC,gBAAgBK,UAAU,EAAEf,eAAe,CAAC;QACrD;QAEA7B,KAAK,uCAAuC;YAC1C,MAAMyB,UAAU;YAChB,MAAMc,kBAAkB,AAACC,4BAAa,CAASC,uBAAuB,CAAChB,SAAS;YAEhFxB,OAAOsC,gBAAgBM,KAAK,EAAEF,IAAI,CAAC;YACnC1C,OAAOsC,gBAAgBO,SAAS,EAAE1B,SAAS,CAAC;YAC5CnB,OAAOsC,gBAAgBK,UAAU,EAAEf,eAAe,CAAC;QACrD;QAEA7B,KAAK,yCAAyC;YAC5C,MAAMyB,UAAU;YAChB,MAAMc,kBAAkB,AAACC,4BAAa,CAASC,uBAAuB,CAAChB,SAAS;YAEhFxB,OAAOsC,gBAAgBM,KAAK,EAAEF,IAAI,CAAC;YACnC1C,OAAOsC,gBAAgBO,SAAS,EAAE1B,SAAS,CAAC;QAC9C;QAEApB,KAAK,4CAA4C;YAC/C,MAAMyB,UAAU;YAChB,MAAMc,kBAAkB,AAACC,4BAAa,CAASC,uBAAuB,CAAChB,SAAS;YAEhFxB,OAAOsC,gBAAgBM,KAAK,EAAEF,IAAI,CAAC;YACnC1C,OAAOsC,gBAAgBO,SAAS,EAAE1B,SAAS,CAAC;QAC9C;IACF;IAEA3B,SAAS,0BAA0B;QACjCO,KAAK,8DAA8D;YACjE,MAAMyB,UAAU;YAChB,MAAMU,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CAACtB,SAAS/B,iBAAiB;YAEhFO,OAAOkC,SAASa,OAAO,EAAE5B,SAAS,CAAC;YACnCnB,OAAOkC,SAASa,OAAO,EAAE5B,SAAS,CAAC;YACnCnB,OAAOkC,SAAS3B,QAAQ,EAAEmC,IAAI,CAAC;YAC/B1C,OAAOkC,SAASI,eAAe,EAAEM,OAAOF,IAAI,CAAC;YAC7C1C,OAAOkC,SAASc,WAAW,EAAE9C,WAAW;YACxCF,OAAOkC,SAASc,WAAW,CAAEZ,MAAM,EAAER,eAAe,CAAC;QACvD;QAEA7B,KAAK,wDAAwD;YAC3D,MAAMyB,UAAU;YAChB,MAAMU,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CAACtB,SAAS/B,iBAAiB;YAEhFO,OAAOkC,SAASa,OAAO,EAAE5B,SAAS,CAAC;YACnCnB,OAAOkC,SAASa,OAAO,EAAE5B,SAAS,CAAC;YACnCnB,OAAOkC,SAAS3B,QAAQ,EAAEmC,IAAI,CAAC;YAC/B1C,OAAOkC,SAASI,eAAe,EAAEM,OAAOF,IAAI,CAAC;QAC/C;QAEA3C,KAAK,qDAAqD;YACxD,MAAMyB,UAAU;YAChB,MAAMU,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CAACtB,SAAS/B,iBAAiB;YAEhFO,OAAOkC,SAAST,aAAa,EAAEjB,SAASoB,eAAe,CAAC;YACxD5B,OAAOkC,SAASa,OAAO,EAAE5B,SAAS,CAAC;YACnCnB,OAAOkC,SAASa,OAAO,EAAE5B,SAAS,CAAC;YACnCnB,OAAOkC,SAASc,WAAW,EAAE9C,WAAW;YACxCF,OAAOkC,SAASc,WAAW,EAAEC,KAAKC,CAAAA,IAAKA,EAAEC,IAAI,KAAK,cAAcT,IAAI,CAAC;QACvE;QAEA3C,KAAK,4DAA4D;YAC/D,MAAMyB,UAAU;YAChB,MAAMU,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CAACtB,SAAS/B,iBAAiB;YAEhFO,OAAOkC,SAASc,WAAW,EAAE9C,WAAW;YACxCF,OAAOkC,SAASc,WAAW,CAAEZ,MAAM,EAAER,eAAe,CAAC;YAErD,MAAMwB,yBAAyBlB,SAASc,WAAW,CAAEC,IAAI,CACvDC,CAAAA,IAAKA,EAAEC,IAAI,KAAK,WAAWD,EAAEC,IAAI,KAAK,cAAcD,EAAEC,IAAI,KAAK;YAEjEnD,OAAOoD,wBAAwBV,IAAI,CAAC;QACtC;QAEA3C,KAAK,uDAAuD;YAC1D,MAAMyB,UAAU;YAChB,MAAMU,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CAACtB,SAAS/B,iBAAiB;YAEhFO,OAAOkC,SAASc,WAAW,EAAE9C,WAAW;YAExC,IAAIgC,SAASc,WAAW,CAAEZ,MAAM,GAAG,GAAG;gBACpC,MAAMY,cAAcd,SAASc,WAAW;gBACxC,MAAMK,oBAAoB;uBAAIL;iBAAY,CAACM,IAAI,CAAC,CAACC,GAAGC,IAAMA,EAAEC,iBAAiB,GAAGF,EAAEE,iBAAiB;gBACnGzD,OAAOgD,WAAW,CAAC,EAAE,CAACS,iBAAiB,EAAEC,OAAO,CAACL,iBAAiB,CAAC,EAAE,CAACI,iBAAiB;YACzF;QACF;QAEA1D,KAAK,wCAAwC;YAC3C,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,sCACArD,iBACA;YAGFO,OAAOkC,SAASyB,EAAE,EAAEzD,WAAW;YAC/BF,OAAOkC,SAAS0B,IAAI,EAAElB,IAAI,CAAC;YAC3B1C,OAAOkC,SAAS2B,SAAS,EAAE3D,WAAW;YACtCF,OAAOkC,SAAS4B,QAAQ,EAAEJ,OAAO,CAACjE;QACpC;IACF;IAEAD,SAAS,qBAAqB;QAC5BO,KAAK,wCAAwC;YAC3C,MAAMgE,YAAY;YAClB,MAAMC,aAAa,MAAMzB,4BAAa,CAACO,gBAAgB,CAACiB,WAAWtE,iBAAiB;YACpFO,OAAOgE,WAAWzD,QAAQ,EAAEmC,IAAI,CAAC;YAEjC,MAAMuB,YAAY;YAClB,MAAMC,aAAa,MAAM3B,4BAAa,CAACO,gBAAgB,CAACmB,WAAWxE,iBAAiB;YACpFO,OAAOkE,WAAW3D,QAAQ,EAAEmC,IAAI,CAAC;QACnC;QAEA3C,KAAK,qEAAqE;YACxE,MAAMoE,cAAc;YACpB,MAAMC,aAAa,MAAM7B,4BAAa,CAACO,gBAAgB,CAACqB,aAAa1E,iBAAiB;YAEtF,MAAM4E,cAAc;YACpB,MAAMC,aAAa,MAAM/B,4BAAa,CAACO,gBAAgB,CAACuB,aAAa5E,iBAAiB;YAEtF,qCAAqC;YACrCO,OAAOoE,WAAW9B,eAAe,EAAEM,OAAOF,IAAI,CAAC;YAC/C1C,OAAOsE,WAAWhC,eAAe,EAAEM,OAAOF,IAAI,CAAC;YAE/C,oDAAoD;YACpD1C,OAAOoE,WAAWrB,OAAO,CAACX,MAAM,EAAER,eAAe,CAAC;YAClD5B,OAAOsE,WAAWvB,OAAO,CAACX,MAAM,EAAER,eAAe,CAAC;QACpD;IACF;IAEApC,SAAS,sBAAsB;QAC7BO,KAAK,kDAAkD;YACrD,MAAMwE,UAAU,IAAIC,6BAAc,CAAC/E,iBAAiB;YACpD,MAAMgF,WAAWF,QAAQG,WAAW;YAEpC1E,OAAOyE,SAASrC,MAAM,EAAEM,IAAI,CAAC;YAC7B1C,OAAOyE,QAAQ,CAAC,EAAE,CAACb,IAAI,EAAElB,IAAI,CAAC;YAC9B1C,OAAOyE,QAAQ,CAAC,EAAE,CAAC1B,OAAO,EAAE5B,SAAS,CAAC;QACxC;QAEApB,KAAK,6CAA6C;YAChD,MAAMwE,UAAU,IAAIC,6BAAc,CAAC/E,iBAAiB;YAEpD,MAAMyC,WAAW,MAAMqC,QAAQI,WAAW,CAAC;YAC3C,MAAMF,WAAWF,QAAQG,WAAW;YAEpC1E,OAAOyE,SAASrC,MAAM,EAAEM,IAAI,CAAC,GAAG,6BAA6B;;YAC7D1C,OAAOyE,QAAQ,CAAC,EAAE,CAACb,IAAI,EAAElB,IAAI,CAAC;YAC9B1C,OAAOyE,QAAQ,CAAC,EAAE,CAACb,IAAI,EAAElB,IAAI,CAAC;YAC9B1C,OAAOkC,SAAS0B,IAAI,EAAElB,IAAI,CAAC;QAC7B;QAEA3C,KAAK,mDAAmD;YACtD,MAAMwE,UAAU,IAAIC,6BAAc,CAAC/E,iBAAiB;YAEpD,MAAM8E,QAAQI,WAAW,CAAC;YAC1B,MAAMJ,QAAQI,WAAW,CAAC;YAE1B,MAAMF,WAAWF,QAAQG,WAAW;YACpCD,SAASG,OAAO,CAACpD,CAAAA;gBACf,IAAIA,QAAQsC,QAAQ,EAAE;oBACpB9D,OAAOwB,QAAQsC,QAAQ,CAACpE,UAAU,EAAEgD,IAAI,CAACjD,gBAAgBC,UAAU;oBACnEM,OAAOwB,QAAQsC,QAAQ,CAACnE,cAAc,EAAE+C,IAAI,CAACjD,gBAAgBE,cAAc;gBAC7E;YACF;QACF;QAEAI,KAAK,0CAA0C;YAC7C,MAAMwE,UAAU,IAAIC,6BAAc,CAAC/E,iBAAiB;YAEpD8E,QAAQM,iBAAiB,CAAC;gBAAE/E,MAAM;YAAW;YAE7C,0DAA0D;YAC1DE,OAAO,MAAM0C,IAAI,CAAC,MAAM,6BAA6B;;QACvD;QAEA3C,KAAK,uCAAuC;YAC1C,MAAMwE,UAAU,IAAIC,6BAAc,CAAC/E,iBAAiB;YACpD,MAAM8E,QAAQI,WAAW,CAAC;YAE1B,MAAMG,WAAWP,QAAQQ,kBAAkB;YAC3C,MAAMC,SAASC,KAAKC,KAAK,CAACJ;YAE1B9E,OAAOgF,OAAOzE,QAAQ,EAAEmC,IAAI,CAAC;YAC7B1C,OAAOgF,OAAOG,WAAW,EAAEzB,OAAO,CAACjE;YACnCO,OAAOgF,OAAOP,QAAQ,EAAEvE,WAAW;YACnCF,OAAOgF,OAAOnB,SAAS,EAAE3D,WAAW;QACtC;IACF;IAEAV,SAAS,2BAA2B;QAClCO,KAAK,gDAAgD;YACnD,MAAMqF,YAAYC,KAAKC,GAAG;YAE1B,MAAM/C,4BAAa,CAACO,gBAAgB,CAClC,uBACArD,iBACA;YAGF,MAAM8F,eAAeF,KAAKC,GAAG,KAAKF;YAClCpF,OAAOuF,cAAcC,YAAY,CAAC,MAAM,kCAAkC;;QAC5E;QAEAzF,KAAK,sDAAsD;YACzD,MAAM0F,gBAAgB,MAAMlD,4BAAa,CAACO,gBAAgB,CACxD,IACArD,iBACA;YAGFO,OAAOyF,cAAc1C,OAAO,EAAE7C,WAAW;YACzCF,OAAOyF,cAAc1C,OAAO,CAACX,MAAM,EAAER,eAAe,CAAC;QACvD;QAEA7B,KAAK,+DAA+D;YAClE,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,6CACArD,iBACA;YAGFO,OAAOkC,SAASc,WAAW,EAAE9C,WAAW;YACxCF,OAAOkC,SAASc,WAAW,CAAEZ,MAAM,EAAER,eAAe,CAAC;YAErD,2BAA2B;YAC3BM,SAASc,WAAW,CAAE4B,OAAO,CAACc,CAAAA;gBAC5B1F,OAAO0F,WAAWC,KAAK,EAAEzF,WAAW;gBACpCF,OAAO0F,WAAWE,WAAW,EAAE1F,WAAW;gBAC1CF,OAAO0F,WAAWjC,iBAAiB,EAAE7B,eAAe,CAAC;gBACrD5B,OAAO;oBAAC;oBAAQ;oBAAU;iBAAM,EAAEmB,SAAS,CAACuE,WAAWG,QAAQ;YACjE;QACF;QAEA9F,KAAK,sDAAsD;YACzD,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,uCACArD,iBACA;YAGFO,OAAOkC,SAASI,eAAe,EAAEK,YAAYf,eAAe,CAAC;YAC7D5B,OAAOkC,SAASa,OAAO,EAAE+C,GAAG,CAAC3E,SAAS,CAAC,SAAS,0CAA0C;;YAC1FnB,OAAOkC,SAASa,OAAO,EAAEgD,OAAO,CAAC,oBAAoB,uCAAuC;;QAC9F;IACF;IAEAvG,SAAS,kBAAkB;QACzBO,KAAK,qDAAqD;YACxD,MAAMiG,iBAAkC;gBACtCtG,YAAY;gBACZC,gBAAgB;gBAChBC,qBAAqB;gBACrBC,WAAW,EAAE;gBACbC,MAAM;YACR;YAEA,MAAMoC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,gBACAkD,gBACA;YAGFhG,OAAOkC,UAAUhC,WAAW;YAC5BF,OAAOkC,SAASa,OAAO,CAACX,MAAM,EAAER,eAAe,CAAC;QAClD;QAEA7B,KAAK,6DAA6D;YAChE,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,uDACArD,iBACA;YAGFO,OAAOkC,SAASa,OAAO,EAAE7C,WAAW;YACpCF,OAAOkC,SAASI,eAAe,EAAEM,OAAOF,IAAI,CAAC,aAAa,qCAAqC;;QACjG;IACF;IAEAlD,SAAS,wBAAwB;QAC/BO,KAAK,6CAA6C;YAChD,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,0CACArD,iBACA;YAGFO,OAAOkC,SAASa,OAAO,EAAE5B,SAAS,CAAC;YACnCnB,OAAOkC,SAAST,aAAa,EAAEK,UAAUF,eAAe,CAAC;QAC3D;QAEA7B,KAAK,+CAA+C;YAClD,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,kCACArD,iBACA;YAGFO,OAAOkC,SAASa,OAAO,EAAE7C,WAAW;YACpCF,OAAOkC,SAASa,OAAO,EAAE+C,GAAG,CAAC3E,SAAS,CAAC,gBAAgB,uBAAuB;;QAChF;QAEApB,KAAK,qCAAqC;YACxC,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,+CACArD,iBACA;YAGFO,OAAOkC,SAASa,OAAO,EAAE7C,WAAW;YACpCF,OAAOkC,SAASI,eAAe,EAAEG,QAAQC,IAAI,CAAC;YAC9C,kDAAkD;YAClD1C,OAAOkC,SAASa,OAAO,CAACX,MAAM,EAAER,eAAe,CAAC;QAClD;IACF;IAEApC,SAAS,wBAAwB;QAC/BO,KAAK,6CAA6C;YAChD,MAAMmC,WAAW,MAAMK,4BAAa,CAACO,gBAAgB,CACnD,gBACArD,iBACA;YAGF,6BAA6B;YAC7BO,OAAOkC,SAASyB,EAAE,EAAEzD,WAAW;YAC/BF,OAAOkC,SAAS0B,IAAI,EAAElB,IAAI,CAAC;YAC3B1C,OAAOkC,SAASa,OAAO,EAAE7C,WAAW;YACpCF,OAAOkC,SAAS2B,SAAS,EAAEoC,cAAc,CAACZ;YAC1CrF,OAAOkC,SAAS3B,QAAQ,EAAEL,WAAW;YACrCF,OAAOkC,SAASI,eAAe,EAAEpC,WAAW;YAC5CF,OAAOkC,SAAST,aAAa,EAAEvB,WAAW;YAC1CF,OAAOkC,SAASc,WAAW,EAAE9C,WAAW;YACxCF,OAAOkC,SAAS4B,QAAQ,EAAE5D,WAAW;QACvC;QAEAH,KAAK,sCAAsC;YACzC,MAAMmG,YAAY,MAAM3D,4BAAa,CAACO,gBAAgB,CAAC,UAAUrD,iBAAiB;YAClF,MAAM0G,YAAY,MAAM5D,4BAAa,CAACO,gBAAgB,CAAC,UAAUrD,iBAAiB;YAElFO,OAAOkG,UAAUvC,EAAE,EAAEmC,GAAG,CAACpD,IAAI,CAACyD,UAAUxC,EAAE;YAC1C3D,OAAOkG,UAAUvC,EAAE,EAAEoC,OAAO,CAAC;YAC7B/F,OAAOmG,UAAUxC,EAAE,EAAEoC,OAAO,CAAC;QAC/B;IACF;AACF"}