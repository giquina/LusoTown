{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/lusobot/lusobot-chat.test.tsx"],"sourcesContent":["/**\n * LusoBot Chat Component Production Tests\n * \n * Tests for the React chat interface component, including mobile optimization,\n * accessibility, and Portuguese-speaking community-specific features.\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { act } from 'react-dom/test-utils'\nimport LusoBotChat from '@/components/LusoBotChat'\nimport { LanguageProvider } from '@/context/LanguageContext'\nimport { SubscriptionProvider } from '@/context/SubscriptionContext'\n\n// Mock dependencies\njest.mock('@/lib/lusobot-engine', () => ({\n  LusoBotSession: jest.fn().mockImplementation((context, language) => ({\n    getMessages: jest.fn().mockReturnValue([\n      {\n        id: 'welcome_123',\n        role: 'assistant',\n        content: language === 'pt' \n          ? 'Olá! Sou o LusoBot, o teu assistente cultural português.'\n          : 'Hello! I\\'m LusoBot, your Portuguese cultural assistant.',\n        timestamp: new Date(),\n        language,\n        culturalContext: {\n          region: 'diaspora_uk',\n          topic: 'community',\n          expertise: ['uk_portuguese_community'],\n          confidence: 1.0\n        },\n        emotionalTone: {\n          saudade: 0,\n          nostalgia: 0,\n          hope: 0.8,\n          community: 0.9,\n          heritage: 0.7\n        }\n      }\n    ]),\n    sendMessage: jest.fn().mockResolvedValue({\n      id: 'response_456',\n      role: 'assistant',\n      content: 'Test response from LusoBot',\n      timestamp: new Date(),\n      language: 'en',\n      culturalContext: {\n        region: 'diaspora_uk',\n        topic: 'community',\n        expertise: ['cultural_events'],\n        confidence: 0.8\n      },\n      emotionalTone: {\n        saudade: 0.2,\n        nostalgia: 0.1,\n        hope: 0.6,\n        community: 0.7,\n        heritage: 0.5\n      },\n      suggestions: [\n        {\n          type: 'event',\n          title: 'Portuguese Cultural Event',\n          description: 'Join our community gathering',\n          priority: 'high',\n          culturalRelevance: 0.9\n        }\n      ]\n    }),\n    updateUserContext: jest.fn(),\n    setLanguage: jest.fn(),\n    exportConversation: jest.fn().mockReturnValue('{}')\n  }))\n}))\n\n// Mock react-hot-toast\njest.mock('react-hot-toast', () => ({\n  toast: {\n    success: jest.fn(),\n    error: jest.fn()\n  }\n}))\n\n// Mock Web Speech API\nconst mockSpeechRecognition = {\n  start: jest.fn(),\n  stop: jest.fn(),\n  onresult: null,\n  onerror: null,\n  onend: null,\n  lang: 'en-GB',\n  continuous: false,\n  interimResults: false\n}\n\n;(global as any).webkitSpeechRecognition = jest.fn().mockImplementation(() => mockSpeechRecognition)\n\n// Test wrapper component\nconst TestWrapper: React.FC<{ children: React.ReactNode; language?: 'en' | 'pt' }> = ({ \n  children, \n  language = 'en' \n}) => (\n  <LanguageProvider initialLanguage={language}>\n    <SubscriptionProvider>\n      {children}\n    </SubscriptionProvider>\n  </LanguageProvider>\n)\n\ndescribe('LusoBot Chat Component', () => {\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  describe('Component Rendering', () => {\n    test('should render LusoBot chat interface correctly', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      // Check for main interface elements\n      expect(screen.getByText('LusoBot')).toBeInTheDocument()\n      expect(screen.getByText('Portuguese Cultural Assistant')).toBeInTheDocument()\n      expect(screen.getByPlaceholderText(/type your message/i)).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /send/i })).toBeInTheDocument()\n    })\n\n    test('should render in Portuguese when language is set to PT', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper language=\"pt\">\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      expect(screen.getByText('Assistente Cultural Português')).toBeInTheDocument()\n      expect(screen.getByPlaceholderText(/escreve a tua mensagem/i)).toBeInTheDocument()\n      expect(screen.getByText('Conversando em Português')).toBeInTheDocument()\n    })\n\n    test('should display welcome message on initialization', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText(/Hello! I'm LusoBot/i)).toBeInTheDocument()\n      })\n    })\n\n    test('should render in embedded mode when specified', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat isEmbedded={true} />\n          </TestWrapper>\n        )\n      })\n\n      const container = screen.getByTestId('lusobot-chat') || document.querySelector('[class*=\"h-full\"]')\n      expect(container).toBeInTheDocument()\n    })\n  })\n\n  describe('Message Input and Sending', () => {\n    test('should handle text input correctly', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      await user.type(input, 'Hello LusoBot')\n      \n      expect(input).toHaveValue('Hello LusoBot')\n    })\n\n    test('should send message when send button is clicked', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      const sendButton = screen.getByRole('button', { name: /send/i })\n      \n      await user.type(input, 'Test message')\n      await user.click(sendButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Test response from LusoBot')).toBeInTheDocument()\n      })\n    })\n\n    test('should send message when Enter key is pressed', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      \n      await user.type(input, 'Test message{enter}')\n\n      await waitFor(() => {\n        expect(screen.getByText('Test response from LusoBot')).toBeInTheDocument()\n      })\n    })\n\n    test('should not send empty messages', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const sendButton = screen.getByRole('button', { name: /send/i })\n      \n      // Try to send empty message\n      await user.click(sendButton)\n\n      // Should not create new messages beyond the welcome message\n      const messages = screen.getAllByText(/LusoBot/i)\n      expect(messages.length).toBeLessThanOrEqual(2) // Header + welcome message\n    })\n\n    test('should respect character limit', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i) as HTMLInputElement\n      const longMessage = 'a'.repeat(600) // Exceeds 500 character limit\n      \n      await user.type(input, longMessage)\n      \n      expect(input.value.length).toBeLessThanOrEqual(500)\n    })\n  })\n\n  describe('Voice Input Functionality', () => {\n    test('should handle voice input button click', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const voiceButton = screen.getByRole('button', { name: /voice/i }) || \n                         document.querySelector('[class*=\"MicrophoneIcon\"]')?.parentElement\n      \n      if (voiceButton) {\n        await user.click(voiceButton)\n        expect(mockSpeechRecognition.start).toHaveBeenCalled()\n      }\n    })\n\n    test('should set correct language for voice recognition', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper language=\"pt\">\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const voiceButton = screen.getByRole('button', { name: /voice/i }) || \n                         document.querySelector('[class*=\"MicrophoneIcon\"]')?.parentElement\n      \n      if (voiceButton) {\n        await user.click(voiceButton)\n        expect(mockSpeechRecognition.lang).toBe('pt-PT')\n      }\n    })\n  })\n\n  describe('Emotional Tone Display', () => {\n    test('should display saudade meter for high emotional content', async () => {\n      // Mock a response with high saudade\n      const mockSession = require('@/lib/lusobot-engine').LusoBotSession\n      mockSession.mockImplementation(() => ({\n        getMessages: jest.fn().mockReturnValue([\n          {\n            id: 'welcome_123',\n            role: 'assistant',\n            content: 'Welcome message',\n            timestamp: new Date(),\n            language: 'en'\n          }\n        ]),\n        sendMessage: jest.fn().mockResolvedValue({\n          id: 'high_saudade_response',\n          role: 'assistant',\n          content: 'I understand that deep saudade you\\'re feeling.',\n          timestamp: new Date(),\n          language: 'en',\n          emotionalTone: {\n            saudade: 0.8,\n            nostalgia: 0.7,\n            hope: 0.4,\n            community: 0.6,\n            heritage: 0.8\n          }\n        })\n      }))\n\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      await user.type(input, 'I miss home so much{enter}')\n\n      await waitFor(() => {\n        expect(screen.getByText('Emotional Tone Detected')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Suggestions Display', () => {\n    test('should display suggestions when provided by LusoBot', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      await user.type(input, 'I need cultural events{enter}')\n\n      await waitFor(() => {\n        expect(screen.getByText('Personalized Suggestions')).toBeInTheDocument()\n        expect(screen.getByText('Portuguese Cultural Event')).toBeInTheDocument()\n      })\n    })\n\n    test('should handle suggestion click correctly', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      await user.type(input, 'I need cultural events{enter}')\n\n      await waitFor(() => {\n        const suggestion = screen.getByText('Portuguese Cultural Event')\n        expect(suggestion).toBeInTheDocument()\n      })\n\n      const suggestionButton = screen.getByText('Portuguese Cultural Event').closest('button')\n      if (suggestionButton) {\n        await user.click(suggestionButton)\n        // Should either open link or add to chat input\n        // This depends on the suggestion configuration\n      }\n    })\n  })\n\n  describe('Quick Starters', () => {\n    test('should display conversation starters for new chat', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText('Conversation Starters')).toBeInTheDocument()\n        expect(screen.getByText(/Portuguese food in London/i)).toBeInTheDocument()\n      })\n    })\n\n    test('should display Portuguese conversation starters when language is PT', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper language=\"pt\">\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      await waitFor(() => {\n        expect(screen.getByText('Ideias para Começar')).toBeInTheDocument()\n        expect(screen.getByText(/comida portuguesa em Londres/i)).toBeInTheDocument()\n      })\n    })\n\n    test('should populate input when starter is clicked', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const starter = screen.getByText(/Portuguese food in London/i)\n      await user.click(starter)\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      expect(input).toHaveValue(expect.stringContaining('Portuguese food'))\n    })\n  })\n\n  describe('Accessibility', () => {\n    test('should have proper ARIA labels', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      expect(input).toHaveAttribute('type', 'text')\n      \n      const sendButton = screen.getByRole('button', { name: /send/i })\n      expect(sendButton).toBeInTheDocument()\n    })\n\n    test('should support keyboard navigation', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      // Tab navigation should work\n      await user.tab()\n      const input = screen.getByPlaceholderText(/type your message/i)\n      expect(input).toHaveFocus()\n\n      await user.tab()\n      const sendButton = screen.getByRole('button', { name: /send/i })\n      expect(sendButton).toHaveFocus()\n    })\n  })\n\n  describe('Mobile Optimization', () => {\n    test('should be responsive on mobile viewport', async () => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const container = document.querySelector('[class*=\"w-96\"]') || \n                       document.querySelector('[class*=\"h-screen\"]')\n      expect(container).toBeInTheDocument()\n    })\n\n    test('should handle touch interactions properly', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const sendButton = screen.getByRole('button', { name: /send/i })\n      \n      // Simulate touch interaction\n      fireEvent.touchStart(sendButton)\n      fireEvent.touchEnd(sendButton)\n      \n      // Should not cause issues\n      expect(sendButton).toBeInTheDocument()\n    })\n  })\n\n  describe('Loading States', () => {\n    test('should show loading indicator while sending message', async () => {\n      // Mock delayed response\n      const mockSession = require('@/lib/lusobot-engine').LusoBotSession\n      mockSession.mockImplementation(() => ({\n        getMessages: jest.fn().mockReturnValue([]),\n        sendMessage: jest.fn().mockImplementation(() => \n          new Promise(resolve => setTimeout(resolve, 1000))\n        )\n      }))\n\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      const sendButton = screen.getByRole('button', { name: /send/i })\n      \n      await user.type(input, 'Test message')\n      await user.click(sendButton)\n\n      // Should show loading state\n      expect(screen.getByText(/thinking/i)).toBeInTheDocument()\n      expect(sendButton).toBeDisabled()\n    })\n\n    test('should show loading spinner on initial render', async () => {\n      // Mock session as null initially\n      const mockSession = require('@/lib/lusobot-engine').LusoBotSession\n      mockSession.mockImplementation(() => null)\n\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const spinner = document.querySelector('[class*=\"animate-spin\"]')\n      expect(spinner).toBeInTheDocument()\n    })\n  })\n\n  describe('Error Handling', () => {\n    test('should handle send message errors gracefully', async () => {\n      const mockToast = require('react-hot-toast').toast\n      \n      // Mock error in sendMessage\n      const mockSession = require('@/lib/lusobot-engine').LusoBotSession\n      mockSession.mockImplementation(() => ({\n        getMessages: jest.fn().mockReturnValue([]),\n        sendMessage: jest.fn().mockRejectedValue(new Error('Network error'))\n      }))\n\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/type your message/i)\n      await user.type(input, 'Test message{enter}')\n\n      await waitFor(() => {\n        expect(mockToast.error).toHaveBeenCalledWith(\n          expect.stringContaining('Error sending message')\n        )\n      })\n    })\n\n    test('should handle voice recognition errors', async () => {\n      const mockToast = require('react-hot-toast').toast\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const voiceButton = document.querySelector('[class*=\"MicrophoneIcon\"]')?.parentElement\n      \n      if (voiceButton) {\n        await user.click(voiceButton)\n        \n        // Simulate recognition error\n        if (mockSpeechRecognition.onerror) {\n          mockSpeechRecognition.onerror()\n        }\n\n        await waitFor(() => {\n          expect(mockToast.error).toHaveBeenCalledWith(\n            expect.stringContaining('Voice recognition error')\n          )\n        })\n      }\n    })\n  })\n\n  describe('Portuguese Cultural Features', () => {\n    test('should display Portuguese flag in avatar', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const flagEmoji = screen.getByText('🇵🇹')\n      expect(flagEmoji).toBeInTheDocument()\n    })\n\n    test('should use Portuguese cultural color scheme', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const gradientElements = document.querySelectorAll('[class*=\"from-primary-5\"]')\n      expect(gradientElements.length).toBeGreaterThan(0)\n    })\n\n    test('should handle Portuguese cultural context appropriately', async () => {\n      const user = userEvent.setup()\n      \n      await act(async () => {\n        render(\n          <TestWrapper language=\"pt\">\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      const input = screen.getByPlaceholderText(/escreve a tua mensagem/i)\n      await user.type(input, 'Tenho saudades de Portugal{enter}')\n\n      await waitFor(() => {\n        // Should show emotional support\n        expect(screen.getByText(/estou aqui para te apoiar/i)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Integration with LusoTown Platform', () => {\n    test('should integrate with subscription context', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper>\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      // Should render without subscription context errors\n      expect(screen.getByText('LusoBot')).toBeInTheDocument()\n    })\n\n    test('should maintain language context consistency', async () => {\n      await act(async () => {\n        render(\n          <TestWrapper language=\"pt\">\n            <LusoBotChat />\n          </TestWrapper>\n        )\n      })\n\n      expect(screen.getByText('Assistente Cultural Português')).toBeInTheDocument()\n      expect(screen.getByText('Conversando em Português')).toBeInTheDocument()\n    })\n  })\n})"],"names":["jest","mock","LusoBotSession","fn","mockImplementation","context","language","getMessages","mockReturnValue","id","role","content","timestamp","Date","culturalContext","region","topic","expertise","confidence","emotionalTone","saudade","nostalgia","hope","community","heritage","sendMessage","mockResolvedValue","suggestions","type","title","description","priority","culturalRelevance","updateUserContext","setLanguage","exportConversation","toast","success","error","mockSpeechRecognition","start","stop","onresult","onerror","onend","lang","continuous","interimResults","global","webkitSpeechRecognition","TestWrapper","children","LanguageProvider","initialLanguage","SubscriptionProvider","describe","beforeEach","clearAllMocks","test","act","render","LusoBotChat","expect","screen","getByText","toBeInTheDocument","getByPlaceholderText","getByRole","name","waitFor","isEmbedded","container","getByTestId","document","querySelector","user","userEvent","setup","input","toHaveValue","sendButton","click","messages","getAllByText","length","toBeLessThanOrEqual","longMessage","repeat","value","voiceButton","parentElement","toHaveBeenCalled","toBe","mockSession","require","suggestion","suggestionButton","closest","starter","stringContaining","toHaveAttribute","tab","toHaveFocus","Object","defineProperty","window","writable","configurable","fireEvent","touchStart","touchEnd","Promise","resolve","setTimeout","toBeDisabled","spinner","mockToast","mockRejectedValue","Error","toHaveBeenCalledWith","flagEmoji","gradientElements","querySelectorAll","toBeGreaterThan"],"mappings":"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"}