c675f7a391293ec0e2accf38f156ff28
/**
 * Enhanced Messaging Interface Integration Tests
 * 
 * Tests the complete voice messaging and translation system integration
 */ "use strict";
// Mock all external dependencies
jest.mock("@/services/messagingService");
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _testutils = require("react-dom/test-utils");
const _EnhancedMessagingInterface = /*#__PURE__*/ _interop_require_default(require("../../src/components/EnhancedMessagingInterface"));
const _LanguageContext = require("../../src/context/LanguageContext");
const _messagingService = require("../../src/services/messagingService");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockMessagingService = _messagingService.messagingService;
// Mock MediaRecorder and speech APIs
global.MediaRecorder = class MockMediaRecorder {
    static{
        this.isTypeSupported = jest.fn().mockReturnValue(true);
    }
    constructor(stream, options){
        this.ondataavailable = null;
        this.onstop = null;
        this.state = "inactive";
    }
    start(timeslice) {
        setTimeout(()=>{
            if (this.ondataavailable) {
                this.ondataavailable({
                    data: new Blob([
                        "mock audio data"
                    ], {
                        type: "audio/webm"
                    })
                });
            }
        }, 100);
    }
    stop() {
        setTimeout(()=>{
            if (this.onstop) this.onstop();
        }, 50);
    }
    pause() {}
    resume() {}
};
// Mock getUserMedia
Object.defineProperty(navigator, "mediaDevices", {
    value: {
        getUserMedia: jest.fn().mockResolvedValue({
            getTracks: ()=>[
                    {
                        stop: jest.fn()
                    }
                ]
        })
    },
    writable: true
});
// Mock speech recognition and synthesis
Object.defineProperty(window, "webkitSpeechRecognition", {
    value: class MockSpeechRecognition {
        start() {
            setTimeout(()=>{
                if (this.onresult) {
                    this.onresult({
                        resultIndex: 0,
                        results: [
                            {
                                0: {
                                    transcript: "Ol\xe1! Como est\xe1?",
                                    confidence: 0.95
                                },
                                isFinal: true
                            }
                        ]
                    });
                }
            }, 500);
        }
        stop() {
            if (this.onend) this.onend();
        }
        constructor(){
            this.continuous = false;
            this.interimResults = false;
            this.lang = "pt-PT";
            this.maxAlternatives = 1;
            this.onresult = null;
            this.onerror = null;
            this.onend = null;
        }
    },
    writable: true
});
Object.defineProperty(window, "speechSynthesis", {
    value: {
        speak: jest.fn(),
        cancel: jest.fn(),
        getVoices: jest.fn().mockReturnValue([])
    },
    writable: true
});
// Mock fetch for API calls
global.fetch = jest.fn();
// Mock clipboard
Object.assign(navigator, {
    clipboard: {
        writeText: jest.fn().mockResolvedValue(undefined)
    }
});
const renderWithProviders = (component)=>{
    return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
        initialLanguage: "en",
        children: component
    }));
};
const mockConversation = {
    id: "conv-123",
    participant_ids: [
        "user-1",
        "user-2"
    ],
    connection_type: "mutual_match",
    is_active: true,
    last_activity_at: "2023-12-01T12:00:00Z",
    created_at: "2023-12-01T10:00:00Z",
    updated_at: "2023-12-01T12:00:00Z"
};
const mockMessages = [
    {
        id: "msg-1",
        conversation_id: "conv-123",
        sender_id: "user-2",
        receiver_id: "user-1",
        content: "Ol\xe1! Como est\xe1?",
        message_type: "text",
        approval_status: "auto_approved",
        is_read: false,
        is_blocked: false,
        safety_score: 0.95,
        contains_contact_info: false,
        flagged_content: null,
        created_at: "2023-12-01T11:00:00Z",
        updated_at: "2023-12-01T11:00:00Z"
    }
];
describe("Enhanced Messaging Interface Integration", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup messaging service mocks
        mockMessagingService.getOrCreateConversation.mockResolvedValue(mockConversation);
        mockMessagingService.getConversationMessages.mockResolvedValue(mockMessages);
        mockMessagingService.markMessagesAsRead.mockResolvedValue();
        mockMessagingService.sendMessage.mockResolvedValue({
            ...mockMessages[0],
            id: "msg-new",
            sender_id: "user-1",
            receiver_id: "user-2",
            content: "Hello! I am fine.",
            created_at: new Date().toISOString()
        });
        fetch.mockImplementation((url)=>{
            if (url.includes("/api/translate")) {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            originalText: "Ol\xe1! Como est\xe1?",
                            translatedText: "Hello! How are you?",
                            confidence: 0.95,
                            sourceLanguage: "pt-PT",
                            targetLanguage: "en"
                        })
                });
            }
            if (url.includes("/api/voice-messages")) {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            id: "voice-1",
                            audioUrl: "blob://mock-audio",
                            duration: 5,
                            transcription: "Ol\xe1! Como est\xe1?",
                            timestamp: new Date().toISOString()
                        })
                });
            }
            return Promise.reject(new Error("Unknown API endpoint"));
        });
    });
    describe("Interface Initialization", ()=>{
        it("loads conversation and messages on mount", async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva",
                targetUserImage: "/avatars/joao.jpg"
            }));
            await (0, _react.waitFor)(()=>{
                expect(mockMessagingService.getOrCreateConversation).toHaveBeenCalledWith("user-2");
                expect(mockMessagingService.getConversationMessages).toHaveBeenCalledWith("conv-123");
            });
            expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            expect(_react.screen.getByText("Ol\xe1! Como est\xe1?")).toBeInTheDocument();
        });
        it("displays connection type badge", async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva"
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/mutual match/i)).toBeInTheDocument();
            });
        });
        it("shows loading state during initialization", ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva"
            }));
            expect(_react.screen.getByRole("status")).toBeInTheDocument();
        });
    });
    describe("Text Messaging", ()=>{
        beforeEach(async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva"
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
        });
        it("sends text message", async ()=>{
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            const sendButton = _react.screen.getByRole("button", {
                name: /send/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "Hello! I am fine."
                    }
                });
                _react.fireEvent.click(sendButton);
            });
            expect(mockMessagingService.sendMessage).toHaveBeenCalledWith("conv-123", "user-2", "Hello! I am fine.");
        });
        it("clears input after sending message", async ()=>{
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            const sendButton = _react.screen.getByRole("button", {
                name: /send/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "Test message"
                    }
                });
                _react.fireEvent.click(sendButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(messageInput).toHaveValue("");
            });
        });
        it("sends message on Enter key press", async ()=>{
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "Keyboard message"
                    }
                });
                _react.fireEvent.keyPress(messageInput, {
                    key: "Enter",
                    code: "Enter"
                });
            });
            expect(mockMessagingService.sendMessage).toHaveBeenCalledWith("conv-123", "user-2", "Keyboard message");
        });
    });
    describe("Voice Messaging Integration", ()=>{
        beforeEach(async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva",
                membershipTier: "ambassador",
                preferredDialect: "pt-PT",
                voiceMessagesEnabled: true
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
        });
        it("toggles voice recorder interface", async ()=>{
            const voiceButton = _react.screen.getByLabelText(/voice message/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(voiceButton);
            });
            expect(_react.screen.getByText(/hold to record/i)).toBeInTheDocument();
        });
        it("records and sends voice message", async ()=>{
            const voiceButton = _react.screen.getByLabelText(/voice message/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(voiceButton);
            });
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            // Start recording
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/recording/i)).toBeInTheDocument();
            });
            // Stop recording
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseUp(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByRole("button", {
                    name: /send voice message/i
                })).toBeInTheDocument();
            });
            // Send voice message
            const sendVoiceButton = _react.screen.getByRole("button", {
                name: /send voice message/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(sendVoiceButton);
            });
            expect(fetch).toHaveBeenCalledWith("/api/voice-messages", expect.objectContaining({
                method: "POST",
                body: expect.any(FormData)
            }));
        });
        it("shows transcription during recording", async ()=>{
            const voiceButton = _react.screen.getByLabelText(/voice message/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(voiceButton);
            });
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
                await new Promise((resolve)=>setTimeout(resolve, 600)) // Wait for transcription
                ;
                _react.fireEvent.mouseUp(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/olá! como está/i)).toBeInTheDocument();
            });
        });
        it("respects membership tier duration limits", async ()=>{
            expect(_react.screen.getByText(/300/)).toBeInTheDocument() // Ambassador tier limit
            ;
        });
    });
    describe("Translation Integration", ()=>{
        beforeEach(async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva",
                translationEnabled: true
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
        });
        it("translates existing messages", async ()=>{
            const translateButton = _react.screen.getByLabelText(/translate/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(translateButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(fetch).toHaveBeenCalledWith("/api/translate-message", expect.objectContaining({
                    method: "POST",
                    body: JSON.stringify(expect.objectContaining({
                        text: "Ol\xe1! Como est\xe1?"
                    }))
                }));
            });
        });
        it("enables auto-translation setting", async ()=>{
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(settingsButton);
            });
            const autoTranslateToggle = _react.screen.getByLabelText(/auto-translate/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(autoTranslateToggle);
            });
            expect(autoTranslateToggle).toBeChecked();
        });
        it("shows translation panel for new messages", async ()=>{
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            const translateButton = _react.screen.getByLabelText(/translate/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "Bom dia!"
                    }
                });
                _react.fireEvent.click(translateButton);
            });
            expect(_react.screen.getByText(/translating/i)).toBeInTheDocument();
        });
    });
    describe("Portuguese Cultural Features", ()=>{
        beforeEach(async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva"
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
        });
        it("toggles Portuguese expressions panel", async ()=>{
            const culturalButton = _react.screen.getByLabelText(/portuguese expressions/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(culturalButton);
            });
            expect(_react.screen.getByText(/portuguese communication/i)).toBeInTheDocument();
        });
        it("inserts selected expression into message input", async ()=>{
            const culturalButton = _react.screen.getByLabelText(/portuguese expressions/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(culturalButton);
            });
            // Wait for panel to load and mock selecting an expression
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/portuguese communication/i)).toBeInTheDocument();
            });
            // This would normally trigger from the PortugueseCommunicationPanel
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "\uD83C\uDDF5\uD83C\uDDF9 Ol\xe1! Tudo bem?"
                    }
                });
            });
            expect(messageInput).toHaveValue("\uD83C\uDDF5\uD83C\uDDF9 Ol\xe1! Tudo bem?");
        });
        it("shows cultural greetings based on time of day", async ()=>{
            const culturalButton = _react.screen.getByLabelText(/portuguese expressions/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(culturalButton);
            });
            await (0, _react.waitFor)(()=>{
                // Should show appropriate greeting for current time
                expect(_react.screen.getByText(/greetings/i)).toBeInTheDocument();
            });
        });
    });
    describe("Settings and Preferences", ()=>{
        beforeEach(async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva"
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
        });
        it("toggles settings panel", async ()=>{
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(settingsButton);
            });
            expect(_react.screen.getByText(/enable voice messages/i)).toBeInTheDocument();
            expect(_react.screen.getByText(/enable auto-translation/i)).toBeInTheDocument();
        });
        it("saves preference changes", async ()=>{
            const settingsButton = _react.screen.getByLabelText(/settings/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(settingsButton);
            });
            const voiceToggle = _react.screen.getByLabelText(/enable voice messages/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(voiceToggle);
            });
            // Voice recorder button should be hidden/disabled
            expect(_react.screen.queryByLabelText(/voice message/i)).not.toBeInTheDocument();
        });
    });
    describe("Error Handling", ()=>{
        it("handles messaging service errors", async ()=>{
            mockMessagingService.sendMessage.mockRejectedValue(new Error("Network error"));
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva"
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            const sendButton = _react.screen.getByRole("button", {
                name: /send/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "Test message"
                    }
                });
                _react.fireEvent.click(sendButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/failed to send message/i)).toBeInTheDocument();
            });
        });
        it("handles translation API errors", async ()=>{
            fetch.mockImplementation((url)=>{
                if (url.includes("/api/translate")) {
                    return Promise.reject(new Error("Translation API error"));
                }
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({})
                });
            });
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva",
                translationEnabled: true
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
            const translateButton = _react.screen.getByLabelText(/translate/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(translateButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/translation failed/i)).toBeInTheDocument();
            });
        });
        it("handles voice recording permission errors", async ()=>{
            navigator.mediaDevices.getUserMedia = jest.fn().mockRejectedValue(new Error("Permission denied"));
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva",
                voiceMessagesEnabled: true
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
            const voiceButton = _react.screen.getByLabelText(/voice message/i);
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.click(voiceButton);
            });
            const recordButton = _react.screen.getByRole("button", {
                name: /record/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.mouseDown(recordButton);
            });
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText(/microphone permission/i)).toBeInTheDocument();
            });
        });
    });
    describe("Performance and Optimization", ()=>{
        it("only loads voice recorder when needed", async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva",
                voiceMessagesEnabled: false
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
            // Voice message button should not be visible
            expect(_react.screen.queryByLabelText(/voice message/i)).not.toBeInTheDocument();
        });
        it("debounces translation requests", async ()=>{
            jest.useFakeTimers();
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva",
                autoTranslate: true
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            // Type quickly (should debounce)
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "H"
                    }
                });
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "He"
                    }
                });
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "Hello"
                    }
                });
            });
            // Fast-forward past debounce time
            (0, _testutils.act)(()=>{
                jest.advanceTimersByTime(1000);
            });
            // Should only make one translation request
            expect(fetch).toHaveBeenCalledTimes(1);
            jest.useRealTimers();
        });
    });
    describe("Accessibility Features", ()=>{
        beforeEach(async ()=>{
            renderWithProviders(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EnhancedMessagingInterface.default, {
                targetUserId: "user-2",
                targetUserName: "Jo\xe3o Silva"
            }));
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Jo\xe3o Silva")).toBeInTheDocument();
            });
        });
        it("provides proper ARIA labels for all controls", ()=>{
            expect(_react.screen.getByLabelText(/type a message/i)).toBeInTheDocument();
            expect(_react.screen.getByLabelText(/send/i)).toBeInTheDocument();
            expect(_react.screen.getByLabelText(/settings/i)).toBeInTheDocument();
        });
        it("supports keyboard navigation between controls", async ()=>{
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            const sendButton = _react.screen.getByRole("button", {
                name: /send/i
            });
            // Tab navigation should work
            await (0, _testutils.act)(async ()=>{
                messageInput.focus();
                _react.fireEvent.keyDown(messageInput, {
                    key: "Tab"
                });
            });
            expect(sendButton).toHaveFocus();
        });
        it("provides screen reader announcements for status changes", async ()=>{
            const messageInput = _react.screen.getByPlaceholderText(/type a message/i);
            const sendButton = _react.screen.getByRole("button", {
                name: /send/i
            });
            await (0, _testutils.act)(async ()=>{
                _react.fireEvent.change(messageInput, {
                    target: {
                        value: "Test message"
                    }
                });
                _react.fireEvent.click(sendButton);
            });
            // Should have status announcement for sent message
            expect(_react.screen.getByRole("status")).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,