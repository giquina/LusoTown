ecb36eb28069034b68a15ff6d4943f1b
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CartProvider: function() {
        return CartProvider;
    },
    useCart: function() {
        return useCart;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _reacthottoast = require("react-hot-toast");
const CartContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function CartProvider({ children }) {
    const [cartItems, setCartItems] = (0, _react.useState)([]);
    const [savedItems, setSavedItems] = (0, _react.useState)([]);
    const [pendingReservations, setPendingReservations] = (0, _react.useState)([]);
    // Load from localStorage on mount with error handling
    (0, _react.useEffect)(()=>{
        try {
            const savedCart = localStorage.getItem("lusotown-cart");
            const savedFavorites = localStorage.getItem("lusotown-saved");
            const savedReservations = localStorage.getItem("lusotown-reservations");
            if (savedCart) {
                const parsedCart = JSON.parse(savedCart);
                // Validate cart items structure
                if (Array.isArray(parsedCart)) {
                    setCartItems(parsedCart);
                }
            }
            if (savedFavorites) {
                const parsedFavorites = JSON.parse(savedFavorites);
                // Validate saved items structure
                if (Array.isArray(parsedFavorites)) {
                    setSavedItems(parsedFavorites);
                }
            }
            if (savedReservations) {
                const parsedReservations = JSON.parse(savedReservations);
                // Validate reservations structure
                if (Array.isArray(parsedReservations)) {
                    setPendingReservations(parsedReservations);
                }
            }
        } catch (error) {
            console.error("Error loading cart/saved data:", error);
            // Clear corrupted data
            localStorage.removeItem("lusotown-cart");
            localStorage.removeItem("lusotown-saved");
            localStorage.removeItem("lusotown-reservations");
        }
    }, []);
    // Save to localStorage when data changes with error handling
    (0, _react.useEffect)(()=>{
        try {
            localStorage.setItem("lusotown-cart", JSON.stringify(cartItems));
        } catch (error) {
            console.error("Error saving cart to localStorage:", error);
        }
    }, [
        cartItems
    ]);
    (0, _react.useEffect)(()=>{
        try {
            localStorage.setItem("lusotown-saved", JSON.stringify(savedItems));
        } catch (error) {
            console.error("Error saving favorites to localStorage:", error);
        }
    }, [
        savedItems
    ]);
    (0, _react.useEffect)(()=>{
        try {
            localStorage.setItem("lusotown-reservations", JSON.stringify(pendingReservations));
        } catch (error) {
            console.error("Error saving reservations to localStorage:", error);
        }
    }, [
        pendingReservations
    ]);
    // Cart functions - memoized to prevent unnecessary re-renders
    const addToCart = (0, _react.useCallback)((item)=>{
        const newItem = {
            ...item,
            id: `cart-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            quantity: item.quantity || 1,
            addedAt: new Date().toISOString()
        };
        // Check if item already exists (for events, don't allow duplicates)
        const existingItem = cartItems.find((cartItem)=>cartItem.type === newItem.type && cartItem.title === newItem.title && (newItem.type === "event" ? cartItem.eventDate === newItem.eventDate : true));
        if (existingItem && newItem.type === "event") {
            _reacthottoast.toast.error("Este evento j\xe1 est\xe1 no teu carrinho");
            return;
        }
        if (existingItem) {
            updateQuantity(existingItem.id, existingItem.quantity + newItem.quantity);
            return;
        }
        // Check availability for events
        if (newItem.type === "event" && newItem.spotsLeft !== undefined) {
            if (newItem.spotsLeft < newItem.quantity) {
                _reacthottoast.toast.error(`Apenas ${newItem.spotsLeft} vagas disponíveis`);
                return;
            }
        }
        setCartItems((prev)=>[
                ...prev,
                newItem
            ]);
        _reacthottoast.toast.success("Adicionado ao carrinho", {
            icon: "\uD83D\uDED2",
            duration: 2000
        });
    }, [
        cartItems
    ]);
    const removeFromCart = (0, _react.useCallback)((id)=>{
        setCartItems((prev)=>prev.filter((item)=>item.id !== id));
        _reacthottoast.toast.success("Removido do carrinho");
    }, []);
    const updateQuantity = (0, _react.useCallback)((id, quantity)=>{
        if (quantity <= 0) {
            removeFromCart(id);
            return;
        }
        setCartItems((prev)=>prev.map((item)=>{
                if (item.id === id) {
                    // Check max quantity constraints
                    if (item.maxQuantity && quantity > item.maxQuantity) {
                        _reacthottoast.toast.error(`Máximo ${item.maxQuantity} unidades`);
                        return item;
                    }
                    // Check spots availability for events
                    if (item.type === "event" && item.spotsLeft !== undefined && quantity > item.spotsLeft) {
                        _reacthottoast.toast.error(`Apenas ${item.spotsLeft} vagas disponíveis`);
                        return item;
                    }
                    return {
                        ...item,
                        quantity
                    };
                }
                return item;
            }));
    }, [
        removeFromCart
    ]);
    const clearCart = (0, _react.useCallback)(()=>{
        setCartItems([]);
        _reacthottoast.toast.success("Carrinho limpo");
    }, []);
    // Saved items functions
    const addToSaved = (0, _react.useCallback)((item)=>{
        // Check if already saved
        if (savedItems.some((saved)=>saved.type === item.type && saved.title === item.title)) {
            _reacthottoast.toast.error("Item j\xe1 guardado nos favoritos");
            return;
        }
        const newSavedItem = {
            ...item,
            id: `saved-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            savedAt: new Date().toISOString()
        };
        setSavedItems((prev)=>[
                ...prev,
                newSavedItem
            ]);
        _reacthottoast.toast.success("Guardado nos favoritos", {
            icon: "❤️",
            duration: 2000
        });
    }, [
        savedItems
    ]);
    const removeFromSaved = (0, _react.useCallback)((id)=>{
        setSavedItems((prev)=>prev.filter((item)=>item.id !== id));
        _reacthottoast.toast.success("Removido dos favoritos");
    }, []);
    const isSaved = (0, _react.useCallback)((title)=>{
        return savedItems.some((item)=>item.title === title);
    }, [
        savedItems
    ]);
    const toggleSaved = (0, _react.useCallback)((item)=>{
        const existing = savedItems.find((saved)=>saved.title === item.title);
        if (existing) {
            removeFromSaved(existing.id);
        } else {
            addToSaved(item);
        }
    }, [
        savedItems,
        removeFromSaved,
        addToSaved
    ]);
    // Reservation functions
    const createReservation = (0, _react.useCallback)(async (request)=>{
        try {
            // Check if item is in cart
            const cartItem = cartItems.find((item)=>item.type === request.itemType && item.title.includes(request.itemId));
            if (!cartItem) {
                return {
                    success: false,
                    message: "Item n\xe3o encontrado no carrinho"
                };
            }
            // Validate quantity
            if (request.quantity > cartItem.quantity) {
                return {
                    success: false,
                    message: "Quantidade inv\xe1lida"
                };
            }
            // Check if reservation already exists
            const existingReservation = pendingReservations.find((res)=>res.itemId === request.itemId);
            if (existingReservation) {
                return {
                    success: false,
                    message: "Reserva j\xe1 existe para este item"
                };
            }
            // Create reservation
            setPendingReservations((prev)=>[
                    ...prev,
                    request
                ]);
            // Remove from cart (move to reservations)
            removeFromCart(cartItem.id);
            _reacthottoast.toast.success("Reserva criada com sucesso! Aguarda confirma\xe7\xe3o.", {
                icon: "\uD83D\uDCC5",
                duration: 4000
            });
            return {
                success: true,
                message: "Reserva criada com sucesso"
            };
        } catch (error) {
            console.error("Error creating reservation:", error);
            return {
                success: false,
                message: "Erro ao criar reserva"
            };
        }
    }, [
        cartItems,
        pendingReservations,
        removeFromCart
    ]);
    // Utility functions
    const isInCart = (0, _react.useCallback)((title)=>{
        return cartItems.some((item)=>item.title === title);
    }, [
        cartItems
    ]);
    const getCartItem = (0, _react.useCallback)((id)=>{
        return cartItems.find((item)=>item.id === id);
    }, [
        cartItems
    ]);
    const getSavedItem = (0, _react.useCallback)((id)=>{
        return savedItems.find((item)=>item.id === id);
    }, [
        savedItems
    ]);
    // Computed values - memoized for performance
    const cartCount = (0, _react.useMemo)(()=>cartItems.reduce((total, item)=>total + item.quantity, 0), [
        cartItems
    ]);
    const cartTotal = (0, _react.useMemo)(()=>cartItems.reduce((total, item)=>total + item.price * item.quantity, 0), [
        cartItems
    ]);
    const savedCount = (0, _react.useMemo)(()=>savedItems.length, [
        savedItems
    ]);
    // Memoize context value to prevent unnecessary re-renders
    const contextValue = (0, _react.useMemo)(()=>({
            cartItems,
            cartCount,
            cartTotal,
            addToCart,
            removeFromCart,
            updateQuantity,
            clearCart,
            savedItems,
            savedCount,
            addToSaved,
            removeFromSaved,
            isSaved,
            toggleSaved,
            pendingReservations,
            createReservation,
            isInCart,
            getCartItem,
            getSavedItem
        }), [
        cartItems,
        cartCount,
        cartTotal,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart,
        savedItems,
        savedCount,
        addToSaved,
        removeFromSaved,
        isSaved,
        toggleSaved,
        pendingReservations,
        createReservation,
        isInCart,
        getCartItem,
        getSavedItem
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(CartContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useCart() {
    const context = (0, _react.useContext)(CartContext);
    if (context === undefined) {
        throw new Error("useCart must be used within a CartProvider");
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,