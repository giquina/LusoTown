{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/components/Header.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen, fireEvent, waitFor } from '../utils/test-utils'\nimport Header from '@/components/Header'\nimport { portugueseTestUtils, mobileTestUtils } from '../utils/test-utils'\n\n// Mock next/navigation\nconst mockPush = jest.fn()\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n  }),\n}))\n\ndescribe('Header Component', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockPush.mockClear()\n  })\n\n  describe('Basic Rendering', () => {\n    it('should render logo and main navigation', () => {\n      render(<Header />)\n      \n      // Should render logo\n      expect(screen.getByRole('link', { name: /lusotown/i })).toBeInTheDocument()\n      \n      // Should render main navigation links\n      expect(screen.getByText('Events')).toBeInTheDocument()\n      expect(screen.getByText('Services')).toBeInTheDocument()\n    })\n\n    it('should render language toggle', () => {\n      render(<Header />)\n      \n      // Language toggle should be present\n      const languageToggle = screen.getByRole('button', { name: /language/i })\n      expect(languageToggle).toBeInTheDocument()\n    })\n\n    it('should render cart and saved items buttons', () => {\n      render(<Header />)\n      \n      // Cart button should be present\n      expect(screen.getByRole('button', { name: /cart/i })).toBeInTheDocument()\n      \n      // Saved items button should be present\n      expect(screen.getByRole('button', { name: /saved/i })).toBeInTheDocument()\n    })\n  })\n\n  describe('Portuguese Language Support', () => {\n    it('should display Portuguese navigation when language is set to PT', () => {\n      render(<Header />, { initialLanguage: 'pt' })\n      \n      // Should show Portuguese navigation text\n      expect(screen.getByText('Eventos')).toBeInTheDocument()\n      expect(screen.getByText('Serviços')).toBeInTheDocument()\n    })\n\n    it('should display English navigation when language is set to EN', () => {\n      render(<Header />, { initialLanguage: 'en' })\n      \n      // Should show English navigation text\n      expect(screen.getByText('Events')).toBeInTheDocument()\n      expect(screen.getByText('Services')).toBeInTheDocument()\n    })\n\n    it('should toggle between Portuguese and English', async () => {\n      render(<Header />, { initialLanguage: 'en' })\n      \n      // Initial state should be English\n      expect(screen.getByText('Events')).toBeInTheDocument()\n      \n      // Click language toggle\n      const languageToggle = screen.getByRole('button', { name: /language/i })\n      fireEvent.click(languageToggle)\n      \n      // Should switch to Portuguese\n      await waitFor(() => {\n        expect(screen.getByText('Eventos')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Mobile Navigation', () => {\n    beforeEach(() => {\n      mobileTestUtils.setMobileViewport()\n    })\n\n    it('should show mobile menu button on small screens', () => {\n      render(<Header />)\n      \n      // Mobile menu button should be visible\n      const mobileMenuButton = screen.getByRole('button', { name: /menu/i })\n      expect(mobileMenuButton).toBeInTheDocument()\n    })\n\n    it('should open mobile menu when hamburger is clicked', async () => {\n      render(<Header />)\n      \n      const mobileMenuButton = screen.getByRole('button', { name: /menu/i })\n      fireEvent.click(mobileMenuButton)\n      \n      // Mobile menu should open and show navigation links\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument()\n      })\n    })\n\n    it('should close mobile menu when close button is clicked', async () => {\n      render(<Header />)\n      \n      const mobileMenuButton = screen.getByRole('button', { name: /menu/i })\n      fireEvent.click(mobileMenuButton)\n      \n      // Wait for menu to open\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument()\n      })\n      \n      // Click close button\n      const closeButton = screen.getByRole('button', { name: /close/i })\n      fireEvent.click(closeButton)\n      \n      // Menu should close\n      await waitFor(() => {\n        expect(screen.queryByRole('dialog')).not.toBeInTheDocument()\n      })\n    })\n\n    it('should handle touch interactions properly', () => {\n      render(<Header />)\n      \n      const mobileMenuButton = screen.getByRole('button', { name: /menu/i })\n      \n      // Simulate touch interaction\n      mobileTestUtils.mockTouchStart(mobileMenuButton, 10, 10)\n      fireEvent.click(mobileMenuButton)\n      \n      // Should open menu\n      expect(screen.getByRole('dialog')).toBeInTheDocument()\n    })\n  })\n\n  describe('Services Dropdown', () => {\n    it('should show services dropdown on hover', async () => {\n      render(<Header />)\n      \n      const servicesButton = screen.getByText('Services')\n      \n      // Hover over services\n      fireEvent.mouseEnter(servicesButton)\n      \n      // Should show dropdown with service options\n      await waitFor(() => {\n        expect(screen.getByText('Cultural Tours')).toBeInTheDocument()\n        expect(screen.getByText('Executive Transport')).toBeInTheDocument()\n        expect(screen.getByText('Close Protection')).toBeInTheDocument()\n        expect(screen.getByText('Transport & SIA')).toBeInTheDocument()\n      })\n    })\n\n    it('should hide services dropdown when mouse leaves', async () => {\n      render(<Header />)\n      \n      const servicesButton = screen.getByText('Services')\n      \n      // Hover over services\n      fireEvent.mouseEnter(servicesButton)\n      await waitFor(() => {\n        expect(screen.getByText('Cultural Tours')).toBeInTheDocument()\n      })\n      \n      // Mouse leave\n      fireEvent.mouseLeave(servicesButton)\n      \n      // Dropdown should hide\n      await waitFor(() => {\n        expect(screen.queryByText('Cultural Tours')).not.toBeInTheDocument()\n      })\n    })\n\n    it('should navigate to correct service page when clicked', async () => {\n      render(<Header />)\n      \n      const servicesButton = screen.getByText('Services')\n      fireEvent.mouseEnter(servicesButton)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Transport & SIA')).toBeInTheDocument()\n      })\n      \n      // Click on Transport & SIA\n      fireEvent.click(screen.getByText('Transport & SIA'))\n      \n      // Should navigate to transport page\n      expect(mockPush).toHaveBeenCalledWith('/transport')\n    })\n  })\n\n  describe('User Authentication', () => {\n    it('should show login button when user is not authenticated', () => {\n      render(<Header />)\n      \n      expect(screen.getByText('Sign In')).toBeInTheDocument()\n    })\n\n    it('should show user menu when user is authenticated', () => {\n      const mockUser = portugueseTestUtils.mockPortugueseUser\n      render(<Header />, { mockUser })\n      \n      // Should show user name or avatar\n      expect(screen.getByText(mockUser.name)).toBeInTheDocument()\n    })\n\n    it('should show premium badge for premium users', () => {\n      const mockPremiumUser = {\n        ...portugueseTestUtils.mockPortugueseUser,\n        membershipTier: 'premium'\n      }\n      render(<Header />, { mockUser: mockPremiumUser })\n      \n      // Should show premium indicator\n      expect(screen.getByTestId('premium-badge')).toBeInTheDocument()\n    })\n\n    it('should handle logout correctly', async () => {\n      const mockUser = portugueseTestUtils.mockPortugueseUser\n      render(<Header />, { mockUser })\n      \n      // Click user menu\n      const userButton = screen.getByText(mockUser.name)\n      fireEvent.click(userButton)\n      \n      // Click logout\n      const logoutButton = screen.getByText('Sign Out')\n      fireEvent.click(logoutButton)\n      \n      // Should trigger logout\n      await waitFor(() => {\n        expect(screen.getByText('Sign In')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Search Functionality', () => {\n    it('should render search bar on desktop', () => {\n      mobileTestUtils.setDesktopViewport()\n      render(<Header />)\n      \n      const searchInput = screen.getByPlaceholderText(/search/i)\n      expect(searchInput).toBeInTheDocument()\n    })\n\n    it('should handle search input in Portuguese', async () => {\n      render(<Header />, { initialLanguage: 'pt' })\n      \n      const searchInput = screen.getByPlaceholderText(/pesquisar/i)\n      \n      fireEvent.change(searchInput, { target: { value: 'fado' } })\n      \n      expect(searchInput).toHaveValue('fado')\n    })\n\n    it('should handle Portuguese character input correctly', async () => {\n      render(<Header />, { initialLanguage: 'pt' })\n      \n      const searchInput = screen.getByPlaceholderText(/pesquisar/i)\n      \n      // Test Portuguese characters\n      fireEvent.change(searchInput, { target: { value: 'São João' } })\n      \n      expect(searchInput).toHaveValue('São João')\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('should have proper ARIA labels', () => {\n      render(<Header />)\n      \n      // Logo should have proper aria-label\n      const logo = screen.getByRole('link', { name: /lusotown/i })\n      expect(logo).toHaveAttribute('aria-label')\n      \n      // Navigation should have proper role\n      const nav = screen.getByRole('navigation')\n      expect(nav).toBeInTheDocument()\n      \n      // Mobile menu button should have aria-expanded\n      const mobileMenuButton = screen.getByRole('button', { name: /menu/i })\n      expect(mobileMenuButton).toHaveAttribute('aria-expanded')\n    })\n\n    it('should be keyboard navigable', () => {\n      render(<Header />)\n      \n      // Tab through main navigation\n      const eventsLink = screen.getByText('Events')\n      eventsLink.focus()\n      expect(eventsLink).toHaveFocus()\n      \n      // Tab to services\n      fireEvent.keyDown(eventsLink, { key: 'Tab' })\n      const servicesLink = screen.getByText('Services')\n      expect(servicesLink).toHaveFocus()\n    })\n\n    it('should support screen readers with proper semantic markup', () => {\n      render(<Header />)\n      \n      // Should have main navigation landmark\n      expect(screen.getByRole('navigation')).toBeInTheDocument()\n      \n      // Should have proper heading structure\n      expect(screen.getByRole('banner')).toBeInTheDocument()\n    })\n  })\n\n  describe('Performance', () => {\n    it('should render quickly on mobile devices', async () => {\n      mobileTestUtils.setMobileViewport()\n      \n      const startTime = performance.now()\n      render(<Header />)\n      const endTime = performance.now()\n      \n      // Should render within reasonable time (less than 100ms)\n      expect(endTime - startTime).toBeLessThan(100)\n    })\n\n    it('should not cause layout shifts during language changes', async () => {\n      const { rerender } = render(<Header />, { initialLanguage: 'en' })\n      \n      // Get initial layout\n      const header = screen.getByRole('banner')\n      const initialHeight = header.getBoundingClientRect().height\n      \n      // Change language\n      rerender(<Header />)\n      \n      // Layout should remain stable\n      const newHeight = header.getBoundingClientRect().height\n      expect(Math.abs(newHeight - initialHeight)).toBeLessThan(5) // Allow 5px tolerance\n    })\n  })\n\n  describe('Network Connectivity', () => {\n    it('should handle offline state gracefully', () => {\n      // Mock offline state\n      Object.defineProperty(navigator, 'onLine', {\n        writable: true,\n        value: false,\n      })\n      \n      render(<Header />)\n      \n      // Should still render basic navigation\n      expect(screen.getByText('Events')).toBeInTheDocument()\n      expect(screen.getByText('Services')).toBeInTheDocument()\n    })\n  })\n\n  describe('Portuguese Cultural Features', () => {\n    it('should link to Portuguese cultural services correctly', async () => {\n      render(<Header />, { initialLanguage: 'pt' })\n      \n      const servicesButton = screen.getByText('Serviços')\n      fireEvent.mouseEnter(servicesButton)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Tours Culturais')).toBeInTheDocument()\n      })\n      \n      // Should navigate to cultural tours\n      fireEvent.click(screen.getByText('Tours Culturais'))\n      expect(mockPush).toHaveBeenCalledWith('/services#cultural-tours')\n    })\n\n    it('should maintain Portuguese context in navigation', () => {\n      render(<Header />, { initialLanguage: 'pt' })\n      \n      // Portuguese navigation should maintain cultural context\n      expect(screen.getByText('Eventos')).toBeInTheDocument()\n      expect(screen.getByText('Serviços')).toBeInTheDocument()\n      \n      // Should not show generic translations\n      expect(screen.queryByText('Events (Generic)')).not.toBeInTheDocument()\n    })\n  })\n})\n"],"names":["jest","mock","useRouter","push","mockPush","fn","describe","beforeEach","clearAllMocks","mockClear","it","render","Header","expect","screen","getByRole","name","toBeInTheDocument","getByText","languageToggle","initialLanguage","fireEvent","click","waitFor","mobileTestUtils","setMobileViewport","mobileMenuButton","closeButton","queryByRole","not","mockTouchStart","servicesButton","mouseEnter","mouseLeave","queryByText","toHaveBeenCalledWith","mockUser","portugueseTestUtils","mockPortugueseUser","mockPremiumUser","membershipTier","getByTestId","userButton","logoutButton","setDesktopViewport","searchInput","getByPlaceholderText","change","target","value","toHaveValue","logo","toHaveAttribute","nav","eventsLink","focus","toHaveFocus","keyDown","key","servicesLink","startTime","performance","now","endTime","toBeLessThan","rerender","header","initialHeight","getBoundingClientRect","height","newHeight","Math","abs","Object","defineProperty","navigator","writable"],"mappings":"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"}