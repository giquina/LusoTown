89ce6eab10b3e1c4739fcc79ce4dd04c
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PortugueseCarouselPerformanceUtils: function() {
        return PortugueseCarouselPerformanceUtils;
    },
    useCarouselPerformanceOptimization: function() {
        return useCarouselPerformanceOptimization;
    }
});
const _react = require("react");
const _LanguageContext = require("../context/LanguageContext");
const _logger = /*#__PURE__*/ _interop_require_default(require("../utils/logger"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DEFAULT_MOBILE_SETTINGS = {
    enableImageLazyLoading: true,
    enableIntersectionObserver: true,
    enableVirtualScrolling: true,
    enablePreloadOptimization: true,
    enableBundleSplitting: true,
    enableCriticalPathOptimization: true,
    enablePortugueseContentPrioritization: true
};
const PORTUGUESE_READING_SPEEDS = {
    "pt-pt": 200,
    "pt-br": 180,
    "en-gb": 220 // words per minute for English (UK)
};
function useCarouselPerformanceOptimization(options) {
    const { language } = (0, _LanguageContext.useLanguage)();
    const [metrics, setMetrics] = (0, _react.useState)({
        loadTime: 0,
        renderTime: 0,
        interactionLatency: 0,
        memoryUsage: 0,
        networkStatus: "online",
        frameRate: 60,
        bundleSize: 0,
        cacheHitRatio: 0
    });
    const [mobileSettings, setMobileSettings] = (0, _react.useState)(DEFAULT_MOBILE_SETTINGS);
    const [portugueseReadingPatterns, setPortugueseReadingPatterns] = (0, _react.useState)({
        averageReadingTime: PORTUGUESE_READING_SPEEDS[language === "pt" ? "pt-pt" : "en-gb"],
        scrollVelocity: 0,
        interactionFrequency: 0,
        contentEngagement: 0,
        preferredAutoAdvanceSpeed: 5000
    });
    const performanceObserver = (0, _react.useRef)();
    const frameRateMonitor = (0, _react.useRef)();
    const memoryMonitor = (0, _react.useRef)();
    const interactionTimer = (0, _react.useRef)();
    const cacheAnalytics = (0, _react.useRef)(new Map());
    // Portuguese cultural content optimization
    const optimizePortugueseContentTiming = (0, _react.useCallback)((contentLength, language)=>{
        const wordsPerMinute = PORTUGUESE_READING_SPEEDS[language] || 200;
        const estimatedReadingTime = contentLength / wordsPerMinute * 60 * 1000 // Convert to milliseconds
        ;
        // Add Portuguese cultural breathing space (Portuguese culture values reflection time)
        const culturalBuffer = language === "pt" ? 1500 : 1000;
        return Math.max(3000, estimatedReadingTime + culturalBuffer);
    }, []);
    // Advanced mobile performance monitoring
    const startPerformanceMonitoring = (0, _react.useCallback)(()=>{
        if (!options?.enableRealTimeMonitoring) return;
        // Performance Observer for advanced metrics
        if ("PerformanceObserver" in window) {
            performanceObserver.current = new PerformanceObserver((list)=>{
                const entries = list.getEntries();
                entries.forEach((entry)=>{
                    if (entry.entryType === "measure") {
                        setMetrics((prev)=>({
                                ...prev,
                                renderTime: entry.duration
                            }));
                    }
                    if (entry.entryType === "navigation") {
                        const navEntry = entry;
                        setMetrics((prev)=>({
                                ...prev,
                                loadTime: navEntry.loadEventEnd - navEntry.loadEventStart
                            }));
                    }
                });
            });
            performanceObserver.current.observe({
                entryTypes: [
                    "measure",
                    "navigation",
                    "paint",
                    "largest-contentful-paint"
                ]
            });
        }
        // Frame rate monitoring
        let lastTime = performance.now();
        let frameCount = 0;
        const measureFrameRate = (currentTime)=>{
            frameCount++;
            if (currentTime - lastTime >= 1000) {
                setMetrics((prev)=>({
                        ...prev,
                        frameRate: Math.round(frameCount * 1000 / (currentTime - lastTime))
                    }));
                frameCount = 0;
                lastTime = currentTime;
            }
            frameRateMonitor.current = requestAnimationFrame(measureFrameRate);
        };
        frameRateMonitor.current = requestAnimationFrame(measureFrameRate);
        // Memory monitoring
        memoryMonitor.current = setInterval(()=>{
            if ("memory" in performance) {
                const memory = performance.memory;
                setMetrics((prev)=>({
                        ...prev,
                        memoryUsage: Math.round(memory.usedJSHeapSize / 1024 / 1024)
                    }));
            }
        }, 2000);
        // Network status monitoring
        const updateNetworkStatus = ()=>{
            const connection = navigator.connection;
            let status = navigator.onLine ? "online" : "offline";
            if (connection && connection.effectiveType) {
                if ([
                    "slow-2g",
                    "2g"
                ].includes(connection.effectiveType)) {
                    status = "slow";
                }
            }
            setMetrics((prev)=>({
                    ...prev,
                    networkStatus: status
                }));
        };
        updateNetworkStatus();
        window.addEventListener("online", updateNetworkStatus);
        window.addEventListener("offline", updateNetworkStatus);
        return ()=>{
            window.removeEventListener("online", updateNetworkStatus);
            window.removeEventListener("offline", updateNetworkStatus);
        };
    }, [
        options?.enableRealTimeMonitoring
    ]);
    // Carousel-specific optimizations
    const optimizeCarouselPerformance = (0, _react.useCallback)(()=>{
        const level = options?.optimizationLevel || "standard";
        // Adjust settings based on optimization level
        if (level === "aggressive") {
            setMobileSettings((prev)=>({
                    ...prev,
                    enableVirtualScrolling: true,
                    enableBundleSplitting: true,
                    enableCriticalPathOptimization: true
                }));
        }
        // Portuguese content prioritization
        if (options?.enablePortugueseOptimizations && language === "pt") {
            // Optimize for Portuguese reading patterns
            const portugueseOptimizations = {
                preloadDistance: 3,
                lazyLoadThreshold: 100,
                cacheStrategy: "aggressive"
            };
            _logger.default.info("[Carousel Performance] Applied Portuguese cultural optimizations", portugueseOptimizations);
        }
    }, [
        options?.optimizationLevel,
        options?.enablePortugueseOptimizations,
        language
    ]);
    // Image optimization for Portuguese cultural content
    const optimizePortugueseImages = (0, _react.useCallback)(async (imageUrl)=>{
        if (!mobileSettings.enableImageLazyLoading) return imageUrl;
        // Portuguese cultural image optimization
        const isMobile = window.innerWidth <= 768;
        const isSlowConnection = metrics.networkStatus === "slow";
        let optimizedUrl = imageUrl;
        // Apply mobile optimizations
        if (isMobile || isSlowConnection) {
            // Reduce quality for mobile/slow connections
            if (imageUrl.includes("cloudinary")) {
                optimizedUrl = imageUrl.replace(/q_\d+/, isSlowConnection ? "q_30" : "q_60");
                optimizedUrl = optimizedUrl.replace(/w_\d+/, isMobile ? "w_400" : "w_600");
            }
        }
        // Cache optimization analytics
        const cacheKey = `img_${imageUrl.split("/").pop()}`;
        const cacheHits = cacheAnalytics.current.get(cacheKey) || 0;
        cacheAnalytics.current.set(cacheKey, cacheHits + 1);
        return optimizedUrl;
    }, [
        mobileSettings.enableImageLazyLoading,
        metrics.networkStatus
    ]);
    // Portuguese reading pattern analysis
    const analyzePortugueseReadingPatterns = (0, _react.useCallback)((interactionData)=>{
        setPortugueseReadingPatterns((prev)=>({
                ...prev,
                scrollVelocity: interactionData.scrollVelocity,
                contentEngagement: interactionData.engagementScore,
                preferredAutoAdvanceSpeed: optimizePortugueseContentTiming(200, language)
            }));
        // Adjust carousel timing based on Portuguese reading patterns
        const isPortugueseReader = language === "pt";
        const slowReader = interactionData.dwellTime > portugueseReadingPatterns.averageReadingTime * 1.3;
        if (isPortugueseReader && slowReader) {
            // Provide more time for Portuguese cultural content
            setPortugueseReadingPatterns((prev)=>({
                    ...prev,
                    preferredAutoAdvanceSpeed: prev.preferredAutoAdvanceSpeed * 1.2
                }));
        }
    }, [
        language,
        optimizePortugueseContentTiming
    ]);
    // Interaction latency measurement
    const measureInteractionLatency = (0, _react.useCallback)(()=>{
        interactionTimer.current = performance.now();
    }, []);
    const recordInteractionComplete = (0, _react.useCallback)(()=>{
        if (interactionTimer.current) {
            const latency = performance.now() - interactionTimer.current;
            setMetrics((prev)=>({
                    ...prev,
                    interactionLatency: latency
                }));
        }
    }, []);
    // Bundle size analysis
    const analyzeBundleSize = (0, _react.useCallback)(async ()=>{
        if (!mobileSettings.enableBundleSplitting) return;
        try {
            // Measure loaded bundle size
            const resources = performance.getEntriesByType("resource");
            let totalSize = 0;
            resources.forEach((resource)=>{
                if (resource.name.includes("carousel") || resource.name.includes("lusophone")) {
                    totalSize += resource.transferSize || 0;
                }
            });
            setMetrics((prev)=>({
                    ...prev,
                    bundleSize: Math.round(totalSize / 1024) // Convert to KB
                }));
            // Cache hit ratio calculation
            const totalCacheRequests = Array.from(cacheAnalytics.current.values()).reduce((a, b)=>a + b, 0);
            const cacheHits = Array.from(cacheAnalytics.current.values()).filter((hits)=>hits > 1).length;
            const hitRatio = totalCacheRequests > 0 ? cacheHits / totalCacheRequests * 100 : 0;
            setMetrics((prev)=>({
                    ...prev,
                    cacheHitRatio: Math.round(hitRatio)
                }));
        } catch (error) {
            _logger.default.warn("[Carousel Performance] Bundle analysis failed:", error);
        }
    }, [
        mobileSettings.enableBundleSplitting
    ]);
    // Auto-advance timing optimization for Portuguese content
    const getOptimalAutoAdvanceTime = (0, _react.useCallback)((contentLength)=>{
        const baseTime = optimizePortugueseContentTiming(contentLength, language);
        const readingPatternAdjustment = portugueseReadingPatterns.preferredAutoAdvanceSpeed;
        const connectionAdjustment = metrics.networkStatus === "slow" ? 1.5 : 1;
        return Math.round(baseTime * connectionAdjustment);
    }, [
        optimizePortugueseContentTiming,
        language,
        portugueseReadingPatterns.preferredAutoAdvanceSpeed,
        metrics.networkStatus
    ]);
    // Performance optimization recommendations
    const getOptimizationRecommendations = (0, _react.useCallback)(()=>{
        const recommendations = [];
        if (metrics.frameRate < 55) {
            recommendations.push("enable-virtual-scrolling");
        }
        if (metrics.memoryUsage > 100) {
            recommendations.push("optimize-memory-usage");
        }
        if (metrics.interactionLatency > 100) {
            recommendations.push("reduce-animation-complexity");
        }
        if (metrics.networkStatus === "slow") {
            recommendations.push("enable-aggressive-caching");
        }
        if (metrics.bundleSize > 500) {
            recommendations.push("enable-code-splitting");
        }
        if (language === "pt" && portugueseReadingPatterns.contentEngagement < 70) {
            recommendations.push("optimize-portuguese-content-timing");
        }
        return recommendations;
    }, [
        metrics,
        language,
        portugueseReadingPatterns.contentEngagement
    ]);
    // Initialize performance monitoring
    (0, _react.useEffect)(()=>{
        const cleanup = startPerformanceMonitoring();
        optimizeCarouselPerformance();
        analyzeBundleSize();
        return ()=>{
            cleanup?.();
            if (performanceObserver.current) {
                performanceObserver.current.disconnect();
            }
            if (frameRateMonitor.current) {
                cancelAnimationFrame(frameRateMonitor.current);
            }
            if (memoryMonitor.current) {
                clearInterval(memoryMonitor.current);
            }
        };
    }, [
        startPerformanceMonitoring,
        optimizeCarouselPerformance,
        analyzeBundleSize
    ]);
    return {
        metrics,
        mobileSettings,
        portugueseReadingPatterns,
        optimizePortugueseImages,
        analyzePortugueseReadingPatterns,
        measureInteractionLatency,
        recordInteractionComplete,
        getOptimalAutoAdvanceTime,
        getOptimizationRecommendations,
        isOptimized: Object.values(mobileSettings).some((setting)=>setting === true)
    };
}
const PortugueseCarouselPerformanceUtils = {
    // Calculate optimal image sizes for Portuguese cultural content
    getOptimalImageSize: (viewportWidth, isMobile)=>{
        if (isMobile) {
            return viewportWidth <= 375 ? 300 : 400;
        }
        return viewportWidth <= 768 ? 500 : 700;
    },
    // Optimize Portuguese text rendering
    optimizePortugueseTextRendering: ()=>{
        const style = document.createElement("style");
        style.textContent = `
      .portuguese-carousel-text {
        font-feature-settings: "liga" 1, "kern" 1;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        word-break: break-word;
        hyphens: auto;
      }
      
      .portuguese-carousel-text[lang="pt"] {
        line-height: 1.6;
        letter-spacing: 0.025em;
      }
    `;
        document.head.appendChild(style);
    },
    // Measure Portuguese content readability
    measurePortugueseReadability: (text, language)=>{
        const words = text.split(/\s+/).length;
        const sentences = text.split(/[.!?]+/).length;
        const avgWordsPerSentence = words / sentences;
        // Portuguese typically has longer sentences
        const isPortugueseOptimal = language === "pt" ? avgWordsPerSentence <= 18 : avgWordsPerSentence <= 15 // English
        ;
        return {
            wordCount: words,
            sentenceCount: sentences,
            avgWordsPerSentence: Math.round(avgWordsPerSentence),
            isOptimal: isPortugueseOptimal,
            estimatedReadingTime: words / PORTUGUESE_READING_SPEEDS[language] * 60
        };
    }
};

//# sourceMappingURL=data:application/json;base64,