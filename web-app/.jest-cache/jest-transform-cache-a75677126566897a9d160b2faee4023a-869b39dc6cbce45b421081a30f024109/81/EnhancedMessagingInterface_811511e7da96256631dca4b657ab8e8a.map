{"version":3,"sources":["/workspaces/LusoTown/web-app/src/components/EnhancedMessagingInterface.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { useLanguage } from '@/context/LanguageContext'\nimport { messagingService, ConversationMessage, Conversation } from '@/services/messagingService'\nimport MessageAuthorizationGate from './MessageAuthorizationGate'\nimport VoiceMessageRecorder from './VoiceMessageRecorder'\nimport VoiceMessagePlayer from './VoiceMessagePlayer'\nimport MessageTranslator from './MessageTranslator'\nimport PortugueseCommunicationPanel from './PortugueseCommunicationPanel'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { \n  Send, \n  Smile, \n  Image, \n  MoreVertical, \n  Clock, \n  CheckCircle, \n  AlertTriangle,\n  Shield,\n  Heart,\n  Calendar,\n  ArrowLeft,\n  Flag,\n  Mic,\n  MicOff,\n  Languages,\n  Globe,\n  Volume2,\n  VolumeX,\n  Settings,\n  Plus,\n  X,\n  Paperclip\n} from 'lucide-react'\nimport { formatDistanceToNow } from 'date-fns'\nimport { pt, enUS } from 'date-fns/locale'\nimport { PORTUGUESE_COLORS } from '@/config/brand'\n\ninterface VoiceMessage {\n  id: string\n  audioUrl: string\n  duration: number\n  transcription?: string\n  translation?: string\n  senderName: string\n  senderAvatar?: string\n  timestamp: string\n  dialect?: string\n  confidence?: number\n  isRead?: boolean\n}\n\ninterface EnhancedMessagingInterfaceProps {\n  targetUserId: string\n  targetUserName: string\n  targetUserImage?: string\n  targetUserLocation?: string\n  targetUserBio?: string\n  conversationId?: string\n  membershipTier?: string\n  preferredDialect?: string\n  onBack?: () => void\n  className?: string\n}\n\nexport default function EnhancedMessagingInterface({\n  targetUserId,\n  targetUserName,\n  targetUserImage,\n  targetUserLocation,\n  targetUserBio,\n  conversationId: initialConversationId,\n  membershipTier = 'standard',\n  preferredDialect = 'pt-PT',\n  onBack,\n  className = ''\n}: EnhancedMessagingInterfaceProps) {\n  const { language } = useLanguage()\n  const [conversation, setConversation] = useState<Conversation | null>(null)\n  const [messages, setMessages] = useState<ConversationMessage[]>([])\n  const [voiceMessages, setVoiceMessages] = useState<VoiceMessage[]>([])\n  const [newMessage, setNewMessage] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [sending, setSending] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [hasPermission, setHasPermission] = useState(false)\n  \n  // Enhanced messaging features\n  const [showVoiceRecorder, setShowVoiceRecorder] = useState(false)\n  const [showTranslator, setShowTranslator] = useState(false)\n  const [showCommunicationPanel, setShowCommunicationPanel] = useState(false)\n  const [translationEnabled, setTranslationEnabled] = useState(true)\n  const [voiceMessagesEnabled, setVoiceMessagesEnabled] = useState(true)\n  const [selectedMessageForTranslation, setSelectedMessageForTranslation] = useState<string | null>(null)\n  const [autoTranslate, setAutoTranslate] = useState(false)\n  const [showSettings, setShowSettings] = useState(false)\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null)\n  const inputRef = useRef<HTMLTextAreaElement>(null)\n\n  const translations = {\n    en: {\n      typeMessage: 'Type a message...',\n      send: 'Send',\n      voiceMessage: 'Voice message',\n      translate: 'Translate',\n      culturalExpressions: 'Portuguese expressions',\n      messagingRestricted: 'Messaging is restricted for safety',\n      waitingApproval: 'Message pending approval',\n      messageBlocked: 'Message blocked by safety filters',\n      messageDelivered: 'Delivered',\n      messageRead: 'Read',\n      today: 'Today',\n      yesterday: 'Yesterday',\n      reportMessage: 'Report message',\n      backToConversations: 'Back to conversations',\n      safetyNotice: 'All messages are monitored for safety in our Portuguese-speaking community',\n      connectionType: {\n        mutual_match: 'Connected through mutual match',\n        event_based: 'Met at a community event',\n        professional: 'Professional connection'\n      },\n      conversationStarters: [\n        'Olá! How are you enjoying London?',\n        'What\\'s your favorite Portuguese restaurant here?',\n        'Have you been to any Lusophone events recently?',\n        'How do you stay connected to Portuguese culture in London?'\n      ],\n      startConversation: 'Start the conversation with a friendly greeting!',\n      enableVoiceMessages: 'Enable voice messages',\n      enableAutoTranslation: 'Auto-translate messages',\n      voiceRecording: 'Voice recording',\n      translationSettings: 'Translation settings',\n      messageSettings: 'Message settings',\n      sendingVoiceMessage: 'Sending voice message...',\n      voiceMessageSent: 'Voice message sent!',\n      translationFailed: 'Translation failed',\n      attachFile: 'Attach file',\n      emoji: 'Emoji',\n      more: 'More options'\n    },\n    pt: {\n      typeMessage: 'Escreva uma mensagem...',\n      send: 'Enviar',\n      voiceMessage: 'Mensagem de voz',\n      translate: 'Traduzir',\n      culturalExpressions: 'Expressões portuguesas',\n      messagingRestricted: 'Mensagens restringidas por segurança',\n      waitingApproval: 'Mensagem pendente de aprovação',\n      messageBlocked: 'Mensagem bloqueada pelos filtros de segurança',\n      messageDelivered: 'Entregue',\n      messageRead: 'Lida',\n      today: 'Hoje',\n      yesterday: 'Ontem',\n      reportMessage: 'Reportar mensagem',\n      backToConversations: 'Voltar às conversas',\n      safetyNotice: 'Todas as mensagens são monitorizadas para segurança na nossa comunidade de falantes de português',\n      connectionType: {\n        mutual_match: 'Conectados através de match mútuo',\n        event_based: 'Conheceram-se num evento da comunidade',\n        professional: 'Conexão profissional'\n      },\n      conversationStarters: [\n        'Olá! Como está a correr Londres?',\n        'Qual é o seu restaurante português favorito aqui?',\n        'Esteve em algum evento português recentemente?',\n        'Como se mantém ligado à cultura portuguesa em Londres?'\n      ],\n      startConversation: 'Comece a conversa com uma saudação amigável!',\n      enableVoiceMessages: 'Ativar mensagens de voz',\n      enableAutoTranslation: 'Auto-traduzir mensagens',\n      voiceRecording: 'Gravação de voz',\n      translationSettings: 'Configurações de tradução',\n      messageSettings: 'Configurações de mensagem',\n      sendingVoiceMessage: 'Enviando mensagem de voz...',\n      voiceMessageSent: 'Mensagem de voz enviada!',\n      translationFailed: 'Falha na tradução',\n      attachFile: 'Anexar ficheiro',\n      emoji: 'Emoji',\n      more: 'Mais opções'\n    }\n  }\n\n  const t = translations[language]\n  const dateLocale = language === 'pt' ? pt : enUS\n\n  useEffect(() => {\n    if (hasPermission) {\n      initializeConversation()\n    }\n  }, [hasPermission, initialConversationId])\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages, voiceMessages])\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  const initializeConversation = async () => {\n    try {\n      setLoading(true)\n      \n      let conv: Conversation\n      if (initialConversationId) {\n        // Get existing conversation\n        const conversations = await messagingService.getUserConversations()\n        conv = conversations.find(c => c.id === initialConversationId)\n        if (!conv) throw new Error('Conversation not found')\n      } else {\n        // Create or get conversation\n        conv = await messagingService.getOrCreateConversation(targetUserId)\n      }\n      \n      setConversation(conv)\n      \n      // Load messages\n      const msgs = await messagingService.getConversationMessages(conv.id)\n      setMessages(msgs)\n      \n      // Load voice messages (mock data for now)\n      setVoiceMessages([])\n      \n      // Mark messages as read\n      await messagingService.markMessagesAsRead(conv.id)\n    } catch (err) {\n      console.error('Error initializing conversation:', err)\n      setError(err instanceof Error ? err.message : 'Failed to load conversation')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || !conversation || sending) return\n\n    try {\n      setSending(true)\n      const message = await messagingService.sendMessage(\n        conversation.id,\n        targetUserId,\n        newMessage.trim()\n      )\n      \n      setMessages(prev => [...prev, message])\n      setNewMessage('')\n      setError(null)\n      \n      // Auto-translate if enabled\n      if (autoTranslate && translationEnabled) {\n        handleTranslateMessage(message.id, newMessage.trim())\n      }\n      \n    } catch (err) {\n      console.error('Error sending message:', err)\n      setError(err instanceof Error ? err.message : 'Failed to send message')\n    } finally {\n      setSending(false)\n    }\n  }\n\n  const handleSendVoiceMessage = async (audioBlob: Blob, transcription: string, duration: number) => {\n    if (!conversation) return\n\n    try {\n      setSending(true)\n      \n      // Upload voice message to server\n      const formData = new FormData()\n      formData.append('audio', audioBlob, 'voice-message.webm')\n      formData.append('conversationId', conversation.id)\n      formData.append('targetUserId', targetUserId)\n      formData.append('transcription', transcription)\n      formData.append('duration', duration.toString())\n      formData.append('dialect', preferredDialect)\n\n      const response = await fetch('/api/voice-messages', {\n        method: 'POST',\n        body: formData\n      })\n\n      if (!response.ok) {\n        throw new Error('Failed to send voice message')\n      }\n\n      const voiceMessage = await response.json()\n      \n      // Add to voice messages list\n      setVoiceMessages(prev => [...prev, voiceMessage])\n      \n      // Auto-translate transcription if enabled\n      if (autoTranslate && translationEnabled && transcription) {\n        handleTranslateMessage(voiceMessage.id, transcription)\n      }\n\n      setShowVoiceRecorder(false)\n      setError(null)\n\n    } catch (err) {\n      console.error('Error sending voice message:', err)\n      setError(err instanceof Error ? err.message : 'Failed to send voice message')\n    } finally {\n      setSending(false)\n    }\n  }\n\n  const handleTranslateMessage = async (messageId: string, text: string) => {\n    try {\n      const response = await fetch('/api/translate-message', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messageId,\n          text,\n          sourceLanguage: 'auto',\n          targetLanguage: language === 'pt' ? 'en' : 'pt',\n          dialect: preferredDialect\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error('Translation failed')\n      }\n\n      const translation = await response.json()\n      \n      // Update message with translation\n      setMessages(prev => prev.map(msg => \n        msg.id === messageId \n          ? { ...msg, translation: translation.translatedText }\n          : msg\n      ))\n\n      // Update voice message with translation\n      setVoiceMessages(prev => prev.map(vm =>\n        vm.id === messageId\n          ? { ...vm, translation: translation.translatedText }\n          : vm\n      ))\n\n    } catch (err) {\n      console.error('Translation error:', err)\n      setError(t.translationFailed)\n    }\n  }\n\n  const handleSelectExpression = (text: string, emoji?: string) => {\n    const expressionText = emoji ? `${emoji} ${text}` : text\n    setNewMessage(prev => prev + (prev ? ' ' : '') + expressionText)\n    setShowCommunicationPanel(false)\n    inputRef.current?.focus()\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSendMessage()\n    }\n  }\n\n  const formatMessageTime = (timestamp: string) => {\n    const date = new Date(timestamp)\n    const now = new Date()\n    const isToday = date.toDateString() === now.toDateString()\n    const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000)\n    const isYesterday = date.toDateString() === yesterday.toDateString()\n\n    if (isToday) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n    } else if (isYesterday) {\n      return `${t.yesterday} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`\n    } else {\n      return formatDistanceToNow(date, { addSuffix: true, locale: dateLocale })\n    }\n  }\n\n  const getMessageStatusIcon = (message: ConversationMessage) => {\n    if (message.approval_status === 'pending') {\n      return <Clock className=\"w-3 h-3 text-yellow-500\" />\n    }\n    if (message.is_blocked) {\n      return <AlertTriangle className=\"w-3 h-3 text-red-500\" />\n    }\n    if (message.is_read) {\n      return <CheckCircle className=\"w-3 h-3 text-green-500\" />\n    }\n    return <CheckCircle className=\"w-3 h-3 text-gray-400\" />\n  }\n\n  const MessageBubble = ({ message, isOwn }: { message: ConversationMessage, isOwn: boolean }) => (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      className={`flex ${isOwn ? 'justify-end' : 'justify-start'} mb-4`}\n    >\n      <div className={`max-w-xs lg:max-w-md ${isOwn ? 'order-2' : 'order-1'}`}>\n        <div className={`relative px-4 py-2 rounded-lg ${\n          isOwn \n            ? 'bg-primary-600 text-white' \n            : 'bg-gray-100 text-gray-900'\n        }`} style={isOwn ? { backgroundColor: PORTUGUESE_COLORS.primary } : {}}>\n          <p className=\"text-sm\">{message.content}</p>\n          \n          {message.approval_status === 'pending' && (\n            <div className=\"mt-1 text-xs opacity-75\">\n              {t.waitingApproval}\n            </div>\n          )}\n          \n          {message.is_blocked && (\n            <div className=\"mt-1 text-xs text-red-200\">\n              {t.messageBlocked}\n            </div>\n          )}\n\n          {/* Translation Display */}\n          {translationEnabled && message.translation && (\n            <div className=\"mt-2 pt-2 border-t border-white/20\">\n              <div className=\"flex items-center space-x-1 mb-1\">\n                <Languages className=\"w-3 h-3 opacity-70\" />\n                <span className=\"text-xs opacity-70\">{t.translate}</span>\n              </div>\n              <p className=\"text-xs italic opacity-90\">{message.translation}</p>\n            </div>\n          )}\n        </div>\n        \n        <div className={`flex items-center justify-between mt-1 space-x-2 ${\n          isOwn ? 'flex-row-reverse space-x-reverse' : ''\n        }`}>\n          <span className=\"text-xs text-gray-500\">\n            {formatMessageTime(message.created_at)}\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            {isOwn && getMessageStatusIcon(message)}\n            {translationEnabled && !message.translation && (\n              <button\n                onClick={() => handleTranslateMessage(message.id, message.content)}\n                className=\"p-1 text-gray-400 hover:text-primary-600 rounded\"\n              >\n                <Languages className=\"w-3 h-3\" />\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {!isOwn && (\n        <div className=\"order-0 mr-3\">\n          <img\n            src={targetUserImage || '/images/default-avatar.png'}\n            alt={targetUserName}\n            className=\"w-8 h-8 rounded-full object-cover\"\n          />\n        </div>\n      )}\n    </motion.div>\n  )\n\n  return (\n    <div className={`flex flex-col h-full bg-white ${className}`}>\n      {/* Header */}\n      <div className=\"flex items-center space-x-4 p-4 border-b border-gray-200 bg-white sticky top-0 z-10\">\n        {onBack && (\n          <button\n            onClick={onBack}\n            className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        )}\n        \n        <img\n          src={targetUserImage || '/images/default-avatar.png'}\n          alt={targetUserName}\n          className=\"w-10 h-10 rounded-full object-cover\"\n        />\n        \n        <div className=\"flex-1\">\n          <h3 className=\"font-medium text-gray-900\">{targetUserName}</h3>\n          {targetUserLocation && (\n            <p className=\"text-sm text-gray-500\">{targetUserLocation}</p>\n          )}\n          {conversation && (\n            <div className=\"flex items-center space-x-2 mt-1\">\n              {conversation.connection_type === 'mutual_match' && (\n                <Heart className=\"w-4 h-4 text-red-500\" />\n              )}\n              {conversation.connection_type === 'event_based' && (\n                <Calendar className=\"w-4 h-4 text-blue-500\" />\n              )}\n              <span className=\"text-xs text-gray-500\">\n                {t.connectionType[conversation.connection_type]}\n              </span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setShowSettings(!showSettings)}\n            className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n          >\n            <Settings className=\"w-5 h-5 text-gray-600\" />\n          </button>\n          \n          <button className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\">\n            <MoreVertical className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Settings Panel */}\n      <AnimatePresence>\n        {showSettings && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\"\n          >\n            <div className=\"flex items-center justify-between space-x-4\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"voiceMessages\"\n                    checked={voiceMessagesEnabled}\n                    onChange={(e) => setVoiceMessagesEnabled(e.target.checked)}\n                    className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\n                  />\n                  <label htmlFor=\"voiceMessages\" className=\"text-sm text-gray-700\">\n                    {t.enableVoiceMessages}\n                  </label>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"autoTranslate\"\n                    checked={autoTranslate}\n                    onChange={(e) => setAutoTranslate(e.target.checked)}\n                    className=\"rounded border-gray-300 text-primary-600 focus:ring-primary-500\"\n                  />\n                  <label htmlFor=\"autoTranslate\" className=\"text-sm text-gray-700\">\n                    {t.enableAutoTranslation}\n                  </label>\n                </div>\n              </div>\n              \n              <button\n                onClick={() => setShowSettings(false)}\n                className=\"p-1 text-gray-400 hover:text-gray-600\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      <MessageAuthorizationGate\n        targetUserId={targetUserId}\n        targetUserName={targetUserName}\n        targetUserImage={targetUserImage}\n        onPermissionGranted={() => setHasPermission(true)}\n        onPermissionDenied={() => setHasPermission(false)}\n      >\n        {/* Messages Area */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-32\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\n            </div>\n          ) : (messages.length === 0 && voiceMessages.length === 0) ? (\n            <div className=\"text-center py-8\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Heart className=\"w-8 h-8 text-gray-400\" />\n              </div>\n              <p className=\"text-gray-600 mb-4\">{t.startConversation}</p>\n              <div className=\"space-y-2\">\n                {t.conversationStarters.map((starter, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setNewMessage(starter)}\n                    className=\"block w-full p-2 text-left text-sm text-gray-600 hover:bg-gray-50 rounded-lg transition-colors\"\n                  >\n                    \"{starter}\"\n                  </button>\n                ))}\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* Render text messages */}\n              {messages.map((message) => (\n                <MessageBubble\n                  key={message.id}\n                  message={message}\n                  isOwn={message.sender_id !== targetUserId}\n                />\n              ))}\n              \n              {/* Render voice messages */}\n              {voiceMessages.map((voiceMessage) => (\n                <VoiceMessagePlayer\n                  key={voiceMessage.id}\n                  message={voiceMessage}\n                  isOwn={voiceMessage.senderName === 'You'}\n                  showTranscription={true}\n                  showTranslation={translationEnabled}\n                  onTranslate={(id) => handleTranslateMessage(id, voiceMessage.transcription || '')}\n                  onReport={(id) => console.log('Report voice message:', id)}\n                  onDownload={(id) => console.log('Download voice message:', id)}\n                />\n              ))}\n              \n              <div ref={messagesEndRef} />\n            </>\n          )}\n        </div>\n\n        {/* Voice Recorder Panel */}\n        <AnimatePresence>\n          {showVoiceRecorder && voiceMessagesEnabled && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"p-4 bg-gray-50 border-t border-gray-200\"\n            >\n              <VoiceMessageRecorder\n                onSendVoiceMessage={handleSendVoiceMessage}\n                membershipTier={membershipTier}\n                preferredDialect={preferredDialect}\n                disabled={sending}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Translation Panel */}\n        <AnimatePresence>\n          {showTranslator && selectedMessageForTranslation && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"p-4 bg-white border-t border-gray-200\"\n            >\n              <MessageTranslator\n                originalMessage={selectedMessageForTranslation}\n                dialect={preferredDialect}\n                showCulturalContext={true}\n                enableVoicePlayback={true}\n                onTranslationComplete={(result) => {\n                  console.log('Translation completed:', result)\n                  setShowTranslator(false)\n                  setSelectedMessageForTranslation(null)\n                }}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Communication Panel */}\n        <AnimatePresence>\n          {showCommunicationPanel && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              className=\"border-t border-gray-200\"\n            >\n              <PortugueseCommunicationPanel\n                onSelectExpression={handleSelectExpression}\n                preferredCountry=\"Portugal\"\n                preferredFormality=\"casual\"\n                showEmojiPacks={true}\n                showGreetings={true}\n                showExpressions={true}\n              />\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Safety Notice */}\n        <div className=\"px-4 py-2 bg-blue-50 border-t border-blue-100\">\n          <div className=\"flex items-center space-x-2 text-sm text-blue-700\">\n            <Shield className=\"w-4 h-4\" />\n            <span>{t.safetyNotice}</span>\n          </div>\n        </div>\n\n        {/* Message Input */}\n        <div className=\"p-4 border-t border-gray-200 bg-white\">\n          {error && (\n            <div className=\"mb-3 p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700\">\n              {error}\n            </div>\n          )}\n\n          {/* Input Controls Row */}\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <button\n              onClick={() => setShowCommunicationPanel(!showCommunicationPanel)}\n              className={`p-2 rounded-lg transition-colors ${\n                showCommunicationPanel \n                  ? 'bg-primary-100 text-primary-700' \n                  : 'text-gray-600 hover:bg-gray-100'\n              }`}\n            >\n              <Globe className=\"w-5 h-5\" />\n            </button>\n\n            {voiceMessagesEnabled && (\n              <button\n                onClick={() => setShowVoiceRecorder(!showVoiceRecorder)}\n                className={`p-2 rounded-lg transition-colors ${\n                  showVoiceRecorder \n                    ? 'bg-primary-100 text-primary-700' \n                    : 'text-gray-600 hover:bg-gray-100'\n                }`}\n              >\n                {showVoiceRecorder ? <MicOff className=\"w-5 h-5\" /> : <Mic className=\"w-5 h-5\" />}\n              </button>\n            )}\n\n            <button\n              onClick={() => {\n                setShowTranslator(!showTranslator)\n                setSelectedMessageForTranslation(newMessage)\n              }}\n              disabled={!newMessage.trim()}\n              className={`p-2 rounded-lg transition-colors ${\n                showTranslator \n                  ? 'bg-primary-100 text-primary-700' \n                  : 'text-gray-600 hover:bg-gray-100 disabled:opacity-50'\n              }`}\n            >\n              <Languages className=\"w-5 h-5\" />\n            </button>\n\n            <button className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\n              <Smile className=\"w-5 h-5\" />\n            </button>\n\n            <button className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\">\n              <Paperclip className=\"w-5 h-5\" />\n            </button>\n          </div>\n          \n          {/* Message Input */}\n          <div className=\"flex items-end space-x-3\">\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={inputRef}\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder={t.typeMessage}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                rows={1}\n                style={{ minHeight: '48px', maxHeight: '120px' }}\n                disabled={sending}\n              />\n            </div>\n            \n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={handleSendMessage}\n              disabled={!newMessage.trim() || sending}\n              className=\"p-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              style={{ backgroundColor: PORTUGUESE_COLORS.primary }}\n            >\n              {sending ? (\n                <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n              ) : (\n                <Send className=\"w-5 h-5\" />\n              )}\n            </motion.button>\n          </div>\n        </div>\n      </MessageAuthorizationGate>\n    </div>\n  )\n}"],"names":["EnhancedMessagingInterface","targetUserId","targetUserName","targetUserImage","targetUserLocation","targetUserBio","conversationId","initialConversationId","membershipTier","preferredDialect","onBack","className","language","useLanguage","conversation","setConversation","useState","messages","setMessages","voiceMessages","setVoiceMessages","newMessage","setNewMessage","loading","setLoading","sending","setSending","error","setError","hasPermission","setHasPermission","showVoiceRecorder","setShowVoiceRecorder","showTranslator","setShowTranslator","showCommunicationPanel","setShowCommunicationPanel","translationEnabled","setTranslationEnabled","voiceMessagesEnabled","setVoiceMessagesEnabled","selectedMessageForTranslation","setSelectedMessageForTranslation","autoTranslate","setAutoTranslate","showSettings","setShowSettings","messagesEndRef","useRef","inputRef","translations","en","typeMessage","send","voiceMessage","translate","culturalExpressions","messagingRestricted","waitingApproval","messageBlocked","messageDelivered","messageRead","today","yesterday","reportMessage","backToConversations","safetyNotice","connectionType","mutual_match","event_based","professional","conversationStarters","startConversation","enableVoiceMessages","enableAutoTranslation","voiceRecording","translationSettings","messageSettings","sendingVoiceMessage","voiceMessageSent","translationFailed","attachFile","emoji","more","pt","t","dateLocale","enUS","useEffect","initializeConversation","scrollToBottom","current","scrollIntoView","behavior","conv","conversations","messagingService","getUserConversations","find","c","id","Error","getOrCreateConversation","msgs","getConversationMessages","markMessagesAsRead","err","console","message","handleSendMessage","trim","sendMessage","prev","handleTranslateMessage","handleSendVoiceMessage","audioBlob","transcription","duration","formData","FormData","append","toString","response","fetch","method","body","ok","json","messageId","text","headers","JSON","stringify","sourceLanguage","targetLanguage","dialect","translation","map","msg","translatedText","vm","handleSelectExpression","expressionText","focus","handleKeyPress","e","key","shiftKey","preventDefault","formatMessageTime","timestamp","date","Date","now","isToday","toDateString","getTime","isYesterday","toLocaleTimeString","hour","minute","formatDistanceToNow","addSuffix","locale","getMessageStatusIcon","approval_status","Clock","is_blocked","AlertTriangle","is_read","CheckCircle","MessageBubble","isOwn","motion","div","initial","opacity","y","animate","style","backgroundColor","PORTUGUESE_COLORS","primary","p","content","Languages","span","created_at","button","onClick","img","src","alt","ArrowLeft","h3","connection_type","Heart","Calendar","Settings","MoreVertical","AnimatePresence","height","exit","input","type","checked","onChange","target","label","htmlFor","X","MessageAuthorizationGate","onPermissionGranted","onPermissionDenied","length","starter","index","sender_id","VoiceMessagePlayer","senderName","showTranscription","showTranslation","onTranslate","onReport","log","onDownload","ref","VoiceMessageRecorder","onSendVoiceMessage","disabled","MessageTranslator","originalMessage","showCulturalContext","enableVoicePlayback","onTranslationComplete","result","PortugueseCommunicationPanel","onSelectExpression","preferredCountry","preferredFormality","showEmojiPacks","showGreetings","showExpressions","Shield","Globe","MicOff","Mic","Smile","Paperclip","textarea","value","onKeyPress","placeholder","rows","minHeight","maxHeight","whileHover","scale","whileTap","Send"],"mappings":"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"}