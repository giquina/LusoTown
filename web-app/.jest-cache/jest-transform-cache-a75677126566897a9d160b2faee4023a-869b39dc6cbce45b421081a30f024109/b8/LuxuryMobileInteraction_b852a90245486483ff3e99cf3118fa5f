b16762f1aac82685480c4e499db22d8e
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LuxuryFAB: function() {
        return LuxuryFAB;
    },
    LuxuryLongPress: function() {
        return LuxuryLongPress;
    },
    LuxuryModal: function() {
        return LuxuryModal;
    },
    LuxuryPullToRefresh: function() {
        return LuxuryPullToRefresh;
    },
    LuxuryRipple: function() {
        return LuxuryRipple;
    },
    LuxurySwipe: function() {
        return LuxurySwipe;
    },
    default: function() {
        return _default;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _framermotion = require("framer-motion");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function LuxuryRipple({ children, className = "", disabled = false, rippleColor = "rgba(255, 255, 255, 0.3)", onClick, hapticFeedback = "light" }) {
    const [ripples, setRipples] = (0, _react.useState)([]);
    const rippleRef = (0, _react.useRef)(null);
    const triggerHaptic = (0, _react.useCallback)((type)=>{
        // Simulate haptic feedback with CSS animation classes
        if (rippleRef.current) {
            rippleRef.current.classList.add(`luxury-haptic-${type}`);
            setTimeout(()=>{
                rippleRef.current?.classList.remove(`luxury-haptic-${type}`);
            }, 200);
        }
    }, []);
    const createRipple = (0, _react.useCallback)((event)=>{
        if (disabled || !rippleRef.current) return;
        const rect = rippleRef.current.getBoundingClientRect();
        // Handle both mouse and touch events
        const clientX = "touches" in event ? event.touches[0].clientX : event.clientX;
        const clientY = "touches" in event ? event.touches[0].clientY : event.clientY;
        const x = clientX - rect.left;
        const y = clientY - rect.top;
        const size = Math.max(rect.width, rect.height) * 2;
        const newRipple = {
            id: Date.now() + Math.random(),
            x: x - size / 2,
            y: y - size / 2,
            size
        };
        setRipples((prev)=>[
                ...prev,
                newRipple
            ]);
        triggerHaptic(hapticFeedback);
        // Remove ripple after animation
        setTimeout(()=>{
            setRipples((prev)=>prev.filter((ripple)=>ripple.id !== newRipple.id));
        }, 600);
        onClick?.();
    }, [
        disabled,
        onClick,
        hapticFeedback,
        triggerHaptic
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        ref: rippleRef,
        className: `luxury-touch-target relative overflow-hidden ${className}`,
        onMouseDown: createRipple,
        onTouchStart: createRipple,
        onClick: createRipple,
        children: [
            children,
            ripples.map((ripple)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    className: "absolute rounded-full pointer-events-none",
                    style: {
                        left: ripple.x,
                        top: ripple.y,
                        width: ripple.size,
                        height: ripple.size,
                        backgroundColor: rippleColor
                    },
                    initial: {
                        scale: 0,
                        opacity: 0.6
                    },
                    animate: {
                        scale: 1,
                        opacity: 0
                    },
                    transition: {
                        duration: 0.6,
                        ease: [
                            0.215,
                            0.61,
                            0.355,
                            1
                        ]
                    }
                }, ripple.id))
        ]
    });
}
function LuxurySwipe({ children, onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown, swipeThreshold = 100, className = "" }) {
    const [isPressed, setIsPressed] = (0, _react.useState)(false);
    const [dragStart, setDragStart] = (0, _react.useState)({
        x: 0,
        y: 0
    });
    const dragX = (0, _framermotion.useSpring)(0, {
        stiffness: 300,
        damping: 30
    });
    const dragY = (0, _framermotion.useSpring)(0, {
        stiffness: 300,
        damping: 30
    });
    const opacity = (0, _framermotion.useTransform)(dragX, [
        -200,
        0,
        200
    ], [
        0.6,
        1,
        0.6
    ]);
    const scale = (0, _framermotion.useTransform)(dragX, [
        -100,
        0,
        100
    ], [
        0.95,
        1,
        0.95
    ]);
    const handleDragStart = (event)=>{
        setIsPressed(true);
        const clientX = event.clientX || event.touches?.[0]?.clientX || 0;
        const clientY = event.clientY || event.touches?.[0]?.clientY || 0;
        setDragStart({
            x: clientX,
            y: clientY
        });
    };
    const handleDragEnd = (event)=>{
        if (!isPressed) return;
        setIsPressed(false);
        const clientX = event.clientX || event.changedTouches?.[0]?.clientX || 0;
        const clientY = event.clientY || event.changedTouches?.[0]?.clientY || 0;
        const deltaX = clientX - dragStart.x;
        const deltaY = clientY - dragStart.y;
        // Reset position
        dragX.set(0);
        dragY.set(0);
        // Trigger swipe actions
        if (Math.abs(deltaX) > Math.abs(deltaY)) {
            if (deltaX > swipeThreshold && onSwipeRight) {
                onSwipeRight();
            } else if (deltaX < -swipeThreshold && onSwipeLeft) {
                onSwipeLeft();
            }
        } else {
            if (deltaY > swipeThreshold && onSwipeDown) {
                onSwipeDown();
            } else if (deltaY < -swipeThreshold && onSwipeUp) {
                onSwipeUp();
            }
        }
    };
    const handleDrag = (event)=>{
        if (!isPressed) return;
        const clientX = event.clientX || event.touches?.[0]?.clientX || 0;
        const clientY = event.clientY || event.touches?.[0]?.clientY || 0;
        const deltaX = clientX - dragStart.x;
        const deltaY = clientY - dragStart.y;
        dragX.set(deltaX * 0.5); // Dampen the movement
        dragY.set(deltaY * 0.5);
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
        className: `luxury-swipe-container ${className}`,
        style: {
            x: dragX,
            y: dragY,
            opacity,
            scale,
            cursor: isPressed ? "grabbing" : "grab"
        },
        onMouseDown: handleDragStart,
        onMouseMove: handleDrag,
        onMouseUp: handleDragEnd,
        onMouseLeave: handleDragEnd,
        onTouchStart: handleDragStart,
        onTouchMove: handleDrag,
        onTouchEnd: handleDragEnd,
        whileTap: {
            scale: 0.98
        },
        transition: {
            type: "spring",
            stiffness: 300,
            damping: 25
        },
        children: children
    });
}
function LuxuryPullToRefresh({ children, onRefresh, threshold = 80, disabled = false, className = "" }) {
    const [isRefreshing, setIsRefreshing] = (0, _react.useState)(false);
    const [pullDistance, setPullDistance] = (0, _react.useState)(0);
    const [startY, setStartY] = (0, _react.useState)(0);
    const [canPull, setCanPull] = (0, _react.useState)(false);
    const refreshY = (0, _framermotion.useSpring)(0, {
        stiffness: 300,
        damping: 30
    });
    const refreshOpacity = (0, _framermotion.useTransform)(refreshY, [
        0,
        threshold
    ], [
        0,
        1
    ]);
    const refreshRotation = (0, _framermotion.useTransform)(refreshY, [
        0,
        threshold
    ], [
        0,
        180
    ]);
    const handleTouchStart = (e)=>{
        if (disabled || isRefreshing) return;
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollTop === 0) {
            setCanPull(true);
            setStartY(e.touches[0].clientY);
        }
    };
    const handleTouchMove = (e)=>{
        if (!canPull || disabled || isRefreshing) return;
        const currentY = e.touches[0].clientY;
        const distance = Math.max(0, currentY - startY);
        if (distance > 0) {
            e.preventDefault();
            const dampedDistance = Math.min(distance * 0.6, threshold * 1.5);
            setPullDistance(dampedDistance);
            refreshY.set(dampedDistance);
        }
    };
    const handleTouchEnd = async ()=>{
        if (!canPull || disabled || isRefreshing) return;
        setCanPull(false);
        if (pullDistance >= threshold) {
            setIsRefreshing(true);
            try {
                await onRefresh();
            } finally{
                setIsRefreshing(false);
            }
        }
        setPullDistance(0);
        refreshY.set(0);
    };
    (0, _react.useEffect)(()=>{
        if (isRefreshing) {
            refreshY.set(threshold);
        } else {
            refreshY.set(0);
        }
    }, [
        isRefreshing,
        refreshY,
        threshold
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `luxury-pull-refresh-container ${className}`,
        onTouchStart: handleTouchStart,
        onTouchMove: handleTouchMove,
        onTouchEnd: handleTouchEnd,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                className: "luxury-pull-refresh",
                style: {
                    y: refreshY,
                    opacity: refreshOpacity
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                        className: "luxury-pull-icon",
                        style: {
                            rotate: refreshRotation
                        },
                        children: isRefreshing ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "luxury-loading-spinner"
                        }) : /*#__PURE__*/ (0, _jsxruntime.jsxs)("svg", {
                            width: "24",
                            height: "24",
                            viewBox: "0 0 24 24",
                            fill: "none",
                            stroke: "currentColor",
                            strokeWidth: "2",
                            strokeLinecap: "round",
                            strokeLinejoin: "round",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                    d: "M1 4v6h6"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                    d: "M23 20v-6h-6"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                    d: "M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        className: "text-sm font-medium text-gray-600 ml-2",
                        children: isRefreshing ? "Refreshing..." : pullDistance >= threshold ? "Release to refresh" : "Pull to refresh"
                    })
                ]
            }),
            children
        ]
    });
}
function LuxuryLongPress({ children, onLongPress, delay = 500, className = "", hapticFeedback = true }) {
    const [isPressed, setIsPressed] = (0, _react.useState)(false);
    const [progress, setProgress] = (0, _react.useState)(0);
    const timerRef = (0, _react.useRef)();
    const progressRef = (0, _react.useRef)();
    const startPress = (0, _react.useCallback)(()=>{
        if (timerRef.current) return;
        setIsPressed(true);
        setProgress(0);
        // Start progress animation
        const startTime = Date.now();
        progressRef.current = setInterval(()=>{
            const elapsed = Date.now() - startTime;
            const newProgress = Math.min(elapsed / delay * 100, 100);
            setProgress(newProgress);
            if (newProgress >= 100) {
                clearInterval(progressRef.current);
            }
        }, 16);
        // Set main timer
        timerRef.current = setTimeout(()=>{
            if (hapticFeedback) {
                // Trigger haptic feedback class
                const element = document.querySelector(`.${className}`);
                element?.classList.add("luxury-haptic-heavy");
                setTimeout(()=>element?.classList.remove("luxury-haptic-heavy"), 200);
            }
            onLongPress();
            endPress();
        }, delay);
    }, [
        onLongPress,
        delay,
        hapticFeedback,
        className
    ]);
    const endPress = (0, _react.useCallback)(()=>{
        if (timerRef.current) {
            clearTimeout(timerRef.current);
            timerRef.current = undefined;
        }
        if (progressRef.current) {
            clearInterval(progressRef.current);
            progressRef.current = undefined;
        }
        setIsPressed(false);
        setProgress(0);
    }, []);
    (0, _react.useEffect)(()=>{
        return ()=>{
            if (timerRef.current) clearTimeout(timerRef.current);
            if (progressRef.current) clearInterval(progressRef.current);
        };
    }, []);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `relative ${className}`,
        onMouseDown: startPress,
        onMouseUp: endPress,
        onMouseLeave: endPress,
        onTouchStart: startPress,
        onTouchEnd: endPress,
        onTouchCancel: endPress,
        children: [
            children,
            isPressed && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                className: "absolute inset-0 border-2 border-red-500 rounded-lg pointer-events-none",
                initial: {
                    opacity: 0
                },
                animate: {
                    opacity: 1
                },
                exit: {
                    opacity: 0
                },
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "absolute bottom-0 left-0 h-1 bg-red-500 transition-all duration-75 ease-linear",
                    style: {
                        width: `${progress}%`
                    }
                })
            })
        ]
    });
}
function LuxuryFAB({ icon, onClick, variant = "primary", size = "medium", className = "", tooltip, badge }) {
    const [isHovered, setIsHovered] = (0, _react.useState)(false);
    const sizeClasses = {
        small: "w-12 h-12",
        medium: "w-16 h-16",
        large: "w-20 h-20"
    };
    const variantClasses = {
        primary: "bg-gradient-to-br from-red-600 to-red-700 text-white shadow-lg hover:shadow-xl",
        secondary: "bg-white text-red-600 shadow-lg hover:shadow-xl border-2 border-red-100"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(LuxuryRipple, {
        onClick: onClick,
        className: `luxury-fab ${sizeClasses[size]} ${variantClasses[variant]} ${className}`,
        hapticFeedback: "medium",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
            className: "relative flex items-center justify-center w-full h-full",
            whileHover: {
                scale: 1.05,
                rotate: 5
            },
            whileTap: {
                scale: 0.95
            },
            onHoverStart: ()=>setIsHovered(true),
            onHoverEnd: ()=>setIsHovered(false),
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    animate: {
                        rotate: isHovered ? 15 : 0
                    },
                    transition: {
                        type: "spring",
                        stiffness: 300
                    },
                    children: icon
                }),
                badge && badge > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    className: "absolute -top-2 -right-2 bg-red-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center",
                    initial: {
                        scale: 0
                    },
                    animate: {
                        scale: 1
                    },
                    transition: {
                        type: "spring",
                        stiffness: 500
                    },
                    children: badge > 99 ? "99+" : badge
                }),
                tooltip && isHovered && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                    className: "absolute bottom-full mb-2 px-3 py-1 bg-black text-white text-sm rounded-lg whitespace-nowrap",
                    initial: {
                        opacity: 0,
                        y: 10
                    },
                    animate: {
                        opacity: 1,
                        y: 0
                    },
                    exit: {
                        opacity: 0,
                        y: 10
                    },
                    children: [
                        tooltip,
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            className: "absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-black"
                        })
                    ]
                })
            ]
        })
    });
}
function LuxuryModal({ isOpen, onClose, children, title, size = "medium", showCloseButton = true, className = "" }) {
    const sizeClasses = {
        small: "max-w-md",
        medium: "max-w-2xl",
        large: "max-w-4xl",
        fullscreen: "max-w-[95vw] max-h-[95vh]"
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.AnimatePresence, {
        children: isOpen && /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
            className: "luxury-modal-overlay",
            initial: {
                opacity: 0
            },
            animate: {
                opacity: 1
            },
            exit: {
                opacity: 0
            },
            onClick: onClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                className: `luxury-modal-content ${sizeClasses[size]} ${className}`,
                initial: {
                    scale: 0.9,
                    opacity: 0,
                    y: 20
                },
                animate: {
                    scale: 1,
                    opacity: 1,
                    y: 0
                },
                exit: {
                    scale: 0.9,
                    opacity: 0,
                    y: 20
                },
                transition: {
                    type: "spring",
                    stiffness: 300,
                    damping: 25
                },
                onClick: (e)=>e.stopPropagation(),
                children: [
                    title && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center justify-between p-6 border-b border-gray-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                                className: "text-xl font-bold text-gray-900",
                                children: title
                            }),
                            showCloseButton && /*#__PURE__*/ (0, _jsxruntime.jsx)(LuxuryRipple, {
                                onClick: onClose,
                                className: "p-3 rounded-full hover:bg-gray-100 min-w-[44px] min-h-[44px] flex items-center justify-center",
                                "aria-label": "Close modal",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                                    className: "w-6 h-6 text-gray-500",
                                    fill: "none",
                                    stroke: "currentColor",
                                    viewBox: "0 0 24 24",
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                                        strokeLinecap: "round",
                                        strokeLinejoin: "round",
                                        strokeWidth: 2,
                                        d: "M6 18L18 6M6 6l12 12"
                                    })
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "p-6",
                        children: children
                    })
                ]
            })
        })
    });
}
const _default = {
    LuxuryRipple,
    LuxurySwipe,
    LuxuryPullToRefresh,
    LuxuryLongPress,
    LuxuryFAB,
    LuxuryModal
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0x1c29Ub3duL3dlYi1hcHAvc3JjL2NvbXBvbmVudHMvTHV4dXJ5TW9iaWxlSW50ZXJhY3Rpb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG1vdGlvbiwgQW5pbWF0ZVByZXNlbmNlLCB1c2VTcHJpbmcsIHVzZVRyYW5zZm9ybSB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuXG4vLyBMdXh1cnkgVG91Y2ggUmlwcGxlIEVmZmVjdCBDb21wb25lbnRcbmludGVyZmFjZSBMdXh1cnlSaXBwbGVQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICByaXBwbGVDb2xvcj86IHN0cmluZztcbiAgb25DbGljaz86ICgpID0+IHZvaWQ7XG4gIGhhcHRpY0ZlZWRiYWNrPzogJ2xpZ2h0JyB8ICdtZWRpdW0nIHwgJ2hlYXZ5Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEx1eHVyeVJpcHBsZSh7IFxuICBjaGlsZHJlbiwgXG4gIGNsYXNzTmFtZSA9ICcnLCBcbiAgZGlzYWJsZWQgPSBmYWxzZSwgXG4gIHJpcHBsZUNvbG9yID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gIG9uQ2xpY2ssXG4gIGhhcHRpY0ZlZWRiYWNrID0gJ2xpZ2h0J1xufTogTHV4dXJ5UmlwcGxlUHJvcHMpIHtcbiAgY29uc3QgW3JpcHBsZXMsIHNldFJpcHBsZXNdID0gdXNlU3RhdGU8QXJyYXk8eyBpZDogbnVtYmVyOyB4OiBudW1iZXI7IHk6IG51bWJlcjsgc2l6ZTogbnVtYmVyIH0+PihbXSk7XG4gIGNvbnN0IHJpcHBsZVJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgdHJpZ2dlckhhcHRpYyA9IHVzZUNhbGxiYWNrKCh0eXBlOiBzdHJpbmcpID0+IHtcbiAgICAvLyBTaW11bGF0ZSBoYXB0aWMgZmVlZGJhY2sgd2l0aCBDU1MgYW5pbWF0aW9uIGNsYXNzZXNcbiAgICBpZiAocmlwcGxlUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoYGx1eHVyeS1oYXB0aWMtJHt0eXBlfWApO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50Py5jbGFzc0xpc3QucmVtb3ZlKGBsdXh1cnktaGFwdGljLSR7dHlwZX1gKTtcbiAgICAgIH0sIDIwMCk7XG4gICAgfVxuICB9LCBbXSk7XG5cblxuICBjb25zdCBjcmVhdGVSaXBwbGUgPSB1c2VDYWxsYmFjaygoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQgfCBSZWFjdC5Ub3VjaEV2ZW50KSA9PiB7XG4gICAgaWYgKGRpc2FibGVkIHx8ICFyaXBwbGVSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgY29uc3QgcmVjdCA9IHJpcHBsZVJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIFxuICAgIC8vIEhhbmRsZSBib3RoIG1vdXNlIGFuZCB0b3VjaCBldmVudHNcbiAgICBjb25zdCBjbGllbnRYID0gJ3RvdWNoZXMnIGluIGV2ZW50ID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIDogZXZlbnQuY2xpZW50WDtcbiAgICBjb25zdCBjbGllbnRZID0gJ3RvdWNoZXMnIGluIGV2ZW50ID8gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIDogZXZlbnQuY2xpZW50WTtcbiAgICBcbiAgICBjb25zdCB4ID0gY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICBjb25zdCB5ID0gY2xpZW50WSAtIHJlY3QudG9wO1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLm1heChyZWN0LndpZHRoLCByZWN0LmhlaWdodCkgKiAyO1xuXG4gICAgY29uc3QgbmV3UmlwcGxlID0ge1xuICAgICAgaWQ6IERhdGUubm93KCkgKyBNYXRoLnJhbmRvbSgpLFxuICAgICAgeDogeCAtIHNpemUgLyAyLFxuICAgICAgeTogeSAtIHNpemUgLyAyLFxuICAgICAgc2l6ZVxuICAgIH07XG5cbiAgICBzZXRSaXBwbGVzKHByZXYgPT4gWy4uLnByZXYsIG5ld1JpcHBsZV0pO1xuICAgIHRyaWdnZXJIYXB0aWMoaGFwdGljRmVlZGJhY2spO1xuXG4gICAgLy8gUmVtb3ZlIHJpcHBsZSBhZnRlciBhbmltYXRpb25cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldFJpcHBsZXMocHJldiA9PiBwcmV2LmZpbHRlcihyaXBwbGUgPT4gcmlwcGxlLmlkICE9PSBuZXdSaXBwbGUuaWQpKTtcbiAgICB9LCA2MDApO1xuXG4gICAgb25DbGljaz8uKCk7XG4gIH0sIFtkaXNhYmxlZCwgb25DbGljaywgaGFwdGljRmVlZGJhY2ssIHRyaWdnZXJIYXB0aWNdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHJlZj17cmlwcGxlUmVmfVxuICAgICAgY2xhc3NOYW1lPXtgbHV4dXJ5LXRvdWNoLXRhcmdldCByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW4gJHtjbGFzc05hbWV9YH1cbiAgICAgIG9uTW91c2VEb3duPXtjcmVhdGVSaXBwbGV9XG4gICAgICBvblRvdWNoU3RhcnQ9e2NyZWF0ZVJpcHBsZX1cbiAgICAgIG9uQ2xpY2s9e2NyZWF0ZVJpcHBsZX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgICB7cmlwcGxlcy5tYXAocmlwcGxlID0+IChcbiAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICBrZXk9e3JpcHBsZS5pZH1cbiAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSByb3VuZGVkLWZ1bGwgcG9pbnRlci1ldmVudHMtbm9uZVwiXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGxlZnQ6IHJpcHBsZS54LFxuICAgICAgICAgICAgdG9wOiByaXBwbGUueSxcbiAgICAgICAgICAgIHdpZHRoOiByaXBwbGUuc2l6ZSxcbiAgICAgICAgICAgIGhlaWdodDogcmlwcGxlLnNpemUsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHJpcHBsZUNvbG9yLFxuICAgICAgICAgIH19XG4gICAgICAgICAgaW5pdGlhbD17eyBzY2FsZTogMCwgb3BhY2l0eTogMC42IH19XG4gICAgICAgICAgYW5pbWF0ZT17eyBzY2FsZTogMSwgb3BhY2l0eTogMCB9fVxuICAgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuNiwgZWFzZTogWzAuMjE1LCAwLjYxLCAwLjM1NSwgMV0gfX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvZGl2PlxuICApO1xufVxuXG4vLyBQcmVtaXVtIFN3aXBlIEdlc3R1cmUgQ29tcG9uZW50XG5pbnRlcmZhY2UgTHV4dXJ5U3dpcGVQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIG9uU3dpcGVMZWZ0PzogKCkgPT4gdm9pZDtcbiAgb25Td2lwZVJpZ2h0PzogKCkgPT4gdm9pZDtcbiAgb25Td2lwZVVwPzogKCkgPT4gdm9pZDtcbiAgb25Td2lwZURvd24/OiAoKSA9PiB2b2lkO1xuICBzd2lwZVRocmVzaG9sZD86IG51bWJlcjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTHV4dXJ5U3dpcGUoe1xuICBjaGlsZHJlbixcbiAgb25Td2lwZUxlZnQsXG4gIG9uU3dpcGVSaWdodCxcbiAgb25Td2lwZVVwLFxuICBvblN3aXBlRG93bixcbiAgc3dpcGVUaHJlc2hvbGQgPSAxMDAsXG4gIGNsYXNzTmFtZSA9ICcnXG59OiBMdXh1cnlTd2lwZVByb3BzKSB7XG4gIGNvbnN0IFtpc1ByZXNzZWQsIHNldElzUHJlc3NlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtkcmFnU3RhcnQsIHNldERyYWdTdGFydF0gPSB1c2VTdGF0ZSh7IHg6IDAsIHk6IDAgfSk7XG4gIGNvbnN0IGRyYWdYID0gdXNlU3ByaW5nKDAsIHsgc3RpZmZuZXNzOiAzMDAsIGRhbXBpbmc6IDMwIH0pO1xuICBjb25zdCBkcmFnWSA9IHVzZVNwcmluZygwLCB7IHN0aWZmbmVzczogMzAwLCBkYW1waW5nOiAzMCB9KTtcblxuICBjb25zdCBvcGFjaXR5ID0gdXNlVHJhbnNmb3JtKGRyYWdYLCBbLTIwMCwgMCwgMjAwXSwgWzAuNiwgMSwgMC42XSk7XG4gIGNvbnN0IHNjYWxlID0gdXNlVHJhbnNmb3JtKGRyYWdYLCBbLTEwMCwgMCwgMTAwXSwgWzAuOTUsIDEsIDAuOTVdKTtcblxuICBjb25zdCBoYW5kbGVEcmFnU3RhcnQgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgIHNldElzUHJlc3NlZCh0cnVlKTtcbiAgICBjb25zdCBjbGllbnRYID0gZXZlbnQuY2xpZW50WCB8fCBldmVudC50b3VjaGVzPy5bMF0/LmNsaWVudFggfHwgMDtcbiAgICBjb25zdCBjbGllbnRZID0gZXZlbnQuY2xpZW50WSB8fCBldmVudC50b3VjaGVzPy5bMF0/LmNsaWVudFkgfHwgMDtcbiAgICBzZXREcmFnU3RhcnQoeyB4OiBjbGllbnRYLCB5OiBjbGllbnRZIH0pO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURyYWdFbmQgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgIGlmICghaXNQcmVzc2VkKSByZXR1cm47XG4gICAgXG4gICAgc2V0SXNQcmVzc2VkKGZhbHNlKTtcbiAgICBjb25zdCBjbGllbnRYID0gZXZlbnQuY2xpZW50WCB8fCBldmVudC5jaGFuZ2VkVG91Y2hlcz8uWzBdPy5jbGllbnRYIHx8IDA7XG4gICAgY29uc3QgY2xpZW50WSA9IGV2ZW50LmNsaWVudFkgfHwgZXZlbnQuY2hhbmdlZFRvdWNoZXM/LlswXT8uY2xpZW50WSB8fCAwO1xuICAgIFxuICAgIGNvbnN0IGRlbHRhWCA9IGNsaWVudFggLSBkcmFnU3RhcnQueDtcbiAgICBjb25zdCBkZWx0YVkgPSBjbGllbnRZIC0gZHJhZ1N0YXJ0Lnk7XG5cbiAgICAvLyBSZXNldCBwb3NpdGlvblxuICAgIGRyYWdYLnNldCgwKTtcbiAgICBkcmFnWS5zZXQoMCk7XG5cbiAgICAvLyBUcmlnZ2VyIHN3aXBlIGFjdGlvbnNcbiAgICBpZiAoTWF0aC5hYnMoZGVsdGFYKSA+IE1hdGguYWJzKGRlbHRhWSkpIHtcbiAgICAgIGlmIChkZWx0YVggPiBzd2lwZVRocmVzaG9sZCAmJiBvblN3aXBlUmlnaHQpIHtcbiAgICAgICAgb25Td2lwZVJpZ2h0KCk7XG4gICAgICB9IGVsc2UgaWYgKGRlbHRhWCA8IC1zd2lwZVRocmVzaG9sZCAmJiBvblN3aXBlTGVmdCkge1xuICAgICAgICBvblN3aXBlTGVmdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGVsdGFZID4gc3dpcGVUaHJlc2hvbGQgJiYgb25Td2lwZURvd24pIHtcbiAgICAgICAgb25Td2lwZURvd24oKTtcbiAgICAgIH0gZWxzZSBpZiAoZGVsdGFZIDwgLXN3aXBlVGhyZXNob2xkICYmIG9uU3dpcGVVcCkge1xuICAgICAgICBvblN3aXBlVXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRHJhZyA9IChldmVudDogYW55KSA9PiB7XG4gICAgaWYgKCFpc1ByZXNzZWQpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjbGllbnRYID0gZXZlbnQuY2xpZW50WCB8fCBldmVudC50b3VjaGVzPy5bMF0/LmNsaWVudFggfHwgMDtcbiAgICBjb25zdCBjbGllbnRZID0gZXZlbnQuY2xpZW50WSB8fCBldmVudC50b3VjaGVzPy5bMF0/LmNsaWVudFkgfHwgMDtcbiAgICBcbiAgICBjb25zdCBkZWx0YVggPSBjbGllbnRYIC0gZHJhZ1N0YXJ0Lng7XG4gICAgY29uc3QgZGVsdGFZID0gY2xpZW50WSAtIGRyYWdTdGFydC55O1xuXG4gICAgZHJhZ1guc2V0KGRlbHRhWCAqIDAuNSk7IC8vIERhbXBlbiB0aGUgbW92ZW1lbnRcbiAgICBkcmFnWS5zZXQoZGVsdGFZICogMC41KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxtb3Rpb24uZGl2XG4gICAgICBjbGFzc05hbWU9e2BsdXh1cnktc3dpcGUtY29udGFpbmVyICR7Y2xhc3NOYW1lfWB9XG4gICAgICBzdHlsZT17eyBcbiAgICAgICAgeDogZHJhZ1gsIFxuICAgICAgICB5OiBkcmFnWSwgXG4gICAgICAgIG9wYWNpdHksIFxuICAgICAgICBzY2FsZSxcbiAgICAgICAgY3Vyc29yOiBpc1ByZXNzZWQgPyAnZ3JhYmJpbmcnIDogJ2dyYWInXG4gICAgICB9fVxuICAgICAgb25Nb3VzZURvd249e2hhbmRsZURyYWdTdGFydH1cbiAgICAgIG9uTW91c2VNb3ZlPXtoYW5kbGVEcmFnfVxuICAgICAgb25Nb3VzZVVwPXtoYW5kbGVEcmFnRW5kfVxuICAgICAgb25Nb3VzZUxlYXZlPXtoYW5kbGVEcmFnRW5kfVxuICAgICAgb25Ub3VjaFN0YXJ0PXtoYW5kbGVEcmFnU3RhcnR9XG4gICAgICBvblRvdWNoTW92ZT17aGFuZGxlRHJhZ31cbiAgICAgIG9uVG91Y2hFbmQ9e2hhbmRsZURyYWdFbmR9XG4gICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45OCB9fVxuICAgICAgdHJhbnNpdGlvbj17eyB0eXBlOiBcInNwcmluZ1wiLCBzdGlmZm5lc3M6IDMwMCwgZGFtcGluZzogMjUgfX1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9tb3Rpb24uZGl2PlxuICApO1xufVxuXG4vLyBQcmVtaXVtIFB1bGwtdG8tUmVmcmVzaCBDb21wb25lbnRcbmludGVyZmFjZSBMdXh1cnlQdWxsVG9SZWZyZXNoUHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICBvblJlZnJlc2g6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIHRocmVzaG9sZD86IG51bWJlcjtcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMdXh1cnlQdWxsVG9SZWZyZXNoKHtcbiAgY2hpbGRyZW4sXG4gIG9uUmVmcmVzaCxcbiAgdGhyZXNob2xkID0gODAsXG4gIGRpc2FibGVkID0gZmFsc2UsXG4gIGNsYXNzTmFtZSA9ICcnXG59OiBMdXh1cnlQdWxsVG9SZWZyZXNoUHJvcHMpIHtcbiAgY29uc3QgW2lzUmVmcmVzaGluZywgc2V0SXNSZWZyZXNoaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3B1bGxEaXN0YW5jZSwgc2V0UHVsbERpc3RhbmNlXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbc3RhcnRZLCBzZXRTdGFydFldID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtjYW5QdWxsLCBzZXRDYW5QdWxsXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCByZWZyZXNoWSA9IHVzZVNwcmluZygwLCB7IHN0aWZmbmVzczogMzAwLCBkYW1waW5nOiAzMCB9KTtcbiAgY29uc3QgcmVmcmVzaE9wYWNpdHkgPSB1c2VUcmFuc2Zvcm0ocmVmcmVzaFksIFswLCB0aHJlc2hvbGRdLCBbMCwgMV0pO1xuICBjb25zdCByZWZyZXNoUm90YXRpb24gPSB1c2VUcmFuc2Zvcm0ocmVmcmVzaFksIFswLCB0aHJlc2hvbGRdLCBbMCwgMTgwXSk7XG5cbiAgY29uc3QgaGFuZGxlVG91Y2hTdGFydCA9IChlOiBSZWFjdC5Ub3VjaEV2ZW50KSA9PiB7XG4gICAgaWYgKGRpc2FibGVkIHx8IGlzUmVmcmVzaGluZykgcmV0dXJuO1xuICAgIFxuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIGlmIChzY3JvbGxUb3AgPT09IDApIHtcbiAgICAgIHNldENhblB1bGwodHJ1ZSk7XG4gICAgICBzZXRTdGFydFkoZS50b3VjaGVzWzBdLmNsaWVudFkpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVUb3VjaE1vdmUgPSAoZTogUmVhY3QuVG91Y2hFdmVudCkgPT4ge1xuICAgIGlmICghY2FuUHVsbCB8fCBkaXNhYmxlZCB8fCBpc1JlZnJlc2hpbmcpIHJldHVybjtcblxuICAgIGNvbnN0IGN1cnJlbnRZID0gZS50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLm1heCgwLCBjdXJyZW50WSAtIHN0YXJ0WSk7XG4gICAgXG4gICAgaWYgKGRpc3RhbmNlID4gMCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY29uc3QgZGFtcGVkRGlzdGFuY2UgPSBNYXRoLm1pbihkaXN0YW5jZSAqIDAuNiwgdGhyZXNob2xkICogMS41KTtcbiAgICAgIHNldFB1bGxEaXN0YW5jZShkYW1wZWREaXN0YW5jZSk7XG4gICAgICByZWZyZXNoWS5zZXQoZGFtcGVkRGlzdGFuY2UpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVUb3VjaEVuZCA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWNhblB1bGwgfHwgZGlzYWJsZWQgfHwgaXNSZWZyZXNoaW5nKSByZXR1cm47XG5cbiAgICBzZXRDYW5QdWxsKGZhbHNlKTtcbiAgICBcbiAgICBpZiAocHVsbERpc3RhbmNlID49IHRocmVzaG9sZCkge1xuICAgICAgc2V0SXNSZWZyZXNoaW5nKHRydWUpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgb25SZWZyZXNoKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc1JlZnJlc2hpbmcoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzZXRQdWxsRGlzdGFuY2UoMCk7XG4gICAgcmVmcmVzaFkuc2V0KDApO1xuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzUmVmcmVzaGluZykge1xuICAgICAgcmVmcmVzaFkuc2V0KHRocmVzaG9sZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnJlc2hZLnNldCgwKTtcbiAgICB9XG4gIH0sIFtpc1JlZnJlc2hpbmcsIHJlZnJlc2hZLCB0aHJlc2hvbGRdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgXG4gICAgICBjbGFzc05hbWU9e2BsdXh1cnktcHVsbC1yZWZyZXNoLWNvbnRhaW5lciAke2NsYXNzTmFtZX1gfVxuICAgICAgb25Ub3VjaFN0YXJ0PXtoYW5kbGVUb3VjaFN0YXJ0fVxuICAgICAgb25Ub3VjaE1vdmU9e2hhbmRsZVRvdWNoTW92ZX1cbiAgICAgIG9uVG91Y2hFbmQ9e2hhbmRsZVRvdWNoRW5kfVxuICAgID5cbiAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImx1eHVyeS1wdWxsLXJlZnJlc2hcIlxuICAgICAgICBzdHlsZT17eyB5OiByZWZyZXNoWSwgb3BhY2l0eTogcmVmcmVzaE9wYWNpdHkgfX1cbiAgICAgID5cbiAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICBjbGFzc05hbWU9XCJsdXh1cnktcHVsbC1pY29uXCJcbiAgICAgICAgICBzdHlsZT17eyByb3RhdGU6IHJlZnJlc2hSb3RhdGlvbiB9fVxuICAgICAgICA+XG4gICAgICAgICAge2lzUmVmcmVzaGluZyA/IChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibHV4dXJ5LWxvYWRpbmctc3Bpbm5lclwiIC8+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxzdmdcbiAgICAgICAgICAgICAgd2lkdGg9XCIyNFwiXG4gICAgICAgICAgICAgIGhlaWdodD1cIjI0XCJcbiAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgICAgICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAgICAgICAgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgICAgICAgICAgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMSA0djZoNlwiIC8+XG4gICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMjMgMjB2LTZoLTZcIiAvPlxuICAgICAgICAgICAgICA8cGF0aCBkPVwiTTIwLjQ5IDlBOSA5IDAgMCAwIDUuNjQgNS42NEwxIDEwbTIyIDRsLTQuNjQgNC4zNkE5IDkgMCAwIDEgMy41MSAxNVwiIC8+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICApfVxuICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTYwMCBtbC0yXCI+XG4gICAgICAgICAge2lzUmVmcmVzaGluZyA/ICdSZWZyZXNoaW5nLi4uJyA6IHB1bGxEaXN0YW5jZSA+PSB0aHJlc2hvbGQgPyAnUmVsZWFzZSB0byByZWZyZXNoJyA6ICdQdWxsIHRvIHJlZnJlc2gnfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L21vdGlvbi5kaXY+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbi8vIFByZW1pdW0gTG9uZyBQcmVzcyBDb21wb25lbnRcbmludGVyZmFjZSBMdXh1cnlMb25nUHJlc3NQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIG9uTG9uZ1ByZXNzOiAoKSA9PiB2b2lkO1xuICBkZWxheT86IG51bWJlcjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBoYXB0aWNGZWVkYmFjaz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMdXh1cnlMb25nUHJlc3Moe1xuICBjaGlsZHJlbixcbiAgb25Mb25nUHJlc3MsXG4gIGRlbGF5ID0gNTAwLFxuICBjbGFzc05hbWUgPSAnJyxcbiAgaGFwdGljRmVlZGJhY2sgPSB0cnVlXG59OiBMdXh1cnlMb25nUHJlc3NQcm9wcykge1xuICBjb25zdCBbaXNQcmVzc2VkLCBzZXRJc1ByZXNzZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcHJvZ3Jlc3MsIHNldFByb2dyZXNzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCB0aW1lclJlZiA9IHVzZVJlZjxOb2RlSlMuVGltZW91dD4oKTtcbiAgY29uc3QgcHJvZ3Jlc3NSZWYgPSB1c2VSZWY8Tm9kZUpTLlRpbWVvdXQ+KCk7XG5cbiAgY29uc3Qgc3RhcnRQcmVzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAodGltZXJSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIFxuICAgIHNldElzUHJlc3NlZCh0cnVlKTtcbiAgICBzZXRQcm9ncmVzcygwKTtcblxuICAgIC8vIFN0YXJ0IHByb2dyZXNzIGFuaW1hdGlvblxuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgcHJvZ3Jlc3NSZWYuY3VycmVudCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGNvbnN0IGVsYXBzZWQgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgY29uc3QgbmV3UHJvZ3Jlc3MgPSBNYXRoLm1pbigoZWxhcHNlZCAvIGRlbGF5KSAqIDEwMCwgMTAwKTtcbiAgICAgIHNldFByb2dyZXNzKG5ld1Byb2dyZXNzKTtcbiAgICAgIFxuICAgICAgaWYgKG5ld1Byb2dyZXNzID49IDEwMCkge1xuICAgICAgICBjbGVhckludGVydmFsKHByb2dyZXNzUmVmLmN1cnJlbnQhKTtcbiAgICAgIH1cbiAgICB9LCAxNik7XG5cbiAgICAvLyBTZXQgbWFpbiB0aW1lclxuICAgIHRpbWVyUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChoYXB0aWNGZWVkYmFjaykge1xuICAgICAgICAvLyBUcmlnZ2VyIGhhcHRpYyBmZWVkYmFjayBjbGFzc1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7Y2xhc3NOYW1lfWApIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBlbGVtZW50Py5jbGFzc0xpc3QuYWRkKCdsdXh1cnktaGFwdGljLWhlYXZ5Jyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZWxlbWVudD8uY2xhc3NMaXN0LnJlbW92ZSgnbHV4dXJ5LWhhcHRpYy1oZWF2eScpLCAyMDApO1xuICAgICAgfVxuICAgICAgb25Mb25nUHJlc3MoKTtcbiAgICAgIGVuZFByZXNzKCk7XG4gICAgfSwgZGVsYXkpO1xuICB9LCBbb25Mb25nUHJlc3MsIGRlbGF5LCBoYXB0aWNGZWVkYmFjaywgY2xhc3NOYW1lXSk7XG5cbiAgY29uc3QgZW5kUHJlc3MgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHRpbWVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lclJlZi5jdXJyZW50KTtcbiAgICAgIHRpbWVyUmVmLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChwcm9ncmVzc1JlZi5jdXJyZW50KSB7XG4gICAgICBjbGVhckludGVydmFsKHByb2dyZXNzUmVmLmN1cnJlbnQpO1xuICAgICAgcHJvZ3Jlc3NSZWYuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc2V0SXNQcmVzc2VkKGZhbHNlKTtcbiAgICBzZXRQcm9ncmVzcygwKTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh0aW1lclJlZi5jdXJyZW50KSBjbGVhclRpbWVvdXQodGltZXJSZWYuY3VycmVudCk7XG4gICAgICBpZiAocHJvZ3Jlc3NSZWYuY3VycmVudCkgY2xlYXJJbnRlcnZhbChwcm9ncmVzc1JlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2ByZWxhdGl2ZSAke2NsYXNzTmFtZX1gfVxuICAgICAgb25Nb3VzZURvd249e3N0YXJ0UHJlc3N9XG4gICAgICBvbk1vdXNlVXA9e2VuZFByZXNzfVxuICAgICAgb25Nb3VzZUxlYXZlPXtlbmRQcmVzc31cbiAgICAgIG9uVG91Y2hTdGFydD17c3RhcnRQcmVzc31cbiAgICAgIG9uVG91Y2hFbmQ9e2VuZFByZXNzfVxuICAgICAgb25Ub3VjaENhbmNlbD17ZW5kUHJlc3N9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgICAge2lzUHJlc3NlZCAmJiAoXG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMCBib3JkZXItMiBib3JkZXItcmVkLTUwMCByb3VuZGVkLWxnIHBvaW50ZXItZXZlbnRzLW5vbmVcIlxuICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCB9fVxuICAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSB9fVxuICAgICAgICAgIGV4aXQ9e3sgb3BhY2l0eTogMCB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgYm90dG9tLTAgbGVmdC0wIGgtMSBiZy1yZWQtNTAwIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTc1IGVhc2UtbGluZWFyXCJcbiAgICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiBgJHtwcm9ncmVzc30lYCB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbi8vIFByZW1pdW0gRmxvYXRpbmcgQWN0aW9uIEJ1dHRvbiB3aXRoIEx1c29waG9uZSB0aGVtaW5nXG5pbnRlcmZhY2UgTHV4dXJ5RkFCUHJvcHMge1xuICBpY29uOiBSZWFjdC5SZWFjdE5vZGU7XG4gIG9uQ2xpY2s6ICgpID0+IHZvaWQ7XG4gIHZhcmlhbnQ/OiAncHJpbWFyeScgfCAnc2Vjb25kYXJ5JztcbiAgc2l6ZT86ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZSc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdG9vbHRpcD86IHN0cmluZztcbiAgYmFkZ2U/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMdXh1cnlGQUIoe1xuICBpY29uLFxuICBvbkNsaWNrLFxuICB2YXJpYW50ID0gJ3ByaW1hcnknLFxuICBzaXplID0gJ21lZGl1bScsXG4gIGNsYXNzTmFtZSA9ICcnLFxuICB0b29sdGlwLFxuICBiYWRnZVxufTogTHV4dXJ5RkFCUHJvcHMpIHtcbiAgY29uc3QgW2lzSG92ZXJlZCwgc2V0SXNIb3ZlcmVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBzaXplQ2xhc3NlcyA9IHtcbiAgICBzbWFsbDogJ3ctMTIgaC0xMicsXG4gICAgbWVkaXVtOiAndy0xNiBoLTE2JyxcbiAgICBsYXJnZTogJ3ctMjAgaC0yMCdcbiAgfTtcblxuICBjb25zdCB2YXJpYW50Q2xhc3NlcyA9IHtcbiAgICBwcmltYXJ5OiAnYmctZ3JhZGllbnQtdG8tYnIgZnJvbS1yZWQtNjAwIHRvLXJlZC03MDAgdGV4dC13aGl0ZSBzaGFkb3ctbGcgaG92ZXI6c2hhZG93LXhsJyxcbiAgICBzZWNvbmRhcnk6ICdiZy13aGl0ZSB0ZXh0LXJlZC02MDAgc2hhZG93LWxnIGhvdmVyOnNoYWRvdy14bCBib3JkZXItMiBib3JkZXItcmVkLTEwMCdcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxMdXh1cnlSaXBwbGVcbiAgICAgIG9uQ2xpY2s9e29uQ2xpY2t9XG4gICAgICBjbGFzc05hbWU9e2BsdXh1cnktZmFiICR7c2l6ZUNsYXNzZXNbc2l6ZV19ICR7dmFyaWFudENsYXNzZXNbdmFyaWFudF19ICR7Y2xhc3NOYW1lfWB9XG4gICAgICBoYXB0aWNGZWVkYmFjaz1cIm1lZGl1bVwiXG4gICAgPlxuICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgY2xhc3NOYW1lPVwicmVsYXRpdmUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgdy1mdWxsIGgtZnVsbFwiXG4gICAgICAgIHdoaWxlSG92ZXI9e3sgc2NhbGU6IDEuMDUsIHJvdGF0ZTogNSB9fVxuICAgICAgICB3aGlsZVRhcD17eyBzY2FsZTogMC45NSB9fVxuICAgICAgICBvbkhvdmVyU3RhcnQ9eygpID0+IHNldElzSG92ZXJlZCh0cnVlKX1cbiAgICAgICAgb25Ib3ZlckVuZD17KCkgPT4gc2V0SXNIb3ZlcmVkKGZhbHNlKX1cbiAgICAgID5cbiAgICAgICAgPG1vdGlvbi5kaXZcbiAgICAgICAgICBhbmltYXRlPXt7IHJvdGF0ZTogaXNIb3ZlcmVkID8gMTUgOiAwIH19XG4gICAgICAgICAgdHJhbnNpdGlvbj17eyB0eXBlOiBcInNwcmluZ1wiLCBzdGlmZm5lc3M6IDMwMCB9fVxuICAgICAgICA+XG4gICAgICAgICAge2ljb259XG4gICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgXG4gICAgICAgIHtiYWRnZSAmJiBiYWRnZSA+IDAgJiYgKFxuICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJhYnNvbHV0ZSAtdG9wLTIgLXJpZ2h0LTIgYmctcmVkLTUwMCB0ZXh0LXdoaXRlIHRleHQteHMgZm9udC1ib2xkIHJvdW5kZWQtZnVsbCB3LTYgaC02IGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCJcbiAgICAgICAgICAgIGluaXRpYWw9e3sgc2NhbGU6IDAgfX1cbiAgICAgICAgICAgIGFuaW1hdGU9e3sgc2NhbGU6IDEgfX1cbiAgICAgICAgICAgIHRyYW5zaXRpb249e3sgdHlwZTogXCJzcHJpbmdcIiwgc3RpZmZuZXNzOiA1MDAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7YmFkZ2UgPiA5OSA/ICc5OSsnIDogYmFkZ2V9XG4gICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICApfVxuICAgICAgICBcbiAgICAgICAge3Rvb2x0aXAgJiYgaXNIb3ZlcmVkICYmIChcbiAgICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgYm90dG9tLWZ1bGwgbWItMiBweC0zIHB5LTEgYmctYmxhY2sgdGV4dC13aGl0ZSB0ZXh0LXNtIHJvdW5kZWQtbGcgd2hpdGVzcGFjZS1ub3dyYXBcIlxuICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAxMCB9fVxuICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAgICAgICAgICBleGl0PXt7IG9wYWNpdHk6IDAsIHk6IDEwIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3Rvb2x0aXB9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC1mdWxsIGxlZnQtMS8yIHRyYW5zZm9ybSAtdHJhbnNsYXRlLXgtMS8yIGJvcmRlci00IGJvcmRlci10cmFuc3BhcmVudCBib3JkZXItdC1ibGFja1wiIC8+XG4gICAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgICApfVxuICAgICAgPC9tb3Rpb24uZGl2PlxuICAgIDwvTHV4dXJ5UmlwcGxlPlxuICApO1xufVxuXG4vLyBQcmVtaXVtIE1vZGFsIHdpdGggbHV4dXJ5IGFuaW1hdGlvbnNcbmludGVyZmFjZSBMdXh1cnlNb2RhbFByb3BzIHtcbiAgaXNPcGVuOiBib29sZWFuO1xuICBvbkNsb3NlOiAoKSA9PiB2b2lkO1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICB0aXRsZT86IHN0cmluZztcbiAgc2l6ZT86ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZScgfCAnZnVsbHNjcmVlbic7XG4gIHNob3dDbG9zZUJ1dHRvbj86IGJvb2xlYW47XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEx1eHVyeU1vZGFsKHtcbiAgaXNPcGVuLFxuICBvbkNsb3NlLFxuICBjaGlsZHJlbixcbiAgdGl0bGUsXG4gIHNpemUgPSAnbWVkaXVtJyxcbiAgc2hvd0Nsb3NlQnV0dG9uID0gdHJ1ZSxcbiAgY2xhc3NOYW1lID0gJydcbn06IEx1eHVyeU1vZGFsUHJvcHMpIHtcbiAgY29uc3Qgc2l6ZUNsYXNzZXMgPSB7XG4gICAgc21hbGw6ICdtYXgtdy1tZCcsXG4gICAgbWVkaXVtOiAnbWF4LXctMnhsJyxcbiAgICBsYXJnZTogJ21heC13LTR4bCcsXG4gICAgZnVsbHNjcmVlbjogJ21heC13LVs5NXZ3XSBtYXgtaC1bOTV2aF0nXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8QW5pbWF0ZVByZXNlbmNlPlxuICAgICAge2lzT3BlbiAmJiAoXG4gICAgICAgIDxtb3Rpb24uZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwibHV4dXJ5LW1vZGFsLW92ZXJsYXlcIlxuICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCB9fVxuICAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSB9fVxuICAgICAgICAgIGV4aXQ9e3sgb3BhY2l0eTogMCB9fVxuICAgICAgICAgIG9uQ2xpY2s9e29uQ2xvc2V9XG4gICAgICAgID5cbiAgICAgICAgICA8bW90aW9uLmRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtgbHV4dXJ5LW1vZGFsLWNvbnRlbnQgJHtzaXplQ2xhc3Nlc1tzaXplXX0gJHtjbGFzc05hbWV9YH1cbiAgICAgICAgICAgIGluaXRpYWw9e3sgc2NhbGU6IDAuOSwgb3BhY2l0eTogMCwgeTogMjAgfX1cbiAgICAgICAgICAgIGFuaW1hdGU9e3sgc2NhbGU6IDEsIG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgICAgICAgICAgIGV4aXQ9e3sgc2NhbGU6IDAuOSwgb3BhY2l0eTogMCwgeTogMjAgfX1cbiAgICAgICAgICAgIHRyYW5zaXRpb249e3sgdHlwZTogXCJzcHJpbmdcIiwgc3RpZmZuZXNzOiAzMDAsIGRhbXBpbmc6IDI1IH19XG4gICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dGl0bGUgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBwLTYgYm9yZGVyLWIgYm9yZGVyLWdyYXktMjAwXCI+XG4gICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQteGwgZm9udC1ib2xkIHRleHQtZ3JheS05MDBcIj57dGl0bGV9PC9oMj5cbiAgICAgICAgICAgICAgICB7c2hvd0Nsb3NlQnV0dG9uICYmIChcbiAgICAgICAgICAgICAgICAgIDxMdXh1cnlSaXBwbGUgb25DbGljaz17b25DbG9zZX0gY2xhc3NOYW1lPVwicC0zIHJvdW5kZWQtZnVsbCBob3ZlcjpiZy1ncmF5LTEwMCBtaW4tdy1bNDRweF0gbWluLWgtWzQ0cHhdIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCIgYXJpYS1sYWJlbD1cIkNsb3NlIG1vZGFsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzdmcgY2xhc3NOYW1lPVwidy02IGgtNiB0ZXh0LWdyYXktNTAwXCIgZmlsbD1cIm5vbmVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgPHBhdGggc3Ryb2tlTGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZVdpZHRoPXsyfSBkPVwiTTYgMThMMTggNk02IDZsMTIgMTJcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgIDwvTHV4dXJ5UmlwcGxlPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC02XCI+XG4gICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgICAgICAgPC9tb3Rpb24uZGl2PlxuICAgICAgKX1cbiAgICA8L0FuaW1hdGVQcmVzZW5jZT5cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBMdXh1cnlSaXBwbGUsXG4gIEx1eHVyeVN3aXBlLFxuICBMdXh1cnlQdWxsVG9SZWZyZXNoLFxuICBMdXh1cnlMb25nUHJlc3MsXG4gIEx1eHVyeUZBQixcbiAgTHV4dXJ5TW9kYWxcbn07Il0sIm5hbWVzIjpbIkx1eHVyeUZBQiIsIkx1eHVyeUxvbmdQcmVzcyIsIkx1eHVyeU1vZGFsIiwiTHV4dXJ5UHVsbFRvUmVmcmVzaCIsIkx1eHVyeVJpcHBsZSIsIkx1eHVyeVN3aXBlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJkaXNhYmxlZCIsInJpcHBsZUNvbG9yIiwib25DbGljayIsImhhcHRpY0ZlZWRiYWNrIiwicmlwcGxlcyIsInNldFJpcHBsZXMiLCJ1c2VTdGF0ZSIsInJpcHBsZVJlZiIsInVzZVJlZiIsInRyaWdnZXJIYXB0aWMiLCJ1c2VDYWxsYmFjayIsInR5cGUiLCJjdXJyZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0VGltZW91dCIsInJlbW92ZSIsImNyZWF0ZVJpcHBsZSIsImV2ZW50IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJ0b3VjaGVzIiwiY2xpZW50WSIsIngiLCJsZWZ0IiwieSIsInRvcCIsInNpemUiLCJNYXRoIiwibWF4Iiwid2lkdGgiLCJoZWlnaHQiLCJuZXdSaXBwbGUiLCJpZCIsIkRhdGUiLCJub3ciLCJyYW5kb20iLCJwcmV2IiwiZmlsdGVyIiwicmlwcGxlIiwiZGl2IiwicmVmIiwib25Nb3VzZURvd24iLCJvblRvdWNoU3RhcnQiLCJtYXAiLCJtb3Rpb24iLCJzdHlsZSIsImJhY2tncm91bmRDb2xvciIsImluaXRpYWwiLCJzY2FsZSIsIm9wYWNpdHkiLCJhbmltYXRlIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiZWFzZSIsIm9uU3dpcGVMZWZ0Iiwib25Td2lwZVJpZ2h0Iiwib25Td2lwZVVwIiwib25Td2lwZURvd24iLCJzd2lwZVRocmVzaG9sZCIsImlzUHJlc3NlZCIsInNldElzUHJlc3NlZCIsImRyYWdTdGFydCIsInNldERyYWdTdGFydCIsImRyYWdYIiwidXNlU3ByaW5nIiwic3RpZmZuZXNzIiwiZGFtcGluZyIsImRyYWdZIiwidXNlVHJhbnNmb3JtIiwiaGFuZGxlRHJhZ1N0YXJ0IiwiaGFuZGxlRHJhZ0VuZCIsImNoYW5nZWRUb3VjaGVzIiwiZGVsdGFYIiwiZGVsdGFZIiwic2V0IiwiYWJzIiwiaGFuZGxlRHJhZyIsImN1cnNvciIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwib25Nb3VzZUxlYXZlIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoRW5kIiwid2hpbGVUYXAiLCJvblJlZnJlc2giLCJ0aHJlc2hvbGQiLCJpc1JlZnJlc2hpbmciLCJzZXRJc1JlZnJlc2hpbmciLCJwdWxsRGlzdGFuY2UiLCJzZXRQdWxsRGlzdGFuY2UiLCJzdGFydFkiLCJzZXRTdGFydFkiLCJjYW5QdWxsIiwic2V0Q2FuUHVsbCIsInJlZnJlc2hZIiwicmVmcmVzaE9wYWNpdHkiLCJyZWZyZXNoUm90YXRpb24iLCJoYW5kbGVUb3VjaFN0YXJ0IiwiZSIsInNjcm9sbFRvcCIsIndpbmRvdyIsInBhZ2VZT2Zmc2V0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJoYW5kbGVUb3VjaE1vdmUiLCJjdXJyZW50WSIsImRpc3RhbmNlIiwicHJldmVudERlZmF1bHQiLCJkYW1wZWREaXN0YW5jZSIsIm1pbiIsImhhbmRsZVRvdWNoRW5kIiwidXNlRWZmZWN0Iiwicm90YXRlIiwic3ZnIiwidmlld0JveCIsImZpbGwiLCJzdHJva2UiLCJzdHJva2VXaWR0aCIsInN0cm9rZUxpbmVjYXAiLCJzdHJva2VMaW5lam9pbiIsInBhdGgiLCJkIiwic3BhbiIsIm9uTG9uZ1ByZXNzIiwiZGVsYXkiLCJwcm9ncmVzcyIsInNldFByb2dyZXNzIiwidGltZXJSZWYiLCJwcm9ncmVzc1JlZiIsInN0YXJ0UHJlc3MiLCJzdGFydFRpbWUiLCJzZXRJbnRlcnZhbCIsImVsYXBzZWQiLCJuZXdQcm9ncmVzcyIsImNsZWFySW50ZXJ2YWwiLCJlbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImVuZFByZXNzIiwiY2xlYXJUaW1lb3V0IiwidW5kZWZpbmVkIiwib25Ub3VjaENhbmNlbCIsImV4aXQiLCJpY29uIiwidmFyaWFudCIsInRvb2x0aXAiLCJiYWRnZSIsImlzSG92ZXJlZCIsInNldElzSG92ZXJlZCIsInNpemVDbGFzc2VzIiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSIsInZhcmlhbnRDbGFzc2VzIiwicHJpbWFyeSIsInNlY29uZGFyeSIsIndoaWxlSG92ZXIiLCJvbkhvdmVyU3RhcnQiLCJvbkhvdmVyRW5kIiwiaXNPcGVuIiwib25DbG9zZSIsInRpdGxlIiwic2hvd0Nsb3NlQnV0dG9uIiwiZnVsbHNjcmVlbiIsIkFuaW1hdGVQcmVzZW5jZSIsInN0b3BQcm9wYWdhdGlvbiIsImgyIiwiYXJpYS1sYWJlbCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztJQTZhZ0JBLFNBQVM7ZUFBVEE7O0lBdEdBQyxlQUFlO2VBQWZBOztJQXNMQUMsV0FBVztlQUFYQTs7SUE1U0FDLG1CQUFtQjtlQUFuQkE7O0lBbE1BQyxZQUFZO2VBQVpBOztJQTZGQUMsV0FBVztlQUFYQTs7SUF5Y2hCLE9BT0U7ZUFQRjs7OzsrREFuakJnRTs4QkFDQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWTFELFNBQVNELGFBQWEsRUFDM0JFLFFBQVEsRUFDUkMsWUFBWSxFQUFFLEVBQ2RDLFdBQVcsS0FBSyxFQUNoQkMsY0FBYywwQkFBMEIsRUFDeENDLE9BQU8sRUFDUEMsaUJBQWlCLE9BQU8sRUFDTjtJQUNsQixNQUFNLENBQUNDLFNBQVNDLFdBQVcsR0FBR0MsSUFBQUEsZUFBUSxFQUE0RCxFQUFFO0lBQ3BHLE1BQU1DLFlBQVlDLElBQUFBLGFBQU0sRUFBaUI7SUFFekMsTUFBTUMsZ0JBQWdCQyxJQUFBQSxrQkFBVyxFQUFDLENBQUNDO1FBQ2pDLHNEQUFzRDtRQUN0RCxJQUFJSixVQUFVSyxPQUFPLEVBQUU7WUFDckJM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