68cbdd5fbe551c71578ec2c0c4d7dbb0
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return MessageTranslator;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _logger = /*#__PURE__*/ _interop_require_default(require("../utils/logger"));
const _framermotion = require("framer-motion");
const _lucidereact = require("lucide-react");
const _LanguageContext = require("../context/LanguageContext");
const _portuguesetranslation = require("../config/portuguese-translation");
const _brand = require("../config/brand");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function MessageTranslator({ originalMessage, sourceLanguage = "auto", targetLanguage, dialect = "pt-PT", showCulturalContext = true, enableVoicePlayback = true, onTranslationComplete, className = "" }) {
    const { language } = (0, _LanguageContext.useLanguage)();
    const [translation, setTranslation] = (0, _react.useState)(null);
    const [isTranslating, setIsTranslating] = (0, _react.useState)(false);
    const [showOriginal, setShowOriginal] = (0, _react.useState)(true);
    const [copiedText, setCopiedText] = (0, _react.useState)(null);
    const [error, setError] = (0, _react.useState)(null);
    const [isPlayingOriginal, setIsPlayingOriginal] = (0, _react.useState)(false);
    const [isPlayingTranslated, setIsPlayingTranslated] = (0, _react.useState)(false);
    const autoTargetLanguage = targetLanguage || (language === "pt" ? "en" : "pt");
    const dialectInfo = (0, _portuguesetranslation.getDialectInfo)(dialect);
    const translations = {
        en: {
            translating: "Translating...",
            showOriginal: "Show original",
            showTranslation: "Show translation",
            playOriginal: "Play original text",
            playTranslated: "Play translated text",
            copyOriginal: "Copy original",
            copyTranslation: "Copy translation",
            retranslate: "Retranslate",
            confidence: "Translation confidence",
            dialect: "Detected dialect",
            culturalNote: "Cultural context",
            idiomDetected: "Portuguese idiom detected",
            alternativeTranslations: "Alternative translations",
            translationError: "Translation failed. Please try again.",
            copied: "Copied!",
            excellent: "Excellent translation quality",
            good: "Good translation quality",
            fair: "Fair translation quality - may need review",
            poor: "Poor translation quality - manual review recommended",
            autoDetected: "Auto-detected",
            formalContext: "Formal Portuguese context",
            informalContext: "Informal Portuguese context",
            regionalExpression: "Regional Portuguese expression"
        },
        pt: {
            translating: "Traduzindo...",
            showOriginal: "Mostrar original",
            showTranslation: "Mostrar tradu\xe7\xe3o",
            playOriginal: "Reproduzir texto original",
            playTranslated: "Reproduzir tradu\xe7\xe3o",
            copyOriginal: "Copiar original",
            copyTranslation: "Copiar tradu\xe7\xe3o",
            retranslate: "Traduzir novamente",
            confidence: "Confian\xe7a da tradu\xe7\xe3o",
            dialect: "Dialeto detetado",
            culturalNote: "Contexto cultural",
            idiomDetected: "Express\xe3o portuguesa detetada",
            alternativeTranslations: "Tradu\xe7\xf5es alternativas",
            translationError: "Falha na tradu\xe7\xe3o. Tente novamente.",
            copied: "Copiado!",
            excellent: "Qualidade excelente de tradu\xe7\xe3o",
            good: "Boa qualidade de tradu\xe7\xe3o",
            fair: "Qualidade razo\xe1vel - pode precisar de revis\xe3o",
            poor: "Qualidade fraca - revis\xe3o manual recomendada",
            autoDetected: "Detetado automaticamente",
            formalContext: "Contexto formal portugu\xeas",
            informalContext: "Contexto informal portugu\xeas",
            regionalExpression: "Express\xe3o regional portuguesa"
        }
    };
    const t = translations[language];
    (0, _react.useEffect)(()=>{
        if (originalMessage.trim()) {
            translateMessage();
        }
    }, [
        originalMessage,
        autoTargetLanguage,
        dialect
    ]);
    const translateMessage = async ()=>{
        if (!originalMessage.trim()) return;
        setIsTranslating(true);
        setError(null);
        try {
            // Simulate API call to translation service
            const response = await fetch("/api/translate", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    text: originalMessage,
                    source: sourceLanguage,
                    target: autoTargetLanguage,
                    dialect: dialect,
                    includeCulturalContext: showCulturalContext
                })
            });
            if (!response.ok) {
                throw new Error("Translation service unavailable");
            }
            const result = await response.json();
            // Enhanced result with cultural analysis
            const enhancedResult = {
                ...result,
                detectedIdioms: detectIdioms(originalMessage, dialect),
                culturalNotes: generateCulturalNotes(originalMessage, dialect),
                alternativeTranslations: result.alternatives || []
            };
            setTranslation(enhancedResult);
            onTranslationComplete?.(enhancedResult);
        } catch (error) {
            _logger.default.error("Translation error:", error);
            setError(t.translationError);
            // Fallback: create basic translation result
            setTranslation({
                originalText: originalMessage,
                translatedText: originalMessage,
                sourceLanguage: sourceLanguage,
                targetLanguage: autoTargetLanguage,
                dialect: dialect,
                confidence: 0.5,
                detectedIdioms: detectIdioms(originalMessage, dialect),
                culturalNotes: generateCulturalNotes(originalMessage, dialect)
            });
        } finally{
            setIsTranslating(false);
        }
    };
    const detectIdioms = (text, dialect)=>{
        const idioms = [];
        if ((0, _portuguesetranslation.isPortugueseIdiom)(text, dialect)) {
            // Extract actual idioms from text
            const commonIdioms = [
                "saudade",
                "que saudades",
                "desenrasca",
                "jeitinho",
                "fixe",
                "legal",
                "bacano",
                "t\xe1 ligado"
            ];
            commonIdioms.forEach((idiom)=>{
                if (text.toLowerCase().includes(idiom)) {
                    idioms.push(idiom);
                }
            });
        }
        return idioms;
    };
    const generateCulturalNotes = (text, dialect)=>{
        const notes = [];
        const culturalContext = _portuguesetranslation.CULTURAL_CONTEXTS[dialectInfo.country.toLowerCase()];
        if (!culturalContext) return notes;
        // Check for cultural markers
        culturalContext.culturalMarkers.forEach((marker)=>{
            if (text.toLowerCase().includes(marker)) {
                notes.push(`"${marker}" is a cultural reference from ${culturalContext.country}`);
            }
        });
        // Check for formality level
        const formalWords = [
            "senhor",
            "senhora",
            "vossa",
            "vossemec\xea"
        ];
        const informalWords = [
            "tu",
            "voc\xea",
            "mano",
            "cara"
        ];
        if (formalWords.some((word)=>text.toLowerCase().includes(word))) {
            notes.push(t.formalContext);
        } else if (informalWords.some((word)=>text.toLowerCase().includes(word))) {
            notes.push(t.informalContext);
        }
        return notes;
    };
    const copyToClipboard = async (text, type)=>{
        try {
            await navigator.clipboard.writeText(text);
            setCopiedText(type);
            setTimeout(()=>setCopiedText(null), 2000);
        } catch (error) {
            _logger.default.error("Copy failed:", error);
        }
    };
    const playText = async (text, isOriginal)=>{
        if (!enableVoicePlayback || !("speechSynthesis" in window)) return;
        const utterance = new SpeechSynthesisUtterance(text);
        if (isOriginal) {
            utterance.lang = dialect;
            setIsPlayingOriginal(true);
            utterance.onend = ()=>setIsPlayingOriginal(false);
        } else {
            utterance.lang = autoTargetLanguage === "pt" ? "pt-PT" : "en-US";
            setIsPlayingTranslated(true);
            utterance.onend = ()=>setIsPlayingTranslated(false);
        }
        utterance.rate = 0.9;
        utterance.pitch = 1.0;
        utterance.volume = 1.0;
        speechSynthesis.speak(utterance);
    };
    const getQualityIndicator = (confidence)=>{
        const quality = (0, _portuguesetranslation.getTranslationQuality)(confidence);
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: "flex items-center space-x-2",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    style: {
                        color: quality.color
                    },
                    children: quality.icon
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    className: "text-sm text-gray-600",
                    children: confidence > 0 ? `${Math.round(confidence * 100)}%` : t.autoDetected
                })
            ]
        });
    };
    if (isTranslating) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: `flex items-center justify-center p-4 ${className}`,
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    animate: {
                        rotate: 360
                    },
                    transition: {
                        duration: 1,
                        repeat: Infinity,
                        ease: "linear"
                    },
                    className: "w-5 h-5 border-2 border-primary-600 border-t-transparent rounded-full mr-3",
                    style: {
                        borderColor: _brand.PORTUGUESE_COLORS.primary
                    }
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    className: "text-sm text-gray-600",
                    children: t.translating
                })
            ]
        });
    }
    if (!translation) return null;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `message-translator bg-white border border-gray-200 rounded-lg p-4 space-y-4 ${className}`,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-3",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Languages, {
                                        className: "w-5 h-5 text-primary-600",
                                        style: {
                                            color: _brand.PORTUGUESE_COLORS.primary
                                        }
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                        className: "font-medium text-gray-900",
                                        children: [
                                            dialectInfo.flag,
                                            " ",
                                            dialectInfo.name[language],
                                            " → ",
                                            autoTargetLanguage === "en" ? "\uD83C\uDDEC\uD83C\uDDE7 English" : "\uD83C\uDDF5\uD83C\uDDF9 Portugu\xeas"
                                        ]
                                    })
                                ]
                            }),
                            getQualityIndicator(translation.confidence)
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.button, {
                                whileHover: {
                                    scale: 1.05
                                },
                                whileTap: {
                                    scale: 0.95
                                },
                                onClick: ()=>setShowOriginal(!showOriginal),
                                className: "px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors",
                                children: showOriginal ? t.showTranslation : t.showOriginal
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: translateMessage,
                                className: "p-2 text-gray-600 hover:text-primary-600 hover:bg-gray-100 rounded-lg transition-colors",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RefreshCw, {
                                    className: "w-4 h-4"
                                })
                            })
                        ]
                    })
                ]
            }),
            error && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                initial: {
                    opacity: 0,
                    y: -10
                },
                animate: {
                    opacity: 1,
                    y: 0
                },
                className: "flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-lg",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.AlertCircle, {
                        className: "w-4 h-4 text-red-600 flex-shrink-0"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "text-sm text-red-700",
                        children: error
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.AnimatePresence, {
                mode: "wait",
                children: showOriginal ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    initial: {
                        opacity: 0,
                        x: -10
                    },
                    animate: {
                        opacity: 1,
                        x: 0
                    },
                    exit: {
                        opacity: 0,
                        x: 10
                    },
                    className: "space-y-3",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "p-3 bg-gray-50 rounded-lg border border-gray-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center justify-between mb-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center space-x-2",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Globe, {
                                                className: "w-4 h-4 text-gray-600"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-sm font-medium text-gray-700",
                                                children: "Original"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-xs px-2 py-0.5 bg-gray-200 rounded-full",
                                                children: dialectInfo.name[language]
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center space-x-1",
                                        children: [
                                            enableVoicePlayback && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                                onClick: ()=>playText(translation.originalText, true),
                                                disabled: isPlayingOriginal,
                                                className: `p-1 text-gray-600 hover:text-primary-600 hover:bg-gray-200 rounded transition-colors ${isPlayingOriginal ? "animate-pulse" : ""}`,
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Volume2, {
                                                    className: "w-4 h-4"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                                onClick: ()=>copyToClipboard(translation.originalText, "original"),
                                                className: "p-1 text-gray-600 hover:text-primary-600 hover:bg-gray-200 rounded transition-colors",
                                                children: copiedText === "original" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Check, {
                                                    className: "w-4 h-4 text-green-600"
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Copy, {
                                                    className: "w-4 h-4"
                                                })
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "text-gray-800 leading-relaxed",
                                children: translation.originalText
                            })
                        ]
                    })
                }, "original") : /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.motion.div, {
                    initial: {
                        opacity: 0,
                        x: 10
                    },
                    animate: {
                        opacity: 1,
                        x: 0
                    },
                    exit: {
                        opacity: 0,
                        x: -10
                    },
                    className: "space-y-3",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "p-3 bg-blue-50 rounded-lg border border-blue-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center justify-between mb-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center space-x-2",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Sparkles, {
                                                className: "w-4 h-4 text-blue-600"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-sm font-medium text-blue-700",
                                                children: "Translation"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "text-xs px-2 py-0.5 bg-blue-200 rounded-full",
                                                children: autoTargetLanguage === "en" ? "English" : "Portugu\xeas"
                                            })
                                        ]
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "flex items-center space-x-1",
                                        children: [
                                            enableVoicePlayback && /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                                onClick: ()=>playText(translation.translatedText, false),
                                                disabled: isPlayingTranslated,
                                                className: `p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-200 rounded transition-colors ${isPlayingTranslated ? "animate-pulse" : ""}`,
                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Volume2, {
                                                    className: "w-4 h-4"
                                                })
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                                onClick: ()=>copyToClipboard(translation.translatedText, "translation"),
                                                className: "p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-200 rounded transition-colors",
                                                children: copiedText === "translation" ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Check, {
                                                    className: "w-4 h-4 text-green-600"
                                                }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Copy, {
                                                    className: "w-4 h-4"
                                                })
                                            })
                                        ]
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                className: "text-blue-900 leading-relaxed",
                                children: translation.translatedText
                            })
                        ]
                    })
                }, "translation")
            }),
            showCulturalContext && (translation.detectedIdioms?.length || translation.culturalNotes?.length) && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-3",
                children: [
                    translation.detectedIdioms && translation.detectedIdioms.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "p-3 bg-yellow-50 rounded-lg border border-yellow-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2 mb-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.BookOpen, {
                                        className: "w-4 h-4 text-yellow-700"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm font-medium text-yellow-800",
                                        children: t.idiomDetected
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "space-y-1",
                                children: translation.detectedIdioms.map((idiom, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                        className: "text-sm",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                className: "font-medium text-yellow-800",
                                                children: [
                                                    '"',
                                                    idiom,
                                                    '"'
                                                ]
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("span", {
                                                className: "text-yellow-700",
                                                children: [
                                                    " - ",
                                                    (0, _portuguesetranslation.translateIdiom)(idiom, dialect) || "Regional expression"
                                                ]
                                            })
                                        ]
                                    }, index))
                            })
                        ]
                    }),
                    translation.culturalNotes && translation.culturalNotes.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "p-3 bg-green-50 rounded-lg border border-green-200",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center space-x-2 mb-2",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Info, {
                                        className: "w-4 h-4 text-green-700"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                        className: "text-sm font-medium text-green-800",
                                        children: t.culturalNote
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("ul", {
                                className: "space-y-1 text-sm text-green-700",
                                children: translation.culturalNotes.map((note, index)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("li", {
                                        className: "flex items-start space-x-2",
                                        children: [
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                className: "w-1 h-1 bg-green-600 rounded-full mt-2 flex-shrink-0"
                                            }),
                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                children: note
                                            })
                                        ]
                                    }, index))
                            })
                        ]
                    })
                ]
            }),
            translation.alternativeTranslations && translation.alternativeTranslations.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "p-3 bg-gray-50 rounded-lg border border-gray-200",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex items-center space-x-2 mb-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.RefreshCw, {
                                className: "w-4 h-4 text-gray-600"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "text-sm font-medium text-gray-700",
                                children: t.alternativeTranslations
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "space-y-2",
                        children: translation.alternativeTranslations.slice(0, 3).map((alt, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "text-sm text-gray-600 p-2 bg-white rounded border border-gray-100",
                                children: alt
                            }, index))
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_framermotion.AnimatePresence, {
                children: copiedText && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_framermotion.motion.div, {
                    initial: {
                        opacity: 0,
                        y: 10
                    },
                    animate: {
                        opacity: 1,
                        y: 0
                    },
                    exit: {
                        opacity: 0,
                        y: 10
                    },
                    className: "flex items-center justify-center p-2 bg-green-100 text-green-800 rounded-lg",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_lucidereact.Check, {
                            className: "w-4 h-4 mr-2"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            className: "text-sm font-medium",
                            children: t.copied
                        })
                    ]
                })
            })
        ]
    });
}

//# sourceMappingURL=data:application/json;base64,