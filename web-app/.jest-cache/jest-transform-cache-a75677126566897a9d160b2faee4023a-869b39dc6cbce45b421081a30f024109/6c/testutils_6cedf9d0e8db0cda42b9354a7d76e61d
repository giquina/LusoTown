fc61773af10436509420a2cd60b62bb1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    culturalTestUtils: function() {
        return culturalTestUtils;
    },
    fireEvent: function() {
        return _react1.fireEvent;
    },
    mobileTestUtils: function() {
        return mobileTestUtils;
    },
    performanceTestUtils: function() {
        return performanceTestUtils;
    },
    portugueseTestUtils: function() {
        return portugueseTestUtils;
    },
    render: function() {
        return customRender;
    },
    screen: function() {
        return _react1.screen;
    },
    securityTestUtils: function() {
        return securityTestUtils;
    },
    waitFor: function() {
        return _react1.waitFor;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
require("@testing-library/jest-dom");
const _LanguageContext = require("../../src/context/LanguageContext");
const _NetworkingContext = require("../../src/context/NetworkingContext");
const _SubscriptionContext = require("../../src/context/SubscriptionContext");
const _CartContext = require("../../src/context/CartContext");
const _FavoritesContext = require("../../src/context/FavoritesContext");
const _HeritageContext = require("../../src/context/HeritageContext");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Custom render function that includes all LusoTown providers
const AllTheProviders = ({ children, initialLanguage = "en", mockUser })=>{
    // Mock localStorage for initial language
    if (initialLanguage) {
        global.localStorage.getItem = jest.fn((key)=>{
            if (key === "lusotown-language") return initialLanguage;
            if (key === "lusotown-user" && mockUser) return JSON.stringify(mockUser);
            return null;
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_HeritageContext.HeritageProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_CartContext.CartProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_FavoritesContext.FavoritesProvider, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_SubscriptionContext.SubscriptionProvider, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_NetworkingContext.NetworkingProvider, {
                            children: children
                        })
                    })
                })
            })
        })
    });
};
const customRender = (ui, options)=>{
    const { initialLanguage, mockUser, ...renderOptions } = options || {};
    return (0, _react1.render)(ui, {
        wrapper: (props)=>/*#__PURE__*/ (0, _jsxruntime.jsx)(AllTheProviders, {
                ...props,
                initialLanguage: initialLanguage,
                mockUser: mockUser
            }),
        ...renderOptions
    });
};
const portugueseTestUtils = {
    // Mock Portuguese user
    mockPortugueseUser: global.testUtils?.mockPortugueseUser,
    // Mock English user living in London
    mockEnglishUser: global.testUtils?.mockEnglishUser,
    // Mock Portuguese event
    mockPortugueseEvent: global.testUtils?.mockPortugueseEvent,
    // Verify Portuguese text content
    expectPortugueseText: (element, expectedText)=>{
        expect(element).toHaveTextContent(expectedText);
    },
    // Verify bilingual content
    expectBilingualContent: (container, textEn, textPt)=>{
        const hasEnglish = container.textContent?.includes(textEn);
        const hasPortuguese = container.textContent?.includes(textPt);
        expect(hasEnglish || hasPortuguese).toBe(true);
    },
    // Mock networking connections for Portuguese-speaking community
    mockPortugueseConnections: [
        {
            id: "conn-1",
            userId: "current-user",
            connectedUserId: "user-maria",
            connectedUser: {
                id: "user-maria",
                firstName: "Maria",
                lastName: "Santos",
                profilePictureUrl: "https://example.com/maria.jpg",
                location: "Camberwell, London",
                membershipTier: "premium",
                isVerified: true
            },
            connectionSource: "event_based",
            sharedEventsCount: 3,
            connectionStrength: 8.5,
            lastInteractionAt: "2024-01-20T18:00:00Z",
            isActive: true,
            privacyLevel: "normal",
            createdAt: "2024-01-15T20:30:00Z"
        }
    ],
    // Mock subscription data
    mockPremiumSubscription: {
        id: "sub-1",
        user_id: "test-user",
        status: "active",
        plan_type: "yearly",
        tier: "platinum",
        current_period_end: "2025-01-01T00:00:00Z",
        amount: 25,
        currency: "GBP",
        created_at: "2024-01-01T00:00:00Z",
        updated_at: "2024-01-01T00:00:00Z"
    },
    // Mock cultural events
    mockCulturalEvents: [
        {
            id: "event-fado",
            title: "Noite de Fado",
            title_en: "Fado Night",
            description: "Uma noite especial de m\xfasica tradicional portuguesa",
            description_en: "A special night of traditional Portuguese music",
            date: "2024-02-15T20:00:00Z",
            location: "Portuguese Cultural Centre, London",
            price: 25,
            currency: "GBP",
            category: "cultural",
            image_url: "https://example.com/fado.jpg"
        },
        {
            id: "event-food-tour",
            title: "Tour Gastron\xf3mico Portugu\xeas",
            title_en: "Portuguese Food Tour",
            description: "Explore os sabores de Portugal em Londres",
            description_en: "Explore the flavors of Portugal in London",
            date: "2024-02-20T14:00:00Z",
            location: "Little Portugal, London",
            price: 35,
            currency: "GBP",
            category: "food",
            image_url: "https://example.com/food-tour.jpg"
        }
    ]
};
const mobileTestUtils = {
    // Set viewport to mobile size
    setMobileViewport: ()=>{
        Object.defineProperty(window, "innerWidth", {
            writable: true,
            configurable: true,
            value: 375
        });
        Object.defineProperty(window, "innerHeight", {
            writable: true,
            configurable: true,
            value: 667
        });
        window.dispatchEvent(new Event("resize"));
    },
    // Set viewport to tablet size
    setTabletViewport: ()=>{
        Object.defineProperty(window, "innerWidth", {
            writable: true,
            configurable: true,
            value: 768
        });
        Object.defineProperty(window, "innerHeight", {
            writable: true,
            configurable: true,
            value: 1024
        });
        window.dispatchEvent(new Event("resize"));
    },
    // Set viewport to desktop size
    setDesktopViewport: ()=>{
        Object.defineProperty(window, "innerWidth", {
            writable: true,
            configurable: true,
            value: 1024
        });
        Object.defineProperty(window, "innerHeight", {
            writable: true,
            configurable: true,
            value: 768
        });
        window.dispatchEvent(new Event("resize"));
    },
    // Mock touch events
    mockTouchStart: (element, x = 0, y = 0)=>{
        const touch = {
            clientX: x,
            clientY: y,
            identifier: 0,
            pageX: x,
            pageY: y,
            screenX: x,
            screenY: y,
            target: element,
            force: 1,
            radiusX: 1,
            radiusY: 1,
            rotationAngle: 0
        };
        const event = new TouchEvent("touchstart", {
            touches: [
                touch
            ]
        });
        element.dispatchEvent(event);
    }
};
const performanceTestUtils = {
    // Mock performance API
    mockPerformanceNow: ()=>{
        const startTime = Date.now();
        jest.spyOn(performance, "now").mockImplementation(()=>Date.now() - startTime);
    },
    // Measure component render time
    measureRenderTime: async (renderFn)=>{
        const start = performance.now();
        await renderFn();
        const end = performance.now();
        return end - start;
    },
    // Mock slow network conditions
    mockSlowNetwork: ()=>{
        jest.spyOn(window, "fetch").mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve(new Response()), 2000)));
    }
};
const securityTestUtils = {
    // Test for XSS vulnerabilities
    createXSSPayload: (elementType = "script")=>{
        return `<${elementType}>alert('XSS')</${elementType}>`;
    },
    // Test for SQL injection patterns
    createSQLInjectionPayload: ()=>{
        return "'; DROP TABLE users; --";
    },
    // Verify content sanitization
    expectSanitizedContent: (element, dangerousContent)=>{
        expect(element.innerHTML).not.toContain("<script");
        expect(element.innerHTML).not.toContain("javascript:");
        expect(element.innerHTML).not.toContain("DROP TABLE");
    }
};
const culturalTestUtils = {
    // Portuguese cultural terms that should be preserved
    portugueseCulturalTerms: [
        "Fado",
        "Saudade",
        "Bacalhau",
        "Past\xe9is de Nata",
        "Santos Populares",
        "Lus\xf3fono",
        "Saldo",
        "Obrigado",
        "Obrigada"
    ],
    // Verify cultural term preservation
    expectCulturalTermPreservation: (element, terms)=>{
        terms.forEach((term)=>{
            if (element.textContent?.includes(term)) {
                // Ensure the term is not translated or altered
                expect(element.textContent).toContain(term);
            }
        });
    },
    // United Kingdom-specific location terms
    ukLocationTerms: [
        "London",
        "Greater London",
        "Camden",
        "Vauxhall",
        "Kennington",
        "United Kingdom",
        "United Kingdom"
    ],
    // Verify United Kingdom focus in content
    expectUKLocationFocus: (element)=>{
        const hasUKReference = culturalTestUtils.ukLocationTerms.some((term)=>element.textContent?.includes(term));
        expect(hasUKReference).toBe(true);
    }
};

//# sourceMappingURL=data:application/json;base64,