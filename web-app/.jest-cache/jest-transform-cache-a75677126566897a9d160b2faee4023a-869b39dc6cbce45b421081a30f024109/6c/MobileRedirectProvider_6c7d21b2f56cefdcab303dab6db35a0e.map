{"version":3,"sources":["/workspaces/LusoTown/web-app/src/components/MobileRedirectProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useLanguage } from '@/context/LanguageContext';\nimport { logger } from '@/utils/logger';\nimport { \n  getDeviceInfo, \n  checkAppInstallation, \n  shouldShowDownloadPrompt,\n  trackDownloadChoice,\n  type DeviceInfo,\n  type AppInstallationStatus \n} from '@/lib/mobile-detection';\nimport { MOBILE_APP_CONFIG, LANDING_PAGE_CONFIG } from '@/config/mobile-app';\n\ninterface MobileRedirectContextType {\n  deviceInfo: DeviceInfo | null;\n  installationStatus: AppInstallationStatus | null;\n  showDownloadPrompt: boolean;\n  showLandingPage: boolean;\n  isLoading: boolean;\n  dismissPrompt: () => void;\n  triggerAppDownload: (platform?: 'ios' | 'android') => void;\n  triggerPWAInstall: () => void;\n  continuewithWebsite: () => void;\n}\n\nconst MobileRedirectContext = createContext<MobileRedirectContextType | null>(null);\n\ninterface MobileRedirectProviderProps {\n  children: React.ReactNode;\n  forceShow?: boolean; // For testing purposes\n  disabled?: boolean;  // Disable all mobile redirect logic\n}\n\n/**\n * MobileRedirectProvider - Manages mobile app transition strategy\n * \n * Handles device detection, app installation status, download prompts,\n * and A/B testing for the Portuguese-speaking community mobile experience.\n */\nexport function MobileRedirectProvider({ \n  children, \n  forceShow = false, \n  disabled = false \n}: MobileRedirectProviderProps) {\n  const { language } = useLanguage();\n  \n  // State management\n  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);\n  const [installationStatus, setInstallationStatus] = useState<AppInstallationStatus | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showDownloadPrompt, setShowDownloadPrompt] = useState(false);\n  const [showLandingPage, setShowLandingPage] = useState(false);\n  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);\n\n  useEffect(() => {\n    if (disabled) {\n      setIsLoading(false);\n      return;\n    }\n\n    initializeMobileDetection();\n    setupPWAInstallPrompt();\n  }, [disabled]);\n\n  /**\n   * Initialize mobile device detection and app installation checking\n   */\n  const initializeMobileDetection = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Get device information\n      const device = getDeviceInfo();\n      setDeviceInfo(device);\n      \n      // Check if we should show any prompts\n      const shouldShow = forceShow || shouldShowDownloadPrompt();\n      \n      if (shouldShow && (device.isMobile || device.isTablet)) {\n        // Check app installation status\n        const installation = await checkAppInstallation();\n        setInstallationStatus(installation);\n        \n        // Determine what to show based on installation status and device\n        if (!installation.isInstalled) {\n          // Decide between download prompt and landing page based on A/B testing\n          const variant = selectABTestVariant();\n          \n          if (variant === 'landing_page' || device.isTablet) {\n            setShowLandingPage(true);\n          } else {\n            setShowDownloadPrompt(true);\n          }\n        }\n      }\n      \n    } catch (error) {\n      logger.warn('Mobile detection initialization failed for Portuguese-speaking community', {\n        area: 'mobile',\n        culturalContext: 'lusophone',\n        action: 'mobile_detection_init_failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Setup PWA installation prompt handling\n   */\n  const setupPWAInstallPrompt = () => {\n    if (typeof window === 'undefined') return;\n\n    const handleBeforeInstallPrompt = (e: Event) => {\n      // Prevent Chrome 67 and earlier from automatically showing the prompt\n      e.preventDefault();\n      // Stash the event so it can be triggered later\n      setDeferredPrompt(e);\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    };\n  };\n\n  /**\n   * Select A/B testing variant for mobile experience\n   */\n  const selectABTestVariant = (): 'prompt' | 'landing_page' => {\n    if (!MOBILE_APP_CONFIG.testing.enabled) return 'prompt';\n    \n    // Use user ID or session ID for consistent experience\n    // For now, use random selection\n    const random = Math.random() * 100;\n    let cumulativeWeight = 0;\n    \n    for (const variant of MOBILE_APP_CONFIG.testing.variants) {\n      cumulativeWeight += variant.weight;\n      if (random <= cumulativeWeight) {\n        return variant.id.includes('landing') ? 'landing_page' : 'prompt';\n      }\n    }\n    \n    return 'prompt';\n  };\n\n  /**\n   * Dismiss the download prompt\n   */\n  const dismissPrompt = () => {\n    setShowDownloadPrompt(false);\n    setShowLandingPage(false);\n    trackDownloadChoice('continue_web');\n  };\n\n  /**\n   * Trigger native app download\n   */\n  const triggerAppDownload = (platform?: 'ios' | 'android') => {\n    if (!deviceInfo) return;\n    \n    const targetPlatform = platform || (deviceInfo.isIOS ? 'ios' : 'android');\n    const appStoreUrl = targetPlatform === 'ios' \n      ? MOBILE_APP_CONFIG.stores.ios.url \n      : MOBILE_APP_CONFIG.stores.android.url;\n    \n    // Track the download attempt\n    trackDownloadChoice('download_app', targetPlatform);\n    \n    // Open app store\n    window.open(appStoreUrl, '_blank');\n    \n    // Dismiss prompts after download attempt\n    setShowDownloadPrompt(false);\n    setShowLandingPage(false);\n  };\n\n  /**\n   * Trigger PWA installation\n   */\n  const triggerPWAInstall = async () => {\n    if (!deferredPrompt) return;\n    \n    try {\n      // Show the install prompt\n      deferredPrompt.prompt();\n      \n      // Wait for the user to respond to the prompt\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      // Track the choice\n      trackDownloadChoice('install_pwa');\n      \n      if (outcome === 'accepted') {\n        logger.info('PWA installation accepted by Portuguese-speaking community member', {\n          area: 'mobile',\n          culturalContext: 'lusophone',\n          action: 'pwa_installation_accepted'\n        });\n      } else {\n        logger.info('PWA installation dismissed by Portuguese-speaking community member', {\n          area: 'mobile',\n          culturalContext: 'lusophone',\n          action: 'pwa_installation_dismissed'\n        });\n      }\n      \n      // Clear the deferredPrompt\n      setDeferredPrompt(null);\n      setShowDownloadPrompt(false);\n      setShowLandingPage(false);\n      \n    } catch (error) {\n      logger.warn('PWA installation failed for Portuguese-speaking community member', {\n        area: 'mobile',\n        culturalContext: 'lusophone',\n        action: 'pwa_installation_failed',\n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  };\n\n  /**\n   * Continue with website experience\n   */\n  const continuewithWebsite = () => {\n    dismissPrompt();\n  };\n\n  const contextValue: MobileRedirectContextType = {\n    deviceInfo,\n    installationStatus,\n    showDownloadPrompt,\n    showLandingPage,\n    isLoading,\n    dismissPrompt,\n    triggerAppDownload,\n    triggerPWAInstall,\n    continuewithWebsite\n  };\n\n  return (\n    <MobileRedirectContext.Provider value={contextValue}>\n      {children}\n    </MobileRedirectContext.Provider>\n  );\n}\n\n/**\n * Hook to use mobile redirect context\n */\nexport function useMobileRedirect(): MobileRedirectContextType {\n  const context = useContext(MobileRedirectContext);\n  if (!context) {\n    throw new Error('useMobileRedirect must be used within a MobileRedirectProvider');\n  }\n  return context;\n}\n\n/**\n * Mobile Download Prompt Component\n * Compact prompt that appears for mobile users\n */\nexport function MobileDownloadPrompt() {\n  const { t } = useLanguage();\n  const {\n    deviceInfo,\n    installationStatus,\n    showDownloadPrompt,\n    dismissPrompt,\n    triggerAppDownload,\n  triggerPWAInstall\n  } = useMobileRedirect();\n\n  if (!showDownloadPrompt || !deviceInfo) return null;\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-primary-200 shadow-xl p-4 safe-area-pb\">\n      <div className=\"flex items-center gap-3\">\n        {/* App Icon */}\n        <div className=\"flex-shrink-0 w-12 h-12 bg-gradient-to-r from-primary-600 to-secondary-600 rounded-xl flex items-center justify-center\">\n          <span className=\"text-white text-lg font-bold\">LT</span>\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-sm font-semibold text-gray-900\">\n            {t('mobile.app.prompt.title', 'Get the LusoTown App')}\n          </h3>\n          <p className=\"text-xs text-gray-600 line-clamp-1\">\n            {t('mobile.app.prompt.subtitle', 'Better experience for Portuguese community')}\n          </p>\n        </div>\n        \n        {/* Actions */}\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={dismissPrompt}\n            className=\"px-3 py-2 text-sm text-gray-600 hover:text-gray-800 min-h-[36px]\"\n          >\n            {t('mobile.app.continue_web', 'Not now')}\n          </button>\n          \n          {installationStatus?.canInstallPWA ? (\n            <button\n              onClick={triggerPWAInstall}\n              className=\"bg-primary-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary-700 transition-colors min-h-[36px]\"\n            >\n              {t('mobile.app.install', 'Install')}\n            </button>\n          ) : (\n            <button\n              onClick={() => triggerAppDownload()}\n              className=\"bg-primary-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary-700 transition-colors min-h-[36px]\"\n            >\n              {t('mobile.app.download', 'Get App')}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MobileRedirectProvider;"],"names":["MobileDownloadPrompt","MobileRedirectProvider","useMobileRedirect","MobileRedirectContext","createContext","children","forceShow","disabled","language","useLanguage","deviceInfo","setDeviceInfo","useState","installationStatus","setInstallationStatus","isLoading","setIsLoading","showDownloadPrompt","setShowDownloadPrompt","showLandingPage","setShowLandingPage","deferredPrompt","setDeferredPrompt","useEffect","initializeMobileDetection","setupPWAInstallPrompt","device","getDeviceInfo","shouldShow","shouldShowDownloadPrompt","isMobile","isTablet","installation","checkAppInstallation","isInstalled","variant","selectABTestVariant","error","logger","warn","area","culturalContext","action","Error","message","window","handleBeforeInstallPrompt","e","preventDefault","addEventListener","removeEventListener","MOBILE_APP_CONFIG","testing","enabled","random","Math","cumulativeWeight","variants","weight","id","includes","dismissPrompt","trackDownloadChoice","triggerAppDownload","platform","targetPlatform","isIOS","appStoreUrl","stores","ios","url","android","open","triggerPWAInstall","prompt","outcome","userChoice","info","continuewithWebsite","contextValue","Provider","value","context","useContext","t","div","className","span","h3","p","button","onClick","canInstallPWA"],"mappings":"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"}