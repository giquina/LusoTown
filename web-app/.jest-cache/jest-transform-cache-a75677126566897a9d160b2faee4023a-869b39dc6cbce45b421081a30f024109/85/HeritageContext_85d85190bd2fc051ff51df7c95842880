53669ae21b8269521dbcdb2a93b3ec45
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    HeritageProvider: function() {
        return HeritageProvider;
    },
    default: function() {
        return _default;
    },
    useCulturalAreas: function() {
        return useCulturalAreas;
    },
    useHeritage: function() {
        return useHeritage;
    },
    useHeritageCSSProperties: function() {
        return useHeritageCSSProperties;
    },
    useHeritageColors: function() {
        return useHeritageColors;
    },
    useHeritageEmotes: function() {
        return useHeritageEmotes;
    },
    useHeritageSymbols: function() {
        return useHeritageSymbols;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _heritage = require("../config/heritage");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const HeritageContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function HeritageProvider({ children, defaultHeritage = "pt" }) {
    const [heritageManager] = (0, _react.useState)(()=>_heritage.HeritageManager.getInstance());
    const [heritage, setHeritageState] = (0, _react.useState)(heritageManager.getCurrentHeritage());
    const [heritageCode, setHeritageCode] = (0, _react.useState)(defaultHeritage);
    (0, _react.useEffect)(()=>{
        // Initialize heritage from localStorage or environment
        const savedHeritage = localStorage.getItem("heritage-code");
        const envHeritage = process.env.NEXT_PUBLIC_HERITAGE_CODE;
        const initialHeritage = savedHeritage || envHeritage || defaultHeritage;
        if (initialHeritage && heritageManager.setHeritage(initialHeritage)) {
            setHeritageState(heritageManager.getCurrentHeritage());
            setHeritageCode(initialHeritage);
        }
    }, [
        defaultHeritage,
        heritageManager
    ]);
    const setHeritage = (code)=>{
        const success = heritageManager.setHeritage(code);
        if (success) {
            setHeritageState(heritageManager.getCurrentHeritage());
            setHeritageCode(code);
            // Persist to localStorage
            localStorage.setItem("heritage-code", code);
            // Trigger a custom event for other components that might need to react
            window.dispatchEvent(new CustomEvent("heritage-changed", {
                detail: {
                    code,
                    heritage: heritageManager.getCurrentHeritage()
                }
            }));
        }
        return success;
    };
    const contextValue = {
        heritage,
        heritageCode,
        setHeritage,
        availableHeritages: heritageManager.getAvailableHeritages(),
        // Utility accessors
        colors: heritage.branding.colors,
        symbols: heritage.branding.symbols,
        emotes: heritage.streaming.emotes,
        culturalAreas: heritage.geography.diasporaHub.culturalAreas,
        businessTypes: heritage.community.businessTypes,
        // Helper functions
        moderateContent: heritageManager.moderateContent.bind(heritageManager)
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(HeritageContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useHeritage() {
    const context = (0, _react.useContext)(HeritageContext);
    if (context === undefined) {
        throw new Error("useHeritage must be used within a HeritageProvider");
    }
    return context;
}
function useHeritageColors() {
    const { colors } = useHeritage();
    return colors;
}
function useHeritageSymbols() {
    const { symbols } = useHeritage();
    return symbols;
}
function useHeritageEmotes() {
    const { emotes } = useHeritage();
    return emotes;
}
function useCulturalAreas() {
    const { culturalAreas } = useHeritage();
    return culturalAreas;
}
function useHeritageCSSProperties() {
    const { colors } = useHeritage();
    return {
        "--heritage-primary": colors.primary,
        "--heritage-secondary": colors.secondary,
        "--heritage-accent": colors.accent,
        "--heritage-action": colors.action,
        "--heritage-premium": colors.premium,
        "--heritage-coral": colors.coral
    };
}
const _default = HeritageContext;

//# sourceMappingURL=data:application/json;base64,