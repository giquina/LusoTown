{"version":3,"sources":["/workspaces/LusoTown/web-app/src/components/VoiceMessageRecorder.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useRef, useEffect, useCallback } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport { \n  Mic, \n  MicOff, \n  Play, \n  Pause, \n  Square, \n  Send, \n  Trash2, \n  Volume2,\n  Settings,\n  Languages,\n  Waveform,\n  Timer,\n  CheckCircle,\n  AlertCircle\n} from 'lucide-react'\nimport { useLanguage } from '@/context/LanguageContext'\nimport { \n  VOICE_RECORDING_CONFIG, \n  SPEECH_TO_TEXT_CONFIG, \n  VOICE_MESSAGE_CATEGORIES,\n  getVoiceConfigForTier,\n  getSpeechToTextForDialect\n} from '@/config/voice-messaging'\nimport { PORTUGUESE_COLORS } from '@/config/brand'\n\ninterface VoiceMessageRecorderProps {\n  onSendVoiceMessage: (audioBlob: Blob, transcription: string, duration: number) => void\n  membershipTier?: string\n  preferredDialect?: string\n  disabled?: boolean\n  className?: string\n}\n\ninterface RecordingState {\n  isRecording: boolean\n  isPaused: boolean\n  isPlaying: boolean\n  duration: number\n  audioBlob: Blob | null\n  audioUrl: string | null\n  transcription: string\n  confidence: number\n}\n\nexport default function VoiceMessageRecorder({\n  onSendVoiceMessage,\n  membershipTier = 'standard',\n  preferredDialect = 'pt-PT',\n  disabled = false,\n  className = ''\n}: VoiceMessageRecorderProps) {\n  const { language } = useLanguage()\n  const [recordingState, setRecordingState] = useState<RecordingState>({\n    isRecording: false,\n    isPaused: false,\n    isPlaying: false,\n    duration: 0,\n    audioBlob: null,\n    audioUrl: null,\n    transcription: '',\n    confidence: 0\n  })\n  const [selectedCategory, setSelectedCategory] = useState('casual')\n  const [showSettings, setShowSettings] = useState(false)\n  const [transcriptionEnabled, setTranscriptionEnabled] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  \n  const mediaRecorderRef = useRef<MediaRecorder | null>(null)\n  const audioPlayerRef = useRef<HTMLAudioElement | null>(null)\n  const streamRef = useRef<MediaStream | null>(null)\n  const timerRef = useRef<NodeJS.Timeout | null>(null)\n  const recognitionRef = useRef<any>(null)\n\n  const voiceConfig = getVoiceConfigForTier(membershipTier)\n  const speechConfig = getSpeechToTextForDialect(preferredDialect)\n\n  const translations = {\n    en: {\n      holdToRecord: 'Hold to record voice message',\n      tapToRecord: 'Tap to record voice message',\n      recording: 'Recording...',\n      paused: 'Paused',\n      playRecording: 'Play recording',\n      deleteRecording: 'Delete recording',\n      sendVoiceMessage: 'Send voice message',\n      transcription: 'Transcription',\n      voiceSettings: 'Voice settings',\n      category: 'Message category',\n      enableTranscription: 'Enable transcription',\n      dialect: 'Portuguese dialect',\n      quality: 'Recording quality',\n      maxDuration: 'Max duration',\n      recordingError: 'Recording failed. Please check microphone permissions.',\n      transcriptionError: 'Transcription failed. Voice message will be sent without text.',\n      microphonePermission: 'Microphone permission required',\n      maxDurationReached: 'Maximum recording duration reached'\n    },\n    pt: {\n      holdToRecord: 'Pressione para gravar mensagem de voz',\n      tapToRecord: 'Toque para gravar mensagem de voz',\n      recording: 'Gravando...',\n      paused: 'Pausado',\n      playRecording: 'Reproduzir gravação',\n      deleteRecording: 'Eliminar gravação',\n      sendVoiceMessage: 'Enviar mensagem de voz',\n      transcription: 'Transcrição',\n      voiceSettings: 'Configurações de voz',\n      category: 'Categoria da mensagem',\n      enableTranscription: 'Ativar transcrição',\n      dialect: 'Dialeto português',\n      quality: 'Qualidade da gravação',\n      maxDuration: 'Duração máxima',\n      recordingError: 'Falha na gravação. Verifique as permissões do microfone.',\n      transcriptionError: 'Falha na transcrição. Mensagem será enviada sem texto.',\n      microphonePermission: 'Permissão do microfone necessária',\n      maxDurationReached: 'Duração máxima de gravação atingida'\n    }\n  }\n\n  const t = translations[language]\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).webkitSpeechRecognition\n      recognitionRef.current = new SpeechRecognition()\n      \n      const recognition = recognitionRef.current\n      recognition.continuous = speechConfig.continuous\n      recognition.interimResults = speechConfig.interimResults\n      recognition.lang = speechConfig.language\n      recognition.maxAlternatives = speechConfig.maxAlternatives\n\n      recognition.onresult = (event: any) => {\n        let transcript = ''\n        let confidence = 0\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          if (event.results[i].isFinal) {\n            transcript += event.results[i][0].transcript\n            confidence = Math.max(confidence, event.results[i][0].confidence)\n          }\n        }\n\n        if (transcript && confidence >= speechConfig.confidenceThreshold) {\n          setRecordingState(prev => ({\n            ...prev,\n            transcription: transcript.trim(),\n            confidence\n          }))\n        }\n      }\n\n      recognition.onerror = (event: any) => {\n        console.warn('Speech recognition error:', event.error)\n      }\n    }\n  }, [preferredDialect])\n\n  // Timer function\n  const startTimer = useCallback(() => {\n    const startTime = Date.now()\n    \n    timerRef.current = setInterval(() => {\n      const elapsed = Math.floor((Date.now() - startTime) / 1000)\n      \n      setRecordingState(prev => ({\n        ...prev,\n        duration: elapsed\n      }))\n\n      // Auto-stop at max duration\n      if (elapsed >= voiceConfig.maxDuration) {\n        stopRecording()\n      }\n    }, 100)\n  }, [voiceConfig.maxDuration])\n\n  const stopTimer = useCallback(() => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current)\n      timerRef.current = null\n    }\n  }, [])\n\n  const startRecording = async () => {\n    try {\n      setError(null)\n      \n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: voiceConfig.sampleRate,\n          channelCount: voiceConfig.channelCount,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      })\n\n      streamRef.current = stream\n\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: voiceConfig.mimeType,\n        audioBitsPerSecond: voiceConfig.bitRate\n      })\n\n      mediaRecorderRef.current = mediaRecorder\n\n      const chunks: BlobPart[] = []\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data)\n        }\n      }\n\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(chunks, { type: voiceConfig.mimeType })\n        const audioUrl = URL.createObjectURL(audioBlob)\n        \n        setRecordingState(prev => ({\n          ...prev,\n          audioBlob,\n          audioUrl,\n          isRecording: false\n        }))\n      }\n\n      mediaRecorder.start(100) // Collect data every 100ms\n      \n      setRecordingState(prev => ({\n        ...prev,\n        isRecording: true,\n        isPaused: false,\n        duration: 0,\n        transcription: '',\n        confidence: 0\n      }))\n\n      startTimer()\n\n      // Start speech recognition if enabled\n      if (transcriptionEnabled && recognitionRef.current) {\n        recognitionRef.current.start()\n      }\n\n    } catch (error) {\n      console.error('Error starting recording:', error)\n      setError(t.recordingError)\n    }\n  }\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && recordingState.isRecording) {\n      mediaRecorderRef.current.stop()\n    }\n\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop())\n      streamRef.current = null\n    }\n\n    if (recognitionRef.current) {\n      try {\n        recognitionRef.current.stop()\n      } catch (e) {\n        // Recognition might already be stopped\n      }\n    }\n\n    stopTimer()\n  }, [recordingState.isRecording, stopTimer])\n\n  const pauseRecording = () => {\n    if (mediaRecorderRef.current && recordingState.isRecording) {\n      mediaRecorderRef.current.pause()\n      stopTimer()\n      \n      setRecordingState(prev => ({\n        ...prev,\n        isPaused: true\n      }))\n    }\n  }\n\n  const resumeRecording = () => {\n    if (mediaRecorderRef.current && recordingState.isPaused) {\n      mediaRecorderRef.current.resume()\n      startTimer()\n      \n      setRecordingState(prev => ({\n        ...prev,\n        isPaused: false\n      }))\n    }\n  }\n\n  const playRecording = () => {\n    if (recordingState.audioUrl && audioPlayerRef.current) {\n      audioPlayerRef.current.play()\n      \n      setRecordingState(prev => ({\n        ...prev,\n        isPlaying: true\n      }))\n    }\n  }\n\n  const pausePlayback = () => {\n    if (audioPlayerRef.current) {\n      audioPlayerRef.current.pause()\n      \n      setRecordingState(prev => ({\n        ...prev,\n        isPlaying: false\n      }))\n    }\n  }\n\n  const deleteRecording = () => {\n    if (recordingState.audioUrl) {\n      URL.revokeObjectURL(recordingState.audioUrl)\n    }\n\n    setRecordingState({\n      isRecording: false,\n      isPaused: false,\n      isPlaying: false,\n      duration: 0,\n      audioBlob: null,\n      audioUrl: null,\n      transcription: '',\n      confidence: 0\n    })\n  }\n\n  const sendVoiceMessage = () => {\n    if (recordingState.audioBlob) {\n      onSendVoiceMessage(\n        recordingState.audioBlob,\n        recordingState.transcription,\n        recordingState.duration\n      )\n      deleteRecording()\n    }\n  }\n\n  const formatDuration = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins}:${secs.toString().padStart(2, '0')}`\n  }\n\n  return (\n    <div className={`voice-message-recorder ${className}`}>\n      {/* Error Display */}\n      <AnimatePresence>\n        {error && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center space-x-2\"\n          >\n            <AlertCircle className=\"w-4 h-4 text-red-600 flex-shrink-0\" />\n            <p className=\"text-sm text-red-700\">{error}</p>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Recording Interface */}\n      {!recordingState.audioBlob ? (\n        <div className=\"flex items-center space-x-4\">\n          {/* Record Button */}\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onMouseDown={startRecording}\n            onMouseUp={stopRecording}\n            onTouchStart={startRecording}\n            onTouchEnd={stopRecording}\n            disabled={disabled}\n            className={`\n              relative w-16 h-16 rounded-full flex items-center justify-center transition-all duration-200\n              ${recordingState.isRecording \n                ? 'bg-red-500 animate-pulse' \n                : 'bg-primary-600 hover:bg-primary-700'\n              }\n              ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n            `}\n            style={{\n              backgroundColor: recordingState.isRecording ? '#ef4444' : PORTUGUESE_COLORS.primary\n            }}\n          >\n            {recordingState.isRecording ? (\n              <Square className=\"w-6 h-6 text-white\" />\n            ) : (\n              <Mic className=\"w-6 h-6 text-white\" />\n            )}\n            \n            {/* Recording indicator */}\n            {recordingState.isRecording && (\n              <motion.div\n                animate={{ scale: [1, 1.2, 1] }}\n                transition={{ duration: 1, repeat: Infinity }}\n                className=\"absolute -inset-1 rounded-full border-2 border-red-300\"\n              />\n            )}\n          </motion.button>\n\n          {/* Recording Status */}\n          {recordingState.isRecording && (\n            <motion.div\n              initial={{ opacity: 0, x: -10 }}\n              animate={{ opacity: 1, x: 0 }}\n              className=\"flex items-center space-x-3\"\n            >\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\" />\n                <span className=\"text-sm font-medium text-gray-700\">\n                  {recordingState.isPaused ? t.paused : t.recording}\n                </span>\n              </div>\n              \n              <div className=\"flex items-center space-x-1 text-sm text-gray-600\">\n                <Timer className=\"w-4 h-4\" />\n                <span>{formatDuration(recordingState.duration)}</span>\n                <span>/</span>\n                <span>{formatDuration(voiceConfig.maxDuration)}</span>\n              </div>\n\n              {/* Pause/Resume Button */}\n              <button\n                onClick={recordingState.isPaused ? resumeRecording : pauseRecording}\n                className=\"p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-full transition-colors\"\n              >\n                {recordingState.isPaused ? (\n                  <Play className=\"w-4 h-4\" />\n                ) : (\n                  <Pause className=\"w-4 h-4\" />\n                )}\n              </button>\n            </motion.div>\n          )}\n\n          {/* Settings Button */}\n          <button\n            onClick={() => setShowSettings(!showSettings)}\n            className=\"p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-full transition-colors\"\n          >\n            <Settings className=\"w-5 h-5\" />\n          </button>\n        </div>\n      ) : (\n        /* Playback Interface */\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"space-y-4\"\n        >\n          {/* Audio Player (hidden) */}\n          <audio\n            ref={audioPlayerRef}\n            src={recordingState.audioUrl || undefined}\n            onEnded={() => setRecordingState(prev => ({ ...prev, isPlaying: false }))}\n          />\n\n          {/* Playback Controls */}\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={recordingState.isPlaying ? pausePlayback : playRecording}\n              className=\"w-12 h-12 bg-primary-600 hover:bg-primary-700 rounded-full flex items-center justify-center text-white transition-colors\"\n              style={{ backgroundColor: PORTUGUESE_COLORS.primary }}\n            >\n              {recordingState.isPlaying ? (\n                <Pause className=\"w-5 h-5\" />\n              ) : (\n                <Play className=\"w-5 h-5 ml-0.5\" />\n              )}\n            </button>\n\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                <Volume2 className=\"w-4 h-4\" />\n                <span>{formatDuration(recordingState.duration)}</span>\n                <Waveform className=\"w-4 h-4\" />\n              </div>\n              \n              {/* Progress Bar Placeholder */}\n              <div className=\"mt-1 h-1 bg-gray-200 rounded-full\">\n                <div \n                  className=\"h-full bg-primary-600 rounded-full transition-all duration-100\"\n                  style={{ \n                    width: recordingState.isPlaying ? '100%' : '0%',\n                    backgroundColor: PORTUGUESE_COLORS.primary\n                  }}\n                />\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={deleteRecording}\n                className=\"p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-full transition-colors\"\n              >\n                <Trash2 className=\"w-5 h-5\" />\n              </button>\n              \n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={sendVoiceMessage}\n                className=\"px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg flex items-center space-x-2 transition-colors\"\n                style={{ backgroundColor: PORTUGUESE_COLORS.primary }}\n              >\n                <Send className=\"w-4 h-4\" />\n                <span className=\"text-sm font-medium\">{t.sendVoiceMessage}</span>\n              </motion.button>\n            </div>\n          </div>\n\n          {/* Transcription Display */}\n          {transcriptionEnabled && recordingState.transcription && (\n            <motion.div\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"p-3 bg-gray-50 rounded-lg border border-gray-200\"\n            >\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <Languages className=\"w-4 h-4 text-gray-600\" />\n                  <span className=\"text-sm font-medium text-gray-700\">{t.transcription}</span>\n                </div>\n                \n                {recordingState.confidence > 0 && (\n                  <div className=\"flex items-center space-x-1\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                    <span className=\"text-xs text-gray-600\">\n                      {Math.round(recordingState.confidence * 100)}%\n                    </span>\n                  </div>\n                )}\n              </div>\n              \n              <p className=\"text-sm text-gray-800 italic\">\n                \"{recordingState.transcription}\"\n              </p>\n            </motion.div>\n          )}\n        </motion.div>\n      )}\n\n      {/* Settings Panel */}\n      <AnimatePresence>\n        {showSettings && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200 space-y-4\"\n          >\n            <h4 className=\"font-medium text-gray-900\">{t.voiceSettings}</h4>\n            \n            {/* Message Category */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                {t.category}\n              </label>\n              <select\n                value={selectedCategory}\n                onChange={(e) => setSelectedCategory(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n              >\n                {Object.entries(VOICE_MESSAGE_CATEGORIES).map(([key, category]) => (\n                  <option key={key} value={key}>\n                    {category.icon} {category.label[language]}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Transcription Toggle */}\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                {t.enableTranscription}\n              </label>\n              <button\n                onClick={() => setTranscriptionEnabled(!transcriptionEnabled)}\n                className={`\n                  relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\n                  ${transcriptionEnabled ? 'bg-primary-600' : 'bg-gray-200'}\n                `}\n              >\n                <span\n                  className={`\n                    pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition duration-200 ease-in-out\n                    ${transcriptionEnabled ? 'translate-x-5' : 'translate-x-0'}\n                  `}\n                />\n              </button>\n            </div>\n\n            {/* Max Duration Display */}\n            <div className=\"text-sm text-gray-600\">\n              <span className=\"font-medium\">{t.maxDuration}:</span> {formatDuration(voiceConfig.maxDuration)}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}"],"names":["VoiceMessageRecorder","onSendVoiceMessage","membershipTier","preferredDialect","disabled","className","language","useLanguage","recordingState","setRecordingState","useState","isRecording","isPaused","isPlaying","duration","audioBlob","audioUrl","transcription","confidence","selectedCategory","setSelectedCategory","showSettings","setShowSettings","transcriptionEnabled","setTranscriptionEnabled","error","setError","mediaRecorderRef","useRef","audioPlayerRef","streamRef","timerRef","recognitionRef","voiceConfig","getVoiceConfigForTier","speechConfig","getSpeechToTextForDialect","translations","en","holdToRecord","tapToRecord","recording","paused","playRecording","deleteRecording","sendVoiceMessage","voiceSettings","category","enableTranscription","dialect","quality","maxDuration","recordingError","transcriptionError","microphonePermission","maxDurationReached","pt","t","useEffect","window","SpeechRecognition","webkitSpeechRecognition","current","recognition","continuous","interimResults","lang","maxAlternatives","onresult","event","transcript","i","resultIndex","results","length","isFinal","Math","max","confidenceThreshold","prev","trim","onerror","console","warn","startTimer","useCallback","startTime","Date","now","setInterval","elapsed","floor","stopRecording","stopTimer","clearInterval","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","sampleRate","channelCount","echoCancellation","noiseSuppression","autoGainControl","mediaRecorder","MediaRecorder","mimeType","audioBitsPerSecond","bitRate","chunks","ondataavailable","data","size","push","onstop","Blob","type","URL","createObjectURL","start","stop","getTracks","forEach","track","e","pauseRecording","pause","resumeRecording","resume","play","pausePlayback","revokeObjectURL","formatDuration","seconds","mins","secs","toString","padStart","div","AnimatePresence","motion","initial","opacity","y","animate","exit","AlertCircle","p","button","whileHover","scale","whileTap","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","style","backgroundColor","PORTUGUESE_COLORS","primary","Square","Mic","transition","repeat","Infinity","x","span","Timer","onClick","Play","Pause","Settings","ref","src","undefined","onEnded","Volume2","Waveform","width","Trash2","Send","Languages","CheckCircle","round","height","h4","label","select","value","onChange","target","Object","entries","VOICE_MESSAGE_CATEGORIES","map","key","option","icon"],"mappings":"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"}