{"version":3,"sources":["/workspaces/LusoTown/web-app/src/context/FavoritesContext.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useState, ReactNode, useEffect } from 'react'\n\ninterface FavoriteItem {\n  id: string\n  type: 'event' | 'business' | 'feed'\n  title: string\n  description?: string\n  imageUrl?: string\n}\n\ninterface FavoritesContextType {\n  favorites: FavoriteItem[]\n  addFavorite: (item: FavoriteItem) => void\n  removeFavorite: (id: string) => void\n  isFavorite: (id: string) => boolean\n  toggleFavorite: (item: FavoriteItem) => void\n}\n\nconst FavoritesContext = createContext<FavoritesContextType | undefined>(undefined)\n\nexport function FavoritesProvider({ children }: { children: ReactNode }) {\n  const [favorites, setFavorites] = useState<FavoriteItem[]>([])\n\n  // Load favorites from localStorage on mount\n  useEffect(() => {\n    const savedFavorites = localStorage.getItem('lusotown-favorites')\n    if (savedFavorites) {\n      try {\n        setFavorites(JSON.parse(savedFavorites))\n      } catch (error) {\n        console.error('Error parsing saved favorites:', error)\n      }\n    }\n  }, [])\n\n  // Save favorites to localStorage whenever they change\n  useEffect(() => {\n    localStorage.setItem('lusotown-favorites', JSON.stringify(favorites))\n  }, [favorites])\n\n  const addFavorite = (item: FavoriteItem) => {\n    setFavorites(prev => {\n      // Prevent duplicates\n      if (prev.some(fav => fav.id === item.id)) {\n        return prev\n      }\n      return [...prev, item]\n    })\n  }\n\n  const removeFavorite = (id: string) => {\n    setFavorites(prev => prev.filter(item => item.id !== id))\n  }\n\n  const isFavorite = (id: string) => {\n    return favorites.some(item => item.id === id)\n  }\n\n  const toggleFavorite = (item: FavoriteItem) => {\n    if (isFavorite(item.id)) {\n      removeFavorite(item.id)\n    } else {\n      addFavorite(item)\n    }\n  }\n\n  return (\n    <FavoritesContext.Provider value={{\n      favorites,\n      addFavorite,\n      removeFavorite,\n      isFavorite,\n      toggleFavorite\n    }}>\n      {children}\n    </FavoritesContext.Provider>\n  )\n}\n\nexport function useFavorites() {\n  const context = useContext(FavoritesContext)\n  if (context === undefined) {\n    throw new Error('useFavorites must be used within a FavoritesProvider')\n  }\n  return context\n}"],"names":["FavoritesProvider","useFavorites","FavoritesContext","createContext","undefined","children","favorites","setFavorites","useState","useEffect","savedFavorites","localStorage","getItem","JSON","parse","error","console","setItem","stringify","addFavorite","item","prev","some","fav","id","removeFavorite","filter","isFavorite","toggleFavorite","Provider","value","context","useContext","Error"],"mappings":"AAAA;;;;;;;;;;;;IAsBgBA,iBAAiB;eAAjBA;;IA2DAC,YAAY;eAAZA;;;;uBA/E0D;AAkB1E,MAAMC,iCAAmBC,IAAAA,oBAAa,EAAmCC;AAElE,SAASJ,kBAAkB,EAAEK,QAAQ,EAA2B;IACrE,MAAM,CAACC,WAAWC,aAAa,GAAGC,IAAAA,eAAQ,EAAiB,EAAE;IAE7D,4CAA4C;IAC5CC,IAAAA,gBAAS,EAAC;QACR,MAAMC,iBAAiBC,aAAaC,OAAO,CAAC;QAC5C,IAAIF,gBAAgB;YAClB,IAAI;gBACFH,aAAaM,KAAKC,KAAK,CAACJ;YAC1B,EAAE,OAAOK,OAAO;gBACdC,QAAQD,KAAK,CAAC,kCAAkCA;YAClD;QACF;IACF,GAAG,EAAE;IAEL,sDAAsD;IACtDN,IAAAA,gBAAS,EAAC;QACRE,aAAaM,OAAO,CAAC,sBAAsBJ,KAAKK,SAAS,CAACZ;IAC5D,GAAG;QAACA;KAAU;IAEd,MAAMa,cAAc,CAACC;QACnBb,aAAac,CAAAA;YACX,qBAAqB;YACrB,IAAIA,KAAKC,IAAI,CAACC,CAAAA,MAAOA,IAAIC,EAAE,KAAKJ,KAAKI,EAAE,GAAG;gBACxC,OAAOH;YACT;YACA,OAAO;mBAAIA;gBAAMD;aAAK;QACxB;IACF;IAEA,MAAMK,iBAAiB,CAACD;QACtBjB,aAAac,CAAAA,OAAQA,KAAKK,MAAM,CAACN,CAAAA,OAAQA,KAAKI,EAAE,KAAKA;IACvD;IAEA,MAAMG,aAAa,CAACH;QAClB,OAAOlB,UAAUgB,IAAI,CAACF,CAAAA,OAAQA,KAAKI,EAAE,KAAKA;IAC5C;IAEA,MAAMI,iBAAiB,CAACR;QACtB,IAAIO,WAAWP,KAAKI,EAAE,GAAG;YACvBC,eAAeL,KAAKI,EAAE;QACxB,OAAO;YACLL,YAAYC;QACd;IACF;IAEA,qBACE,qBAAClB,iBAAiB2B,QAAQ;QAACC,OAAO;YAChCxB;YACAa;YACAM;YACAE;YACAC;QACF;kBACGvB;;AAGP;AAEO,SAASJ;IACd,MAAM8B,UAAUC,IAAAA,iBAAU,EAAC9B;IAC3B,IAAI6B,YAAY3B,WAAW;QACzB,MAAM,IAAI6B,MAAM;IAClB;IACA,OAAOF;AACT"}