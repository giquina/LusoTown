0ea1631444d4968b1a55ecea1cebf6fa
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    FavoritesProvider: function() {
        return FavoritesProvider;
    },
    useFavorites: function() {
        return useFavorites;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const FavoritesContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function FavoritesProvider({ children }) {
    const [favorites, setFavorites] = (0, _react.useState)([]);
    // Load favorites from localStorage on mount
    (0, _react.useEffect)(()=>{
        const savedFavorites = localStorage.getItem("lusotown-favorites");
        if (savedFavorites) {
            try {
                setFavorites(JSON.parse(savedFavorites));
            } catch (error) {
                console.error("Error parsing saved favorites:", error);
            }
        }
    }, []);
    // Save favorites to localStorage whenever they change
    (0, _react.useEffect)(()=>{
        localStorage.setItem("lusotown-favorites", JSON.stringify(favorites));
    }, [
        favorites
    ]);
    const addFavorite = (item)=>{
        setFavorites((prev)=>{
            // Prevent duplicates
            if (prev.some((fav)=>fav.id === item.id)) {
                return prev;
            }
            return [
                ...prev,
                item
            ];
        });
    };
    const removeFavorite = (id)=>{
        setFavorites((prev)=>prev.filter((item)=>item.id !== id));
    };
    const isFavorite = (id)=>{
        return favorites.some((item)=>item.id === id);
    };
    const toggleFavorite = (item)=>{
        if (isFavorite(item.id)) {
            removeFavorite(item.id);
        } else {
            addFavorite(item);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(FavoritesContext.Provider, {
        value: {
            favorites,
            addFavorite,
            removeFavorite,
            isFavorite,
            toggleFavorite
        },
        children: children
    });
}
function useFavorites() {
    const context = (0, _react.useContext)(FavoritesContext);
    if (context === undefined) {
        throw new Error("useFavorites must be used within a FavoritesProvider");
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0x1c29Ub3duL3dlYi1hcHAvc3JjL2NvbnRleHQvRmF2b3JpdGVzQ29udGV4dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCBSZWFjdE5vZGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuXG5pbnRlcmZhY2UgRmF2b3JpdGVJdGVtIHtcbiAgaWQ6IHN0cmluZ1xuICB0eXBlOiAnZXZlbnQnIHwgJ2J1c2luZXNzJyB8ICdmZWVkJ1xuICB0aXRsZTogc3RyaW5nXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nXG4gIGltYWdlVXJsPzogc3RyaW5nXG59XG5cbmludGVyZmFjZSBGYXZvcml0ZXNDb250ZXh0VHlwZSB7XG4gIGZhdm9yaXRlczogRmF2b3JpdGVJdGVtW11cbiAgYWRkRmF2b3JpdGU6IChpdGVtOiBGYXZvcml0ZUl0ZW0pID0+IHZvaWRcbiAgcmVtb3ZlRmF2b3JpdGU6IChpZDogc3RyaW5nKSA9PiB2b2lkXG4gIGlzRmF2b3JpdGU6IChpZDogc3RyaW5nKSA9PiBib29sZWFuXG4gIHRvZ2dsZUZhdm9yaXRlOiAoaXRlbTogRmF2b3JpdGVJdGVtKSA9PiB2b2lkXG59XG5cbmNvbnN0IEZhdm9yaXRlc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0PEZhdm9yaXRlc0NvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpXG5cbmV4cG9ydCBmdW5jdGlvbiBGYXZvcml0ZXNQcm92aWRlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9KSB7XG4gIGNvbnN0IFtmYXZvcml0ZXMsIHNldEZhdm9yaXRlc10gPSB1c2VTdGF0ZTxGYXZvcml0ZUl0ZW1bXT4oW10pXG5cbiAgLy8gTG9hZCBmYXZvcml0ZXMgZnJvbSBsb2NhbFN0b3JhZ2Ugb24gbW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzYXZlZEZhdm9yaXRlcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsdXNvdG93bi1mYXZvcml0ZXMnKVxuICAgIGlmIChzYXZlZEZhdm9yaXRlcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0RmF2b3JpdGVzKEpTT04ucGFyc2Uoc2F2ZWRGYXZvcml0ZXMpKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBzYXZlZCBmYXZvcml0ZXM6JywgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICB9LCBbXSlcblxuICAvLyBTYXZlIGZhdm9yaXRlcyB0byBsb2NhbFN0b3JhZ2Ugd2hlbmV2ZXIgdGhleSBjaGFuZ2VcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbHVzb3Rvd24tZmF2b3JpdGVzJywgSlNPTi5zdHJpbmdpZnkoZmF2b3JpdGVzKSlcbiAgfSwgW2Zhdm9yaXRlc10pXG5cbiAgY29uc3QgYWRkRmF2b3JpdGUgPSAoaXRlbTogRmF2b3JpdGVJdGVtKSA9PiB7XG4gICAgc2V0RmF2b3JpdGVzKHByZXYgPT4ge1xuICAgICAgLy8gUHJldmVudCBkdXBsaWNhdGVzXG4gICAgICBpZiAocHJldi5zb21lKGZhdiA9PiBmYXYuaWQgPT09IGl0ZW0uaWQpKSB7XG4gICAgICAgIHJldHVybiBwcmV2XG4gICAgICB9XG4gICAgICByZXR1cm4gWy4uLnByZXYsIGl0ZW1dXG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHJlbW92ZUZhdm9yaXRlID0gKGlkOiBzdHJpbmcpID0+IHtcbiAgICBzZXRGYXZvcml0ZXMocHJldiA9PiBwcmV2LmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgIT09IGlkKSlcbiAgfVxuXG4gIGNvbnN0IGlzRmF2b3JpdGUgPSAoaWQ6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBmYXZvcml0ZXMuc29tZShpdGVtID0+IGl0ZW0uaWQgPT09IGlkKVxuICB9XG5cbiAgY29uc3QgdG9nZ2xlRmF2b3JpdGUgPSAoaXRlbTogRmF2b3JpdGVJdGVtKSA9PiB7XG4gICAgaWYgKGlzRmF2b3JpdGUoaXRlbS5pZCkpIHtcbiAgICAgIHJlbW92ZUZhdm9yaXRlKGl0ZW0uaWQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFkZEZhdm9yaXRlKGl0ZW0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8RmF2b3JpdGVzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgZmF2b3JpdGVzLFxuICAgICAgYWRkRmF2b3JpdGUsXG4gICAgICByZW1vdmVGYXZvcml0ZSxcbiAgICAgIGlzRmF2b3JpdGUsXG4gICAgICB0b2dnbGVGYXZvcml0ZVxuICAgIH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRmF2b3JpdGVzQ29udGV4dC5Qcm92aWRlcj5cbiAgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRmF2b3JpdGVzKCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChGYXZvcml0ZXNDb250ZXh0KVxuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VGYXZvcml0ZXMgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIEZhdm9yaXRlc1Byb3ZpZGVyJylcbiAgfVxuICByZXR1cm4gY29udGV4dFxufSJdLCJuYW1lcyI6WyJGYXZvcml0ZXNQcm92aWRlciIsInVzZUZhdm9yaXRlcyIsIkZhdm9yaXRlc0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidW5kZWZpbmVkIiwiY2hpbGRyZW4iLCJmYXZvcml0ZXMiLCJzZXRGYXZvcml0ZXMiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInNhdmVkRmF2b3JpdGVzIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiY29uc29sZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJhZGRGYXZvcml0ZSIsIml0ZW0iLCJwcmV2Iiwic29tZSIsImZhdiIsImlkIiwicmVtb3ZlRmF2b3JpdGUiLCJmaWx0ZXIiLCJpc0Zhdm9yaXRlIiwidG9nZ2xlRmF2b3JpdGUiLCJQcm92aWRlciIsInZhbHVlIiwiY29udGV4dCIsInVzZUNvbnRleHQiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztJQXNCZ0JBLGlCQUFpQjtlQUFqQkE7O0lBMkRBQyxZQUFZO2VBQVpBOzs7O3VCQS9FMEQ7QUFrQjFFLE1BQU1DLGlDQUFtQkMsSUFBQUEsb0JBQWEsRUFBbUNDO0FBRWxFLFNBQVNKLGtCQUFrQixFQUFFSyxRQUFRLEVBQTJCO0lBQ3JFLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHQyxJQUFBQSxlQUFRLEVBQWlCLEVBQUU7SUFFN0QsNENBQTRDO0lBQzVDQyxJQUFBQSxnQkFBUyxFQUFDO1FBQ1IsTUFBTUMsaUJBQWlCQyxhQUFhQyxPQUFPLENBQUM7UUFDNUMsSUFBSUYsZ0JBQWdCO1lBQ2xCLElBQUk7Z0JBQ0ZILGFBQWFNLEtBQUtDLEtBQUssQ0FBQ0o7WUFDMUIsRUFBRSxPQUFPSyxPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtZQUNsRDtRQUNGO0lBQ0YsR0FBRyxFQUFFO0lBRUwsc0RBQXNEO0lBQ3RETixJQUFBQSxnQkFBUyxFQUFDO1FBQ1JFLGFBQWFNLE9BQU8sQ0FBQyxzQkFBc0JKLEtBQUtLLFNBQVMsQ0FBQ1o7SUFDNUQsR0FBRztRQUFDQTtLQUFVO0lBRWQsTUFBTWEsY0FBYyxDQUFDQztRQUNuQmIsYUFBYWMsQ0FBQUE7WUFDWCxxQkFBcUI7WUFDckIsSUFBSUEsS0FBS0MsSUFBSSxDQUFDQyxDQUFBQSxNQUFPQSxJQUFJQyxFQUFFLEtBQUtKLEtBQUtJLEVBQUUsR0FBRztnQkFDeEMsT0FBT0g7WUFDVDtZQUNBLE9BQU87bUJBQUlBO2dCQUFNRDthQUFLO1FBQ3hCO0lBQ0Y7SUFFQSxNQUFNSyxpQkFBaUIsQ0FBQ0Q7UUFDdEJqQixhQUFhYyxDQUFBQSxPQUFRQSxLQUFLSyxNQUFNLENBQUNOLENBQUFBLE9BQVFBLEtBQUtJLEVBQUUsS0FBS0E7SUFDdkQ7SUFFQSxNQUFNRyxhQUFhLENBQUNIO1FBQ2xCLE9BQU9sQixVQUFVZ0IsSUFBSSxDQUFDRixDQUFBQSxPQUFRQSxLQUFLSSxFQUFFLEtBQUtBO0lBQzVDO0lBRUEsTUFBTUksaUJBQWlCLENBQUNSO1FBQ3RCLElBQUlPLFdBQVdQLEtBQUtJLEVBQUUsR0FBRztZQUN2QkMsZUFBZUwsS0FBS0ksRUFBRTtRQUN4QixPQUFPO1lBQ0xMLFlBQVlDO1FBQ2Q7SUFDRjtJQUVBLHFCQUNFLHFCQUFDbEIsaUJBQWlCMkIsUUFBUTtRQUFDQyxPQUFPO1lBQ2hDeEI7WUFDQWE7WUFDQU07WUFDQUU7WUFDQUM7UUFDRjtrQkFDR3ZCOztBQUdQO0FBRU8sU0FBU0o7SUFDZCxNQUFNOEIsVUFBVUMsSUFBQUEsaUJBQVUsRUFBQzlCO0lBQzNCLElBQUk2QixZQUFZM0IsV0FBVztRQUN6QixNQUFNLElBQUk2QixNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Y7QUFDVCJ9