{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/monitoring/error-tracking.test.ts"],"sourcesContent":["/**\n * Error Tracking System Tests\n * Tests Portuguese community-specific error tracking functionality\n */\n\nimport { errorTracker, ErrorTracker } from '@/lib/monitoring/error-tracker'\nimport { getErrorMessage, getContextualErrorMessage } from '@/lib/monitoring/portuguese-error-messages'\nimport { ERROR_SEVERITY, PORTUGUESE_ERROR_CONTEXTS } from '@/config/error-monitoring'\nimport { ErrorType } from '@/lib/errorHandling'\n\n// Mock Sentry\njest.mock('@sentry/nextjs', () => ({\n  withScope: (callback: Function) => {\n    const mockScope = {\n      setTag: jest.fn(),\n      setContext: jest.fn(),\n      setUser: jest.fn(),\n      addBreadcrumb: jest.fn(),\n      setLevel: jest.fn()\n    }\n    callback(mockScope)\n  },\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n  addBreadcrumb: jest.fn(),\n  setUser: jest.fn(),\n  setContext: jest.fn(),\n  setTags: jest.fn()\n}))\n\ndescribe('Portuguese Community Error Tracking', () => {\n  let tracker: ErrorTracker\n\n  beforeEach(() => {\n    // Create a fresh tracker instance for each test\n    tracker = new ErrorTracker()\n    \n    // Mock console methods to avoid test noise\n    jest.spyOn(console, 'error').mockImplementation(() => {})\n    jest.spyOn(console, 'log').mockImplementation(() => {})\n    jest.spyOn(console, 'group').mockImplementation(() => {})\n    jest.spyOn(console, 'groupEnd').mockImplementation(() => {})\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('Error Tracker Core Functionality', () => {\n    it('should track basic errors with Portuguese context', () => {\n      const testError = {\n        message: 'Test Portuguese community error',\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.HIGH,\n        context: 'test-context',\n        portugueseContext: {\n          language: 'pt' as const,\n          culturalFeature: 'CULTURAL_CONTENT' as const,\n          mobileDevice: true\n        }\n      }\n\n      tracker.trackError(testError)\n      const summary = tracker.getErrorSummary()\n\n      expect(summary.totalErrors).toBe(1)\n      expect(summary.portugueseRelatedErrors).toBe(1)\n      expect(summary.errorsByContext['test-context-HIGH']).toBe(1)\n    })\n\n    it('should track Portuguese feature errors correctly', () => {\n      const businessDirectoryError = new Error('Business directory PostGIS query failed')\n      \n      tracker.trackPortugueseFeatureError(\n        'BUSINESS_DIRECTORY',\n        businessDirectoryError,\n        {\n          searchQuery: 'pastéis de nata London',\n          location: 'SW1A',\n          userLanguage: 'pt'\n        }\n      )\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.totalErrors).toBe(1)\n      expect(summary.portugueseRelatedErrors).toBe(1)\n    })\n\n    it('should handle performance metrics correctly', () => {\n      const performanceData = {\n        name: 'Portuguese Content Load Time',\n        value: 2500, // 2.5 seconds\n        context: 'portuguese-content-loading',\n        threshold: 2000 // 2 second threshold\n      }\n\n      tracker.trackPerformanceMetric(performanceData)\n\n      // Should trigger error for exceeding threshold\n      const summary = tracker.getErrorSummary()\n      expect(summary.totalErrors).toBe(1) // Performance issue tracked as error\n    })\n\n    it('should generate unique error IDs', () => {\n      tracker.trackError({\n        message: 'Error 1',\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.MEDIUM,\n        context: 'test'\n      })\n\n      tracker.trackError({\n        message: 'Error 2', \n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.MEDIUM,\n        context: 'test'\n      })\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.totalErrors).toBe(2)\n    })\n  })\n\n  describe('Portuguese Error Messages', () => {\n    it('should return Portuguese error messages correctly', () => {\n      const message = getErrorMessage(\n        ErrorType.AUTHENTICATION,\n        'pt',\n        'userFriendly'\n      )\n\n      expect(message).toBe('Sessão expirada. Por favor, faça login novamente.')\n    })\n\n    it('should return English error messages correctly', () => {\n      const message = getErrorMessage(\n        ErrorType.AUTHENTICATION,\n        'en',\n        'userFriendly'\n      )\n\n      expect(message).toBe('Session expired. Please log in again.')\n    })\n\n    it('should handle Portuguese feature-specific errors', () => {\n      const message = getErrorMessage(\n        PORTUGUESE_ERROR_CONTEXTS.BUSINESS_DIRECTORY,\n        'pt',\n        'userFriendly'\n      )\n\n      expect(message).toBe('O diretório de empresas portuguesas está temporariamente indisponível.')\n    })\n\n    it('should provide contextual error messages', () => {\n      const error = new Error('Business directory failed')\n      const contextualMessage = getContextualErrorMessage(\n        error,\n        {\n          isPortugueseFeature: true,\n          language: 'pt',\n          userAction: PORTUGUESE_ERROR_CONTEXTS.BUSINESS_DIRECTORY\n        }\n      )\n\n      expect(contextualMessage.pt).toBe('O diretório de empresas portuguesas está temporariamente indisponível.')\n      expect(contextualMessage.en).toBe('Portuguese business directory is temporarily unavailable.')\n    })\n\n    it('should handle mobile-specific error messages', () => {\n      const mobileError = getErrorMessage('OFFLINE', 'pt', 'userFriendly')\n      expect(mobileError).toBe('Está atualmente offline. Algumas funcionalidades podem não estar disponíveis.')\n    })\n\n    it('should fallback to default messages for unknown errors', () => {\n      const message = getErrorMessage(\n        'UNKNOWN_ERROR_TYPE' as any,\n        'pt',\n        'userFriendly'\n      )\n\n      expect(message).toBe('Ocorreu um erro inesperado. Tente novamente.')\n    })\n  })\n\n  describe('Portuguese Cultural Context', () => {\n    it('should handle cultural content errors', () => {\n      tracker.trackPortugueseFeatureError(\n        'CULTURAL_CONTENT',\n        'Failed to load Portuguese cultural events',\n        {\n          eventType: 'santos_populares',\n          region: 'lisboa',\n          userPreferences: ['fado', 'cuisine']\n        }\n      )\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.portugueseRelatedErrors).toBe(1)\n    })\n\n    it('should handle language switching errors', () => {\n      tracker.trackPortugueseFeatureError(\n        'LANGUAGE_SWITCHING',\n        'Bilingual context failed to update',\n        {\n          fromLanguage: 'en',\n          toLanguage: 'pt',\n          switchDuration: 1200 // Slow switch\n        }\n      )\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.portugueseRelatedErrors).toBe(1)\n    })\n\n    it('should handle character encoding issues', () => {\n      tracker.trackPortugueseFeatureError(\n        'CHARACTER_ENCODING',\n        'Portuguese diacritics not displaying correctly',\n        {\n          affectedCharacters: ['ç', 'ã', 'õ'],\n          browserInfo: 'Chrome/120.0',\n          userAgent: 'Mobile Safari'\n        }\n      )\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.portugueseRelatedErrors).toBe(1)\n    })\n\n    it('should handle cultural matching errors', () => {\n      tracker.trackPortugueseFeatureError(\n        'CULTURAL_MATCHING',\n        'AI cultural compatibility algorithm timeout',\n        {\n          userProfile: 'portugal_heritage',\n          matchingCriteria: ['saudade_intensity', 'cultural_celebrations'],\n          timeoutDuration: 6000\n        }\n      )\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.criticalErrors).toBe(1) // Cultural matching is critical\n    })\n  })\n\n  describe('Error Severity and Alerting', () => {\n    it('should classify critical errors correctly', () => {\n      tracker.trackError({\n        message: 'Database connection lost',\n        type: ErrorType.SERVER_ERROR,\n        severity: ERROR_SEVERITY.CRITICAL,\n        context: 'database-error'\n      })\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.criticalErrors).toBe(1)\n    })\n\n    it('should handle error count thresholds', () => {\n      // Simulate multiple errors in same context\n      for (let i = 0; i < 5; i++) {\n        tracker.trackError({\n          message: `Portuguese business error ${i}`,\n          type: ErrorType.CLIENT_ERROR,\n          severity: ERROR_SEVERITY.HIGH,\n          context: PORTUGUESE_ERROR_CONTEXTS.BUSINESS_DIRECTORY\n        })\n      }\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.portugueseRelatedErrors).toBe(5)\n      \n      const contextKey = `${PORTUGUESE_ERROR_CONTEXTS.BUSINESS_DIRECTORY}-${ERROR_SEVERITY.HIGH}`\n      expect(summary.errorsByContext[contextKey]).toBe(5)\n    })\n\n    it('should track mobile user errors separately', () => {\n      tracker.trackError({\n        message: 'Touch target too small',\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.MEDIUM,\n        context: 'mobile-ux',\n        portugueseContext: {\n          language: 'pt',\n          mobileDevice: true,\n          culturalFeature: 'BUSINESS_DIRECTORY'\n        }\n      })\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.portugueseRelatedErrors).toBe(1)\n    })\n  })\n\n  describe('Performance Monitoring', () => {\n    it('should track Portuguese content loading performance', () => {\n      const performanceMetric = {\n        name: 'Cultural Events Load Time',\n        value: 1800, // Under threshold\n        context: 'cultural-content',\n        threshold: 2000\n      }\n\n      tracker.trackPerformanceMetric(performanceMetric)\n      \n      // Should not trigger error for good performance\n      const summary = tracker.getErrorSummary()\n      expect(summary.totalErrors).toBe(0)\n    })\n\n    it('should detect slow language switching', () => {\n      const slowSwitchMetric = {\n        name: 'Language Switch Duration',\n        value: 800, // Above 500ms threshold\n        context: 'language-switching',\n        threshold: 500\n      }\n\n      tracker.trackPerformanceMetric(slowSwitchMetric)\n      \n      // Should trigger error for slow performance\n      const summary = tracker.getErrorSummary()\n      expect(summary.totalErrors).toBe(1)\n    })\n\n    it('should track business directory response times', () => {\n      const businessQueryMetric = {\n        name: 'Business Directory PostGIS Query',\n        value: 3200, // Slow query\n        context: 'business-directory',\n        threshold: 2000\n      }\n\n      tracker.trackPerformanceMetric(businessQueryMetric)\n      \n      const summary = tracker.getErrorSummary()\n      expect(summary.totalErrors).toBe(1) // Performance issue\n    })\n  })\n\n  describe('Error Recovery and Retry Logic', () => {\n    it('should handle retry scenarios', () => {\n      const originalError = {\n        message: 'Portuguese event booking failed',\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.HIGH,\n        context: PORTUGUESE_ERROR_CONTEXTS.EVENT_BOOKING\n      }\n\n      tracker.trackError(originalError)\n\n      // Simulate retry\n      tracker.trackError({\n        message: 'User retry attempt 1',\n        type: ErrorType.CLIENT_ERROR,\n        severity: ERROR_SEVERITY.MEDIUM,\n        context: 'error-recovery',\n        metadata: {\n          originalError: originalError.message,\n          retryCount: 1\n        }\n      })\n\n      const summary = tracker.getErrorSummary()\n      expect(summary.totalErrors).toBe(2)\n    })\n  })\n\n  describe('Integration with Global Error Tracker', () => {\n    it('should work with global error tracker instance', () => {\n      // Test the global instance\n      errorTracker.trackPortugueseFeatureError(\n        'CULTURAL_CONTENT',\n        'Global tracker test',\n        { testData: 'integration' }\n      )\n\n      const summary = errorTracker.getErrorSummary()\n      expect(summary.totalErrors).toBeGreaterThan(0)\n      expect(summary.portugueseRelatedErrors).toBeGreaterThan(0)\n    })\n  })\n})\n\ndescribe('Error Monitoring Configuration', () => {\n  it('should have all Portuguese error contexts defined', () => {\n    const requiredContexts = [\n      'CULTURAL_CONTENT',\n      'BUSINESS_DIRECTORY', \n      'LANGUAGE_SWITCHING',\n      'CHARACTER_ENCODING',\n      'CULTURAL_MATCHING',\n      'EVENT_BOOKING',\n      'UNIVERSITY_PARTNERSHIPS'\n    ]\n\n    requiredContexts.forEach(context => {\n      expect(PORTUGUESE_ERROR_CONTEXTS[context as keyof typeof PORTUGUESE_ERROR_CONTEXTS]).toBeDefined()\n    })\n  })\n\n  it('should have proper error severity levels', () => {\n    const severityLevels = ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']\n    \n    severityLevels.forEach(level => {\n      expect(ERROR_SEVERITY[level as keyof typeof ERROR_SEVERITY]).toBeDefined()\n    })\n  })\n})"],"names":["jest","mock","withScope","callback","mockScope","setTag","fn","setContext","setUser","addBreadcrumb","setLevel","captureException","captureMessage","setTags","describe","tracker","beforeEach","ErrorTracker","spyOn","console","mockImplementation","afterEach","restoreAllMocks","it","testError","message","type","ErrorType","CLIENT_ERROR","severity","ERROR_SEVERITY","HIGH","context","portugueseContext","language","culturalFeature","mobileDevice","trackError","summary","getErrorSummary","expect","totalErrors","toBe","portugueseRelatedErrors","errorsByContext","businessDirectoryError","Error","trackPortugueseFeatureError","searchQuery","location","userLanguage","performanceData","name","value","threshold","trackPerformanceMetric","MEDIUM","getErrorMessage","AUTHENTICATION","PORTUGUESE_ERROR_CONTEXTS","BUSINESS_DIRECTORY","error","contextualMessage","getContextualErrorMessage","isPortugueseFeature","userAction","pt","en","mobileError","eventType","region","userPreferences","fromLanguage","toLanguage","switchDuration","affectedCharacters","browserInfo","userAgent","userProfile","matchingCriteria","timeoutDuration","criticalErrors","SERVER_ERROR","CRITICAL","i","contextKey","performanceMetric","slowSwitchMetric","businessQueryMetric","originalError","EVENT_BOOKING","metadata","retryCount","errorTracker","testData","toBeGreaterThan","requiredContexts","forEach","toBeDefined","severityLevels","level"],"mappings":"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"}