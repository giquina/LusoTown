{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/services/AINotificationEngine.test.tsx"],"sourcesContent":["/**\n * AI Notification Engine Test Suite\n * Production-ready testing for Portuguese-speaking community Platform\n * \n * Tests cover:\n * - Production deployment readiness\n * - Portuguese cultural personalization\n * - Performance optimization\n * - Error handling and monitoring\n * - A/B testing framework\n * - Database integration\n */\n\nimport { aiNotificationEngine, SmartNotificationEngine } from '../../src/services/AINotificationEngine'\nimport { UserBehaviorProfile, CulturalContext } from '../../src/services/NotificationService'\n\n// Mock Supabase client with enhanced mocking for all methods\njest.mock('../../src/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve({ \n              data: mockTemplateData, \n              error: null \n            })),\n            lte: jest.fn(() => ({\n              order: jest.fn(() => ({\n                order: jest.fn(() => ({\n                  limit: jest.fn(() => Promise.resolve({\n                    data: [],\n                    error: null\n                  }))\n                }))\n              }))\n            }))\n          })),\n          order: jest.fn(() => ({\n            limit: jest.fn(() => Promise.resolve({\n              data: mockAnalyticsData,\n              error: null\n            }))\n          })),\n          single: jest.fn(() => Promise.resolve({\n            data: mockTemplateData,\n            error: null\n          }))\n        })),\n        gte: jest.fn(() => ({\n          not: jest.fn(() => Promise.resolve({\n            data: mockAnalyticsData,\n            error: null\n          }))\n        })),\n        limit: jest.fn(() => Promise.resolve({\n          data: [mockTemplateData],\n          error: null\n        })),\n        lte: jest.fn(() => ({\n          order: jest.fn(() => ({\n            order: jest.fn(() => ({\n              limit: jest.fn(() => Promise.resolve({\n                data: [],\n                error: null\n              }))\n            }))\n          }))\n        }))\n      })),\n      insert: jest.fn(() => ({\n        select: jest.fn(() => ({\n          single: jest.fn(() => Promise.resolve({\n            data: mockNotificationData,\n            error: null\n          }))\n        }))\n      })),\n      update: jest.fn(() => ({\n        eq: jest.fn(() => Promise.resolve({\n          data: null,\n          error: null\n        }))\n      }))\n    }))\n  }\n}))\n\nconst mockTemplateData = {\n  id: 'cultural_event_fado',\n  name: 'Fado Night Invitation',\n  category: 'cultural',\n  cultural_contexts: [\n    { portuguese_region: 'lisboa', cultural_significance: 'Traditional fado heritage' }\n  ],\n  content_variations: {\n    formal: {\n      title: 'Authentic Fado Performance Tonight',\n      message: 'Join us for traditional Portuguese fado music.',\n      title_pt: 'EspetÃ¡culo de Fado AutÃªntico Esta Noite',\n      message_pt: 'Junte-se a nÃ³s para fado tradicional portuguÃªs.'\n    },\n    casual: {\n      title: 'Fado Night - Feel the Saudade! ðŸŽµ',\n      message: 'Tonight\\'s fado will touch your Portuguese soul.',\n      title_pt: 'Noite de Fado - Sente a Saudade! ðŸŽµ',\n      message_pt: 'O fado de hoje vai tocar a tua alma portuguesa.'\n    },\n    friendly: {\n      title: 'Your Portuguese Heart is Calling! ðŸ’™',\n      message: 'Come feel the saudade with fellow Portuguese souls.',\n      title_pt: 'O Teu CoraÃ§Ã£o PortuguÃªs EstÃ¡ a Chamar! ðŸ’™',\n      message_pt: 'Vem sentir a saudade com outras almas portuguesas.'\n    }\n  },\n  dynamic_variables: ['venue', 'time', 'fadista_name'],\n  engagement_triggers: ['cultural_heritage', 'music_interest'],\n  target_diaspora_groups: ['first_generation', 'heritage_connection']\n}\n\nconst mockAnalyticsData = [\n  {\n    notification_id: 'test-notif-1',\n    user_id: 'test-user-1',\n    engagement_score: 85,\n    cultural_region: 'lisboa',\n    diaspora_generation: 'first_generation',\n    send_hour: 19,\n    sent_timestamp: new Date().toISOString(),\n    opened_timestamp: new Date().toISOString()\n  },\n  {\n    notification_id: 'test-notif-2',\n    user_id: 'test-user-2',\n    engagement_score: 72,\n    cultural_region: 'norte',\n    diaspora_generation: 'second_generation',\n    send_hour: 20,\n    sent_timestamp: new Date().toISOString(),\n    opened_timestamp: new Date().toISOString()\n  }\n]\n\nconst mockNotificationData = {\n  id: 'generated-notification-1',\n  user_id: 'test-user-1',\n  title: 'Your Portuguese Heart is Calling! ðŸ’™',\n  message: 'Come feel the saudade with fellow Portuguese souls.',\n  ai_generated: true,\n  engagement_score: 85\n}\n\ndescribe('AI Notification Engine - Production Readiness', () => {\n  let engine: SmartNotificationEngine\n\n  beforeEach(() => {\n    engine = new SmartNotificationEngine()\n    jest.clearAllMocks()\n  })\n\n  describe('System Initialization', () => {\n    test('should initialize without errors', async () => {\n      expect(engine).toBeDefined()\n      expect(engine).toBeInstanceOf(SmartNotificationEngine)\n    })\n\n    test('should handle initialization failures gracefully', async () => {\n      // Test initialization with database connection failure\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation()\n      \n      // This should not throw, even with connection issues\n      const testEngine = new SmartNotificationEngine()\n      expect(testEngine).toBeDefined()\n      \n      consoleSpy.mockRestore()\n    })\n  })\n\n  describe('Portuguese Cultural Personalization', () => {\n    const createMockUserBehavior = (region: string): UserBehaviorProfile => ({\n      user_id: `test-user-${region}`,\n      engagement_patterns: {\n        peak_activity_hours: [19, 20, 21],\n        preferred_days: ['friday', 'saturday'],\n        avg_response_time_minutes: 15,\n        click_through_rate: 0.65,\n        notification_open_rate: 0.80\n      },\n      cultural_preferences: {\n        portuguese_region: region as CulturalContext['portuguese_region'],\n        cultural_significance: `${region} cultural heritage`,\n        diaspora_relevance: 'first_generation',\n        language_preference: 'pt',\n        cultural_interests: ['fado', 'cultural_events']\n      },\n      content_affinity: {\n        event_types: ['cultural', 'social'],\n        business_categories: ['restaurants', 'cultural_centers'],\n        communication_style: 'friendly'\n      },\n      ai_insights: {\n        engagement_likelihood: 0.85,\n        optimal_send_times: ['19:00', '20:00'],\n        content_preferences: ['cultural_events', 'music'],\n        churn_risk: 0.1\n      }\n    })\n\n    test('should generate personalized notifications for Lisboa region', async () => {\n      const userBehavior = createMockUserBehavior('lisboa')\n      const dynamicData = {\n        venue: 'Portuguese Cultural Center',\n        time: '19:30',\n        fadista_name: 'Maria JoÃ£o'\n      }\n\n      const result = await engine.generatePersonalizedNotification(\n        'test-user-lisboa',\n        'cultural_event_fado',\n        dynamicData,\n        userBehavior\n      )\n\n      expect(result).toBeDefined()\n      expect(result.notification).toBeDefined()\n      expect(result.cultural_adaptation).toBeDefined()\n      expect(result.performance_prediction).toBeDefined()\n\n      // Verify Portuguese cultural context\n      expect(result.notification.cultural_context?.portuguese_region).toBe('lisboa')\n      expect(result.cultural_adaptation.cultural_authenticity_score).toBeGreaterThan(0.5)\n      expect(result.performance_prediction.likelihood_score).toBeGreaterThan(0)\n    })\n\n    test('should adapt content for different Portuguese regions', async () => {\n      const regions = ['lisboa', 'norte', 'acores', 'madeira']\n      const results: any[] = []\n\n      for (const region of regions) {\n        const userBehavior = createMockUserBehavior(region)\n        const result = await engine.generatePersonalizedNotification(\n          `test-user-${region}`,\n          'cultural_event_fado',\n          { venue: 'Test Venue', time: '19:00' },\n          userBehavior\n        )\n        results.push({ region, result })\n      }\n\n      // Verify each region gets personalized treatment\n      results.forEach(({ region, result }) => {\n        expect(result.cultural_adaptation).toBeDefined()\n        expect(result.notification.cultural_context?.portuguese_region).toBe(region)\n        expect(result.cultural_adaptation.cultural_authenticity_score).toBeGreaterThan(0)\n      })\n    })\n\n    test('should handle diaspora generation preferences', async () => {\n      const generations = ['first_generation', 'second_generation', 'heritage_connection']\n      \n      for (const generation of generations) {\n        const userBehavior = createMockUserBehavior('lisboa')\n        userBehavior.cultural_preferences.diaspora_relevance = generation as any\n\n        const result = await engine.generatePersonalizedNotification(\n          `test-user-${generation}`,\n          'cultural_event_fado',\n          { venue: 'Test', time: '19:00' },\n          userBehavior\n        )\n\n        expect(result.notification.cultural_context?.diaspora_relevance).toBe(generation)\n        \n        // Check if any reasoning contains the generation pattern\n        const reasoningText = result.cultural_adaptation.adaptation_reasoning.join(' ')\n        const generationPattern = generation.replace('_', ' ')\n        expect(reasoningText.toLowerCase()).toContain(generationPattern.toLowerCase())\n      }\n    })\n  })\n\n  describe('Engagement Prediction', () => {\n    test('should predict engagement accurately', async () => {\n      const userBehavior = createMockUserBehavior('lisboa')\n      \n      const prediction = await engine.predictEngagement(\n        'test-user',\n        mockTemplateData as any,\n        userBehavior\n      )\n\n      expect(prediction).toBeDefined()\n      expect(prediction.likelihood_score).toBeGreaterThanOrEqual(0)\n      expect(prediction.likelihood_score).toBeLessThanOrEqual(100)\n      expect(prediction.optimal_send_time).toMatch(/^\\d{2}:\\d{2}$/)\n      expect(prediction.content_recommendation).toMatch(/^(formal|casual|friendly)$/)\n      expect(Array.isArray(prediction.reasoning)).toBe(true)\n    })\n\n    test('should provide higher predictions for culturally relevant content', async () => {\n      const userBehavior = createMockUserBehavior('lisboa')\n      \n      // High cultural relevance user\n      userBehavior.cultural_preferences.cultural_interests = ['fado', 'portuguese_cuisine', 'cultural_events']\n      userBehavior.engagement_patterns.click_through_rate = 0.8\n      \n      const prediction = await engine.predictEngagement(\n        'test-user-high-cultural',\n        mockTemplateData as any,\n        userBehavior\n      )\n\n      expect(prediction.likelihood_score).toBeGreaterThan(60)\n      expect(prediction.cultural_adaptation_needed).toBe(false)\n    })\n\n    test('should handle prediction errors gracefully', async () => {\n      const invalidUserBehavior = {} as UserBehaviorProfile\n\n      const prediction = await engine.predictEngagement(\n        'test-user-invalid',\n        mockTemplateData as any,\n        invalidUserBehavior\n      )\n\n      // Should return default prediction, not throw\n      expect(prediction).toBeDefined()\n      expect(prediction.likelihood_score).toBe(50)\n      expect(prediction.reasoning).toContain('Default prediction due to insufficient data')\n    })\n  })\n\n  describe('Timing Optimization', () => {\n    test('should optimize notification timing for Portuguese-speaking community', async () => {\n      const notifications = [mockNotificationData] as any[]\n      \n      const result = await engine.optimizeTimingForCommunity(notifications)\n\n      expect(result).toBeDefined()\n      expect(result.optimized_notifications).toBeDefined()\n      expect(result.timing_insights).toBeDefined()\n      expect(result.performance_prediction).toBeDefined()\n\n      // Verify Portuguese evening hours are preferred (18-22)\n      const optimizedTime = result.optimized_notifications[0]?.optimal_send_time\n      if (optimizedTime) {\n        const hour = parseInt(optimizedTime.split(':')[0])\n        expect(hour).toBeGreaterThanOrEqual(17)\n        expect(hour).toBeLessThanOrEqual(23)\n      }\n    })\n\n    test('should consider Portuguese cultural events timing', async () => {\n      // Mock Santos Populares period (June)\n      const originalDate = Date\n      global.Date = jest.fn(() => new originalDate(2025, 5, 13)) as any // June 13th\n      global.Date.now = originalDate.now\n\n      const notifications = [mockNotificationData] as any[]\n      const result = await engine.optimizeTimingForCommunity(notifications)\n\n      expect(result.performance_prediction).toBeDefined()\n      \n      global.Date = originalDate\n    })\n  })\n\n  describe('A/B Testing Framework', () => {\n    test('should execute A/B tests correctly', async () => {\n      const variants = [\n        {\n          id: 'variant-a',\n          name: 'Formal Style',\n          percentage: 50,\n          content_modifications: { tone: 'formal' },\n          target_metrics: ['open_rate', 'click_rate']\n        },\n        {\n          id: 'variant-b',\n          name: 'Friendly Style',\n          percentage: 50,\n          content_modifications: { tone: 'friendly' },\n          target_metrics: ['engagement_rate']\n        }\n      ]\n\n      const targetUsers = ['user1', 'user2', 'user3', 'user4']\n      \n      const assignments = await engine.runABTest('cultural_event_fado', variants, targetUsers)\n\n      expect(assignments).toBeDefined()\n      expect(assignments.length).toBe(2)\n      \n      // Verify user distribution\n      const totalAssigned = assignments.reduce((sum, assignment) => sum + assignment.users.length, 0)\n      expect(totalAssigned).toBeLessThanOrEqual(targetUsers.length)\n    })\n  })\n\n  describe('Performance Monitoring', () => {\n    test('should provide health check information', async () => {\n      const healthCheck = await engine.healthCheck()\n\n      expect(healthCheck).toBeDefined()\n      expect(healthCheck.status).toMatch(/^(healthy|degraded|critical)$/)\n      expect(healthCheck.checks).toBeDefined()\n      expect(healthCheck.message).toBeDefined()\n      expect(healthCheck.timestamp).toBeDefined()\n\n      // Verify critical checks\n      expect(typeof healthCheck.checks.initialized).toBe('boolean')\n      expect(typeof healthCheck.checks.database_connection).toBe('boolean')\n    })\n\n    test('should provide performance metrics', async () => {\n      const metrics = await engine.getPerformanceMetrics()\n\n      expect(metrics).toBeDefined()\n      expect(metrics.system_health).toMatch(/^(healthy|degraded|critical|unknown)$/)\n      expect(typeof metrics.average_prediction_time).toBe('number')\n      expect(typeof metrics.error_rate).toBe('number')\n      expect(typeof metrics.queue_size).toBe('number')\n      expect(Array.isArray(metrics.recommendations)).toBe(true)\n    })\n  })\n\n  describe('Queue Processing', () => {\n    test('should queue notifications for optimal delivery', async () => {\n      const userId = 'test-user-queue'\n      const templateId = 'cultural_event_fado'\n      const dynamicData = { venue: 'Test Venue', time: '19:00' }\n\n      // This should not throw\n      await expect(\n        engine.queueNotificationForOptimalDelivery(userId, templateId, dynamicData, 'normal')\n      ).resolves.not.toThrow()\n    })\n\n    test('should process notification queue', async () => {\n      const result = await engine.processNotificationQueue()\n\n      expect(result).toBeDefined()\n      expect(typeof result.total_sent).toBe('number')\n      expect(result.audience_insights).toBeDefined()\n      expect(result.audience_insights.preferred_content_style).toBeDefined()\n    })\n  })\n\n  describe('Error Handling and Resilience', () => {\n    test('should handle database connection failures', async () => {\n      // Mock database failure\n      const originalSupabase = require('../../src/lib/supabase').supabase\n      require('../../src/lib/supabase').supabase = {\n        from: () => ({\n          select: () => Promise.resolve({ data: null, error: new Error('Connection failed') })\n        })\n      }\n\n      const userBehavior = createMockUserBehavior('lisboa')\n      \n      // Should not throw, should return fallback\n      const result = await engine.generatePersonalizedNotification(\n        'test-user-db-error',\n        'cultural_event_fado',\n        { venue: 'Test', time: '19:00' },\n        userBehavior\n      )\n\n      expect(result).toBeDefined()\n      \n      // Restore original\n      require('../../src/lib/supabase').supabase = originalSupabase\n    })\n\n    test('should handle invalid user behavior gracefully', async () => {\n      const invalidBehavior = {\n        user_id: 'invalid',\n        engagement_patterns: null,\n        cultural_preferences: null,\n        content_affinity: null,\n        ai_insights: null\n      } as any\n\n      // Should not throw\n      await expect(\n        engine.predictEngagement('invalid-user', mockTemplateData as any, invalidBehavior)\n      ).resolves.toBeDefined()\n    })\n  })\n\n  describe('Integration with Portuguese Configuration', () => {\n    test('should use configuration-driven data (no hardcoding)', async () => {\n      const userBehavior = createMockUserBehavior('lisboa')\n      \n      const result = await engine.generatePersonalizedNotification(\n        'test-config-user',\n        'cultural_event_fado',\n        { venue: '{{venue}}', contact: '{{contact_email}}' },\n        userBehavior\n      )\n\n      // Verify no hardcoded values in action_data\n      if (result.notification.action_data) {\n        const actionData = JSON.stringify(result.notification.action_data)\n        expect(actionData).not.toContain('demo@example.com')\n        expect(actionData).not.toContain('hardcoded')\n        expect(actionData).not.toContain('Â£19.99')\n      }\n    })\n  })\n\n  function createMockUserBehavior(region: string): UserBehaviorProfile {\n    return {\n      user_id: `test-user-${region}`,\n      engagement_patterns: {\n        peak_activity_hours: [19, 20, 21],\n        preferred_days: ['friday', 'saturday'],\n        avg_response_time_minutes: 15,\n        click_through_rate: 0.65,\n        notification_open_rate: 0.80\n      },\n      cultural_preferences: {\n        portuguese_region: region as CulturalContext['portuguese_region'],\n        cultural_significance: `${region} cultural heritage`,\n        diaspora_relevance: 'first_generation',\n        language_preference: 'pt',\n        cultural_interests: ['fado', 'cultural_events']\n      },\n      content_affinity: {\n        event_types: ['cultural', 'social'],\n        business_categories: ['restaurants', 'cultural_centers'],\n        communication_style: 'friendly'\n      },\n      ai_insights: {\n        engagement_likelihood: 0.85,\n        optimal_send_times: ['19:00', '20:00'],\n        content_preferences: ['cultural_events', 'music'],\n        churn_risk: 0.1\n      }\n    }\n  }\n})\n\ndescribe('AI Notification Engine - Load Testing', () => {\n  test('should handle concurrent prediction requests', async () => {\n    const promises = []\n    const userBehavior = {\n      user_id: 'load-test-user',\n      engagement_patterns: {\n        peak_activity_hours: [19, 20],\n        preferred_days: ['friday'],\n        avg_response_time_minutes: 15,\n        click_through_rate: 0.5,\n        notification_open_rate: 0.7\n      },\n      cultural_preferences: {\n        portuguese_region: 'lisboa' as const,\n        cultural_significance: 'Test',\n        diaspora_relevance: 'first_generation' as const,\n        language_preference: 'pt' as const,\n        cultural_interests: ['cultural_events']\n      },\n      content_affinity: {\n        event_types: ['cultural'],\n        business_categories: ['restaurants'],\n        communication_style: 'friendly' as const\n      },\n      ai_insights: {\n        engagement_likelihood: 0.8,\n        optimal_send_times: ['19:00'],\n        content_preferences: ['cultural_events'],\n        churn_risk: 0.1\n      }\n    }\n\n    // Create 10 concurrent prediction requests\n    for (let i = 0; i < 10; i++) {\n      promises.push(\n        aiNotificationEngine.predictEngagement(\n          `load-test-user-${i}`,\n          mockTemplateData as any,\n          userBehavior\n        )\n      )\n    }\n\n    const results = await Promise.all(promises)\n    \n    expect(results).toHaveLength(10)\n    results.forEach(result => {\n      expect(result).toBeDefined()\n      expect(result.likelihood_score).toBeGreaterThanOrEqual(0)\n    })\n  }, 10000) // 10 second timeout for load test\n})"],"names":["jest","mock","supabase","from","fn","select","eq","single","Promise","resolve","data","mockTemplateData","error","lte","order","limit","mockAnalyticsData","gte","not","insert","mockNotificationData","update","id","name","category","cultural_contexts","portuguese_region","cultural_significance","content_variations","formal","title","message","title_pt","message_pt","casual","friendly","dynamic_variables","engagement_triggers","target_diaspora_groups","notification_id","user_id","engagement_score","cultural_region","diaspora_generation","send_hour","sent_timestamp","Date","toISOString","opened_timestamp","ai_generated","describe","engine","beforeEach","SmartNotificationEngine","clearAllMocks","test","expect","toBeDefined","toBeInstanceOf","consoleSpy","spyOn","console","mockImplementation","testEngine","mockRestore","createMockUserBehavior","region","engagement_patterns","peak_activity_hours","preferred_days","avg_response_time_minutes","click_through_rate","notification_open_rate","cultural_preferences","diaspora_relevance","language_preference","cultural_interests","content_affinity","event_types","business_categories","communication_style","ai_insights","engagement_likelihood","optimal_send_times","content_preferences","churn_risk","userBehavior","dynamicData","venue","time","fadista_name","result","generatePersonalizedNotification","notification","cultural_adaptation","performance_prediction","cultural_context","toBe","cultural_authenticity_score","toBeGreaterThan","likelihood_score","regions","results","push","forEach","generations","generation","reasoningText","adaptation_reasoning","join","generationPattern","replace","toLowerCase","toContain","prediction","predictEngagement","toBeGreaterThanOrEqual","toBeLessThanOrEqual","optimal_send_time","toMatch","content_recommendation","Array","isArray","reasoning","cultural_adaptation_needed","invalidUserBehavior","notifications","optimizeTimingForCommunity","optimized_notifications","timing_insights","optimizedTime","hour","parseInt","split","originalDate","global","now","variants","percentage","content_modifications","tone","target_metrics","targetUsers","assignments","runABTest","length","totalAssigned","reduce","sum","assignment","users","healthCheck","status","checks","timestamp","initialized","database_connection","metrics","getPerformanceMetrics","system_health","average_prediction_time","error_rate","queue_size","recommendations","userId","templateId","queueNotificationForOptimalDelivery","resolves","toThrow","processNotificationQueue","total_sent","audience_insights","preferred_content_style","originalSupabase","require","Error","invalidBehavior","contact","action_data","actionData","JSON","stringify","promises","i","aiNotificationEngine","all","toHaveLength"],"mappings":"AAAA;;;;;;;;;;;CAWC;AAKD,6DAA6D;AAC7DA,KAAKC,IAAI,CAAC,0BAA0B,IAAO,CAAA;QACzCC,UAAU;YACRC,MAAMH,KAAKI,EAAE,CAAC,IAAO,CAAA;oBACnBC,QAAQL,KAAKI,EAAE,CAAC,IAAO,CAAA;4BACrBE,IAAIN,KAAKI,EAAE,CAAC,IAAO,CAAA;oCACjBE,IAAIN,KAAKI,EAAE,CAAC,IAAO,CAAA;4CACjBG,QAAQP,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;oDACpCC,MAAMC;oDACNC,OAAO;gDACT;4CACAC,KAAKb,KAAKI,EAAE,CAAC,IAAO,CAAA;oDAClBU,OAAOd,KAAKI,EAAE,CAAC,IAAO,CAAA;4DACpBU,OAAOd,KAAKI,EAAE,CAAC,IAAO,CAAA;oEACpBW,OAAOf,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;4EACnCC,MAAM,EAAE;4EACRE,OAAO;wEACT;gEACF,CAAA;wDACF,CAAA;gDACF,CAAA;wCACF,CAAA;oCACAE,OAAOd,KAAKI,EAAE,CAAC,IAAO,CAAA;4CACpBW,OAAOf,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;oDACnCC,MAAMM;oDACNJ,OAAO;gDACT;wCACF,CAAA;oCACAL,QAAQP,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;4CACpCC,MAAMC;4CACNC,OAAO;wCACT;gCACF,CAAA;4BACAK,KAAKjB,KAAKI,EAAE,CAAC,IAAO,CAAA;oCAClBc,KAAKlB,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;4CACjCC,MAAMM;4CACNJ,OAAO;wCACT;gCACF,CAAA;4BACAG,OAAOf,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;oCACnCC,MAAM;wCAACC;qCAAiB;oCACxBC,OAAO;gCACT;4BACAC,KAAKb,KAAKI,EAAE,CAAC,IAAO,CAAA;oCAClBU,OAAOd,KAAKI,EAAE,CAAC,IAAO,CAAA;4CACpBU,OAAOd,KAAKI,EAAE,CAAC,IAAO,CAAA;oDACpBW,OAAOf,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;4DACnCC,MAAM,EAAE;4DACRE,OAAO;wDACT;gDACF,CAAA;wCACF,CAAA;gCACF,CAAA;wBACF,CAAA;oBACAO,QAAQnB,KAAKI,EAAE,CAAC,IAAO,CAAA;4BACrBC,QAAQL,KAAKI,EAAE,CAAC,IAAO,CAAA;oCACrBG,QAAQP,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;4CACpCC,MAAMU;4CACNR,OAAO;wCACT;gCACF,CAAA;wBACF,CAAA;oBACAS,QAAQrB,KAAKI,EAAE,CAAC,IAAO,CAAA;4BACrBE,IAAIN,KAAKI,EAAE,CAAC,IAAMI,QAAQC,OAAO,CAAC;oCAChCC,MAAM;oCACNE,OAAO;gCACT;wBACF,CAAA;gBACF,CAAA;QACF;IACF,CAAA;;;;sCAzE8D;AA2E9D,MAAMD,mBAAmB;IACvBW,IAAI;IACJC,MAAM;IACNC,UAAU;IACVC,mBAAmB;QACjB;YAAEC,mBAAmB;YAAUC,uBAAuB;QAA4B;KACnF;IACDC,oBAAoB;QAClBC,QAAQ;YACNC,OAAO;YACPC,SAAS;YACTC,UAAU;YACVC,YAAY;QACd;QACAC,QAAQ;YACNJ,OAAO;YACPC,SAAS;YACTC,UAAU;YACVC,YAAY;QACd;QACAE,UAAU;YACRL,OAAO;YACPC,SAAS;YACTC,UAAU;YACVC,YAAY;QACd;IACF;IACAG,mBAAmB;QAAC;QAAS;QAAQ;KAAe;IACpDC,qBAAqB;QAAC;QAAqB;KAAiB;IAC5DC,wBAAwB;QAAC;QAAoB;KAAsB;AACrE;AAEA,MAAMtB,oBAAoB;IACxB;QACEuB,iBAAiB;QACjBC,SAAS;QACTC,kBAAkB;QAClBC,iBAAiB;QACjBC,qBAAqB;QACrBC,WAAW;QACXC,gBAAgB,IAAIC,OAAOC,WAAW;QACtCC,kBAAkB,IAAIF,OAAOC,WAAW;IAC1C;IACA;QACER,iBAAiB;QACjBC,SAAS;QACTC,kBAAkB;QAClBC,iBAAiB;QACjBC,qBAAqB;QACrBC,WAAW;QACXC,gBAAgB,IAAIC,OAAOC,WAAW;QACtCC,kBAAkB,IAAIF,OAAOC,WAAW;IAC1C;CACD;AAED,MAAM3B,uBAAuB;IAC3BE,IAAI;IACJkB,SAAS;IACTV,OAAO;IACPC,SAAS;IACTkB,cAAc;IACdR,kBAAkB;AACpB;AAEAS,SAAS,iDAAiD;IACxD,IAAIC;IAEJC,WAAW;QACTD,SAAS,IAAIE,6CAAuB;QACpCrD,KAAKsD,aAAa;IACpB;IAEAJ,SAAS,yBAAyB;QAChCK,KAAK,oCAAoC;YACvCC,OAAOL,QAAQM,WAAW;YAC1BD,OAAOL,QAAQO,cAAc,CAACL,6CAAuB;QACvD;QAEAE,KAAK,oDAAoD;YACvD,uDAAuD;YACvD,MAAMI,aAAa3D,KAAK4D,KAAK,CAACC,SAAS,SAASC,kBAAkB;YAElE,qDAAqD;YACrD,MAAMC,aAAa,IAAIV,6CAAuB;YAC9CG,OAAOO,YAAYN,WAAW;YAE9BE,WAAWK,WAAW;QACxB;IACF;IAEAd,SAAS,uCAAuC;QAC9C,MAAMe,yBAAyB,CAACC,SAAyC,CAAA;gBACvE1B,SAAS,CAAC,UAAU,EAAE0B,OAAO,CAAC;gBAC9BC,qBAAqB;oBACnBC,qBAAqB;wBAAC;wBAAI;wBAAI;qBAAG;oBACjCC,gBAAgB;wBAAC;wBAAU;qBAAW;oBACtCC,2BAA2B;oBAC3BC,oBAAoB;oBACpBC,wBAAwB;gBAC1B;gBACAC,sBAAsB;oBACpB/C,mBAAmBwC;oBACnBvC,uBAAuB,CAAC,EAAEuC,OAAO,kBAAkB,CAAC;oBACpDQ,oBAAoB;oBACpBC,qBAAqB;oBACrBC,oBAAoB;wBAAC;wBAAQ;qBAAkB;gBACjD;gBACAC,kBAAkB;oBAChBC,aAAa;wBAAC;wBAAY;qBAAS;oBACnCC,qBAAqB;wBAAC;wBAAe;qBAAmB;oBACxDC,qBAAqB;gBACvB;gBACAC,aAAa;oBACXC,uBAAuB;oBACvBC,oBAAoB;wBAAC;wBAAS;qBAAQ;oBACtCC,qBAAqB;wBAAC;wBAAmB;qBAAQ;oBACjDC,YAAY;gBACd;YACF,CAAA;QAEA9B,KAAK,gEAAgE;YACnE,MAAM+B,eAAerB,uBAAuB;YAC5C,MAAMsB,cAAc;gBAClBC,OAAO;gBACPC,MAAM;gBACNC,cAAc;YAChB;YAEA,MAAMC,SAAS,MAAMxC,OAAOyC,gCAAgC,CAC1D,oBACA,uBACAL,aACAD;YAGF9B,OAAOmC,QAAQlC,WAAW;YAC1BD,OAAOmC,OAAOE,YAAY,EAAEpC,WAAW;YACvCD,OAAOmC,OAAOG,mBAAmB,EAAErC,WAAW;YAC9CD,OAAOmC,OAAOI,sBAAsB,EAAEtC,WAAW;YAEjD,qCAAqC;YACrCD,OAAOmC,OAAOE,YAAY,CAACG,gBAAgB,EAAEtE,mBAAmBuE,IAAI,CAAC;YACrEzC,OAAOmC,OAAOG,mBAAmB,CAACI,2BAA2B,EAAEC,eAAe,CAAC;YAC/E3C,OAAOmC,OAAOI,sBAAsB,CAACK,gBAAgB,EAAED,eAAe,CAAC;QACzE;QAEA5C,KAAK,yDAAyD;YAC5D,MAAM8C,UAAU;gBAAC;gBAAU;gBAAS;gBAAU;aAAU;YACxD,MAAMC,UAAiB,EAAE;YAEzB,KAAK,MAAMpC,UAAUmC,QAAS;gBAC5B,MAAMf,eAAerB,uBAAuBC;gBAC5C,MAAMyB,SAAS,MAAMxC,OAAOyC,gCAAgC,CAC1D,CAAC,UAAU,EAAE1B,OAAO,CAAC,EACrB,uBACA;oBAAEsB,OAAO;oBAAcC,MAAM;gBAAQ,GACrCH;gBAEFgB,QAAQC,IAAI,CAAC;oBAAErC;oBAAQyB;gBAAO;YAChC;YAEA,iDAAiD;YACjDW,QAAQE,OAAO,CAAC,CAAC,EAAEtC,MAAM,EAAEyB,MAAM,EAAE;gBACjCnC,OAAOmC,OAAOG,mBAAmB,EAAErC,WAAW;gBAC9CD,OAAOmC,OAAOE,YAAY,CAACG,gBAAgB,EAAEtE,mBAAmBuE,IAAI,CAAC/B;gBACrEV,OAAOmC,OAAOG,mBAAmB,CAACI,2BAA2B,EAAEC,eAAe,CAAC;YACjF;QACF;QAEA5C,KAAK,iDAAiD;YACpD,MAAMkD,cAAc;gBAAC;gBAAoB;gBAAqB;aAAsB;YAEpF,KAAK,MAAMC,cAAcD,YAAa;gBACpC,MAAMnB,eAAerB,uBAAuB;gBAC5CqB,aAAab,oBAAoB,CAACC,kBAAkB,GAAGgC;gBAEvD,MAAMf,SAAS,MAAMxC,OAAOyC,gCAAgC,CAC1D,CAAC,UAAU,EAAEc,WAAW,CAAC,EACzB,uBACA;oBAAElB,OAAO;oBAAQC,MAAM;gBAAQ,GAC/BH;gBAGF9B,OAAOmC,OAAOE,YAAY,CAACG,gBAAgB,EAAEtB,oBAAoBuB,IAAI,CAACS;gBAEtE,yDAAyD;gBACzD,MAAMC,gBAAgBhB,OAAOG,mBAAmB,CAACc,oBAAoB,CAACC,IAAI,CAAC;gBAC3E,MAAMC,oBAAoBJ,WAAWK,OAAO,CAAC,KAAK;gBAClDvD,OAAOmD,cAAcK,WAAW,IAAIC,SAAS,CAACH,kBAAkBE,WAAW;YAC7E;QACF;IACF;IAEA9D,SAAS,yBAAyB;QAChCK,KAAK,wCAAwC;YAC3C,MAAM+B,eAAerB,uBAAuB;YAE5C,MAAMiD,aAAa,MAAM/D,OAAOgE,iBAAiB,CAC/C,aACAxG,kBACA2E;YAGF9B,OAAO0D,YAAYzD,WAAW;YAC9BD,OAAO0D,WAAWd,gBAAgB,EAAEgB,sBAAsB,CAAC;YAC3D5D,OAAO0D,WAAWd,gBAAgB,EAAEiB,mBAAmB,CAAC;YACxD7D,OAAO0D,WAAWI,iBAAiB,EAAEC,OAAO,CAAC;YAC7C/D,OAAO0D,WAAWM,sBAAsB,EAAED,OAAO,CAAC;YAClD/D,OAAOiE,MAAMC,OAAO,CAACR,WAAWS,SAAS,GAAG1B,IAAI,CAAC;QACnD;QAEA1C,KAAK,qEAAqE;YACxE,MAAM+B,eAAerB,uBAAuB;YAE5C,+BAA+B;YAC/BqB,aAAab,oBAAoB,CAACG,kBAAkB,GAAG;gBAAC;gBAAQ;gBAAsB;aAAkB;YACxGU,aAAanB,mBAAmB,CAACI,kBAAkB,GAAG;YAEtD,MAAM2C,aAAa,MAAM/D,OAAOgE,iBAAiB,CAC/C,2BACAxG,kBACA2E;YAGF9B,OAAO0D,WAAWd,gBAAgB,EAAED,eAAe,CAAC;YACpD3C,OAAO0D,WAAWU,0BAA0B,EAAE3B,IAAI,CAAC;QACrD;QAEA1C,KAAK,8CAA8C;YACjD,MAAMsE,sBAAsB,CAAC;YAE7B,MAAMX,aAAa,MAAM/D,OAAOgE,iBAAiB,CAC/C,qBACAxG,kBACAkH;YAGF,8CAA8C;YAC9CrE,OAAO0D,YAAYzD,WAAW;YAC9BD,OAAO0D,WAAWd,gBAAgB,EAAEH,IAAI,CAAC;YACzCzC,OAAO0D,WAAWS,SAAS,EAAEV,SAAS,CAAC;QACzC;IACF;IAEA/D,SAAS,uBAAuB;QAC9BK,KAAK,yEAAyE;YAC5E,MAAMuE,gBAAgB;gBAAC1G;aAAqB;YAE5C,MAAMuE,SAAS,MAAMxC,OAAO4E,0BAA0B,CAACD;YAEvDtE,OAAOmC,QAAQlC,WAAW;YAC1BD,OAAOmC,OAAOqC,uBAAuB,EAAEvE,WAAW;YAClDD,OAAOmC,OAAOsC,eAAe,EAAExE,WAAW;YAC1CD,OAAOmC,OAAOI,sBAAsB,EAAEtC,WAAW;YAEjD,wDAAwD;YACxD,MAAMyE,gBAAgBvC,OAAOqC,uBAAuB,CAAC,EAAE,EAAEV;YACzD,IAAIY,eAAe;gBACjB,MAAMC,OAAOC,SAASF,cAAcG,KAAK,CAAC,IAAI,CAAC,EAAE;gBACjD7E,OAAO2E,MAAMf,sBAAsB,CAAC;gBACpC5D,OAAO2E,MAAMd,mBAAmB,CAAC;YACnC;QACF;QAEA9D,KAAK,qDAAqD;YACxD,sCAAsC;YACtC,MAAM+E,eAAexF;YACrByF,OAAOzF,IAAI,GAAG9C,KAAKI,EAAE,CAAC,IAAM,IAAIkI,aAAa,MAAM,GAAG,KAAY,YAAY;;YAC9EC,OAAOzF,IAAI,CAAC0F,GAAG,GAAGF,aAAaE,GAAG;YAElC,MAAMV,gBAAgB;gBAAC1G;aAAqB;YAC5C,MAAMuE,SAAS,MAAMxC,OAAO4E,0BAA0B,CAACD;YAEvDtE,OAAOmC,OAAOI,sBAAsB,EAAEtC,WAAW;YAEjD8E,OAAOzF,IAAI,GAAGwF;QAChB;IACF;IAEApF,SAAS,yBAAyB;QAChCK,KAAK,sCAAsC;YACzC,MAAMkF,WAAW;gBACf;oBACEnH,IAAI;oBACJC,MAAM;oBACNmH,YAAY;oBACZC,uBAAuB;wBAAEC,MAAM;oBAAS;oBACxCC,gBAAgB;wBAAC;wBAAa;qBAAa;gBAC7C;gBACA;oBACEvH,IAAI;oBACJC,MAAM;oBACNmH,YAAY;oBACZC,uBAAuB;wBAAEC,MAAM;oBAAW;oBAC1CC,gBAAgB;wBAAC;qBAAkB;gBACrC;aACD;YAED,MAAMC,cAAc;gBAAC;gBAAS;gBAAS;gBAAS;aAAQ;YAExD,MAAMC,cAAc,MAAM5F,OAAO6F,SAAS,CAAC,uBAAuBP,UAAUK;YAE5EtF,OAAOuF,aAAatF,WAAW;YAC/BD,OAAOuF,YAAYE,MAAM,EAAEhD,IAAI,CAAC;YAEhC,2BAA2B;YAC3B,MAAMiD,gBAAgBH,YAAYI,MAAM,CAAC,CAACC,KAAKC,aAAeD,MAAMC,WAAWC,KAAK,CAACL,MAAM,EAAE;YAC7FzF,OAAO0F,eAAe7B,mBAAmB,CAACyB,YAAYG,MAAM;QAC9D;IACF;IAEA/F,SAAS,0BAA0B;QACjCK,KAAK,2CAA2C;YAC9C,MAAMgG,cAAc,MAAMpG,OAAOoG,WAAW;YAE5C/F,OAAO+F,aAAa9F,WAAW;YAC/BD,OAAO+F,YAAYC,MAAM,EAAEjC,OAAO,CAAC;YACnC/D,OAAO+F,YAAYE,MAAM,EAAEhG,WAAW;YACtCD,OAAO+F,YAAYxH,OAAO,EAAE0B,WAAW;YACvCD,OAAO+F,YAAYG,SAAS,EAAEjG,WAAW;YAEzC,yBAAyB;YACzBD,OAAO,OAAO+F,YAAYE,MAAM,CAACE,WAAW,EAAE1D,IAAI,CAAC;YACnDzC,OAAO,OAAO+F,YAAYE,MAAM,CAACG,mBAAmB,EAAE3D,IAAI,CAAC;QAC7D;QAEA1C,KAAK,sCAAsC;YACzC,MAAMsG,UAAU,MAAM1G,OAAO2G,qBAAqB;YAElDtG,OAAOqG,SAASpG,WAAW;YAC3BD,OAAOqG,QAAQE,aAAa,EAAExC,OAAO,CAAC;YACtC/D,OAAO,OAAOqG,QAAQG,uBAAuB,EAAE/D,IAAI,CAAC;YACpDzC,OAAO,OAAOqG,QAAQI,UAAU,EAAEhE,IAAI,CAAC;YACvCzC,OAAO,OAAOqG,QAAQK,UAAU,EAAEjE,IAAI,CAAC;YACvCzC,OAAOiE,MAAMC,OAAO,CAACmC,QAAQM,eAAe,GAAGlE,IAAI,CAAC;QACtD;IACF;IAEA/C,SAAS,oBAAoB;QAC3BK,KAAK,mDAAmD;YACtD,MAAM6G,SAAS;YACf,MAAMC,aAAa;YACnB,MAAM9E,cAAc;gBAAEC,OAAO;gBAAcC,MAAM;YAAQ;YAEzD,wBAAwB;YACxB,MAAMjC,OACJL,OAAOmH,mCAAmC,CAACF,QAAQC,YAAY9E,aAAa,WAC5EgF,QAAQ,CAACrJ,GAAG,CAACsJ,OAAO;QACxB;QAEAjH,KAAK,qCAAqC;YACxC,MAAMoC,SAAS,MAAMxC,OAAOsH,wBAAwB;YAEpDjH,OAAOmC,QAAQlC,WAAW;YAC1BD,OAAO,OAAOmC,OAAO+E,UAAU,EAAEzE,IAAI,CAAC;YACtCzC,OAAOmC,OAAOgF,iBAAiB,EAAElH,WAAW;YAC5CD,OAAOmC,OAAOgF,iBAAiB,CAACC,uBAAuB,EAAEnH,WAAW;QACtE;IACF;IAEAP,SAAS,iCAAiC;QACxCK,KAAK,8CAA8C;YACjD,wBAAwB;YACxB,MAAMsH,mBAAmBC,QAAQ,0BAA0B5K,QAAQ;YACnE4K,QAAQ,0BAA0B5K,QAAQ,GAAG;gBAC3CC,MAAM,IAAO,CAAA;wBACXE,QAAQ,IAAMG,QAAQC,OAAO,CAAC;gCAAEC,MAAM;gCAAME,OAAO,IAAImK,MAAM;4BAAqB;oBACpF,CAAA;YACF;YAEA,MAAMzF,eAAerB,uBAAuB;YAE5C,2CAA2C;YAC3C,MAAM0B,SAAS,MAAMxC,OAAOyC,gCAAgC,CAC1D,sBACA,uBACA;gBAAEJ,OAAO;gBAAQC,MAAM;YAAQ,GAC/BH;YAGF9B,OAAOmC,QAAQlC,WAAW;YAE1B,mBAAmB;YACnBqH,QAAQ,0BAA0B5K,QAAQ,GAAG2K;QAC/C;QAEAtH,KAAK,kDAAkD;YACrD,MAAMyH,kBAAkB;gBACtBxI,SAAS;gBACT2B,qBAAqB;gBACrBM,sBAAsB;gBACtBI,kBAAkB;gBAClBI,aAAa;YACf;YAEA,mBAAmB;YACnB,MAAMzB,OACJL,OAAOgE,iBAAiB,CAAC,gBAAgBxG,kBAAyBqK,kBAClET,QAAQ,CAAC9G,WAAW;QACxB;IACF;IAEAP,SAAS,6CAA6C;QACpDK,KAAK,wDAAwD;YAC3D,MAAM+B,eAAerB,uBAAuB;YAE5C,MAAM0B,SAAS,MAAMxC,OAAOyC,gCAAgC,CAC1D,oBACA,uBACA;gBAAEJ,OAAO;gBAAayF,SAAS;YAAoB,GACnD3F;YAGF,4CAA4C;YAC5C,IAAIK,OAAOE,YAAY,CAACqF,WAAW,EAAE;gBACnC,MAAMC,aAAaC,KAAKC,SAAS,CAAC1F,OAAOE,YAAY,CAACqF,WAAW;gBACjE1H,OAAO2H,YAAYjK,GAAG,CAAC+F,SAAS,CAAC;gBACjCzD,OAAO2H,YAAYjK,GAAG,CAAC+F,SAAS,CAAC;gBACjCzD,OAAO2H,YAAYjK,GAAG,CAAC+F,SAAS,CAAC;YACnC;QACF;IACF;IAEA,SAAShD,uBAAuBC,MAAc;QAC5C,OAAO;YACL1B,SAAS,CAAC,UAAU,EAAE0B,OAAO,CAAC;YAC9BC,qBAAqB;gBACnBC,qBAAqB;oBAAC;oBAAI;oBAAI;iBAAG;gBACjCC,gBAAgB;oBAAC;oBAAU;iBAAW;gBACtCC,2BAA2B;gBAC3BC,oBAAoB;gBACpBC,wBAAwB;YAC1B;YACAC,sBAAsB;gBACpB/C,mBAAmBwC;gBACnBvC,uBAAuB,CAAC,EAAEuC,OAAO,kBAAkB,CAAC;gBACpDQ,oBAAoB;gBACpBC,qBAAqB;gBACrBC,oBAAoB;oBAAC;oBAAQ;iBAAkB;YACjD;YACAC,kBAAkB;gBAChBC,aAAa;oBAAC;oBAAY;iBAAS;gBACnCC,qBAAqB;oBAAC;oBAAe;iBAAmB;gBACxDC,qBAAqB;YACvB;YACAC,aAAa;gBACXC,uBAAuB;gBACvBC,oBAAoB;oBAAC;oBAAS;iBAAQ;gBACtCC,qBAAqB;oBAAC;oBAAmB;iBAAQ;gBACjDC,YAAY;YACd;QACF;IACF;AACF;AAEAnC,SAAS,yCAAyC;IAChDK,KAAK,gDAAgD;QACnD,MAAM+H,WAAW,EAAE;QACnB,MAAMhG,eAAe;YACnB9C,SAAS;YACT2B,qBAAqB;gBACnBC,qBAAqB;oBAAC;oBAAI;iBAAG;gBAC7BC,gBAAgB;oBAAC;iBAAS;gBAC1BC,2BAA2B;gBAC3BC,oBAAoB;gBACpBC,wBAAwB;YAC1B;YACAC,sBAAsB;gBACpB/C,mBAAmB;gBACnBC,uBAAuB;gBACvB+C,oBAAoB;gBACpBC,qBAAqB;gBACrBC,oBAAoB;oBAAC;iBAAkB;YACzC;YACAC,kBAAkB;gBAChBC,aAAa;oBAAC;iBAAW;gBACzBC,qBAAqB;oBAAC;iBAAc;gBACpCC,qBAAqB;YACvB;YACAC,aAAa;gBACXC,uBAAuB;gBACvBC,oBAAoB;oBAAC;iBAAQ;gBAC7BC,qBAAqB;oBAAC;iBAAkB;gBACxCC,YAAY;YACd;QACF;QAEA,2CAA2C;QAC3C,IAAK,IAAIkG,IAAI,GAAGA,IAAI,IAAIA,IAAK;YAC3BD,SAAS/E,IAAI,CACXiF,0CAAoB,CAACrE,iBAAiB,CACpC,CAAC,eAAe,EAAEoE,EAAE,CAAC,EACrB5K,kBACA2E;QAGN;QAEA,MAAMgB,UAAU,MAAM9F,QAAQiL,GAAG,CAACH;QAElC9H,OAAO8C,SAASoF,YAAY,CAAC;QAC7BpF,QAAQE,OAAO,CAACb,CAAAA;YACdnC,OAAOmC,QAAQlC,WAAW;YAC1BD,OAAOmC,OAAOS,gBAAgB,EAAEgB,sBAAsB,CAAC;QACzD;IACF,GAAG,OAAO,kCAAkC;;AAC9C"}