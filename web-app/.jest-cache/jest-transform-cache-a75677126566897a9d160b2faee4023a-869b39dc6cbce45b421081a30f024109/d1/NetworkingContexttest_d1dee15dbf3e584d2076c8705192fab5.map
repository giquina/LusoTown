{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/contexts/NetworkingContext.test.tsx"],"sourcesContent":["import React from 'react'\nimport { renderHook, act } from '@testing-library/react'\nimport { NetworkingProvider, useNetworking } from '@/context/NetworkingContext'\nimport { portugueseTestUtils } from '../utils/test-utils'\n\n// Mock localStorage with proper Jest mock types\nconst localStorageMock = {\n  getItem: jest.fn() as jest.MockedFunction<Storage['getItem']>,\n  setItem: jest.fn() as jest.MockedFunction<Storage['setItem']>,\n  removeItem: jest.fn() as jest.MockedFunction<Storage['removeItem']>,\n  clear: jest.fn() as jest.MockedFunction<Storage['clear']>,\n  length: 0,\n  key: jest.fn() as jest.MockedFunction<Storage['key']>\n} as Storage\n\nglobal.localStorage = localStorageMock\n\ndescribe('NetworkingContext', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    localStorageMock.getItem.mockReturnValue(null)\n  })\n\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\n    <NetworkingProvider>{children}</NetworkingProvider>\n  )\n\n  it('should provide networking context', () => {\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    expect(result.current).toBeDefined()\n    expect(result.current.connections).toBeDefined()\n    expect(result.current.isLoading).toBe(false)\n  })\n\n  it('should handle mock connections data', () => {\n    localStorageMock.getItem.mockImplementation((key: string) => {\n      if (key === 'lusotown-connections') {\n        return JSON.stringify(portugueseTestUtils.mockPortugueseConnections)\n      }\n      return null\n    })\n\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    expect(result.current).toBeDefined()\n    expect(Array.isArray(result.current.connections)).toBe(true)\n  })\n\n  it('should handle connection filtering', () => {\n    localStorageMock.getItem.mockImplementation((key: string) => {\n      if (key === 'lusotown-connections') {\n        return JSON.stringify(portugueseTestUtils.mockPortugueseConnections)\n      }\n      return null\n    })\n\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    act(() => {\n      // Test filtering functionality if available\n      if (typeof result.current.filterConnections === 'function') {\n        result.current.filterConnections('premium')\n      }\n    })\n\n    expect(result.current).toBeDefined()\n  })\n\n  it('should handle connection strength updates', () => {\n    localStorageMock.getItem.mockImplementation((key: string) => {\n      if (key === 'lusotown-connections') {\n        return JSON.stringify(portugueseTestUtils.mockPortugueseConnections)\n      }\n      return null\n    })\n\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    act(() => {\n      // Test connection updates if available\n      if (typeof result.current.updateConnectionStrength === 'function') {\n        result.current.updateConnectionStrength('conn-1', 9.0)\n      }\n    })\n\n    expect(result.current).toBeDefined()\n  })\n\n  it('should handle privacy settings', () => {\n    localStorageMock.getItem.mockImplementation((key: string) => {\n      if (key === 'lusotown-privacy-settings') {\n        return JSON.stringify({ level: 'normal' })\n      }\n      return null\n    })\n\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    expect(result.current).toBeDefined()\n  })\n\n  // Portuguese community specific tests\n  it('should support Portuguese-speaking community connections', () => {\n    const mockConnection = portugueseTestUtils.mockPortugueseConnections[0]\n    \n    expect(mockConnection.connectedUser?.firstName).toBe('Maria')\n    expect(mockConnection.connectedUser?.lastName).toBe('Santos')\n    expect(mockConnection.connectionStrength).toBeGreaterThan(8)\n  })\n\n  it('should handle cultural events integration', () => {\n    localStorageMock.getItem.mockImplementation((key: string) => {\n      if (key === 'lusotown-cultural-events') {\n        return JSON.stringify(portugueseTestUtils.mockCulturalEvents)\n      }\n      return null\n    })\n\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    expect(result.current).toBeDefined()\n  })\n\n  // Test error handling\n  it('should handle localStorage errors gracefully', () => {\n    localStorageMock.getItem.mockImplementation(() => {\n      throw new Error('localStorage error')\n    })\n\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    expect(result.current).toBeDefined()\n    expect(result.current.isLoading).toBe(false)\n  })\n\n  // Test subscription integration\n  it('should integrate with premium subscriptions', () => {\n    localStorageMock.getItem.mockImplementation((key: string) => {\n      if (key === 'lusotown-subscription') {\n        return JSON.stringify(portugueseTestUtils.mockPremiumSubscription)\n      }\n      return null\n    })\n\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    expect(result.current).toBeDefined()\n  })\n\n  // Test connection management\n  it('should handle connection requests', () => {\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    act(() => {\n      if (typeof result.current.sendConnectionRequest === 'function') {\n        result.current.sendConnectionRequest('user-123')\n      }\n    })\n\n    expect(result.current).toBeDefined()\n  })\n\n  it('should handle connection acceptance', () => {\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    act(() => {\n      if (typeof result.current.acceptConnection === 'function') {\n        result.current.acceptConnection('request-123')\n      }\n    })\n\n    expect(result.current).toBeDefined()\n  })\n\n  it('should handle connection removal', () => {\n    const { result } = renderHook(() => useNetworking(), { wrapper })\n    \n    act(() => {\n      if (typeof result.current.removeConnection === 'function') {\n        result.current.removeConnection('conn-1')\n      }\n    })\n\n    expect(result.current).toBeDefined()\n  })\n})\n"],"names":["localStorageMock","getItem","jest","fn","setItem","removeItem","clear","length","key","global","localStorage","describe","beforeEach","clearAllMocks","mockReturnValue","wrapper","children","NetworkingProvider","it","result","renderHook","useNetworking","expect","current","toBeDefined","connections","isLoading","toBe","mockImplementation","JSON","stringify","portugueseTestUtils","mockPortugueseConnections","Array","isArray","act","filterConnections","updateConnectionStrength","level","mockConnection","connectedUser","firstName","lastName","connectionStrength","toBeGreaterThan","mockCulturalEvents","Error","mockPremiumSubscription","sendConnectionRequest","acceptConnection","removeConnection"],"mappings":"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"}