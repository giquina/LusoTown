6529f5e963d549529bda076bf16ea40f
"use strict";
// Mock Next.js router
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                prefetch: jest.fn()
            }),
        useSearchParams: ()=>({
                get: jest.fn()
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _performanceutils = require("../utils/performance-utils");
const _LanguageContext = require("../../src/context/LanguageContext");
const _portuguesebundleoptimizer = require("../../src/utils/portuguese-bundle-optimizer");
// Mock components for performance testing
const MockPortugueseComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "portuguese-content",
        children: "Portuguese Content"
    });
const MockEventCard = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "event-card",
        children: "Event Card"
    });
const MockCulturalGallery = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        "data-testid": "cultural-gallery",
        children: "Cultural Gallery"
    });
describe("Platform Performance Tests", ()=>{
    let performanceTester;
    beforeEach(()=>{
        performanceTester = new _performanceutils.PerformanceTester();
        // Reset any global state
        document.documentElement.className = "";
    });
    afterEach(()=>{
        performanceTester = null;
    });
    describe("Component Rendering Performance", ()=>{
        test("Portuguese content components render within performance thresholds", ()=>{
            performanceTester.startTiming();
            const component = ()=>{
                (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_LanguageContext.LanguageProvider, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(MockPortugueseComponent, {}),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(MockEventCard, {}),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(MockCulturalGallery, {})
                    ]
                }));
            };
            const renderTime = performanceTester.measureRenderTime(component);
            expect(renderTime).toBeLessThan(_performanceutils.performanceThresholds.renderTime.acceptable);
            // Verify content is rendered
            expect(_react.screen.getByTestId("portuguese-content")).toBeInTheDocument();
            expect(_react.screen.getByTestId("event-card")).toBeInTheDocument();
            expect(_react.screen.getByTestId("cultural-gallery")).toBeInTheDocument();
        });
        test("Large component trees maintain good performance", ()=>{
            const startTime = performance.now();
            // Simulate rendering multiple Portuguese components
            const components = Array.from({
                length: 50
            }, (_, i)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": `portuguese-item-${i}`,
                    children: [
                        "Portuguese Item ",
                        i
                    ]
                }, i));
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: components
                })
            }));
            const renderTime = performance.now() - startTime;
            expect(renderTime).toBeLessThan(_performanceutils.performanceThresholds.renderTime.poor);
            // Verify all components rendered
            expect(_react.screen.getAllByText(/Portuguese Item/)).toHaveLength(50);
        });
    });
    describe("Bundle Optimization Performance", ()=>{
        test("Portuguese bundle optimizer initializes quickly", ()=>{
            const startTime = performance.now();
            // Simulate optimizer initialization
            const stats = _portuguesebundleoptimizer.portugueseBundleOptimizer.getOptimizationStats();
            const initTime = performance.now() - startTime;
            expect(initTime).toBeLessThan(100); // Should initialize in < 100ms
            expect(stats).toHaveProperty("loadedBundles");
            expect(stats).toHaveProperty("preloadedResources");
            expect(stats).toHaveProperty("deviceContext");
        });
        test("Critical Portuguese content loading is fast", async ()=>{
            const startTime = performance.now();
            // Mock Portuguese bundle loading
            await _portuguesebundleoptimizer.portugueseBundleOptimizer.loadPortugueseContentBundle("critical");
            const loadTime = performance.now() - startTime;
            expect(loadTime).toBeLessThan(_performanceutils.performanceThresholds.loadTime.good);
        });
        test("Non-critical content loading is properly deferred", async ()=>{
            const startTime = performance.now();
            // Test that low priority content doesn't block critical loading
            const criticalPromise = _portuguesebundleoptimizer.portugueseBundleOptimizer.loadPortugueseContentBundle("critical");
            const lowPriorityPromise = _portuguesebundleoptimizer.portugueseBundleOptimizer.loadPortugueseContentBundle("low");
            // Critical should complete first
            await criticalPromise;
            const criticalTime = performance.now() - startTime;
            await lowPriorityPromise;
            const totalTime = performance.now() - startTime;
            expect(criticalTime).toBeLessThan(_performanceutils.performanceThresholds.loadTime.good);
            expect(totalTime).toBeGreaterThan(criticalTime); // Low priority takes longer
        });
    });
    describe("Mobile Performance Optimization", ()=>{
        beforeEach(()=>{
            // Mock mobile viewport
            Object.defineProperty(window, "innerWidth", {
                writable: true,
                configurable: true,
                value: 375
            });
            // Mock mobile connection
            Object.defineProperty(navigator, "connection", {
                writable: true,
                configurable: true,
                value: {
                    effectiveType: "3g",
                    saveData: false
                }
            });
        });
        test("Mobile optimizations apply within performance budget", ()=>{
            const startTime = performance.now();
            _portuguesebundleoptimizer.portugueseBundleOptimizer.optimizeForMobile();
            const optimizationTime = performance.now() - startTime;
            expect(optimizationTime).toBeLessThan(50); // Should be very fast
            // Check mobile optimizations were applied
            const stats = _portuguesebundleoptimizer.portugueseBundleOptimizer.getOptimizationStats();
            expect(stats.optimizationsApplied).toContain("mobile-optimized");
        });
        test("Touch targets meet minimum size requirements", ()=>{
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "touch-button",
                        children: "Portuguese Button"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                        href: "#",
                        role: "button",
                        "data-testid": "touch-link",
                        children: "Portuguese Link"
                    })
                ]
            }));
            _portuguesebundleoptimizer.portugueseBundleOptimizer.optimizeForMobile();
            const button = _react.screen.getByTestId("touch-button");
            const link = _react.screen.getByTestId("touch-link");
            // Check computed styles would have minimum dimensions
            // (In real environment, this would check actual computed styles)
            expect(button).toBeInTheDocument();
            expect(link).toBeInTheDocument();
        });
    });
    describe("Portuguese Content Loading Performance", ()=>{
        test("Portuguese text rendering is optimized", ()=>{
            const portugueseText = "Bem-vindos � comunidade portuguesa do Reino Unido! Aqui voc� encontrar� eventos culturais aut�nticos.";
            const startTime = performance.now();
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                            children: portugueseText
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            children: 'Comunidade " Cultura " Tradi��o'
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                            children: 'S�o Jo�o " Fado " Bacalhau'
                        })
                    ]
                })
            }));
            const renderTime = performance.now() - startTime;
            expect(renderTime).toBeLessThan(_performanceutils.performanceThresholds.renderTime.good);
            // Verify Portuguese content is rendered
            expect(_react.screen.getByText(portugueseText)).toBeInTheDocument();
            expect(_react.screen.getByText('Comunidade " Cultura " Tradi��o')).toBeInTheDocument();
        });
        test("Cultural categories load with appropriate priorities", async ()=>{
            const categories = [
                "events",
                "cultural",
                "business",
                "community",
                "heritage"
            ];
            const loadTimes = {};
            for (const category of categories){
                const startTime = performance.now();
                // Simulate loading content for each category
                await new Promise((resolve)=>setTimeout(resolve, Math.random() * 10));
                loadTimes[category] = performance.now() - startTime;
            }
            // All categories should load within acceptable time
            Object.values(loadTimes).forEach((time)=>{
                expect(time).toBeLessThan(50); // Very fast mock loading
            });
            // Verify all categories processed
            expect(Object.keys(loadTimes)).toHaveLength(5);
        });
    });
    describe("Memory Performance", ()=>{
        test("Component cleanup prevents memory leaks", ()=>{
            const initialMemory = performance.memory?.usedJSHeapSize || 0;
            // Render and unmount many components
            for(let i = 0; i < 100; i++){
                const { unmount } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockPortugueseComponent, {})
                }));
                unmount();
            }
            const finalMemory = performance.memory?.usedJSHeapSize || 0;
            const memoryIncrease = finalMemory - initialMemory;
            // Memory increase should be reasonable (less than 5MB)
            expect(memoryIncrease).toBeLessThan(5 * 1024 * 1024);
        });
        test("Large Portuguese content sets handle memory efficiently", ()=>{
            const largeDataSet = Array.from({
                length: 1000
            }, (_, i)=>({
                    id: i,
                    title: `Evento Portugu�s ${i}`,
                    description: "Descri��o do evento cultural portugu�s na comunidade",
                    category: "cultural"
                }));
            const startTime = performance.now();
            const initialMemory = performance.memory?.usedJSHeapSize || 0;
            (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: largeDataSet.slice(0, 50).map((item)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            "data-testid": `event-${item.id}`,
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                    children: item.title
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                    children: item.description
                                })
                            ]
                        }, item.id))
                })
            }));
            const renderTime = performance.now() - startTime;
            const finalMemory = performance.memory?.usedJSHeapSize || 0;
            expect(renderTime).toBeLessThan(_performanceutils.performanceThresholds.renderTime.acceptable);
            expect(finalMemory - initialMemory).toBeLessThan(2 * 1024 * 1024); // Less than 2MB
            // Verify content rendered
            expect(_react.screen.getByTestId("event-0")).toBeInTheDocument();
            expect(_react.screen.getByTestId("event-49")).toBeInTheDocument();
        });
    });
    describe("Network-Aware Performance", ()=>{
        test("Slow connection triggers appropriate optimizations", ()=>{
            // Mock slow connection
            Object.defineProperty(navigator, "connection", {
                writable: true,
                configurable: true,
                value: {
                    effectiveType: "2g",
                    saveData: true
                }
            });
            const startTime = performance.now();
            _portuguesebundleoptimizer.portugueseBundleOptimizer.optimizeForMobile();
            const optimizationTime = performance.now() - startTime;
            expect(optimizationTime).toBeLessThan(100);
            const stats = _portuguesebundleoptimizer.portugueseBundleOptimizer.getOptimizationStats();
            expect(stats.optimizationsApplied).toContain("data-saver");
        });
        test("Fast connection allows full feature loading", ()=>{
            // Mock fast connection
            Object.defineProperty(navigator, "connection", {
                writable: true,
                configurable: true,
                value: {
                    effectiveType: "4g",
                    saveData: false
                }
            });
            const stats = _portuguesebundleoptimizer.portugueseBundleOptimizer.getOptimizationStats();
            // Fast connections should not have data-saver optimizations
            expect(stats.optimizationsApplied).not.toContain("data-saver");
        });
    });
    describe("Performance Metrics Collection", ()=>{
        test("Performance metrics are collected efficiently", ()=>{
            const metrics = performanceTester.getMetrics();
            expect(metrics).toHaveProperty("loadTime");
            expect(metrics).toHaveProperty("renderTime");
            expect(metrics).toHaveProperty("interactionTime");
            expect(metrics).toHaveProperty("memoryUsage");
            expect(metrics).toHaveProperty("networkRequests");
            expect(metrics).toHaveProperty("cacheHitRate");
            // All metrics should be numbers
            Object.values(metrics).forEach((value)=>{
                expect(typeof value).toBe("number");
            });
        });
        test("Performance thresholds are within acceptable ranges", ()=>{
            expect(_performanceutils.performanceThresholds.loadTime.excellent).toBeLessThan(_performanceutils.performanceThresholds.loadTime.good);
            expect(_performanceutils.performanceThresholds.loadTime.good).toBeLessThan(_performanceutils.performanceThresholds.loadTime.acceptable);
            expect(_performanceutils.performanceThresholds.loadTime.acceptable).toBeLessThan(_performanceutils.performanceThresholds.loadTime.poor);
            expect(_performanceutils.performanceThresholds.renderTime.excellent).toBeLessThan(_performanceutils.performanceThresholds.renderTime.good);
            expect(_performanceutils.performanceThresholds.renderTime.good).toBeLessThan(_performanceutils.performanceThresholds.renderTime.acceptable);
            // Mobile thresholds should be reasonable
            expect(_performanceutils.performanceThresholds.mobile.touchResponseTime.excellent).toBeLessThan(50);
        });
    });
});
describe("Portuguese-Specific Performance Tests", ()=>{
    test("Portuguese diacritics render without performance penalty", ()=>{
        const textWithDiacritics = [
            "A��o",
            "Cora��o",
            "Jo�o",
            "S�o Paulo",
            "Tradi��o",
            "Informa��o",
            "Organiza��o",
            "Na��o",
            "Educa��o",
            "Constru��o"
        ];
        const startTime = performance.now();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LanguageContext.LanguageProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: textWithDiacritics.map((text, i)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                        "data-testid": `diacritic-${i}`,
                        children: text
                    }, i))
            })
        }));
        const renderTime = performance.now() - startTime;
        expect(renderTime).toBeLessThan(_performanceutils.performanceThresholds.renderTime.good);
        // Verify all diacritics rendered correctly
        textWithDiacritics.forEach((text, i)=>{
            expect(_react.screen.getByTestId(`diacritic-${i}`)).toHaveTextContent(text);
        });
    });
    test("Portuguese flag colors render efficiently", ()=>{
        const portugalColors = [
            "#006600",
            "#FF0000",
            "#FFD700"
        ]; // Green, Red, Gold
        const startTime = performance.now();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: portugalColors.map((color, i)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": `color-${i}`,
                    style: {
                        backgroundColor: color,
                        width: 100,
                        height: 50
                    },
                    children: [
                        "Portuguese Color ",
                        i + 1
                    ]
                }, i))
        }));
        const renderTime = performance.now() - startTime;
        expect(renderTime).toBeLessThan(_performanceutils.performanceThresholds.renderTime.good);
        // Verify all colors rendered
        portugalColors.forEach((_, i)=>{
            expect(_react.screen.getByTestId(`color-${i}`)).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,