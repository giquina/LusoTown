{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/performance/analytics-performance.test.ts"],"sourcesContent":["/**\n * Production Performance Tests for Predictive Community Analytics\n * Tests performance under realistic load conditions for luxury Portuguese-speaking community\n */\n\nimport { PredictiveCommunityAnalytics } from '@/lib/ai/PredictiveCommunityAnalytics'\n\ndescribe('Analytics Performance Tests', () => {\n  let analytics: PredictiveCommunityAnalytics\n  \n  beforeEach(() => {\n    analytics = new PredictiveCommunityAnalytics()\n  })\n\n  describe('Response Time Performance', () => {\n    it('should predict community trends within 2 seconds', async () => {\n      const startTime = performance.now()\n      \n      const trends = await analytics.predictCommunityTrends('month')\n      \n      const duration = performance.now() - startTime\n      expect(duration).toBeLessThan(2000) // 2 seconds max\n      expect(trends).toBeDefined()\n    })\n\n    it('should predict event success within 1.5 seconds', async () => {\n      const eventDetails = {\n        type: 'cultural_festival',\n        date: new Date('2025-06-15'),\n        time: '19:00',\n        location: 'central_london',\n        culturalTheme: 'fado',\n        targetAudience: ['business_professionals', 'cultural_enthusiasts'],\n        price: 45,\n        capacity: 200,\n        luxuryLevel: 'premium' as const,\n        culturalAuthenticity: 8\n      }\n\n      const startTime = performance.now()\n      \n      const prediction = await analytics.predictEventSuccess(eventDetails)\n      \n      const duration = performance.now() - startTime\n      expect(duration).toBeLessThan(1500) // 1.5 seconds max\n      expect(prediction.successProbability).toBeDefined()\n    })\n\n    it('should analyze community health within 3 seconds', async () => {\n      const startTime = performance.now()\n      \n      const health = await analytics.analyzeCommunityHealth()\n      \n      const duration = performance.now() - startTime\n      expect(duration).toBeLessThan(3000) // 3 seconds max\n      expect(health.overallHealth).toBeDefined()\n    })\n  })\n\n  describe('Cache Performance', () => {\n    it('should significantly improve performance on cached requests', async () => {\n      const privacySettings = {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      }\n\n      // First request - no cache\n      const start1 = performance.now()\n      await analytics.predictCommunityTrends('week', 'performance_user', privacySettings)\n      const uncachedDuration = performance.now() - start1\n\n      // Second request - with cache\n      const start2 = performance.now()\n      await analytics.predictCommunityTrends('week', 'performance_user', privacySettings)\n      const cachedDuration = performance.now() - start2\n\n      // Cached request should be at least 50% faster\n      expect(cachedDuration).toBeLessThan(uncachedDuration * 0.5)\n      expect(cachedDuration).toBeLessThan(100) // Should be under 100ms\n    })\n\n    it('should handle cache eviction efficiently', async () => {\n      const privacySettings = {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      }\n\n      // Fill cache with multiple entries\n      const promises = Array.from({ length: 20 }, (_, i) =>\n        analytics.predictCommunityTrends('month', `cache_user_${i}`, privacySettings)\n      )\n\n      const startTime = performance.now()\n      await Promise.all(promises)\n      const duration = performance.now() - startTime\n\n      // Should handle 20 concurrent requests efficiently\n      expect(duration).toBeLessThan(5000) // 5 seconds total\n    })\n  })\n\n  describe('Concurrent Load Performance', () => {\n    it('should handle multiple concurrent trend predictions', async () => {\n      const concurrentRequests = 15\n      const promises = Array.from({ length: concurrentRequests }, (_, i) => {\n        const timeframe = i % 2 === 0 ? 'week' : 'month'\n        return analytics.predictCommunityTrends(timeframe as 'week' | 'month')\n      })\n\n      const startTime = performance.now()\n      const results = await Promise.all(promises)\n      const totalDuration = performance.now() - startTime\n\n      // All requests should complete\n      expect(results).toHaveLength(concurrentRequests)\n      results.forEach(result => expect(result).toBeDefined())\n\n      // Average time per request should be reasonable\n      const avgDuration = totalDuration / concurrentRequests\n      expect(avgDuration).toBeLessThan(1000) // Average under 1 second\n    })\n\n    it('should handle mixed analytics operations concurrently', async () => {\n      const eventDetails = {\n        type: 'business_networking',\n        date: new Date('2025-07-10'),\n        time: '18:30',\n        location: 'central_london',\n        culturalTheme: 'professional_portuguese',\n        targetAudience: ['entrepreneurs', 'business_executives'],\n        price: 65,\n        capacity: 120,\n        luxuryLevel: 'premium' as const,\n        culturalAuthenticity: 7\n      }\n\n      const operations = [\n        analytics.predictCommunityTrends('season'),\n        analytics.predictEventSuccess(eventDetails),\n        analytics.analyzeCommunityHealth(),\n        analytics.predictCommunityTrends('year'),\n        analytics.generateOptimalEventTiming('cultural_festival', 'fado', ['professionals'])\n      ]\n\n      const startTime = performance.now()\n      const results = await Promise.all(operations)\n      const totalDuration = performance.now() - startTime\n\n      expect(results).toHaveLength(5)\n      expect(totalDuration).toBeLessThan(8000) // 8 seconds total for all operations\n      results.forEach(result => expect(result).toBeDefined())\n    })\n  })\n\n  describe('Memory Performance', () => {\n    it('should not leak memory during repeated operations', async () => {\n      // Record initial memory if available\n      const initialMemory = (global as any).gc ? process.memoryUsage().heapUsed : null\n\n      // Perform many operations\n      const iterations = 100\n      for (let i = 0; i < iterations; i++) {\n        await analytics.predictCommunityTrends('week')\n        \n        // Every 25 iterations, check if we can force garbage collection\n        if (i % 25 === 0 && (global as any).gc) {\n          (global as any).gc()\n        }\n      }\n\n      // Check final memory if available\n      if (initialMemory && (global as any).gc) {\n        (global as any).gc()\n        const finalMemory = process.memoryUsage().heapUsed\n        const memoryGrowth = finalMemory - initialMemory\n        \n        // Memory growth should be reasonable (less than 50MB)\n        expect(memoryGrowth).toBeLessThan(50 * 1024 * 1024) // 50MB\n      }\n      \n      // At minimum, verify operations still work after many iterations\n      const finalTrends = await analytics.predictCommunityTrends('month')\n      expect(finalTrends).toBeDefined()\n    })\n\n    it('should efficiently manage cache memory', async () => {\n      const privacySettings = {\n        analyticsConsent: true,\n        personalizedRecommendations: true,\n        communityInsights: true,\n        marketingAnalytics: false\n      }\n\n      // Create many cache entries\n      const cacheEntries = 50\n      const promises = Array.from({ length: cacheEntries }, (_, i) =>\n        analytics.predictCommunityTrends('week', `memory_test_${i}`, privacySettings)\n      )\n\n      await Promise.all(promises)\n\n      // Verify cache is working but not unlimited\n      const cacheSize = (analytics as any).predictionCache.size\n      expect(cacheSize).toBeGreaterThan(0)\n      expect(cacheSize).toBeLessThanOrEqual(cacheEntries * 1.1) // Allow some overhead\n    })\n  })\n\n  describe('Data Volume Performance', () => {\n    it('should handle large community datasets efficiently', async () => {\n      // Simulate large community by mocking memberData\n      const largeMemberDataSize = 5000\n      const mockMemberData = new Map()\n      \n      for (let i = 0; i < largeMemberDataSize; i++) {\n        mockMemberData.set(`user_${i}`, {\n          id: `user_${i}`,\n          profile: {\n            region: i % 2 === 0 ? 'portugal' : 'brazil',\n            saudadeIntensity: Math.floor(Math.random() * 10) + 1,\n            culturalMaintenance: Math.floor(Math.random() * 10) + 1,\n            premiumEngagementLevel: 'standard'\n          },\n          engagement: {\n            eventAttendance: Math.floor(Math.random() * 20),\n            culturalContentEngagement: Math.floor(Math.random() * 100)\n          },\n          demographics: {\n            age: 25 + Math.floor(Math.random() * 40),\n            profession: 'professional'\n          }\n        })\n      }\n\n      // Replace memberData for this test\n      ;(analytics as any).memberData = mockMemberData\n\n      const startTime = performance.now()\n      const health = await analytics.analyzeCommunityHealth()\n      const duration = performance.now() - startTime\n\n      expect(health).toBeDefined()\n      expect(duration).toBeLessThan(10000) // Should handle 5000 members within 10 seconds\n    })\n\n    it('should process complex cultural calendars efficiently', async () => {\n      // Create large cultural calendar\n      const culturalEvents = Array.from({ length: 365 }, (_, i) => ({\n        name: `Event_${i}`,\n        date: new Date(2025, 0, 1 + i), // Full year of events\n        type: i % 3 === 0 ? 'cultural_festival' : i % 3 === 1 ? 'fado_night' : 'business_networking',\n        luxuryLevel: 'standard' as const,\n        targetAudience: ['community'],\n        culturalSignificance: Math.floor(Math.random() * 10) + 1\n      }))\n\n      ;(analytics as any).culturalCalendar = culturalEvents\n\n      const startTime = performance.now()\n      const timing = analytics.generateOptimalEventTiming(\n        'cultural_festival',\n        'portuguese_heritage',\n        ['families', 'professionals']\n      )\n      const duration = performance.now() - startTime\n\n      expect(timing).toBeDefined()\n      expect(duration).toBeLessThan(2000) // Should handle 365 events within 2 seconds\n    })\n  })\n\n  describe('Error Handling Performance', () => {\n    it('should fail fast on invalid inputs', async () => {\n      const startTime = performance.now()\n      \n      try {\n        await analytics.predictUserChurn('nonexistent-user')\n      } catch (error) {\n        const duration = performance.now() - startTime\n        expect(duration).toBeLessThan(100) // Should fail within 100ms\n        expect(error.message).toContain('User not found')\n      }\n    })\n\n    it('should handle partial failures gracefully without degrading performance', async () => {\n      // Mock some internal method to fail\n      const originalMethod = (analytics as any).analyzeCulturalInterestTrends\n      ;(analytics as any).analyzeCulturalInterestTrends = jest.fn().mockRejectedValue(\n        new Error('Simulated failure')\n      )\n\n      const startTime = performance.now()\n      \n      try {\n        const trends = await analytics.predictCommunityTrends('month')\n        const duration = performance.now() - startTime\n        \n        // Should still return partial results quickly\n        expect(duration).toBeLessThan(3000)\n        expect(trends).toBeDefined()\n      } finally {\n        // Restore original method\n        ;(analytics as any).analyzeCulturalInterestTrends = originalMethod\n      }\n    })\n  })\n\n  describe('Production Load Simulation', () => {\n    it('should handle realistic Portuguese-speaking community load', async () => {\n      // Simulate realistic load:\n      // - 750 community members\n      // - Peak usage: 50 concurrent users\n      // - Mixed operations typical for Portuguese-speaking community\n\n      const peakConcurrentUsers = 50\n      const operations = []\n\n      // Simulate typical Portuguese-speaking community usage patterns\n      for (let i = 0; i < peakConcurrentUsers; i++) {\n        const userId = `portuguese_user_${i}`\n        const operationType = i % 4\n\n        switch (operationType) {\n          case 0: // Community trends\n            operations.push(analytics.predictCommunityTrends('month', userId, {\n              analyticsConsent: true,\n              personalizedRecommendations: true,\n              communityInsights: true,\n              marketingAnalytics: Math.random() > 0.5\n            }))\n            break\n          \n          case 1: // Event predictions\n            operations.push(analytics.predictEventSuccess({\n              type: 'fado_night',\n              date: new Date('2025-08-15'),\n              time: '20:00',\n              location: 'south_london',\n              culturalTheme: 'fado',\n              targetAudience: ['cultural_enthusiasts'],\n              price: 35,\n              capacity: 80,\n              luxuryLevel: 'standard' as const,\n              culturalAuthenticity: 9\n            }))\n            break\n          \n          case 2: // Community health\n            operations.push(analytics.analyzeCommunityHealth())\n            break\n          \n          case 3: // Event timing\n            operations.push(analytics.generateOptimalEventTiming(\n              'cultural_celebration',\n              'portuguese_heritage',\n              ['families']\n            ))\n            break\n        }\n      }\n\n      const startTime = performance.now()\n      const results = await Promise.allSettled(operations)\n      const totalDuration = performance.now() - startTime\n\n      // Count successful operations\n      const successful = results.filter(r => r.status === 'fulfilled').length\n      const failed = results.filter(r => r.status === 'rejected').length\n\n      // Performance expectations for production load\n      expect(totalDuration).toBeLessThan(15000) // 15 seconds for 50 concurrent operations\n      expect(successful).toBeGreaterThan(peakConcurrentUsers * 0.9) // 90%+ success rate\n      expect(failed).toBeLessThan(peakConcurrentUsers * 0.1) // Less than 10% failures\n\n      // Average response time should be acceptable\n      const avgResponseTime = totalDuration / peakConcurrentUsers\n      expect(avgResponseTime).toBeLessThan(500) // Average under 500ms per operation\n    })\n  })\n\n  describe('Scalability Metrics', () => {\n    it('should maintain performance as community grows', async () => {\n      const communitySizes = [100, 500, 1000, 2500]\n      const performanceResults = []\n\n      for (const size of communitySizes) {\n        // Mock community of given size\n        const mockMembers = new Map()\n        for (let i = 0; i < size; i++) {\n          mockMembers.set(`user_${i}`, {\n            id: `user_${i}`,\n            profile: { region: 'portugal', saudadeIntensity: 5 },\n            engagement: { culturalContentEngagement: 70 }\n          })\n        }\n        ;(analytics as any).memberData = mockMembers\n\n        const startTime = performance.now()\n        await analytics.analyzeCommunityHealth()\n        const duration = performance.now() - startTime\n\n        performanceResults.push({ size, duration })\n      }\n\n      // Performance should scale reasonably (not exponentially)\n      const smallCommunity = performanceResults.find(r => r.size === 100)\n      const largeCommunity = performanceResults.find(r => r.size === 2500)\n\n      // Large community (25x size) should not take more than 10x time\n      const performanceRatio = largeCommunity.duration / smallCommunity.duration\n      expect(performanceRatio).toBeLessThan(10)\n    })\n  })\n})"],"names":["describe","analytics","beforeEach","PredictiveCommunityAnalytics","it","startTime","performance","now","trends","predictCommunityTrends","duration","expect","toBeLessThan","toBeDefined","eventDetails","type","date","Date","time","location","culturalTheme","targetAudience","price","capacity","luxuryLevel","culturalAuthenticity","prediction","predictEventSuccess","successProbability","health","analyzeCommunityHealth","overallHealth","privacySettings","analyticsConsent","personalizedRecommendations","communityInsights","marketingAnalytics","start1","uncachedDuration","start2","cachedDuration","promises","Array","from","length","_","i","Promise","all","concurrentRequests","timeframe","results","totalDuration","toHaveLength","forEach","result","avgDuration","operations","generateOptimalEventTiming","initialMemory","global","gc","process","memoryUsage","heapUsed","iterations","finalMemory","memoryGrowth","finalTrends","cacheEntries","cacheSize","predictionCache","size","toBeGreaterThan","toBeLessThanOrEqual","largeMemberDataSize","mockMemberData","Map","set","id","profile","region","saudadeIntensity","Math","floor","random","culturalMaintenance","premiumEngagementLevel","engagement","eventAttendance","culturalContentEngagement","demographics","age","profession","memberData","culturalEvents","name","culturalSignificance","culturalCalendar","timing","predictUserChurn","error","message","toContain","originalMethod","analyzeCulturalInterestTrends","jest","fn","mockRejectedValue","Error","peakConcurrentUsers","userId","operationType","push","allSettled","successful","filter","r","status","failed","avgResponseTime","communitySizes","performanceResults","mockMembers","smallCommunity","find","largeCommunity","performanceRatio"],"mappings":"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"}