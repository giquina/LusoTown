{"version":3,"sources":["/workspaces/LusoTown/web-app/__tests__/lusobot/lusobot-performance.test.ts"],"sourcesContent":["/**\n * LusoBot Performance and Rate Limiting Tests\n * \n * Production-focused performance tests for the LusoBot AI assistant,\n * including mobile optimization, memory management, and rate limiting.\n */\n\nimport { performance } from 'perf_hooks'\nimport { \n  LusoBotEngine, \n  SaudadeEngine, \n  LusoBotSession,\n  type MessageMetadata \n} from '@/lib/lusobot-engine'\n\ndescribe('LusoBot Performance Tests', () => {\n\n  const mockUserContext: MessageMetadata = {\n    userRegion: 'diaspora_uk',\n    communityLevel: 'active',\n    languageProficiency: 'native',\n    interests: ['culture', 'food'],\n    mood: 'curious'\n  }\n\n  describe('Response Time Performance', () => {\n    test('should respond to simple queries within 500ms', async () => {\n      const startTime = performance.now()\n      \n      await LusoBotEngine.generateResponse(\n        'Hello, how are you?',\n        mockUserContext,\n        'en'\n      )\n      \n      const responseTime = performance.now() - startTime\n      expect(responseTime).toBeLessThan(500) // 500ms threshold\n    })\n\n    test('should respond to complex Portuguese cultural queries within 1000ms', async () => {\n      const startTime = performance.now()\n      \n      await LusoBotEngine.generateResponse(\n        'Conte-me sobre a história do fado em Coimbra e como se diferencia do fado de Lisboa, especialmente durante o século XIX',\n        mockUserContext,\n        'pt'\n      )\n      \n      const responseTime = performance.now() - startTime\n      expect(responseTime).toBeLessThan(1000) // 1s threshold for complex queries\n    })\n\n    test('should handle rapid sequential requests efficiently', async () => {\n      const session = new LusoBotSession(mockUserContext, 'en')\n      const queries = [\n        'Hello',\n        'Tell me about Portuguese food',\n        'What about fado music?',\n        'I miss home',\n        'Where can I find Portuguese events?'\n      ]\n\n      const startTime = performance.now()\n      \n      for (const query of queries) {\n        await session.sendMessage(query)\n      }\n      \n      const totalTime = performance.now() - startTime\n      const averageTime = totalTime / queries.length\n      \n      expect(averageTime).toBeLessThan(600) // Average response time under 600ms\n      expect(totalTime).toBeLessThan(4000) // Total time under 4 seconds\n    })\n\n    test('should maintain consistent performance under load', async () => {\n      const concurrentRequests = 10\n      const promises: Promise<any>[] = []\n      \n      const startTime = performance.now()\n      \n      for (let i = 0; i < concurrentRequests; i++) {\n        promises.push(\n          LusoBotEngine.generateResponse(\n            `Concurrent request ${i + 1}`,\n            mockUserContext,\n            'en'\n          )\n        )\n      }\n      \n      const responses = await Promise.all(promises)\n      const totalTime = performance.now() - startTime\n      \n      expect(responses.length).toBe(concurrentRequests)\n      expect(totalTime).toBeLessThan(2000) // Should handle 10 concurrent requests in under 2s\n      \n      responses.forEach(response => {\n        expect(response.content).toBeDefined()\n        expect(response.content.length).toBeGreaterThan(0)\n      })\n    })\n  })\n\n  describe('Saudade Detection Performance', () => {\n    test('should detect saudade in under 50ms', () => {\n      const testMessages = [\n        'Tenho muitas saudades de casa',\n        'I really miss Portugal and my family',\n        'Estou com saudades da minha terra natal',\n        'Feeling homesick today',\n        'Miss the Portuguese-speaking community'\n      ]\n      \n      testMessages.forEach(message => {\n        const startTime = performance.now()\n        \n        const result = SaudadeEngine.detectSaudade(message, 'pt')\n        \n        const detectionTime = performance.now() - startTime\n        \n        expect(detectionTime).toBeLessThan(50) // Under 50ms\n        expect(result).toBeDefined()\n        expect(typeof result.saudade).toBe('number')\n      })\n    })\n\n    test('should handle large text inputs efficiently', () => {\n      const largeMessage = 'Tenho saudades de casa. '.repeat(100) // 2300+ characters\n      \n      const startTime = performance.now()\n      \n      const result = SaudadeEngine.detectSaudade(largeMessage, 'pt')\n      \n      const detectionTime = performance.now() - startTime\n      \n      expect(detectionTime).toBeLessThan(100) // Should handle large text under 100ms\n      expect(result.saudade).toBeGreaterThan(0.5)\n    })\n\n    test('should generate emotional responses quickly', () => {\n      const highSaudadeTone = {\n        saudade: 0.9,\n        nostalgia: 0.8,\n        hope: 0.3,\n        community: 0.6,\n        heritage: 0.7\n      }\n      \n      const startTime = performance.now()\n      \n      const response = SaudadeEngine.generateSaudadeResponse(highSaudadeTone, 'pt')\n      \n      const responseTime = performance.now() - startTime\n      \n      expect(responseTime).toBeLessThan(10) // Should generate response under 10ms\n      expect(response.length).toBeGreaterThan(50)\n    })\n  })\n\n  describe('Memory Usage Optimization', () => {\n    test('should not leak memory in long conversations', async () => {\n      const session = new LusoBotSession(mockUserContext, 'en')\n      \n      // Simulate a long conversation\n      const messageCount = 50\n      const messages = Array.from({ length: messageCount }, (_, i) => \n        `Message number ${i + 1} about Portuguese culture`\n      )\n      \n      for (const message of messages) {\n        await session.sendMessage(message)\n        \n        // Check that memory doesn't grow excessively\n        const conversationData = session.getMessages()\n        expect(conversationData.length).toBeLessThanOrEqual(messageCount + 1) // +1 for welcome message\n        \n        // Verify each message has proper cleanup\n        conversationData.forEach(msg => {\n          expect(msg.id).toBeDefined()\n          expect(msg.timestamp).toBeInstanceOf(Date)\n        })\n      }\n    })\n\n    test('should efficiently handle session export without memory bloat', () => {\n      const session = new LusoBotSession(mockUserContext, 'pt')\n      \n      // Add multiple messages\n      const promises = Array.from({ length: 20 }, (_, i) => \n        session.sendMessage(`Test message ${i + 1}`)\n      )\n      \n      return Promise.all(promises).then(() => {\n        const startTime = performance.now()\n        \n        const exported = session.exportConversation()\n        \n        const exportTime = performance.now() - startTime\n        \n        expect(exportTime).toBeLessThan(100) // Export should be fast\n        expect(exported.length).toBeGreaterThan(1000) // Should contain substantial data\n        \n        // Verify JSON is valid\n        const parsed = JSON.parse(exported)\n        expect(parsed.messages).toBeDefined()\n        expect(parsed.userContext).toBeDefined()\n      })\n    })\n\n    test('should cleanup resources properly', () => {\n      // Test multiple session creation and destruction\n      const sessions = Array.from({ length: 10 }, (_, i) => \n        new LusoBotSession(\n          { ...mockUserContext, mood: `test_${i}` as any },\n          i % 2 === 0 ? 'en' : 'pt'\n        )\n      )\n      \n      sessions.forEach((session, index) => {\n        const messages = session.getMessages()\n        expect(messages.length).toBe(1) // Welcome message only\n        expect(messages[0].role).toBe('assistant')\n      })\n      \n      // Sessions should be independent\n      expect(sessions[0].getMessages()[0].language).toBe('en')\n      expect(sessions[1].getMessages()[0].language).toBe('pt')\n    })\n  })\n\n  describe('Cultural Context Performance', () => {\n    test('should identify cultural context quickly', () => {\n      const testCases = [\n        { message: 'Quero comer bacalhau', expected: 'cuisine' },\n        { message: 'Tell me about fado music', expected: 'fado' },\n        { message: 'Portuguese business culture', expected: 'business' },\n        { message: 'Sou do Porto', expected: 'north' },\n        { message: 'Festa de São João', expected: 'festivals' }\n      ]\n      \n      testCases.forEach(({ message, expected }) => {\n        const startTime = performance.now()\n        \n        // Access private method for testing\n        const result = (LusoBotEngine as any).identifyCulturalContext(message, 'pt')\n        \n        const identificationTime = performance.now() - startTime\n        \n        expect(identificationTime).toBeLessThan(20) // Under 20ms\n        expect(result.confidence).toBeGreaterThan(0.3)\n      })\n    })\n\n    test('should handle mixed language content efficiently', () => {\n      const mixedMessage = 'I love Portuguese comida, especially bacalhau à Brás and pastéis de nata'\n      \n      const startTime = performance.now()\n      \n      const result = (LusoBotEngine as any).identifyCulturalContext(mixedMessage, 'en')\n      \n      const identificationTime = performance.now() - startTime\n      \n      expect(identificationTime).toBeLessThan(30)\n      expect(result.topic).toBe('cuisine')\n    })\n  })\n\n  describe('Suggestion Generation Performance', () => {\n    test('should generate suggestions within performance budget', async () => {\n      const startTime = performance.now()\n      \n      const response = await LusoBotEngine.generateResponse(\n        'I need help with Portuguese-speaking community events',\n        mockUserContext,\n        'en'\n      )\n      \n      const totalTime = performance.now() - startTime\n      \n      expect(totalTime).toBeLessThan(800) // Total response under 800ms\n      expect(response.suggestions).toBeDefined()\n      expect(response.suggestions!.length).toBeGreaterThan(0)\n      expect(response.suggestions!.length).toBeLessThanOrEqual(4) // Reasonable suggestion count\n      \n      // Verify suggestion quality doesn't compromise performance\n      response.suggestions!.forEach(suggestion => {\n        expect(suggestion.title.length).toBeGreaterThan(5)\n        expect(suggestion.description.length).toBeGreaterThan(10)\n        expect(suggestion.culturalRelevance).toBeGreaterThan(0)\n      })\n    })\n\n    test('should prioritize suggestions efficiently', async () => {\n      const response = await LusoBotEngine.generateResponse(\n        'Feeling very homesick, need community support and cultural events',\n        { ...mockUserContext, mood: 'homesick' },\n        'en'\n      )\n      \n      expect(response.suggestions).toBeDefined()\n      \n      if (response.suggestions!.length > 1) {\n        // Should be sorted by priority and cultural relevance\n        const suggestions = response.suggestions!\n        \n        for (let i = 0; i < suggestions.length - 1; i++) {\n          const current = suggestions[i]\n          const next = suggestions[i + 1]\n          \n          const currentScore = current.culturalRelevance\n          const nextScore = next.culturalRelevance\n          \n          // Allow for equal scores but generally should be descending\n          expect(currentScore).toBeGreaterThanOrEqual(nextScore - 0.1)\n        }\n      }\n    })\n  })\n\n  describe('Error Recovery Performance', () => {\n    test('should handle errors without degrading performance', async () => {\n      const invalidContext: MessageMetadata = {\n        userRegion: 'invalid' as any,\n        communityLevel: 'invalid' as any,\n        languageProficiency: 'invalid' as any,\n        interests: [],\n        mood: 'invalid' as any\n      }\n      \n      const startTime = performance.now()\n      \n      const response = await LusoBotEngine.generateResponse(\n        'Test message',\n        invalidContext,\n        'en'\n      )\n      \n      const responseTime = performance.now() - startTime\n      \n      // Should still respond quickly despite invalid context\n      expect(responseTime).toBeLessThan(600)\n      expect(response.content).toBeDefined()\n      expect(response.content.length).toBeGreaterThan(0)\n    })\n\n    test('should gracefully handle empty or malformed input', async () => {\n      const testCases = [\n        '',\n        '   ',\n        '\\n\\t',\n        'a'.repeat(1000), // Very long message\n        '🇵🇹🇵🇹🇵🇹🇵🇹🇵🇹', // Only emojis\n        '123456789', // Only numbers\n      ]\n      \n      for (const testMessage of testCases) {\n        const startTime = performance.now()\n        \n        const response = await LusoBotEngine.generateResponse(\n          testMessage,\n          mockUserContext,\n          'en'\n        )\n        \n        const responseTime = performance.now() - startTime\n        \n        expect(responseTime).toBeLessThan(700) // Should handle gracefully\n        expect(response.content).toBeDefined()\n        \n        // Should provide meaningful fallback response\n        if (testMessage.trim().length === 0) {\n          expect(response.content.length).toBeGreaterThan(20)\n        }\n      }\n    })\n  })\n\n  describe('Bilingual Performance', () => {\n    test('should switch languages efficiently', async () => {\n      const session = new LusoBotSession(mockUserContext, 'en')\n      \n      const queries = [\n        { message: 'Hello', language: 'en' as const },\n        { message: 'Olá', language: 'pt' as const },\n        { message: 'How are you?', language: 'en' as const },\n        { message: 'Como está?', language: 'pt' as const }\n      ]\n      \n      const startTime = performance.now()\n      \n      for (const { message, language } of queries) {\n        session.setLanguage(language)\n        await session.sendMessage(message)\n      }\n      \n      const totalTime = performance.now() - startTime\n      const averageTime = totalTime / queries.length\n      \n      expect(averageTime).toBeLessThan(500) // Language switching shouldn't add overhead\n      \n      const messages = session.getMessages()\n      expect(messages.length).toBe(1 + (queries.length * 2)) // Welcome + user/assistant pairs\n    })\n\n    test('should maintain performance across language variants', async () => {\n      const messages = [\n        'Como posso encontrar comida portuguesa em Londres?',\n        'How can I find Portuguese food in London?',\n        'Onde há casas de fado?',\n        'Where are there fado houses?',\n        'Estou com saudades de casa',\n        'I\\'m feeling homesick'\n      ]\n      \n      const responseTimes: number[] = []\n      \n      for (let i = 0; i < messages.length; i++) {\n        const startTime = performance.now()\n        \n        await LusoBotEngine.generateResponse(\n          messages[i],\n          mockUserContext,\n          i % 2 === 0 ? 'pt' : 'en'\n        )\n        \n        const responseTime = performance.now() - startTime\n        responseTimes.push(responseTime)\n      }\n      \n      // All responses should be within reasonable bounds\n      responseTimes.forEach(time => {\n        expect(time).toBeLessThan(800)\n      })\n      \n      // Variance between languages shouldn't be too high\n      const maxTime = Math.max(...responseTimes)\n      const minTime = Math.min(...responseTimes)\n      expect(maxTime / minTime).toBeLessThan(3) // Less than 3x difference\n    })\n  })\n\n  describe('Mobile Performance', () => {\n    test('should perform well on simulated mobile constraints', async () => {\n      // Simulate mobile environment with limited resources\n      const mobileSession = new LusoBotSession(\n        { ...mockUserContext, mood: 'mobile_user' as any },\n        'en'\n      )\n      \n      // Test quick interaction pattern common on mobile\n      const quickQueries = [\n        'Hi',\n        'Food?',\n        'Events',\n        'Help',\n        'Thanks'\n      ]\n      \n      const startTime = performance.now()\n      \n      for (const query of quickQueries) {\n        await mobileSession.sendMessage(query)\n      }\n      \n      const totalTime = performance.now() - startTime\n      \n      // Mobile should complete quickly\n      expect(totalTime).toBeLessThan(3000) // Under 3 seconds for 5 queries\n      \n      const messages = mobileSession.getMessages()\n      expect(messages.length).toBe(1 + (quickQueries.length * 2))\n    })\n\n    test('should handle limited bandwidth scenarios', () => {\n      // Test with minimal data structures\n      const minimalContext: MessageMetadata = {\n        userRegion: 'diaspora_uk',\n        communityLevel: 'newcomer',\n        languageProficiency: 'learning',\n        interests: ['basic'],\n        mood: 'curious'\n      }\n      \n      return LusoBotEngine.generateResponse(\n        'Quick help',\n        minimalContext,\n        'en'\n      ).then(response => {\n        // Should still provide quality response\n        expect(response.content.length).toBeGreaterThan(30)\n        expect(response.suggestions).toBeDefined()\n        \n        // Response data should be reasonably sized for mobile\n        const responseSize = JSON.stringify(response).length\n        expect(responseSize).toBeLessThan(5000) // Under 5KB\n      })\n    })\n  })\n\n  describe('Rate Limiting Simulation', () => {\n    test('should handle burst traffic gracefully', async () => {\n      const burstSize = 20\n      const requests = Array.from({ length: burstSize }, (_, i) => \n        LusoBotEngine.generateResponse(\n          `Burst request ${i + 1}`,\n          mockUserContext,\n          'en'\n        )\n      )\n      \n      const startTime = performance.now()\n      \n      try {\n        const responses = await Promise.all(requests)\n        const totalTime = performance.now() - startTime\n        \n        expect(responses.length).toBe(burstSize)\n        expect(totalTime).toBeLessThan(5000) // Should handle burst within 5 seconds\n        \n        responses.forEach(response => {\n          expect(response.content).toBeDefined()\n          expect(response.id).toBeDefined()\n        })\n      } catch (error) {\n        // If rate limiting is implemented, should fail gracefully\n        expect(error).toBeInstanceOf(Error)\n      }\n    })\n\n    test('should maintain quality under sustained load', async () => {\n      const sustainedRequests = 5\n      const batchDelay = 100 // ms between batches\n      \n      for (let batch = 0; batch < sustainedRequests; batch++) {\n        const startTime = performance.now()\n        \n        const response = await LusoBotEngine.generateResponse(\n          `Sustained load test batch ${batch + 1}`,\n          mockUserContext,\n          'en'\n        )\n        \n        const responseTime = performance.now() - startTime\n        \n        // Quality shouldn't degrade over time\n        expect(response.content.length).toBeGreaterThan(50)\n        expect(responseTime).toBeLessThan(1000)\n        \n        // Small delay between requests\n        await new Promise(resolve => setTimeout(resolve, batchDelay))\n      }\n    })\n  })\n})"],"names":["describe","mockUserContext","userRegion","communityLevel","languageProficiency","interests","mood","test","startTime","performance","now","LusoBotEngine","generateResponse","responseTime","expect","toBeLessThan","session","LusoBotSession","queries","query","sendMessage","totalTime","averageTime","length","concurrentRequests","promises","i","push","responses","Promise","all","toBe","forEach","response","content","toBeDefined","toBeGreaterThan","testMessages","message","result","SaudadeEngine","detectSaudade","detectionTime","saudade","largeMessage","repeat","highSaudadeTone","nostalgia","hope","community","heritage","generateSaudadeResponse","messageCount","messages","Array","from","_","conversationData","getMessages","toBeLessThanOrEqual","msg","id","timestamp","toBeInstanceOf","Date","then","exported","exportConversation","exportTime","parsed","JSON","parse","userContext","sessions","index","role","language","testCases","expected","identifyCulturalContext","identificationTime","confidence","mixedMessage","topic","suggestions","suggestion","title","description","culturalRelevance","current","next","currentScore","nextScore","toBeGreaterThanOrEqual","invalidContext","testMessage","trim","setLanguage","responseTimes","time","maxTime","Math","max","minTime","min","mobileSession","quickQueries","minimalContext","responseSize","stringify","burstSize","requests","error","Error","sustainedRequests","batchDelay","batch","resolve","setTimeout"],"mappings":"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"}