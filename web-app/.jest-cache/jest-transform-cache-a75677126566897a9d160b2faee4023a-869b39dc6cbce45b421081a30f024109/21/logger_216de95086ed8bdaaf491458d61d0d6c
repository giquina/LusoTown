c37e1015063da3ced2a5a2bd4051db63
/**
 * LusoTown Portuguese-Speaking Community Platform Logger
 * 
 * Centralized logging system with Portuguese cultural context awareness
 * Optimized for Vercel deployment - simple console-based approach
 * 
 * Features:
 * - Portuguese cultural context flags
 * - Platform area categorization
 * - Environment-based logging levels
 * - Structured logging with timestamps and severity levels
 * - Replaces all console.log statements across 287+ usage points
 */ // Portuguese Cultural Context Types
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    logAISystemActivity: function() {
        return logAISystemActivity;
    },
    logAuthenticationEvent: function() {
        return logAuthenticationEvent;
    },
    logBusinessInteraction: function() {
        return logBusinessInteraction;
    },
    logCulturalEvent: function() {
        return logCulturalEvent;
    },
    logMatchingActivity: function() {
        return logMatchingActivity;
    },
    logPerformanceMetric: function() {
        return logPerformanceMetric;
    }
});
class LusoTownLogger {
    constructor(){
        this.isDevelopment = process.env.NODE_ENV !== "production";
        this.isDebugEnabled = this.isDevelopment || Boolean(typeof window !== "undefined" && window.LUSOTOWN_DEBUG);
    }
    // Portuguese Cultural Context Icons
    getCulturalFlag(context) {
        if (!context) return "";
        const flags = {
            portuguese: "\uD83C\uDDF5\uD83C\uDDF9",
            brazilian: "\uD83C\uDDE7\uD83C\uDDF7",
            angolan: "\uD83C\uDDE6\uD83C\uDDF4",
            cape_verdean: "\uD83C\uDDE8\uD83C\uDDFB",
            mozambican: "\uD83C\uDDF2\uD83C\uDDFF",
            guinea_bissau: "\uD83C\uDDEC\uD83C\uDDFC",
            sao_tome: "\uD83C\uDDF8\uD83C\uDDF9",
            east_timorese: "\uD83C\uDDF9\uD83C\uDDF1",
            palop: "\uD83C\uDF0D",
            lusophone: "\uD83C\uDF0E",
            multicultural: "\uD83C\uDF08"
        };
        return flags[context] || "";
    }
    // Platform Area Icons
    getAreaIcon(area) {
        if (!area) return "";
        const icons = {
            matching: "\uD83D\uDC9D",
            events: "\uD83C\uDF89",
            business: "\uD83C\uDFEA",
            ai: "\uD83E\uDD16",
            auth: "\uD83D\uDD10",
            payments: "\uD83D\uDCB3",
            messaging: "\uD83D\uDCAC",
            streaming: "\uD83D\uDCFA",
            mobile: "\uD83D\uDCF1",
            admin: "⚙️",
            performance: "\uD83D\uDCCA",
            security: "\uD83D\uDEE1️",
            cultural: "\uD83C\uDFAD",
            geo: "\uD83D\uDCCD",
            seo: "\uD83D\uDD0D",
            analytics: "\uD83D\uDCC8"
        };
        return icons[area] || "";
    }
    // Core logging methods - Simple console-based for Vercel compatibility
    debug(message, meta = {}) {
        if (!this.isDebugEnabled) return;
        const culturalFlag = this.getCulturalFlag(meta.culturalContext);
        const areaIcon = this.getAreaIcon(meta.area);
        console.debug(`🐛 ${areaIcon}${culturalFlag} ${message}`, meta);
    }
    info(message, meta = {}) {
        const culturalFlag = this.getCulturalFlag(meta.culturalContext);
        const areaIcon = this.getAreaIcon(meta.area);
        console.info(`ℹ️ ${areaIcon}${culturalFlag} ${message}`, meta);
    }
    warn(message, meta = {}) {
        const culturalFlag = this.getCulturalFlag(meta.culturalContext);
        const areaIcon = this.getAreaIcon(meta.area);
        console.warn(`⚠️ ${areaIcon}${culturalFlag} ${message}`, meta);
    }
    error(message, error, meta = {}) {
        const culturalFlag = this.getCulturalFlag(meta.culturalContext);
        const areaIcon = this.getAreaIcon(meta.area);
        const errorMeta = error instanceof Error ? {
            name: error.name,
            message: error.message,
            stack: error.stack,
            ...meta
        } : {
            error,
            ...meta
        };
        console.error(`❌ ${areaIcon}${culturalFlag} ${message}`, errorMeta);
    }
    // Portuguese Cultural Specific Logging Methods
    culturalEvent(eventName, culturalContext, meta = {}) {
        this.info(`Cultural Event: ${eventName}`, {
            ...meta,
            culturalContext,
            area: "events",
            eventType: "cultural"
        });
    }
    businessInteraction(businessName, action, meta = {}) {
        this.info(`Business Interaction: ${businessName} - ${action}`, {
            ...meta,
            area: "business",
            action
        });
    }
    matchingActivity(matchType, userId, meta = {}) {
        this.debug(`Matching Activity: ${matchType}`, {
            ...meta,
            userId,
            area: "matching",
            action: matchType
        });
    }
    aiSystemActivity(systemName, activity, meta = {}) {
        this.debug(`AI System: ${systemName} - ${activity}`, {
            ...meta,
            area: "ai",
            action: activity
        });
    }
    performanceMetric(metricName, value, unit, meta = {}) {
        this.info(`Performance Metric: ${metricName} = ${value}${unit}`, {
            ...meta,
            area: "performance",
            duration: value
        });
    }
    authenticationEvent(event, userId, meta = {}) {
        this.info(`Authentication: ${event}`, {
            ...meta,
            userId,
            area: "auth",
            action: event
        });
    }
    // Heritage Respect Protocol Logging
    heritageRespectViolation(violation, details, meta = {}) {
        this.warn(`Heritage Respect Protocol Violation: ${violation} - ${details}`, {
            ...meta,
            area: "cultural",
            action: "heritage_violation"
        });
    }
    lusophoneCommunityEngagement(community, engagement, meta = {}) {
        this.info(`Lusophone Community Engagement: ${community} - ${engagement}`, {
            ...meta,
            culturalContext: community,
            area: "cultural",
            action: "community_engagement"
        });
    }
}
// Global logger instance
const logger = new LusoTownLogger();
const _default = logger;
const logCulturalEvent = (eventName, culturalContext, meta)=>logger.culturalEvent(eventName, culturalContext, meta);
const logBusinessInteraction = (businessName, action, meta)=>logger.businessInteraction(businessName, action, meta);
const logMatchingActivity = (matchType, userId, meta)=>logger.matchingActivity(matchType, userId, meta);
const logAISystemActivity = (systemName, activity, meta)=>logger.aiSystemActivity(systemName, activity, meta);
const logPerformanceMetric = (metricName, value, unit, meta)=>logger.performanceMetric(metricName, value, unit, meta);
const logAuthenticationEvent = (event, userId, meta)=>logger.authenticationEvent(event, userId, meta);

//# sourceMappingURL=data:application/json;base64,