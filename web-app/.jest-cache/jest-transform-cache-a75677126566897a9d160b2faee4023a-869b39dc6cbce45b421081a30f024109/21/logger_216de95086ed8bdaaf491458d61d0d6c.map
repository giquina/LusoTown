{"version":3,"sources":["/workspaces/LusoTown/web-app/src/utils/logger.ts"],"sourcesContent":["/**\n * LusoTown Portuguese-Speaking Community Platform Logger\n * \n * Centralized logging system with Portuguese cultural context awareness\n * Optimized for Vercel deployment - simple console-based approach\n * \n * Features:\n * - Portuguese cultural context flags\n * - Platform area categorization\n * - Environment-based logging levels\n * - Structured logging with timestamps and severity levels\n * - Replaces all console.log statements across 287+ usage points\n */\n\n// Portuguese Cultural Context Types\nexport type CulturalContext = \n  | 'portuguese' // Portugal-specific events/users\n  | 'brazilian'  // Brazil-specific content\n  | 'angolan'    // Angola (PALOP) community events\n  | 'cape_verdean' // Cape Verde cultural activities\n  | 'mozambican' // Mozambique community features\n  | 'guinea_bissau' // Guinea-Bissau cultural events\n  | 'sao_tome'   // São Tomé & Príncipe events\n  | 'east_timorese' // East Timor community content\n  | 'palop'      // General African Portuguese-speaking countries\n  | 'lusophone'  // All Portuguese-speaking communities\n  | 'multicultural'; // Mixed Portuguese-speaking heritage events\n\n// Platform Area Types\nexport type PlatformArea = \n  | 'matching'     // Cultural compatibility matching system\n  | 'events'       // Community events and cultural activities\n  | 'business'     // Portuguese-speaking business directory\n  | 'ai'           // AI systems (LusoBot, matching, notifications)\n  | 'auth'         // Authentication and user management\n  | 'payments'     // Subscription and payment processing\n  | 'messaging'    // Community chat and communication\n  | 'streaming'    // Cultural content streaming\n  | 'mobile'       // Mobile app and responsive features\n  | 'admin'        // Administrative functions\n  | 'performance'  // Performance monitoring and optimization\n  | 'security'     // Security and privacy features\n  | 'cultural'     // Cultural heritage and authenticity\n  | 'geo'          // Geolocation and PostGIS features\n  | 'seo'          // SEO and content optimization\n  | 'analytics';   // Usage analytics and metrics\n\n// Logging metadata interface\nexport interface LogMeta {\n  userId?: string;\n  sessionId?: string;\n  area?: PlatformArea;\n  culturalContext?: CulturalContext;\n  action?: string;\n  duration?: number;\n  errorCode?: string;\n  businessId?: string;\n  eventId?: string;\n  matchId?: string;\n  deviceType?: 'mobile' | 'tablet' | 'desktop';\n  userAgent?: string;\n  ipAddress?: string;\n  timestamp?: Date;\n  eventType?: 'cultural' | 'business' | 'social' | 'educational';\n  lusophoneCountries?: string[];\n}\n\nclass LusoTownLogger {\n  private isDevelopment: boolean;\n  private isDebugEnabled: boolean;\n\n  constructor() {\n    this.isDevelopment = process.env.NODE_ENV !== 'production';\n    this.isDebugEnabled = this.isDevelopment || Boolean(\n      typeof window !== 'undefined' && (window as any).LUSOTOWN_DEBUG\n    );\n  }\n\n  // Portuguese Cultural Context Icons\n  private getCulturalFlag(context?: CulturalContext): string {\n    if (!context) return '';\n    \n    const flags = {\n      portuguese: '🇵🇹',\n      brazilian: '🇧🇷',\n      angolan: '🇦🇴',\n      cape_verdean: '🇨🇻',\n      mozambican: '🇲🇿',\n      guinea_bissau: '🇬🇼',\n      sao_tome: '🇸🇹',\n      east_timorese: '🇹🇱',\n      palop: '🌍',\n      lusophone: '🌎',\n      multicultural: '🌈'\n    };\n\n    return flags[context] || '';\n  }\n\n  // Platform Area Icons\n  private getAreaIcon(area?: PlatformArea): string {\n    if (!area) return '';\n\n    const icons = {\n      matching: '💝',\n      events: '🎉',\n      business: '🏪',\n      ai: '🤖',\n      auth: '🔐',\n      payments: '💳',\n      messaging: '💬',\n      streaming: '📺',\n      mobile: '📱',\n      admin: '⚙️',\n      performance: '📊',\n      security: '🛡️',\n      cultural: '🎭',\n      geo: '📍',\n      seo: '🔍',\n      analytics: '📈'\n    };\n\n    return icons[area] || '';\n  }\n\n  // Core logging methods - Simple console-based for Vercel compatibility\n  debug(message: string, meta: LogMeta = {}) {\n    if (!this.isDebugEnabled) return;\n    const culturalFlag = this.getCulturalFlag(meta.culturalContext);\n    const areaIcon = this.getAreaIcon(meta.area);\n    console.debug(`🐛 ${areaIcon}${culturalFlag} ${message}`, meta);\n  }\n\n  info(message: string, meta: LogMeta = {}) {\n    const culturalFlag = this.getCulturalFlag(meta.culturalContext);\n    const areaIcon = this.getAreaIcon(meta.area);\n    console.info(`ℹ️ ${areaIcon}${culturalFlag} ${message}`, meta);\n  }\n\n  warn(message: string, meta: LogMeta = {}) {\n    const culturalFlag = this.getCulturalFlag(meta.culturalContext);\n    const areaIcon = this.getAreaIcon(meta.area);\n    console.warn(`⚠️ ${areaIcon}${culturalFlag} ${message}`, meta);\n  }\n\n  error(message: string, error?: Error | any, meta: LogMeta = {}) {\n    const culturalFlag = this.getCulturalFlag(meta.culturalContext);\n    const areaIcon = this.getAreaIcon(meta.area);\n    const errorMeta = error instanceof Error ? {\n      name: error.name,\n      message: error.message,\n      stack: error.stack,\n      ...meta\n    } : { error, ...meta };\n    \n    console.error(`❌ ${areaIcon}${culturalFlag} ${message}`, errorMeta);\n  }\n\n  // Portuguese Cultural Specific Logging Methods\n  \n  culturalEvent(eventName: string, culturalContext: CulturalContext, meta: LogMeta = {}) {\n    this.info(`Cultural Event: ${eventName}`, { \n      ...meta, \n      culturalContext,\n      area: 'events',\n      eventType: 'cultural'\n    });\n  }\n\n  businessInteraction(businessName: string, action: string, meta: LogMeta = {}) {\n    this.info(`Business Interaction: ${businessName} - ${action}`, {\n      ...meta,\n      area: 'business',\n      action\n    });\n  }\n\n  matchingActivity(matchType: string, userId: string, meta: LogMeta = {}) {\n    this.debug(`Matching Activity: ${matchType}`, {\n      ...meta,\n      userId,\n      area: 'matching',\n      action: matchType\n    });\n  }\n\n  aiSystemActivity(systemName: string, activity: string, meta: LogMeta = {}) {\n    this.debug(`AI System: ${systemName} - ${activity}`, {\n      ...meta,\n      area: 'ai',\n      action: activity\n    });\n  }\n\n  performanceMetric(metricName: string, value: number, unit: string, meta: LogMeta = {}) {\n    this.info(`Performance Metric: ${metricName} = ${value}${unit}`, {\n      ...meta,\n      area: 'performance',\n      duration: value\n    });\n  }\n\n  authenticationEvent(event: string, userId?: string, meta: LogMeta = {}) {\n    this.info(`Authentication: ${event}`, {\n      ...meta,\n      userId,\n      area: 'auth',\n      action: event\n    });\n  }\n\n  // Heritage Respect Protocol Logging\n  heritageRespectViolation(violation: string, details: string, meta: LogMeta = {}) {\n    this.warn(`Heritage Respect Protocol Violation: ${violation} - ${details}`, {\n      ...meta,\n      area: 'cultural',\n      action: 'heritage_violation'\n    });\n  }\n\n  lusophoneCommunityEngagement(community: CulturalContext, engagement: string, meta: LogMeta = {}) {\n    this.info(`Lusophone Community Engagement: ${community} - ${engagement}`, {\n      ...meta,\n      culturalContext: community,\n      area: 'cultural',\n      action: 'community_engagement'\n    });\n  }\n}\n\n// Global logger instance\nconst logger = new LusoTownLogger();\n\nexport default logger;\n\n// Named exports for common logging patterns\nexport const logCulturalEvent = (eventName: string, culturalContext: CulturalContext, meta?: LogMeta) => \n  logger.culturalEvent(eventName, culturalContext, meta);\n\nexport const logBusinessInteraction = (businessName: string, action: string, meta?: LogMeta) => \n  logger.businessInteraction(businessName, action, meta);\n\nexport const logMatchingActivity = (matchType: string, userId: string, meta?: LogMeta) => \n  logger.matchingActivity(matchType, userId, meta);\n\nexport const logAISystemActivity = (systemName: string, activity: string, meta?: LogMeta) => \n  logger.aiSystemActivity(systemName, activity, meta);\n\nexport const logPerformanceMetric = (metricName: string, value: number, unit: string, meta?: LogMeta) => \n  logger.performanceMetric(metricName, value, unit, meta);\n\nexport const logAuthenticationEvent = (event: string, userId?: string, meta?: LogMeta) => \n  logger.authenticationEvent(event, userId, meta);"],"names":["logAISystemActivity","logAuthenticationEvent","logBusinessInteraction","logCulturalEvent","logMatchingActivity","logPerformanceMetric","LusoTownLogger","constructor","isDevelopment","process","env","NODE_ENV","isDebugEnabled","Boolean","window","LUSOTOWN_DEBUG","getCulturalFlag","context","flags","portuguese","brazilian","angolan","cape_verdean","mozambican","guinea_bissau","sao_tome","east_timorese","palop","lusophone","multicultural","getAreaIcon","area","icons","matching","events","business","ai","auth","payments","messaging","streaming","mobile","admin","performance","security","cultural","geo","seo","analytics","debug","message","meta","culturalFlag","culturalContext","areaIcon","console","info","warn","error","errorMeta","Error","name","stack","culturalEvent","eventName","eventType","businessInteraction","businessName","action","matchingActivity","matchType","userId","aiSystemActivity","systemName","activity","performanceMetric","metricName","value","unit","duration","authenticationEvent","event","heritageRespectViolation","violation","details","lusophoneCommunityEngagement","community","engagement","logger"],"mappings":"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"}