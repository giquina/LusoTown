{"version":3,"sources":["/workspaces/LusoTown/web-app/src/context/LanguageContext.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode, useMemo, useCallback } from 'react'\nimport { Language, loadTranslations, translateKey, isValidLanguage } from '@/i18n'\n\ninterface LanguageContextType {\n  language: Language\n  setLanguage: (lang: Language) => void\n  t: (key: string, fallback?: string) => string\n  isLoading: boolean\n}\n\nexport const LanguageContext = createContext<LanguageContextType | undefined>(undefined)\n\ninterface LanguageProviderProps {\n  children: ReactNode\n}\n\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  const [language, setLanguage] = useState<Language>('en')\n  const [translations, setTranslations] = useState<Record<string, string>>({})\n  const [isLoading, setIsLoading] = useState(true)\n\n  // Load saved language preference with English as default\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const savedLanguage = localStorage.getItem('lusotown-language')\n      \n      if (savedLanguage && isValidLanguage(savedLanguage)) {\n        setLanguage(savedLanguage)\n      }\n    }\n    // Always default to English unless user explicitly saved a preference\n    // This ensures English is the true default language\n  }, [])\n\n  // Load translations when language changes\n  useEffect(() => {\n    let isMounted = true\n    \n    const loadLanguageTranslations = async () => {\n      setIsLoading(true)\n      \n      try {\n        const newTranslations = await loadTranslations(language)\n        \n        // Only update if component is still mounted\n        if (isMounted) {\n          setTranslations(newTranslations)\n          setIsLoading(false)\n        }\n      } catch (error) {\n        console.error('Failed to load translations:', error)\n        if (isMounted) {\n          setIsLoading(false)\n        }\n      }\n    }\n\n    loadLanguageTranslations()\n\n    return () => {\n      isMounted = false\n    }\n  }, [language])\n\n  // Save language preference - memoized to prevent unnecessary re-renders\n  const handleSetLanguage = useCallback((lang: Language) => {\n    setLanguage(lang)\n    if (typeof window !== 'undefined') {\n      try {\n        localStorage.setItem('lusotown-language', lang)\n      } catch (error) {\n        console.error('Failed to save language preference:', error)\n      }\n    }\n  }, [])\n\n  // Translation function - memoized to prevent unnecessary re-renders\n  const t = useCallback((key: string, fallback?: string): string => {\n    return translateKey(translations, key, fallback)\n  }, [translations])\n\n  // Memoize context value to prevent unnecessary re-renders\n  const contextValue = useMemo(() => ({ \n    language, \n    setLanguage: handleSetLanguage, \n    t,\n    isLoading\n  }), [language, handleSetLanguage, t, isLoading])\n\n  return (\n    <LanguageContext.Provider value={contextValue}>\n      {children}\n    </LanguageContext.Provider>\n  )\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext)\n  if (context === undefined) {\n    throw new Error('useLanguage must be used within a LanguageProvider')\n  }\n  return context\n}"],"names":["LanguageContext","LanguageProvider","useLanguage","createContext","undefined","children","language","setLanguage","useState","translations","setTranslations","isLoading","setIsLoading","useEffect","window","savedLanguage","localStorage","getItem","isValidLanguage","isMounted","loadLanguageTranslations","newTranslations","loadTranslations","error","console","handleSetLanguage","useCallback","lang","setItem","t","key","fallback","translateKey","contextValue","useMemo","Provider","value","context","useContext","Error"],"mappings":"AAAA;;;;;;;;;;;;IAYaA,eAAe;eAAfA;;IAMGC,gBAAgB;eAAhBA;;IAgFAC,WAAW;eAAXA;;;;+DAhGuF;sBAC7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASnE,MAAMF,gCAAkBG,IAAAA,oBAAa,EAAkCC;AAMvE,SAASH,iBAAiB,EAAEI,QAAQ,EAAyB;IAClE,MAAM,CAACC,UAAUC,YAAY,GAAGC,IAAAA,eAAQ,EAAW;IACnD,MAAM,CAACC,cAAcC,gBAAgB,GAAGF,IAAAA,eAAQ,EAAyB,CAAC;IAC1E,MAAM,CAACG,WAAWC,aAAa,GAAGJ,IAAAA,eAAQ,EAAC;IAE3C,yDAAyD;IACzDK,IAAAA,gBAAS,EAAC;QACR,IAAI,OAAOC,WAAW,aAAa;YACjC,MAAMC,gBAAgBC,aAAaC,OAAO,CAAC;YAE3C,IAAIF,iBAAiBG,IAAAA,qBAAe,EAACH,gBAAgB;gBACnDR,YAAYQ;YACd;QACF;IACA,sEAAsE;IACtE,oDAAoD;IACtD,GAAG,EAAE;IAEL,0CAA0C;IAC1CF,IAAAA,gBAAS,EAAC;QACR,IAAIM,YAAY;QAEhB,MAAMC,2BAA2B;YAC/BR,aAAa;YAEb,IAAI;gBACF,MAAMS,kBAAkB,MAAMC,IAAAA,sBAAgB,EAAChB;gBAE/C,4CAA4C;gBAC5C,IAAIa,WAAW;oBACbT,gBAAgBW;oBAChBT,aAAa;gBACf;YACF,EAAE,OAAOW,OAAO;gBACdC,QAAQD,KAAK,CAAC,gCAAgCA;gBAC9C,IAAIJ,WAAW;oBACbP,aAAa;gBACf;YACF;QACF;QAEAQ;QAEA,OAAO;YACLD,YAAY;QACd;IACF,GAAG;QAACb;KAAS;IAEb,wEAAwE;IACxE,MAAMmB,oBAAoBC,IAAAA,kBAAW,EAAC,CAACC;QACrCpB,YAAYoB;QACZ,IAAI,OAAOb,WAAW,aAAa;YACjC,IAAI;gBACFE,aAAaY,OAAO,CAAC,qBAAqBD;YAC5C,EAAE,OAAOJ,OAAO;gBACdC,QAAQD,KAAK,CAAC,uCAAuCA;YACvD;QACF;IACF,GAAG,EAAE;IAEL,oEAAoE;IACpE,MAAMM,IAAIH,IAAAA,kBAAW,EAAC,CAACI,KAAaC;QAClC,OAAOC,IAAAA,kBAAY,EAACvB,cAAcqB,KAAKC;IACzC,GAAG;QAACtB;KAAa;IAEjB,0DAA0D;IAC1D,MAAMwB,eAAeC,IAAAA,cAAO,EAAC,IAAO,CAAA;YAClC5B;YACAC,aAAakB;YACbI;YACAlB;QACF,CAAA,GAAI;QAACL;QAAUmB;QAAmBI;QAAGlB;KAAU;IAE/C,qBACE,qBAACX,gBAAgBmC,QAAQ;QAACC,OAAOH;kBAC9B5B;;AAGP;AAEO,SAASH;IACd,MAAMmC,UAAUC,IAAAA,iBAAU,EAACtC;IAC3B,IAAIqC,YAAYjC,WAAW;QACzB,MAAM,IAAImC,MAAM;IAClB;IACA,OAAOF;AACT"}