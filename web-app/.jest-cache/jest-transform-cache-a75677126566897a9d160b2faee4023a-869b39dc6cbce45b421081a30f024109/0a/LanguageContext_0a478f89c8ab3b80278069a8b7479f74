ec9c8b6fad5d9988cdd3b4e3b9f6c14e
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LanguageContext: function() {
        return LanguageContext;
    },
    LanguageProvider: function() {
        return LanguageProvider;
    },
    useLanguage: function() {
        return useLanguage;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _i18n = require("../i18n");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const LanguageContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
function LanguageProvider({ children }) {
    const [language, setLanguage] = (0, _react.useState)("en");
    const [translations, setTranslations] = (0, _react.useState)({});
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    // Load saved language preference with English as default
    (0, _react.useEffect)(()=>{
        if (typeof window !== "undefined") {
            const savedLanguage = localStorage.getItem("lusotown-language");
            if (savedLanguage && (0, _i18n.isValidLanguage)(savedLanguage)) {
                setLanguage(savedLanguage);
            }
        }
    // Always default to English unless user explicitly saved a preference
    // This ensures English is the true default language
    }, []);
    // Load translations when language changes
    (0, _react.useEffect)(()=>{
        let isMounted = true;
        const loadLanguageTranslations = async ()=>{
            setIsLoading(true);
            try {
                const newTranslations = await (0, _i18n.loadTranslations)(language);
                // Only update if component is still mounted
                if (isMounted) {
                    setTranslations(newTranslations);
                    setIsLoading(false);
                }
            } catch (error) {
                console.error("Failed to load translations:", error);
                if (isMounted) {
                    setIsLoading(false);
                }
            }
        };
        loadLanguageTranslations();
        return ()=>{
            isMounted = false;
        };
    }, [
        language
    ]);
    // Save language preference - memoized to prevent unnecessary re-renders
    const handleSetLanguage = (0, _react.useCallback)((lang)=>{
        setLanguage(lang);
        if (typeof window !== "undefined") {
            try {
                localStorage.setItem("lusotown-language", lang);
            } catch (error) {
                console.error("Failed to save language preference:", error);
            }
        }
    }, []);
    // Translation function - memoized to prevent unnecessary re-renders
    const t = (0, _react.useCallback)((key, fallback)=>{
        return (0, _i18n.translateKey)(translations, key, fallback);
    }, [
        translations
    ]);
    // Memoize context value to prevent unnecessary re-renders
    const contextValue = (0, _react.useMemo)(()=>({
            language,
            setLanguage: handleSetLanguage,
            t,
            isLoading
        }), [
        language,
        handleSetLanguage,
        t,
        isLoading
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(LanguageContext.Provider, {
        value: contextValue,
        children: children
    });
}
function useLanguage() {
    const context = (0, _react.useContext)(LanguageContext);
    if (context === undefined) {
        throw new Error("useLanguage must be used within a LanguageProvider");
    }
    return context;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL0x1c29Ub3duL3dlYi1hcHAvc3JjL2NvbnRleHQvTGFuZ3VhZ2VDb250ZXh0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIFJlYWN0Tm9kZSwgdXNlTWVtbywgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IExhbmd1YWdlLCBsb2FkVHJhbnNsYXRpb25zLCB0cmFuc2xhdGVLZXksIGlzVmFsaWRMYW5ndWFnZSB9IGZyb20gJ0AvaTE4bidcblxuaW50ZXJmYWNlIExhbmd1YWdlQ29udGV4dFR5cGUge1xuICBsYW5ndWFnZTogTGFuZ3VhZ2VcbiAgc2V0TGFuZ3VhZ2U6IChsYW5nOiBMYW5ndWFnZSkgPT4gdm9pZFxuICB0OiAoa2V5OiBzdHJpbmcsIGZhbGxiYWNrPzogc3RyaW5nKSA9PiBzdHJpbmdcbiAgaXNMb2FkaW5nOiBib29sZWFuXG59XG5cbmV4cG9ydCBjb25zdCBMYW5ndWFnZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PExhbmd1YWdlQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZClcblxuaW50ZXJmYWNlIExhbmd1YWdlUHJvdmlkZXJQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhbmd1YWdlUHJvdmlkZXIoeyBjaGlsZHJlbiB9OiBMYW5ndWFnZVByb3ZpZGVyUHJvcHMpIHtcbiAgY29uc3QgW2xhbmd1YWdlLCBzZXRMYW5ndWFnZV0gPSB1c2VTdGF0ZTxMYW5ndWFnZT4oJ2VuJylcbiAgY29uc3QgW3RyYW5zbGF0aW9ucywgc2V0VHJhbnNsYXRpb25zXSA9IHVzZVN0YXRlPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KHt9KVxuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSlcblxuICAvLyBMb2FkIHNhdmVkIGxhbmd1YWdlIHByZWZlcmVuY2Ugd2l0aCBFbmdsaXNoIGFzIGRlZmF1bHRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHNhdmVkTGFuZ3VhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbHVzb3Rvd24tbGFuZ3VhZ2UnKVxuICAgICAgXG4gICAgICBpZiAoc2F2ZWRMYW5ndWFnZSAmJiBpc1ZhbGlkTGFuZ3VhZ2Uoc2F2ZWRMYW5ndWFnZSkpIHtcbiAgICAgICAgc2V0TGFuZ3VhZ2Uoc2F2ZWRMYW5ndWFnZSlcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQWx3YXlzIGRlZmF1bHQgdG8gRW5nbGlzaCB1bmxlc3MgdXNlciBleHBsaWNpdGx5IHNhdmVkIGEgcHJlZmVyZW5jZVxuICAgIC8vIFRoaXMgZW5zdXJlcyBFbmdsaXNoIGlzIHRoZSB0cnVlIGRlZmF1bHQgbGFuZ3VhZ2VcbiAgfSwgW10pXG5cbiAgLy8gTG9hZCB0cmFuc2xhdGlvbnMgd2hlbiBsYW5ndWFnZSBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGlzTW91bnRlZCA9IHRydWVcbiAgICBcbiAgICBjb25zdCBsb2FkTGFuZ3VhZ2VUcmFuc2xhdGlvbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgICBzZXRJc0xvYWRpbmcodHJ1ZSlcbiAgICAgIFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbmV3VHJhbnNsYXRpb25zID0gYXdhaXQgbG9hZFRyYW5zbGF0aW9ucyhsYW5ndWFnZSlcbiAgICAgICAgXG4gICAgICAgIC8vIE9ubHkgdXBkYXRlIGlmIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkXG4gICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICBzZXRUcmFuc2xhdGlvbnMobmV3VHJhbnNsYXRpb25zKVxuICAgICAgICAgIHNldElzTG9hZGluZyhmYWxzZSlcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxvYWQgdHJhbnNsYXRpb25zOicsIGVycm9yKVxuICAgICAgICBpZiAoaXNNb3VudGVkKSB7XG4gICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG9hZExhbmd1YWdlVHJhbnNsYXRpb25zKClcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpc01vdW50ZWQgPSBmYWxzZVxuICAgIH1cbiAgfSwgW2xhbmd1YWdlXSlcblxuICAvLyBTYXZlIGxhbmd1YWdlIHByZWZlcmVuY2UgLSBtZW1vaXplZCB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHJlLXJlbmRlcnNcbiAgY29uc3QgaGFuZGxlU2V0TGFuZ3VhZ2UgPSB1c2VDYWxsYmFjaygobGFuZzogTGFuZ3VhZ2UpID0+IHtcbiAgICBzZXRMYW5ndWFnZShsYW5nKVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2x1c290b3duLWxhbmd1YWdlJywgbGFuZylcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGxhbmd1YWdlIHByZWZlcmVuY2U6JywgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICB9LCBbXSlcblxuICAvLyBUcmFuc2xhdGlvbiBmdW5jdGlvbiAtIG1lbW9pemVkIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcmUtcmVuZGVyc1xuICBjb25zdCB0ID0gdXNlQ2FsbGJhY2soKGtleTogc3RyaW5nLCBmYWxsYmFjaz86IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZUtleSh0cmFuc2xhdGlvbnMsIGtleSwgZmFsbGJhY2spXG4gIH0sIFt0cmFuc2xhdGlvbnNdKVxuXG4gIC8vIE1lbW9pemUgY29udGV4dCB2YWx1ZSB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHJlLXJlbmRlcnNcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiAoeyBcbiAgICBsYW5ndWFnZSwgXG4gICAgc2V0TGFuZ3VhZ2U6IGhhbmRsZVNldExhbmd1YWdlLCBcbiAgICB0LFxuICAgIGlzTG9hZGluZ1xuICB9KSwgW2xhbmd1YWdlLCBoYW5kbGVTZXRMYW5ndWFnZSwgdCwgaXNMb2FkaW5nXSlcblxuICByZXR1cm4gKFxuICAgIDxMYW5ndWFnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxhbmd1YWdlKCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChMYW5ndWFnZUNvbnRleHQpXG4gIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VzZUxhbmd1YWdlIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBMYW5ndWFnZVByb3ZpZGVyJylcbiAgfVxuICByZXR1cm4gY29udGV4dFxufSJdLCJuYW1lcyI6WyJMYW5ndWFnZUNvbnRleHQiLCJMYW5ndWFnZVByb3ZpZGVyIiwidXNlTGFuZ3VhZ2UiLCJjcmVhdGVDb250ZXh0IiwidW5kZWZpbmVkIiwiY2hpbGRyZW4iLCJsYW5ndWFnZSIsInNldExhbmd1YWdlIiwidXNlU3RhdGUiLCJ0cmFuc2xhdGlvbnMiLCJzZXRUcmFuc2xhdGlvbnMiLCJpc0xvYWRpbmciLCJzZXRJc0xvYWRpbmciLCJ1c2VFZmZlY3QiLCJ3aW5kb3ciLCJzYXZlZExhbmd1YWdlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImlzVmFsaWRMYW5ndWFnZSIsImlzTW91bnRlZCIsImxvYWRMYW5ndWFnZVRyYW5zbGF0aW9ucyIsIm5ld1RyYW5zbGF0aW9ucyIsImxvYWRUcmFuc2xhdGlvbnMiLCJlcnJvciIsImNvbnNvbGUiLCJoYW5kbGVTZXRMYW5ndWFnZSIsInVzZUNhbGxiYWNrIiwibGFuZyIsInNldEl0ZW0iLCJ0Iiwia2V5IiwiZmFsbGJhY2siLCJ0cmFuc2xhdGVLZXkiLCJjb250ZXh0VmFsdWUiLCJ1c2VNZW1vIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImNvbnRleHQiLCJ1c2VDb250ZXh0IiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7SUFZYUEsZUFBZTtlQUFmQTs7SUFNR0MsZ0JBQWdCO2VBQWhCQTs7SUFnRkFDLFdBQVc7ZUFBWEE7Ozs7K0RBaEd1RjtzQkFDN0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVNuRSxNQUFNRixnQ0FBa0JHLElBQUFBLG9CQUFhLEVBQWtDQztBQU12RSxTQUFTSCxpQkFBaUIsRUFBRUksUUFBUSxFQUF5QjtJQUNsRSxNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR0MsSUFBQUEsZUFBUSxFQUFXO0lBQ25ELE1BQU0sQ0FBQ0MsY0FBY0MsZ0JBQWdCLEdBQUdGLElBQUFBLGVBQVEsRUFBeUIsQ0FBQztJQUMxRSxNQUFNLENBQUNHLFdBQVdDLGFBQWEsR0FBR0osSUFBQUEsZUFBUSxFQUFDO0lBRTNDLHlEQUF5RDtJQUN6REssSUFBQUEsZ0JBQVMsRUFBQztRQUNSLElBQUksT0FBT0MsV0FBVyxhQUFhO1lBQ2pDLE1BQU1DLGdCQUFnQkMsYUFBYUMsT0FBTyxDQUFDO1lBRTNDLElBQUlGLGlCQUFpQkcsSUFBQUEscUJBQWUsRUFBQ0gsZ0JBQWdCO2dCQUNuRFIsWUFBWVE7WUFDZDtRQUNGO0lBQ0Esc0VBQXNFO0lBQ3RFLG9EQUFvRDtJQUN0RCxHQUFHLEVBQUU7SUFFTCwwQ0FBMEM7SUFDMUNGLElBQUFBLGdCQUFTLEVBQUM7UUFDUixJQUFJTSxZQUFZO1FBRWhCLE1BQU1DLDJCQUEyQjtZQUMvQlIsYUFBYTtZQUViLElBQUk7Z0JBQ0YsTUFBTVMsa0JBQWtCLE1BQU1DLElBQUFBLHNCQUFnQixFQUFDaEI7Z0JBRS9DLDRDQUE0QztnQkFDNUMsSUFBSWEsV0FBVztvQkFDYlQsZ0JBQWdCVztvQkFDaEJULGFBQWE7Z0JBQ2Y7WUFDRixFQUFFLE9BQU9XLE9BQU87Z0JBQ2RDLFFBQVFELEtBQUssQ0FBQyxnQ0FBZ0NBO2dCQUM5QyxJQUFJSixXQUFXO29CQUNiUCxhQUFhO2dCQUNmO1lBQ0Y7UUFDRjtRQUVBUTtRQUVBLE9BQU87WUFDTEQsWUFBWTtRQUNkO0lBQ0YsR0FBRztRQUFDYjtLQUFTO0lBRWIsd0VBQXdFO0lBQ3hFLE1BQU1tQixvQkFBb0JDLElBQUFBLGtCQUFXLEVBQUMsQ0FBQ0M7UUFDckNwQixZQUFZb0I7UUFDWixJQUFJLE9BQU9iLFdBQVcsYUFBYTtZQUNqQyxJQUFJO2dCQUNGRSxhQUFhWSxPQUFPLENBQUMscUJBQXFCRDtZQUM1QyxFQUFFLE9BQU9KLE9BQU87Z0JBQ2RDLFFBQVFELEtBQUssQ0FBQyx1Q0FBdUNBO1lBQ3ZEO1FBQ0Y7SUFDRixHQUFHLEVBQUU7SUFFTCxvRUFBb0U7SUFDcEUsTUFBTU0sSUFBSUgsSUFBQUEsa0JBQVcsRUFBQyxDQUFDSSxLQUFhQztRQUNsQyxPQUFPQyxJQUFBQSxrQkFBWSxFQUFDdkIsY0FBY3FCLEtBQUtDO0lBQ3pDLEdBQUc7UUFBQ3RCO0tBQWE7SUFFakIsMERBQTBEO0lBQzFELE1BQU13QixlQUFlQyxJQUFBQSxjQUFPLEVBQUMsSUFBTyxDQUFBO1lBQ2xDNUI7WUFDQUMsYUFBYWtCO1lBQ2JJO1lBQ0FsQjtRQUNGLENBQUEsR0FBSTtRQUFDTDtRQUFVbUI7UUFBbUJJO1FBQUdsQjtLQUFVO0lBRS9DLHFCQUNFLHFCQUFDWCxnQkFBZ0JtQyxRQUFRO1FBQUNDLE9BQU9IO2tCQUM5QjVCOztBQUdQO0FBRU8sU0FBU0g7SUFDZCxNQUFNbUMsVUFBVUMsSUFBQUEsaUJBQVUsRUFBQ3RDO0lBQzNCLElBQUlxQyxZQUFZakMsV0FBVztRQUN6QixNQUFNLElBQUltQyxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Y7QUFDVCJ9