'use client'

import React, { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  ChatBubbleLeftIcon,
  PaperAirplaneIcon,
  EllipsisVerticalIcon,
  ExclamationTriangleIcon,
  ShieldCheckIcon,
  ClockIcon,
  MicrophoneIcon,
  PhotoIcon,
  FaceSmileIcon,
  EyeIcon
} from '@heroicons/react/24/outline'
import { ChatBubbleLeftEllipsisIcon, ShieldExclamationIcon } from '@heroicons/react/24/solid'
import { Crown, Users, MessageSquare, AlertTriangle, Check, CheckCheck } from 'lucide-react'
import { useLanguage } from '@/context/LanguageContext'
import { useSubscription } from '@/context/SubscriptionContext'
import { useNetworking, type Conversation, type SecureMessage } from '@/context/NetworkingContext'
import SubscriptionGate from '@/components/SubscriptionGate'
import toast from 'react-hot-toast'

export default function MessagesPage() {
  const { language, t } = useLanguage()
  const { hasActiveSubscription, isInTrial, subscriptionRequired } = useSubscription()
  const { getConnections } = useNetworking()
  
  // State management
  const [conversations, setConversations] = useState<Conversation[]>([])
  const [selectedConversation, setSelectedConversation] = useState<string | null>(null)
  const [messages, setMessages] = useState<SecureMessage[]>([])
  const [newMessage, setNewMessage] = useState('')
  const [dailyMessagesUsed, setDailyMessagesUsed] = useState(0)
  const [isLoading, setIsLoading] = useState(true)
  const [showSafetyInfo, setShowSafetyInfo] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const isPortuguese = language === 'pt'
  const isPremiumUser = hasActiveSubscription || isInTrial
  const dailyMessageLimit = isPremiumUser ? 999 : 10
  const maxMessageLength = isPremiumUser ? 1000 : 200

  // Mock data initialization
  useEffect(() => {
    const mockConversations: Conversation[] = [
      {
        id: 'conv-1',
        participantIds: ['current-user', 'user-sofia'],
        participants: [{
          id: 'user-sofia',
          firstName: 'Sofia',
          lastName: 'Rodrigues',
          profilePictureUrl: 'https://images.unsplash.com/photo-1494790108755-2616b612b1ac?w=100&h=100&fit=crop&crop=face&auto=format',
          location: 'Clapham, London',
          membershipTier: 'premium',
          isVerified: true
        }],
        lastMessage: {
          id: 'msg-1',
          conversationId: 'conv-1',
          senderId: 'user-sofia',
          receiverId: 'current-user',
          content: 'Olá! Vi que também gostas de eventos culturais portugueses. Como foi o último evento do fado que foste?',
          messageType: 'text',
          isRead: false,
          isReported: false,
          safetyScore: 95,
          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
        },
        unreadCount: 1,
        isActive: true,
        connectionType: 'mutual_match',
        safetyStatus: 'safe',
        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
        updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
      },
      {
        id: 'conv-2',
        participantIds: ['current-user', 'user-miguel'],
        participants: [{
          id: 'user-miguel',
          firstName: 'Miguel',
          lastName: 'Santos',
          profilePictureUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face&auto=format',
          location: 'Canary Wharf, London',
          membershipTier: 'business',
          isVerified: true
        }],
        lastMessage: {
          id: 'msg-2',
          conversationId: 'conv-2',
          senderId: 'current-user',
          receiverId: 'user-miguel',
          content: 'That fintech opportunity sounds interesting! Would love to discuss potential collaboration.',
          messageType: 'text',
          isRead: true,
          isReported: false,
          safetyScore: 98,
          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
        },
        unreadCount: 0,
        isActive: true,
        connectionType: 'event_based',
        safetyStatus: 'safe',
        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()
      }
    ]

    setConversations(mockConversations)

    // Load daily usage
    const today = new Date().toDateString()
    const savedDailyUsage = localStorage.getItem('lusotown-daily-messages')
    const savedLastReset = localStorage.getItem('lusotown-messages-reset-date')

    if (savedLastReset !== today) {
      setDailyMessagesUsed(0)
      localStorage.setItem('lusotown-daily-messages', '0')
      localStorage.setItem('lusotown-messages-reset-date', today)
    } else if (savedDailyUsage) {
      setDailyMessagesUsed(parseInt(savedDailyUsage))
    }

    setIsLoading(false)
  }, [])

  // Load messages for selected conversation
  useEffect(() => {
    if (selectedConversation) {
      const mockMessages: SecureMessage[] = [
        {
          id: 'msg-1',
          conversationId: selectedConversation,
          senderId: 'user-sofia',
          receiverId: 'current-user',
          content: 'Olá! Vi que também gostas de eventos culturais portugueses.',
          messageType: 'text',
          isRead: true,
          isReported: false,
          safetyScore: 95,
          createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()
        },
        {
          id: 'msg-2',
          conversationId: selectedConversation,
          senderId: 'current-user',
          receiverId: 'user-sofia',
          content: 'Olá Sofia! Sim, adoro! Acabo de ir a um concerto de fado incrível no Portuguese Cultural Centre.',
          messageType: 'text',
          isRead: true,
          isReported: false,
          safetyScore: 98,
          createdAt: new Date(Date.now() - 2.5 * 60 * 60 * 1000).toISOString()
        },
        {
          id: 'msg-3',
          conversationId: selectedConversation,
          senderId: 'user-sofia',
          receiverId: 'current-user',
          content: 'Como foi o último evento do fado que foste? Estou sempre à procura de novos eventos para ir!',
          messageType: 'text',
          isRead: false,
          isReported: false,
          safetyScore: 95,
          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
        }
      ]
      setMessages(mockMessages)
    }
  }, [selectedConversation])

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  // Send message function
  const sendMessage = () => {
    if (!newMessage.trim()) return

    if (!isPremiumUser && dailyMessagesUsed >= dailyMessageLimit) {
      toast.error(
        isPortuguese 
          ? 'Limite diário de mensagens atingido. Faça upgrade para Premium!'
          : 'Daily message limit reached. Upgrade to Premium!'
      )
      return
    }

    if (newMessage.length > maxMessageLength) {
      toast.error(
        isPortuguese 
          ? `Mensagem muito longa. Máximo ${maxMessageLength} caracteres.`
          : `Message too long. Maximum ${maxMessageLength} characters.`
      )
      return
    }

    // Safety check (mock)
    const safetyScore = calculateSafetyScore(newMessage)
    if (safetyScore < 70) {
      toast.error(
        isPortuguese 
          ? 'Mensagem pode conter conteúdo inadequado. Por favor, reformule.'
          : 'Message may contain inappropriate content. Please rephrase.'
      )
      return
    }

    const message: SecureMessage = {
      id: `msg-${Date.now()}`,
      conversationId: selectedConversation!,
      senderId: 'current-user',
      receiverId: conversations.find(c => c.id === selectedConversation)?.participants[0].id!,
      content: newMessage,
      messageType: 'text',
      isRead: false,
      isReported: false,
      safetyScore,
      createdAt: new Date().toISOString()
    }

    setMessages(prev => [...prev, message])
    setNewMessage('')

    // Update daily usage
    const newDailyUsage = dailyMessagesUsed + 1
    setDailyMessagesUsed(newDailyUsage)
    localStorage.setItem('lusotown-daily-messages', newDailyUsage.toString())

    toast.success(
      isPortuguese ? 'Mensagem enviada!' : 'Message sent!'
    )
  }

  // Simple safety scoring (mock implementation)
  const calculateSafetyScore = (content: string): number => {
    const inappropriateWords = ['spam', 'scam', 'money', 'click here', 'urgent']
    const lowercaseContent = content.toLowerCase()
    const inappropriateCount = inappropriateWords.filter(word => 
      lowercaseContent.includes(word)
    ).length
    
    return Math.max(50, 100 - (inappropriateCount * 15))
  }

  // Format time
  const formatTime = (dateString: string) => {
    const date = new Date(dateString)
    const now = new Date()
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60)
    
    if (diffInHours < 1) {
      return isPortuguese ? 'Há poucos minutos' : 'A few minutes ago'
    } else if (diffInHours < 24) {
      return `${Math.floor(diffInHours)}h`
    } else {
      return date.toLocaleDateString()
    }
  }

  // Show subscription gate
  if (subscriptionRequired) {
    return (
      <SubscriptionGate
        mode="general"
        title={isPortuguese ? 'Mensagens Seguras' : 'Secure Messages'}
        description={isPortuguese 
          ? 'Para aceder ao sistema de mensagens seguras da comunidade portuguesa, precisa de uma subscrição ativa.'
          : 'To access the Portuguese community secure messaging system, you need an active subscription.'
        }
      >
        <div></div>
      </SubscriptionGate>
    )
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 border-4 border-primary-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">
            {isPortuguese ? 'Carregando mensagens...' : 'Loading messages...'}
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50 pt-20">
      <div className="container mx-auto px-4 max-w-7xl h-screen flex">
        
        {/* Conversations Sidebar */}
        <div className="w-1/3 bg-white rounded-l-2xl shadow-xl border-r">
          
          {/* Header */}
          <div className="p-6 border-b">
            <div className="flex items-center justify-between mb-4">
              <h1 className="text-2xl font-bold text-gray-900">
                {isPortuguese ? 'Mensagens' : 'Messages'}
              </h1>
              <button
                onClick={() => setShowSafetyInfo(true)}
                className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
                title={isPortuguese ? 'Informações de Segurança' : 'Safety Information'}
              >
                <ShieldCheckIcon className="w-5 h-5 text-green-500" />
              </button>
            </div>

            {/* Usage Counter */}
            <div className="flex items-center justify-between">
              <div className="text-sm text-gray-600">
                {isPortuguese ? 'Hoje' : 'Today'}: {dailyMessagesUsed}/{isPremiumUser ? '' : dailyMessageLimit}
              </div>
              {!isPremiumUser && (
                <a 
                  href="/premium"
                  className="text-xs bg-gradient-to-r from-premium-500 to-action-500 text-white px-3 py-1 rounded-full hover:from-premium-600 hover:to-action-600 transition-all duration-200"
                >
                  <Crown className="w-3 h-3 inline mr-1" />
                  {isPortuguese ? 'Upgrade' : 'Upgrade'}
                </a>
              )}
            </div>
          </div>

          {/* Conversations List */}
          <div className="flex-1 overflow-y-auto">
            {conversations.map((conversation) => {
              const participant = conversation.participants[0]
              return (
                <div
                  key={conversation.id}
                  onClick={() => setSelectedConversation(conversation.id)}
                  className={`p-4 border-b hover:bg-gray-50 cursor-pointer transition-colors ${
                    selectedConversation === conversation.id ? 'bg-primary-50 border-primary-200' : ''
                  }`}
                >
                  <div className="flex items-center gap-3">
                    <div className="relative">
                      <img
                        src={participant.profilePictureUrl}
                        alt={participant.firstName}
                        className="w-12 h-12 rounded-full object-cover"
                      />
                      {participant.isVerified && (
                        <div className="absolute -bottom-1 -right-1 bg-green-500 rounded-full p-1">
                          <ShieldCheckIcon className="w-3 h-3 text-white" />
                        </div>
                      )}
                      {conversation.unreadCount > 0 && (
                        <div className="absolute -top-1 -right-1 bg-action-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                          {conversation.unreadCount}
                        </div>
                      )}
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center justify-between">
                        <h3 className="font-medium text-gray-900 truncate">
                          {participant.firstName} {participant.lastName}
                        </h3>
                        <span className="text-xs text-gray-500">
                          {formatTime(conversation.updatedAt)}
                        </span>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        {participant.membershipTier === 'premium' && (
                          <Crown className="w-3 h-3 text-premium-500" />
                        )}
                        <p className="text-sm text-gray-600 truncate">
                          {conversation.lastMessage?.content}
                        </p>
                      </div>
                      
                      <div className="flex items-center gap-2 mt-1">
                        <div className={`w-2 h-2 rounded-full ${
                          conversation.safetyStatus === 'safe' ? 'bg-green-500' : 'bg-yellow-500'
                        }`} />
                        <span className="text-xs text-gray-500 capitalize">
                          {conversation.connectionType === 'mutual_match' 
                            ? (isPortuguese ? 'Match Mútuo' : 'Mutual Match')
                            : (isPortuguese ? 'Evento' : 'Event Based')
                          }
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              )
            })}
          </div>
        </div>

        {/* Messages Area */}
        <div className="flex-1 bg-white rounded-r-2xl shadow-xl flex flex-col">
          {selectedConversation ? (
            <>
              {/* Chat Header */}
              <div className="p-4 border-b bg-gray-50 rounded-tr-2xl">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    {conversations.find(c => c.id === selectedConversation)?.participants.map(participant => (
                      <div key={participant.id} className="flex items-center gap-3">
                        <img
                          src={participant.profilePictureUrl}
                          alt={participant.firstName}
                          className="w-10 h-10 rounded-full object-cover"
                        />
                        <div>
                          <h3 className="font-medium text-gray-900">
                            {participant.firstName} {participant.lastName}
                          </h3>
                          <div className="flex items-center gap-2">
                            {participant.isVerified && (
                              <ShieldCheckIcon className="w-4 h-4 text-green-500" />
                            )}
                            <span className="text-xs text-gray-500">
                              {participant.membershipTier === 'premium' ? 'Premium Member' : 
                               participant.membershipTier === 'business' ? 'Business Member' :
                               'Student Member'}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <button className="p-2 rounded-lg hover:bg-gray-200 transition-colors">
                    <EllipsisVerticalIcon className="w-5 h-5 text-gray-600" />
                  </button>
                </div>
              </div>

              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.map((message) => {
                  const isCurrentUser = message.senderId === 'current-user'
                  return (
                    <div
                      key={message.id}
                      className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${
                          isCurrentUser
                            ? 'bg-gradient-to-r from-primary-500 to-secondary-500 text-white'
                            : 'bg-gray-100 text-gray-900'
                        }`}
                      >
                        <p className="text-sm">{message.content}</p>
                        <div className={`flex items-center justify-between mt-1 text-xs ${
                          isCurrentUser ? 'text-primary-100' : 'text-gray-500'
                        }`}>
                          <span>{formatTime(message.createdAt)}</span>
                          {isCurrentUser && (
                            <div className="flex items-center gap-1">
                              {message.isRead ? <CheckCheck className="w-3 h-3" /> : <Check className="w-3 h-3" />}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )
                })}
                <div ref={messagesEndRef} />
              </div>

              {/* Message Input */}
              <div className="p-4 border-t bg-gray-50">
                <div className="flex items-center gap-3">
                  <div className="flex-1 relative">
                    <textarea
                      value={newMessage}
                      onChange={(e) => setNewMessage(e.target.value)}
                      placeholder={isPortuguese ? 'Escreva a sua mensagem...' : 'Type your message...'}
                      rows={2}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent resize-none"
                      maxLength={maxMessageLength}
                      disabled={!isPremiumUser && dailyMessagesUsed >= dailyMessageLimit}
                    />
                    <div className="absolute bottom-2 right-2 text-xs text-gray-500">
                      {newMessage.length}/{maxMessageLength}
                    </div>
                  </div>
                  
                  {isPremiumUser && (
                    <div className="flex gap-2">
                      <button className="p-2 rounded-lg hover:bg-gray-200 transition-colors text-gray-600">
                        <PhotoIcon className="w-5 h-5" />
                      </button>
                      <button className="p-2 rounded-lg hover:bg-gray-200 transition-colors text-gray-600">
                        <MicrophoneIcon className="w-5 h-5" />
                      </button>
                    </div>
                  )}
                  
                  <button
                    onClick={sendMessage}
                    disabled={!newMessage.trim() || (!isPremiumUser && dailyMessagesUsed >= dailyMessageLimit)}
                    className="p-3 bg-gradient-to-r from-primary-500 to-secondary-500 text-white rounded-lg hover:from-primary-600 hover:to-secondary-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <PaperAirplaneIcon className="w-5 h-5" />
                  </button>
                </div>
                
                {!isPremiumUser && (
                  <div className="mt-2 text-center">
                    <p className="text-xs text-gray-600 mb-2">
                      {isPortuguese 
                        ? 'Limite: 10 mensagens/dia, 200 caracteres por mensagem'
                        : 'Limit: 10 messages/day, 200 characters per message'
                      }
                    </p>
                    <a
                      href="/premium"
                      className="text-xs bg-gradient-to-r from-premium-500 to-action-500 text-white px-4 py-2 rounded-lg hover:from-premium-600 hover:to-action-600 transition-all duration-200 inline-flex items-center gap-1"
                    >
                      <Crown className="w-3 h-3" />
                      {isPortuguese ? 'Upgrade para mensagens ilimitadas' : 'Upgrade for unlimited messaging'}
                    </a>
                  </div>
                )}
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center text-center p-8">
              <div>
                <ChatBubbleLeftEllipsisIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  {isPortuguese ? 'Selecione uma conversa' : 'Select a conversation'}
                </h3>
                <p className="text-gray-600">
                  {isPortuguese 
                    ? 'Escolha uma conversa à esquerda para começar a trocar mensagens.'
                    : 'Choose a conversation from the left to start messaging.'
                  }
                </p>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Safety Information Modal */}
      <AnimatePresence>
        {showSafetyInfo && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <motion.div
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.95 }}
              className="bg-white rounded-2xl p-6 max-w-md w-full"
            >
              <div className="text-center mb-6">
                <ShieldCheckIcon className="w-12 h-12 text-green-500 mx-auto mb-4" />
                <h3 className="text-xl font-bold text-gray-900 mb-2">
                  {isPortuguese ? 'Mensagens Seguras' : 'Safe Messaging'}
                </h3>
              </div>

              <div className="space-y-4 text-sm text-gray-700">
                <div className="flex items-start gap-3">
                  <ShieldCheckIcon className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-medium mb-1">
                      {isPortuguese ? 'Apenas Matches e Co-participantes' : 'Matches & Event Co-Attendees Only'}
                    </h4>
                    <p className="text-xs text-gray-600">
                      {isPortuguese 
                        ? 'Só pode enviar mensagens para pessoas com quem fez match ou que estiveram nos mesmos eventos.'
                        : 'You can only message people you\'ve matched with or attended events together.'
                      }
                    </p>
                  </div>
                </div>

                <div className="flex items-start gap-3">
                  <ExclamationTriangleIcon className="w-5 h-5 text-amber-500 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-medium mb-1">
                      {isPortuguese ? 'Monitorização AI' : 'AI Monitoring'}
                    </h4>
                    <p className="text-xs text-gray-600">
                      {isPortuguese 
                        ? 'Todas as mensagens são verificadas automaticamente para conteúdo inadequado.'
                        : 'All messages are automatically checked for inappropriate content.'
                      }
                    </p>
                  </div>
                </div>

                <div className="flex items-start gap-3">
                  <EyeIcon className="w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0" />
                  <div>
                    <h4 className="font-medium mb-1">
                      {isPortuguese ? 'Relatórios Rápidos' : 'Quick Reporting'}
                    </h4>
                    <p className="text-xs text-gray-600">
                      {isPortuguese 
                        ? 'Pode reportar mensagens inadequadas rapidamente para revisão da nossa equipe.'
                        : 'You can quickly report inappropriate messages for team review.'
                      }
                    </p>
                  </div>
                </div>
              </div>

              <div className="mt-6">
                <button
                  onClick={() => setShowSafetyInfo(false)}
                  className="w-full bg-gradient-to-r from-primary-500 to-secondary-500 text-white py-3 rounded-lg font-medium hover:from-primary-600 hover:to-secondary-600 transition-all duration-200"
                >
                  {isPortuguese ? 'Entendi' : 'Got it'}
                </button>
              </div>
            </motion.div>
          </div>
        )}
      </AnimatePresence>
    </div>
  )
}