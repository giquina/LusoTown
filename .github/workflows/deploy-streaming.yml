name: Deploy LusoTown Streaming Infrastructure

on:
  push:
    branches: [main]
    paths: 
      - 'streaming/**'
      - '.github/workflows/deploy-streaming.yml'
  pull_request:
    branches: [main]
    paths:
      - 'streaming/**'
      - '.github/workflows/deploy-streaming.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lusotown/srs-streaming

jobs:
  # Build streaming infrastructure images
  build-streaming-images:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./streaming
          file: ./streaming/Dockerfile.srs
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_ENV=production
            VERSION=${{ github.sha }}

  # Test streaming infrastructure
  test-streaming:
    runs-on: ubuntu-latest
    needs: build-streaming-images
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run streaming infrastructure tests
        run: |
          cd streaming/docker-compose
          cp docker-compose.yml docker-compose.test.yml
          
          # Override for testing
          cat >> docker-compose.test.yml << 'EOF'
          # Test overrides
          services:
            srs-server:
              image: ${{ needs.build-streaming-images.outputs.image-tag }}
              ports:
                - "1935:1935"
                - "8080:8080"
                - "1985:1985"
              environment:
                - LUSOTOWN_STREAMING_SECRET=test_secret
          EOF
          
          # Start services for testing
          docker-compose -f docker-compose.test.yml up -d srs-server
          
          # Wait for services to be ready
          sleep 30
          
          # Test SRS API
          curl -f http://localhost:1985/api/v1/summaries || exit 1
          
          # Test streaming endpoint
          curl -f http://localhost:8080/ || exit 1
          
          # Cleanup
          docker-compose -f docker-compose.test.yml down

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-streaming-images, test-streaming]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH for deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to staging server
        env:
          LUSOTOWN_STREAMING_SECRET: ${{ secrets.STAGING_STREAMING_SECRET }}
          CDN_ENDPOINT: ${{ secrets.STAGING_CDN_ENDPOINT }}
          BUNNYCDN_API_KEY: ${{ secrets.STAGING_BUNNYCDN_API_KEY }}
          BUNNYCDN_STORAGE_ZONE: ${{ secrets.STAGING_BUNNYCDN_STORAGE_ZONE }}
        run: |
          # Copy streaming infrastructure to staging server
          scp -r streaming ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/tmp/lusotown-streaming/
          
          # Deploy on staging server
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /tmp/lusotown-streaming
            
            # Set environment variables
            export LUSOTOWN_STREAMING_SECRET="${{ env.LUSOTOWN_STREAMING_SECRET }}"
            export CDN_ENDPOINT="${{ env.CDN_ENDPOINT }}"
            export BUNNYCDN_API_KEY="${{ env.BUNNYCDN_API_KEY }}"
            export BUNNYCDN_STORAGE_ZONE="${{ env.BUNNYCDN_STORAGE_ZONE }}"
            export IMAGE_TAG="${{ needs.build-streaming-images.outputs.image-tag }}"
            
            # Update docker-compose with new image
            sed -i "s|build:|image: ${IMAGE_TAG}|g" streaming/docker-compose/docker-compose.prod.yml
            sed -i "/dockerfile:/d" streaming/docker-compose/docker-compose.prod.yml
            sed -i "/context:/d" streaming/docker-compose/docker-compose.prod.yml
            
            # Deploy
            cd streaming
            chmod +x scripts/deploy-prod.sh
            ./scripts/deploy-prod.sh
          EOF

      - name: Verify staging deployment
        run: |
          # Wait for deployment to stabilize
          sleep 60
          
          # Health check
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            curl -f https://staging-stream.lusotown.com/health || exit 1
            echo "Staging deployment is healthy"
          EOF

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-streaming-images, test-streaming, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup SSH for production deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production server
        env:
          LUSOTOWN_STREAMING_SECRET: ${{ secrets.PRODUCTION_STREAMING_SECRET }}
          CDN_ENDPOINT: ${{ secrets.PRODUCTION_CDN_ENDPOINT }}
          BUNNYCDN_API_KEY: ${{ secrets.PRODUCTION_BUNNYCDN_API_KEY }}
          BUNNYCDN_STORAGE_ZONE: ${{ secrets.PRODUCTION_BUNNYCDN_STORAGE_ZONE }}
          ANALYTICS_DB_USER: ${{ secrets.PRODUCTION_ANALYTICS_DB_USER }}
          ANALYTICS_DB_PASSWORD: ${{ secrets.PRODUCTION_ANALYTICS_DB_PASSWORD }}
        run: |
          # Copy streaming infrastructure to production server
          scp -r streaming ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/lusotown-streaming/
          
          # Deploy on production server
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /tmp/lusotown-streaming
            
            # Set environment variables
            export LUSOTOWN_STREAMING_SECRET="${{ env.LUSOTOWN_STREAMING_SECRET }}"
            export CDN_ENDPOINT="${{ env.CDN_ENDPOINT }}"
            export BUNNYCDN_API_KEY="${{ env.BUNNYCDN_API_KEY }}"
            export BUNNYCDN_STORAGE_ZONE="${{ env.BUNNYCDN_STORAGE_ZONE }}"
            export ANALYTICS_DB_USER="${{ env.ANALYTICS_DB_USER }}"
            export ANALYTICS_DB_PASSWORD="${{ env.ANALYTICS_DB_PASSWORD }}"
            export IMAGE_TAG="${{ needs.build-streaming-images.outputs.image-tag }}"
            
            # Update docker-compose with new image
            sed -i "s|build:|image: ${IMAGE_TAG}|g" streaming/docker-compose/docker-compose.prod.yml
            sed -i "/dockerfile:/d" streaming/docker-compose/docker-compose.prod.yml
            sed -i "/context:/d" streaming/docker-compose/docker-compose.prod.yml
            
            # Deploy with zero downtime
            cd streaming
            chmod +x scripts/deploy-prod.sh
            ./scripts/deploy-prod.sh
          EOF

      - name: Verify production deployment
        run: |
          # Wait for deployment to stabilize
          sleep 120
          
          # Comprehensive health checks
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            # Health check
            curl -f https://stream.lusotown.com/health || exit 1
            
            # API check
            curl -f https://stream.lusotown.com/api/v1/summaries || exit 1
            
            # WebRTC endpoint check
            curl -f https://stream.lusotown.com:8000 || exit 1
            
            echo "Production deployment is healthy and ready for Portuguese community"
          EOF

  # Notify on deployment success/failure
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#lusotown-deployments'
          text: |
            LusoTown Portuguese Community Streaming Infrastructure Deployment
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}