name: Claude Community-Focused PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
  pull_request_review_comment:
    types: [created]

env:
  # LusoTown community metrics for context
  LUSOTOWN_MEMBERS: "750"
  LUSOTOWN_STUDENTS: "2150" 
  LUSOTOWN_UNIVERSITIES: "8"
  COMMUNITY_FOCUS: "Portuguese-speaking community platform"

jobs:
  claude-review:
    name: <õ<ù Claude Community Platform Review
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    
    permissions:
      contents: read
      pull-requests: write
      issues: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js v22 (Production Standard)
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: web-app/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./web-app

      - name: Get PR diff and files changed
        id: get-diff
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | head -20)
          echo "CHANGED_FILES<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Get diff content (limited to prevent API limits)
          DIFF_CONTENT=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | head -500)
          echo "DIFF_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for Portuguese community relevance
        id: community-check
        run: |
          # Check if PR affects community-critical files
          COMMUNITY_RELEVANT=false
          
          if echo "${{ steps.get-diff.outputs.CHANGED_FILES }}" | grep -E "(src/config/|src/i18n/|src/components/|src/app/)" > /dev/null; then
            COMMUNITY_RELEVANT=true
          fi
          
          echo "community_relevant=$COMMUNITY_RELEVANT" >> $GITHUB_OUTPUT

      - name: Run hardcoding audit check
        id: hardcoding-audit
        run: |
          AUDIT_RESULT="UNKNOWN"
          AUDIT_OUTPUT=""
          
          if npm run audit:hardcoding > audit_output.txt 2>&1; then
            AUDIT_RESULT="PASS"
            AUDIT_OUTPUT=" Zero hardcoding policy compliant"
          else
            AUDIT_RESULT="FAIL"
            AUDIT_OUTPUT=$(cat audit_output.txt | head -10)
          fi
          
          echo "audit_result=$AUDIT_RESULT" >> $GITHUB_OUTPUT
          echo "AUDIT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$AUDIT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: ./web-app
        continue-on-error: true

      - name: Run ESLint check
        id: eslint-check
        run: |
          LINT_RESULT="UNKNOWN"
          LINT_OUTPUT=""
          
          if npm run lint > lint_output.txt 2>&1; then
            LINT_RESULT="PASS"
            LINT_OUTPUT=" ESLint validation passed"
          else
            LINT_RESULT="FAIL"
            LINT_OUTPUT=$(cat lint_output.txt | head -10)
          fi
          
          echo "lint_result=$LINT_RESULT" >> $GITHUB_OUTPUT
          echo "LINT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$LINT_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: ./web-app
        continue-on-error: true

      - name: Run TypeScript check
        id: typescript-check
        run: |
          TS_RESULT="UNKNOWN"
          TS_OUTPUT=""
          
          if npx tsc --noEmit > ts_output.txt 2>&1; then
            TS_RESULT="PASS"
            TS_OUTPUT=" TypeScript compilation successful"
          else
            TS_RESULT="FAIL"
            TS_OUTPUT=$(cat ts_output.txt | head -10)
          fi
          
          echo "ts_result=$TS_RESULT" >> $GITHUB_OUTPUT
          echo "TS_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$TS_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: ./web-app
        continue-on-error: true

      - name: Claude Community-Focused PR Review
        if: steps.community-check.outputs.community_relevant == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { execSync } = require('child_process');
            
            // Prepare community context
            const communityContext = `
            LusoTown Portuguese-Speaking Community Platform Review Context:
            - Community Members: ${process.env.LUSOTOWN_MEMBERS}
            - University Students: ${process.env.LUSOTOWN_STUDENTS} 
            - University Partnerships: ${process.env.LUSOTOWN_UNIVERSITIES}
            - Mission: ${process.env.COMMUNITY_FOCUS}
            - Architecture: Next.js 14, Supabase PostgreSQL+PostGIS, Streamlined components
            - Key Principles: Zero hardcoding, bilingual EN/PT, mobile-first, Portuguese cultural authenticity
            `;
            
            // Quality gate results
            const qualityResults = `
            Quality Gate Results:
            - Hardcoding Audit: ${{ steps.hardcoding-audit.outputs.audit_result }}
            - ESLint: ${{ steps.eslint-check.outputs.lint_result }}  
            - TypeScript: ${{ steps.typescript-check.outputs.ts_result }}
            
            Audit Output: ${{ steps.hardcoding-audit.outputs.AUDIT_OUTPUT }}
            Lint Output: ${{ steps.eslint-check.outputs.LINT_OUTPUT }}
            TypeScript Output: ${{ steps.typescript-check.outputs.TS_OUTPUT }}
            `;
            
            // PR context
            const prContext = `
            PR Title: ${{ github.event.pull_request.title }}
            PR Description: ${{ github.event.pull_request.body }}
            Changed Files: ${{ steps.get-diff.outputs.CHANGED_FILES }}
            `;
            
            // Construct Claude API call
            const prompt = `${communityContext}
            
            ${qualityResults}
            
            ${prContext}
            
            Please review this pull request for the LusoTown Portuguese-speaking community platform following our community-first development principles:
            
            1. Community Impact: How does this benefit Portuguese-speaking community members?
            2. Cultural Authenticity: Does it use "Portuguese-speaking community" and UK-wide scope?
            3. Zero Hardcoding: Are all imports from config files?
            4. Bilingual Support: Proper EN/PT translation implementation?
            5. Architecture Alignment: Fits streamlined community-first design?
            
            Code changes (first 500 lines):
            ${{ steps.get-diff.outputs.DIFF_CONTENT }}
            
            Provide specific, actionable feedback focusing on community value and Portuguese cultural authenticity.
            Format response as markdown with clear sections for each review area.
            `;
            
            try {
              // Make Claude API call
              const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                  'x-api-key': process.env.ANTHROPIC_API_KEY || '${{ secrets.ANTHROPIC_API_KEY }}',
                  'content-type': 'application/json',
                  'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                  model: 'claude-3-5-sonnet-20241022',
                  max_tokens: 4000,
                  messages: [{
                    role: 'user',
                    content: prompt
                  }]
                })
              });
              
              if (!response.ok) {
                throw new Error(`Claude API error: ${response.status} ${response.statusText}`);
              }
              
              const data = await response.json();
              const claudeReview = data.content[0].text;
              
              // Post Claude's review as PR comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## ><õ<ù Claude Community Platform Review
                
${claudeReview}

---
*This automated review follows LusoTown's community-first development principles. For questions about community focus or Portuguese cultural authenticity, please refer to our [Community Guidelines](.github/claude-config/community-guidelines.md).*`
              });
              
            } catch (error) {
              console.error('Claude review failed:', error);
              
              // Post fallback comment with quality gate results
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## = LusoTown Quality Gate Results
                
This PR has been checked against LusoTown's community-first development standards:

${qualityResults}

**Community Focus Reminder**: Please ensure this change benefits the Portuguese-speaking community and follows our zero-hardcoding policy.

*Claude review temporarily unavailable. Please manually verify Portuguese cultural authenticity and community impact.*`
              });
            }

      - name: Quality Gate Summary
        if: always()
        run: |
          echo "=== LusoTown Community Platform Quality Gates ==="
          echo "Hardcoding Audit: ${{ steps.hardcoding-audit.outputs.audit_result }}"
          echo "ESLint: ${{ steps.eslint-check.outputs.lint_result }}"
          echo "TypeScript: ${{ steps.typescript-check.outputs.ts_result }}"
          echo "Community Relevant: ${{ steps.community-check.outputs.community_relevant }}"
          echo "================================================"